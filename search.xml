<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>制作vue字典插件</title>
    <url>/2020/05/15/%E5%88%B6%E4%BD%9Cvue%E5%AD%97%E5%85%B8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="制作vue字典插件"><a href="#制作vue字典插件" class="headerlink" title="制作vue字典插件"></a>制作vue字典插件</h4><p>学会制作一个简单的npm包</p>
<h3 id="1-npm是什么？"><a href="#1-npm是什么？" class="headerlink" title="1.npm是什么？"></a>1.npm是什么？</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm 是Node 的模块管理器，功能极其强大。 它是Node 获得成功的重要原因之一。 正因为有了npm，我们只要一行命令，就能安装别人写好的模块。</span><br></pre></td></tr></table></figure>
<p><strong>npm的基础知识这边就不做表述的,下面提供一些npm基础知识的参考</strong><br> <a href="https://link.jianshu.com?t=https://www.npmjs.com/" target="_blank" rel="noopener">npm官网</a><br> <a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2016/01/npm-install.html" target="_blank" rel="noopener">npm 模块安装机制简介</a></p>
<p>那么下面来介绍一下,如何创建自己的第一个node模块,并把这个模块上传到npm上面,让别人可以用我们的模块</p>
<h3 id="2-创建第一个node模块"><a href="#2-创建第一个node模块" class="headerlink" title="2.创建第一个node模块"></a>2.创建第一个node模块</h3><p>Node.js模块就是发布到npm的代码包，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建一个新模块的第一步就是创建一个package.json文件。</span><br><span class="line">你可以用npm init来创建package.json文件。</span><br><span class="line">这个过程中命令行会逐步提示你输入这个模块的信息，</span><br><span class="line">其中模块的名字和版本号是必填项</span><br></pre></td></tr></table></figure>
<p>创建好的package.json是长这样的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"ylz-dict"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你还需要一个入口文件，</span><br><span class="line">如果你使用默认值的话，那就会是index.js.</span><br><span class="line">创建完package.json文件之后，你就要开始写代码包里的内容了，</span><br><span class="line">这里举个最简单的例子，在默认的index.js里写一个要导出的函数，</span><br><span class="line">这个函数也就是别人的代码里可以import或者require的。</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">exports.showMsg = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"This is my first module"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这样的话,你的node模块就已经创建完成了</p>
<h3 id="3-如何发布到npm服务器上"><a href="#3-如何发布到npm服务器上" class="headerlink" title="3.如何发布到npm服务器上"></a>3.如何发布到npm服务器上</h3><h5 id="3-1-注册一个npm账号-2个方式-最简单的就是去npm官网注册"><a href="#3-1-注册一个npm账号-2个方式-最简单的就是去npm官网注册" class="headerlink" title="3.1.注册一个npm账号,2个方式,最简单的就是去npm官网注册"></a>3.1.注册一个npm账号,2个方式,最简单的就是去npm官网注册</h5><ul>
<li><a href="https://link.jianshu.com/?t=https://www.npmjs.com/signup" target="_blank" rel="noopener">npm注册</a></li>
<li>还有一个方式就是 <strong>npm adduser</strong>,按照它的提示去创建</li>
</ul>
<h5 id="3-2-首次需要登录-npm-login-存储证书到本地-后面就不需要每次都登录的"><a href="#3-2-首次需要登录-npm-login-存储证书到本地-后面就不需要每次都登录的" class="headerlink" title="3.2.首次需要登录,npm login 存储证书到本地,后面就不需要每次都登录的"></a>3.2.首次需要登录,<strong>npm login</strong> 存储证书到本地,后面就不需要每次都登录的</h5><p>登录需要输入用户名,密码,还有邮箱,这些都是刚刚注册时候填写的</p>
<h5 id="3-3-开始发布"><a href="#3-3-开始发布" class="headerlink" title="3.3.开始发布"></a>3.3.开始发布</h5><p><strong>npm publish</strong> 发布包<br> 发布过程会把整个目录发布,不想发布的内容模块,<br> 可以通过 <strong>.gitignore</strong> 或 <strong>.npmignore</strong> 文件忽略</p>
<p>发布成功之后可以去npm官网搜索一下,是否已经存在<br> <a href="https://link.jianshu.com?t=https://npmjs.com" target="_blank" rel="noopener">npm</a></p>
<p>发布过程可能会遇到这样的一个问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用 cnpm 的注意报错：</span><br><span class="line">no_perms Private mode enable, only admin can publish this module</span><br><span class="line">设置回原本的就可以了</span><br><span class="line">**npm config set registry http://registry.npmjs.org **</span><br><span class="line">发布完成之后,如果还想回到之前的cnpm,使用下面的命令</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h3 id="4-创建一个案例-引用刚上传的包"><a href="#4-创建一个案例-引用刚上传的包" class="headerlink" title="4.创建一个案例,引用刚上传的包"></a>4.创建一个案例,引用刚上传的包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设已经成功发布了，并且包名叫做**yiz-dict**，</span><br><span class="line"> 这时候可以新建一个空目录，cd进去，运行npm install toniqian-test-module，然后在这个目录下会出现一个叫node_modules的文件夹，你之前写的包就会出现在这个文件夹下面。</span><br></pre></td></tr></table></figure>
<p>然后写一个index.js,代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var test = require(&apos;yiz-dict&apos;);</span><br><span class="line">test.showMsg();</span><br></pre></td></tr></table></figure>
<p>运行index.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure>
<p>运行结果显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is my first module</span><br></pre></td></tr></table></figure>
<p>那么刚刚上传的包,目前已经可以使用,到目前的话,<br>你已经成功创建了一个npm包了</p>
<h3 id="5-如何更新npm包"><a href="#5-如何更新npm包" class="headerlink" title="5.如何更新npm包"></a>5.如何更新npm包</h3><p>当你包的内容修改之后,比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exports.showMsg = function () &#123;</span><br><span class="line">  console.log(&quot;This is my second module&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>修改了提示文字,那么我们需要 <strong>npm version </strong><br> <strong>update_type</strong>就是版本号的意思,会自动更新<strong>package.json</strong>里面的版本号<br> 然后重新 <strong>npm publish</strong>,更新就会完成</p>
<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><h5 id="创建一个npm包的过程就是这样的，使用时-var-test-require-‘yiz-dict’-就会默认到ylz-dict包查找，具体哪个文件就是看这个包的package-json的配置中”main”-字段的配置，”index-js”-所以就是引入index-js文件"><a href="#创建一个npm包的过程就是这样的，使用时-var-test-require-‘yiz-dict’-就会默认到ylz-dict包查找，具体哪个文件就是看这个包的package-json的配置中”main”-字段的配置，”index-js”-所以就是引入index-js文件" class="headerlink" title="创建一个npm包的过程就是这样的，使用时 var test = require(‘yiz-dict’) 就会默认到ylz-dict包查找，具体哪个文件就是看这个包的package.json的配置中”main”:字段的配置，”index.js”   所以就是引入index.js文件"></a>创建一个npm包的过程就是这样的，使用时 var test = require(‘yiz-dict’) 就会默认到ylz-dict包查找，具体哪个文件就是看这个包的package.json的配置中”main”:字段的配置，”index.js”   所以就是引入index.js文件</h5><h4 id="学会制作vue插件包"><a href="#学会制作vue插件包" class="headerlink" title="学会制作vue插件包"></a>学会制作vue插件包</h4><p><a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">vue插件开发</a></p>
<p>看完文档尝试开发字典插件</p>
<p>一开始看着不动手总感觉很麻烦，一堆问号，一步步尝试了，就会发现其实没那么复杂</p>
<p>在一个项目中写插件，主要就是一个入口文件</p>
<p>问题1：Vue.use(demo,options)     这个options 可以传参？</p>
<p>尝试： 书写一个 index.js 插件导出文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> plug = &#123;&#125;</span><br><span class="line">plug.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue,options</span>)</span>&#123;</span><br><span class="line">	Vue.prototype.$test = options.test</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> plug</span><br></pre></td></tr></table></figure>
<p> 在mainjs引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> haha = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"哈哈哈"</span></span><br><span class="line">    &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> xiaobu <span class="keyword">from</span> <span class="string">'./index'</span></span><br><span class="line">Vue.use(xiaobu,&#123;<span class="string">"test"</span>:haha&#125;)</span><br><span class="line"><span class="keyword">this</span>.$test.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>此时就会打印出 “哈哈哈”  所以就是可以传参数的</p>
<p>总结vue插件在同个项目使用大概就是如此，如果要在不同项目使用，就是将这个插件打个包，上传到npm，package上的maiin字段为后期使用这个包的入口文件</p>
<h4 id="制作一个vue字典包"><a href="#制作一个vue字典包" class="headerlink" title="制作一个vue字典包"></a>制作一个vue字典包</h4><p> <a href="https://gitee.com/syx365night/syxDict.git" target="_blank" rel="noopener">git地址</a></p>
<p>大概功能就是如下，插件依赖到啥就引入啥即可</p>
<p>使用如下  这个安装是假的，目前没上传到共有npm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#install by yarn</span><br><span class="line">yarn add @ylz/new-dict </span><br><span class="line"></span><br><span class="line">#install by npm</span><br><span class="line">npm install @ylz/new-dict</span><br></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main.js 文件</span><br><span class="line">//请求字典接口的方法</span><br><span class="line">import getDictData from &quot;@/api/new-dict-axios&quot; </span><br><span class="line">//引入dict插件   路径根据安装后的具体路径更改</span><br><span class="line">import dict from &quot;@ylz/new-dict&quot;</span><br><span class="line">Vue.use(dict, &#123;http: getDictData&#125;)</span><br></pre></td></tr></table></figure>
<p>注意：请求的返回数据必须大概有如下格式，字段不可更改，字段没做配置。需与后台人员配合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	code: 0,</span><br><span class="line">	data: [</span><br><span class="line">		&#123;</span><br><span class="line">			dicDetailDTOList: [</span><br><span class="line">				&#123;</span><br><span class="line">					dicCode: &apos;0&apos;,</span><br><span class="line">					dicCodeName: &apos;男&apos;</span><br><span class="line">				&#125;,</span><br><span class="line">                &#123;</span><br><span class="line">					dicCode: &apos;1&apos;,</span><br><span class="line">					dicCodeName: &apos;女&apos;</span><br><span class="line">				&#125;</span><br><span class="line">			],</span><br><span class="line">			dicType: &quot;sex&quot;,</span><br><span class="line">			dicTypeName: &quot;性别&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="下拉选项"><a href="#下拉选项" class="headerlink" title="下拉选项"></a>下拉选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--需要过滤数据时--&gt;</span><br><span class="line">&lt;y-DictSelect :dictType=&quot;&#123;type: &apos;SYS_TYPE&apos;,filters: [&apos;1&apos;,&apos;2&apos;],filterType: &apos;dicCode&apos;,reverse: true&#125;&quot; v-model=&quot;sysType&quot; @change=&quot;handdleChange&quot; /&gt;</span><br><span class="line">&#123;</span><br><span class="line">	type: 字典类型,</span><br><span class="line">	filters： 过滤数据（数组）,</span><br><span class="line">	filterType: 过滤的字段（通过这个字段筛选数据）,</span><br><span class="line">	reverse: 是否反向筛选</span><br><span class="line">&#125;</span><br><span class="line">&lt;!--不需要过滤数据时--&gt;</span><br><span class="line">&lt;y-DictSelect :dictType=&quot;&apos;SYS_TYPE&apos;&quot; v-model=&quot;sysType&quot; @change=&quot;handdleChange&quot; /&gt;</span><br></pre></td></tr></table></figure>
<h4 id="非下拉"><a href="#非下拉" class="headerlink" title="非下拉"></a>非下拉</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//根据数组获取字典对应的数组值</span><br><span class="line">this.$DICT.getArrByDicTypes([&apos;字典type&apos;,&apos;字典type&apos;]).then(data =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//通过字典的name获取字典code</span><br><span class="line">this.$DICT.getCodeByCodeName(&apos;字典type&apos;,&apos;该字典某字段的名字&apos;).then(data =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//通过字典的code获取字典name</span><br><span class="line">this.$DICT.getCodeNameByCode(&apos;字典type&apos;,&apos;该字典某字段的code&apos;).then(data =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//通过字典类型获取字典数据</span><br><span class="line">this.$DICT.getArrByDicType(&apos;字典type&apos;).then(data =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//通过字典类型获取字典数据,并根据条件过滤字典数据</span><br><span class="line">options=&#123;</span><br><span class="line">    type: 字典类型,  必填</span><br><span class="line">    filters: 想要过滤的数据(数组) 默认值[]，</span><br><span class="line">    filterType: 筛选类型 默认值  &apos;dicCodeName&apos;,</span><br><span class="line">    reverse: 是否反向筛选 默认 true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">this.$DICT.filterByDicType (options).then(data =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">全局过滤器 dictFormat(字典数组数据)</span><br><span class="line"></span><br><span class="line">&#123;&#123; scope.row.sysType | dictFormat(sysDict) &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>-vue -npm -dict</tag>
      </tags>
  </entry>
  <entry>
    <title>数据字典的使用</title>
    <url>/2020/05/03/%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="数据字典的使用"><a href="#数据字典的使用" class="headerlink" title="数据字典的使用"></a>数据字典的使用</h4><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>平时很多下拉框，下拉选项都是前端写死的，要修改维护的话，得修改代码，修改代码的话就得重新部署，工作量巨大，所以好的方法就是下拉选项的数据采用接口请求的方式来获取，但是一个项目中并不不会单纯只有一个地方用到下拉选项，会很多地方，这样一来后端人员就得写很多个接口，前端也得接很多个接口，所以好办法就是将这些下拉选项集合在一个接口，并用类别来区分，前端人员使用时，用相应的类型来获取数据即可。用对应类型去获取对应的数据，就跟查字典一样，所以这个专业名词叫做字典。 这是我个人理解，哈哈。</p>
<h5 id="element文档下一版本文档"><a href="#element文档下一版本文档" class="headerlink" title="element文档下一版本文档"></a>element文档下一版本文档</h5><h3 id="数据字典自动转换"><a href="#数据字典自动转换" class="headerlink" title="数据字典自动转换"></a>数据字典自动转换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据字典转换通过 `dict-type` 配置，简单应用可以直接给一个数据字典类型字段 `dict-type=&apos;sex&apos;` 。当你想进行数据过滤的时候可以传入一个对象，例如传入`:dict-type=&#123; type:&apos;sex&apos;, filters:[&apos;男&apos;,&apos;女&apos;], filterType:&apos;name&apos;,reverse:false &#125;` 则可以通过 `名字` 过滤包含 `[&apos;男&apos;,&apos;女&apos;]` 的数据，当 `reverse:true` 时则进行反向过滤去除`名字` 中包含 `[&apos;男&apos;,&apos;女&apos;]` 的数据。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-select v-model=&quot;value&quot; placeholder=&quot;请选择&quot; dict-type=&quot;sex&quot;&gt;&lt;/el-select&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        value: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>从上面的示例可以看出，想要拿取下拉选项的数据，只要在dict-type填写相应想要的字段即可，如果要筛选的话可以传入一个对象。是不是很好用。这些数据是哪来的呢？还得配置下</p>
<p>当使用数据字典表功能的时候需要进行一些数据字典工具参数配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">Vue.prototype.$DICT_CONFIG = &#123;</span><br><span class="line">  url:<span class="string">"/"</span>, <span class="comment">// 数据字典请求接口地址</span></span><br><span class="line">  version:<span class="string">"0.0.0"</span>, <span class="comment">// 数据字典数据版本</span></span><br><span class="line">  config:&#123;</span><br><span class="line">    format:&#123; <span class="attr">name</span>:<span class="string">"name"</span>, <span class="attr">value</span>:<span class="string">"name"</span> &#125;, <span class="comment">// 数据格式</span></span><br><span class="line">    <span class="comment">// 响应拦截</span></span><br><span class="line">    response(res)&#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = res</span><br><span class="line">      <span class="keyword">return</span> data.data</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就是element下拉字典的文档</p>
<h5 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h5><p>这么简单的文档实在是看不懂，遇到了一堆问题，改别人源码，我一直是不支持的，可能是以己度人吧，按我的实力要改别人源码是很难的，即使可以的话，改完之时，人家团队可能已经将源码发布了。所以既然用不了，也看不懂人家源码，大不了自己写个普通人都看得懂，都能用的字典。于是开始了。</p>
<h5 id="开发字典"><a href="#开发字典" class="headerlink" title="开发字典"></a>开发字典</h5><p>根据前面使用字典遇到的坑，我大概知道了字典的原理：项目第一次加载时从缓存查看是否有缓存数据，没有的话请求字典接口，将数据存储到浏览器的localstorage，使用时根据字段从localstorage找到对应数据。大概就是这样。</p>
<p>补充：由于字典是可以配置的，所以必须做到，当找不到这个字典时，得再请求接口，以免localstorage上并不是最新的字典，导致下拉框为空。</p>
<p>原理大概就是那样，接下来第一步还是先写下拉框组件吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> * @Descripttion: </span><br><span class="line"> * @version: 0.1</span><br><span class="line"> * @Author: syx</span><br><span class="line"> * @Date: 2020-04-30 10:37:36</span><br><span class="line"> * @LastEditors: syx</span><br><span class="line"> * @LastEditTime: 2020-05-02 13:03:49</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-select v-model=&quot;svalue&quot; :placeholder=&quot;placeholder&quot; :clearable=&quot;clearable&quot; @change=&quot;change&quot;&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;item in options&quot;</span><br><span class="line">            :key=&quot;item.dicCode&quot;</span><br><span class="line">            :label=&quot;item.dicCodeName&quot;</span><br><span class="line">            :value=&quot;item.dicCode&quot;&gt;</span><br><span class="line">        &lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import getDictData from &quot;@/api/new-dict-axios&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;DictSelect&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      options: [],</span><br><span class="line">      svalue: this.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    clearable: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: true</span><br><span class="line">    &#125;,</span><br><span class="line">    placeholder: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;请选择&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    dictType: &#123;</span><br><span class="line">    &#125;, //请求的码表值</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: String</span><br><span class="line">    &#125;//接受外部v-model传入的值</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 获取下拉框数据</span><br><span class="line">    async getDictionary_option(dicType)&#123;</span><br><span class="line">      console.log(&quot;select加载字典&quot;)</span><br><span class="line">      //从缓存获取数据字典</span><br><span class="line">      let localData = JSON.parse(localStorage.getItem(&quot;dictList&quot;))</span><br><span class="line">      //获取想要查的字典字段</span><br><span class="line">      const dictField = typeof (dicType) === &quot;string&quot; ? dicType : typeof (dicType) === &quot;object&quot; ? dicType.type : []</span><br><span class="line">      //当有缓存时从缓存查找该字典,查不到时 数据为空</span><br><span class="line">      let dictData = !localData ? &quot;&quot; : localData.find(item =&gt; &#123; return item.dicType === dictField &#125;)</span><br><span class="line">      dictData = dictData ? dictData : &quot;&quot;</span><br><span class="line">      //如果没缓存 或者 找不到该字典 从新加载字典</span><br><span class="line">      if (!localData || !dictData)&#123;</span><br><span class="line">        await getDictData().then(data =&gt; &#123;</span><br><span class="line">          localStorage.setItem(&quot;dictList&quot;, JSON.stringify(data.data))</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      //从新从缓存拿字典数据</span><br><span class="line">      localData = JSON.parse(localStorage.getItem(&quot;dictList&quot;))</span><br><span class="line">      //查找该字典</span><br><span class="line">      dictData = localData.find(item =&gt; &#123; return item.dicType === dictField &#125;)</span><br><span class="line">      //查不到就为空</span><br><span class="line">      dictData = dictData ? dictData : &quot;&quot;</span><br><span class="line">      //存在该字典则拿该字典数组</span><br><span class="line">      dictData = dictData ? dictData.dicDetailDTOList : []</span><br><span class="line">      //如果传入的是对象,对其进行一番操作</span><br><span class="line">      if (typeof (dicType) === &quot;object&quot;)&#123;</span><br><span class="line">        const &#123;filters, filterType, reverse&#125; = dicType</span><br><span class="line">        if (reverse)&#123;</span><br><span class="line">          dictData = dictData.filter(item =&gt; &#123;</span><br><span class="line">            return !filters.includes(item[filterType])</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          dictData = dictData.filter(item =&gt; &#123;</span><br><span class="line">            return filters.includes(item[filterType])</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      this.options = dictData</span><br><span class="line">    &#125;,</span><br><span class="line">    // 下拉框点击事件</span><br><span class="line">    change()&#123;</span><br><span class="line">      /* 子组件通过事件发射向父组件传递事件及参数，$emit即为发射事件</span><br><span class="line">                   第一个参数为向父组件传递的事件名，第二个参数为向父组件传递的参数 */</span><br><span class="line">      this.$emit(&quot;change&quot;, this.svalue);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    //判断下拉框的值是否有改变</span><br><span class="line">    value(val) &#123;</span><br><span class="line">      this.svalue = val;//②监听外部对props属性result的变更，并同步到组件内的data属性myResult中</span><br><span class="line">    &#125;,</span><br><span class="line">    svalue(val, oldVal)&#123;</span><br><span class="line">      if (val !== oldVal) &#123;</span><br><span class="line">        this.$emit(&quot;input&quot;, val);//③组件内对myResult变更后向外部发送事件通知</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    // this.svalue=this.value;//初始话下拉框的值</span><br><span class="line">    this.getDictionary_option(this.dictType);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>以上组件使用到了一个请求字典的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//new-dict-axios.js</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Descripttion: 字典请求</span></span><br><span class="line"><span class="comment"> * @version: 0.1</span></span><br><span class="line"><span class="comment"> * @Author: syx</span></span><br><span class="line"><span class="comment"> * @Date: 2020-04-30 10:45:25</span></span><br><span class="line"><span class="comment"> * @LastEditors: syx</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-05-02 13:17:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> commonApi <span class="keyword">from</span> <span class="string">"./common-axios"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">params = &#123;&#125;, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> commonApi.post(<span class="string">`/ebus/ggfw_ylz/api/bmgt/web/module1/sysDic/list`</span>,</span><br><span class="line">    params, options).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反正就是请求字典的接口。</p>
<p>以上也包含了过滤功能，使用方式要改成和element文档一致的也行。以上一些字段是需要和后端人员协调的，因为字典接口已经写好，所以是根据后端人员的字段来写这些的。后端返回数据格式如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">data：[</span><br><span class="line">    &#123;</span><br><span class="line">	dicDetailDTOList: [</span><br><span class="line">        &#123;</span><br><span class="line">            dicCode: "0",</span><br><span class="line">            dicCodeName: "哈哈"</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            dicCode: "1",</span><br><span class="line">            dicCodeName: "嘿嘿"</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    dicType: "CONSULT_COLUMN",</span><br><span class="line">	dicTypeName: "反馈导出"</span><br><span class="line">	&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    dicDetailDTOList: [</span><br><span class="line">        &#123;</span><br><span class="line">            dicCode: "0",</span><br><span class="line">            dicCodeName: "哈哈"</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            dicCode: "1",</span><br><span class="line">            dicCodeName: "嘿嘿"</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    dicType: "CONSULT_status",</span><br><span class="line">	dicTypeName: "反馈状态"</span><br><span class="line">	&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">	dicDetailDTOList: [</span><br><span class="line">        &#123;</span><br><span class="line">            dicCode: "0",</span><br><span class="line">            dicCodeName: "哈哈"</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            dicCode: "1",</span><br><span class="line">            dicCodeName: "嘿嘿"</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    dicType: "CONSULT_type",</span><br><span class="line">	dicTypeName: "反馈类型"</span><br><span class="line">	&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>大概就是这样，请求数据字典接口，返回所有数据的值，为了避免频繁发送请求，所以将数据存放到localstorage，但是当找不到对应字典的时候，就得请求接口获取最新数据，以上组件代码已实现。</p>
<h5 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;DictSelect :dictType=&quot;&apos;SYS_TYPE&apos;&quot; v-model=&quot;formSearch.sysType&quot; /&gt;</span><br><span class="line">&lt;DictSelect v-model=&quot;formSearch.ver&quot; :dictType=&quot;&#123; type:&apos;MODULE_ACCESS_LEVEL&apos;, filters:[&apos;实名&apos;,&apos;电子凭证激活&apos;], filterType:&apos;dicCodeName&apos;,reverse:true &#125;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">import DictSelect from &quot;@/components/DictSelect/index&quot;</span><br><span class="line">  components: &#123;</span><br><span class="line">    DictSelect</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>组件可配置 placeholder下拉选项提示语，clearable选中后是否可清除，value可用v-model双向绑定，dictType数据字典类型</p>
<p>以上方法即可使用数据字典，亲测遇到了挺多坑，都已解决，亲测实用。有bug请告诉我，微信号syx365night。</p>
<h5 id="非下拉框使用字典"><a href="#非下拉框使用字典" class="headerlink" title="非下拉框使用字典"></a>非下拉框使用字典</h5><p>非下拉选项使用字典，大概就是用一些方法拿到对应的数据，再对数据进行操作吧。</p>
<p>面对这些需求，大概封装了一下方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dictFunc.js  文件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Descripttion: 数据字典方法</span></span><br><span class="line"><span class="comment"> * @version: 0.1</span></span><br><span class="line"><span class="comment"> * @Author: syx</span></span><br><span class="line"><span class="comment"> * @Date: 2020-05-02 13:18:24</span></span><br><span class="line"><span class="comment"> * @LastEditors: syx</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-05-03 12:25:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> getDictData <span class="keyword">from</span> <span class="string">"@/api/new-dict-axios"</span></span><br><span class="line"><span class="built_in">window</span>.dictData = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">"dictList"</span>))</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Descripttion</span>: 通过字典的name获取字典code</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type">  *     dictTypeName: 字典类型</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type">  *     name: 该字典的值</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type">  * &#125;</span> </span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: code : 字典name对应的code值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> getCodeByCodeName = <span class="keyword">async</span> (dictTypeName,codeName) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">let</span> dicArr = typeData.dicDetailDTOList</span><br><span class="line">   <span class="comment">//通过codeName找到对应数组</span></span><br><span class="line">   <span class="keyword">let</span> data = dicArr.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCodeName === codeName&#125;)</span><br><span class="line">   <span class="keyword">return</span> data ? data.dicCode : <span class="string">""</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 通过字典的code获取字典name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> *  dictTypeName: 字典类型</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> *     code: 该字典的值</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * &#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getCodeNameByCode = <span class="keyword">async</span> (dictTypeName,code) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">let</span> dicArr = typeData.dicDetailDTOList</span><br><span class="line">   <span class="comment">//通过codeName找到对应数组</span></span><br><span class="line">   <span class="keyword">let</span> data = dicArr.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCode === code&#125;)</span><br><span class="line">   <span class="keyword">return</span> data ? data.dicCodeName : <span class="string">""</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 通过字典类型获取字典数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;dictTypeName&#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: dicDetailDTOList : 字典数据数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getArrByDicType = <span class="keyword">async</span> (dictTypeName) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">return</span> typeData.dicDetailDTOList</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 通过字典类型获取字典数据,并根据条件过滤字典数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * dictTypeName: 字典类型 英文名  必填</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * filters: 筛选数据数组 默认[]</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * filterType: 筛选类型  默认 dicCodeName</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * reverse: 是否反向筛选 默认true</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * &#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: dicDetailDTOList : 字典数据数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> filterByDicType = <span class="keyword">async</span> (options) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> defaultOption = &#123;</span><br><span class="line">        filters:[],</span><br><span class="line">        filterType: <span class="string">"dicCodeName"</span>,</span><br><span class="line">        reverse: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    options = <span class="built_in">Object</span>.assign(defaultOption,options)</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === options.type&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === options.type&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">let</span> dicData = typeData.dicDetailDTOList</span><br><span class="line">   <span class="keyword">const</span> &#123;filters, filterType, reverse&#125; = options</span><br><span class="line">   <span class="keyword">if</span> (reverse)&#123;</span><br><span class="line">      dicData = dicData.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> !filters.includes(item[filterType])</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dicData = dicData.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> filters.includes(item[filterType])</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> dicData</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Descripttion</span>: 判断是否有字典数据或者该字段类型的字典数据,没有的话请求接口</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;type&#125;</span> </span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">judgeDict</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!data)&#123;</span><br><span class="line">        <span class="keyword">await</span> getDictData().then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"judgeDict -&gt; res"</span>, res)</span><br><span class="line">            localStorage.setItem(<span class="string">"dictList"</span>,<span class="built_in">JSON</span>.stringify(res.data))</span><br><span class="line">            <span class="built_in">window</span>.dictData = res.data</span><br><span class="line">        &#125;)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>在mainjs文件引入他</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> DictInstance <span class="keyword">from</span> <span class="string">"@/assets/js/dictFunc"</span></span><br><span class="line">Vue.prototype.$DictInstance = DictInstance</span><br></pre></td></tr></table></figure>
<p>在页面上使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$DictInstance.getCodeByCodeName(<span class="string">"SYS_TYPE"</span>, <span class="string">"苹果"</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  alert(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.$DictInstance.getCodeNameByCode(<span class="string">"SYS_TYPE"</span>, <span class="string">"iOS"</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  alert(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.$DictInstance.getArrByDicType(<span class="string">"SYS_TYPE"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.sysDict = res</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$DictInstance.filterByDicType(&#123; <span class="attr">type</span>: <span class="string">"MODULE_ACCESS_LEVEL"</span>, <span class="attr">filters</span>: [<span class="string">"2"</span>, <span class="string">"4"</span>], <span class="attr">filterType</span>: <span class="string">"dicCode"</span>, <span class="attr">reverse</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"created -&gt; res"</span>, res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>过滤数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       &lt;el-table-column label=&quot;系统类型&quot; prop=&quot;sysType&quot; min-width=&quot;100&quot; show-overflow-tooltip &gt;</span><br><span class="line">            &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">                &#123;&#123; scope.row.sysType | sysTypeFormat(sysDict) &#125;&#125;</span><br><span class="line">             &lt;/template&gt;</span><br><span class="line">           &lt;/el-table-column&gt;</span><br><span class="line">           </span><br><span class="line">filters: &#123;</span><br><span class="line">   sysTypeFormat(val, status)&#123;</span><br><span class="line">     return !status ? &quot;&quot; : status.find(item =&gt; &#123; return item.dicCode === val &#125;) ? status.find(item =&gt; &#123; return item.dicCode === val &#125;).dicCodeName : &quot;&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>防止脏数据查不到对应值，查不到的返回“”</p>
<p>先这样吧，亲测有效，有bug请提出，方法可能少了点，因为业务上遇到的就这些，可自行继续封装方法，坑已填。</p>
<h4 id="修改改后"><a href="#修改改后" class="headerlink" title="修改改后"></a>修改改后</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> DictSelect <span class="keyword">from</span> <span class="string">"@/components/DictSelect/index"</span></span><br><span class="line">Vue.component(<span class="string">"DictSelect"</span>, DictSelect);<span class="comment">//全局自定义组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> DictInstance <span class="keyword">from</span> <span class="string">"@/assets/js/dictFunc"</span></span><br><span class="line">Vue.prototype.$DictInstance = DictInstance</span><br></pre></td></tr></table></figure>
<p>请求方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Descripttion: 字典请求</span></span><br><span class="line"><span class="comment"> * @version: 0.1</span></span><br><span class="line"><span class="comment"> * @Author: syx</span></span><br><span class="line"><span class="comment"> * @Date: 2020-04-30 10:45:25</span></span><br><span class="line"><span class="comment"> * @LastEditors: syx</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-05-02 13:17:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> commonApi <span class="keyword">from</span> <span class="string">"./common-axios"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">params = &#123;&#125;, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> commonApi.post(<span class="string">`/ebus/ggfw_ylz/api/bmgt/web/module1/sysDic/list`</span>,</span><br><span class="line">    params, options).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-select v-model=&quot;svalue&quot; :placeholder=&quot;placeholder&quot; :clearable=&quot;clearable&quot; @change=&quot;change&quot;&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;item in options&quot;</span><br><span class="line">            :key=&quot;item.dicCode&quot;</span><br><span class="line">            :label=&quot;item.dicCodeName&quot;</span><br><span class="line">            :value=&quot;item.dicCode&quot;&gt;</span><br><span class="line">        &lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import getDictData from &quot;@/api/new-dict-axios&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;DictSelect&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      options: [],</span><br><span class="line">      svalue: this.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    clearable: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: true</span><br><span class="line">    &#125;,</span><br><span class="line">    placeholder: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;请选择&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    dictType: &#123;</span><br><span class="line">    &#125;, //请求的码表值</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: String</span><br><span class="line">    &#125;//接受外部v-model传入的值</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 获取下拉框数据</span><br><span class="line">    async getDictionary_option(dicType)&#123;</span><br><span class="line">      console.log(&quot;select加载字典&quot;)</span><br><span class="line">      let localData = localStorage.getItem(&quot;dictList&quot;) || &quot;&quot;</span><br><span class="line">      if (!!localData &amp;&amp; localData !== undefined &amp;&amp; localData !== &quot;undefined&quot;)&#123;</span><br><span class="line">        //从缓存获取数据字典</span><br><span class="line">        localData = JSON.parse(localData)</span><br><span class="line">      &#125;</span><br><span class="line">      //获取想要查的字典字段</span><br><span class="line">      const dictField = typeof (dicType) === &quot;string&quot; ? dicType : typeof (dicType) === &quot;object&quot; ? dicType.type : []</span><br><span class="line">      //当有缓存时从缓存查找该字典,查不到时 数据为空</span><br><span class="line">      let dictData = !localData ? &quot;&quot; : localData.find(item =&gt; &#123; return item.dicType === dictField &#125;)</span><br><span class="line">      dictData = dictData ? dictData : &quot;&quot;</span><br><span class="line">      //如果没缓存 或者 找不到该字典 从新加载字典</span><br><span class="line">      if (!localData || !dictData)&#123;</span><br><span class="line">        await getDictData().then(data =&gt; &#123;</span><br><span class="line">          if (data.code === 0)&#123;</span><br><span class="line">            localStorage.setItem(&quot;dictList&quot;, JSON.stringify(data.data))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      //从新从缓存拿字典数据</span><br><span class="line">      localData = JSON.parse(localStorage.getItem(&quot;dictList&quot;))</span><br><span class="line">      //查找该字典</span><br><span class="line">      dictData = localData.find(item =&gt; &#123; return item.dicType === dictField &#125;)</span><br><span class="line">      //查不到就为空</span><br><span class="line">      dictData = dictData ? dictData : &quot;&quot;</span><br><span class="line">      //存在该字典则拿该字典数组</span><br><span class="line">      dictData = dictData ? dictData.dicDetailDTOList : []</span><br><span class="line">      //如果传入的是对象,对其进行一番操作</span><br><span class="line">      if (typeof (dicType) === &quot;object&quot;)&#123;</span><br><span class="line">        const &#123;filters, filterType, reverse&#125; = dicType</span><br><span class="line">        if (reverse)&#123;</span><br><span class="line">          dictData = dictData.filter(item =&gt; &#123;</span><br><span class="line">            return !filters.includes(item[filterType])</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          dictData = dictData.filter(item =&gt; &#123;</span><br><span class="line">            return filters.includes(item[filterType])</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      this.options = dictData</span><br><span class="line">    &#125;,</span><br><span class="line">    // 下拉框点击事件</span><br><span class="line">    change()&#123;</span><br><span class="line">      /* 子组件通过事件发射向父组件传递事件及参数，$emit即为发射事件</span><br><span class="line">                   第一个参数为向父组件传递的事件名，第二个参数为向父组件传递的参数 */</span><br><span class="line">      this.$emit(&quot;change&quot;, this.svalue);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    //判断下拉框的值是否有改变</span><br><span class="line">    value(val) &#123;</span><br><span class="line">      this.svalue = val;//②监听外部对props属性result的变更，并同步到组件内的data属性myResult中</span><br><span class="line">    &#125;,</span><br><span class="line">    svalue(val, oldVal)&#123;</span><br><span class="line">      if (val !== oldVal) &#123;</span><br><span class="line">        this.$emit(&quot;input&quot;, val);//③组件内对myResult变更后向外部发送事件通知</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    // this.svalue=this.value;//初始话下拉框的值</span><br><span class="line">    this.getDictionary_option(this.dictType);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>字典方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Descripttion: 数据字典方法</span></span><br><span class="line"><span class="comment"> * @version: 0.1</span></span><br><span class="line"><span class="comment"> * @Author: syx</span></span><br><span class="line"><span class="comment"> * @Date: 2020-05-02 13:18:24</span></span><br><span class="line"><span class="comment"> * @LastEditors: syx</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-05-03 22:43:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> getDictData <span class="keyword">from</span> <span class="string">"@/api/new-dict-axios"</span></span><br><span class="line"><span class="keyword">let</span> localDic = localStorage.getItem(<span class="string">"dictList"</span>) || <span class="string">""</span></span><br><span class="line"><span class="built_in">window</span>.dictData = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span>(!!localDic &amp;&amp; localDic !== <span class="literal">undefined</span> &amp;&amp; localDic !== <span class="string">"undefined"</span>)&#123;</span><br><span class="line">  <span class="built_in">window</span>.dictData = <span class="built_in">JSON</span>.parse(localDic)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Descripttion</span>: 通过字典的name获取字典code</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type">  *     dictTypeName: 字典类型</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type">  *     name: 该字典的值</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type">  * &#125;</span> </span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: code : 字典name对应的code值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> getCodeByCodeName = <span class="keyword">async</span> (dictTypeName,codeName) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">let</span> dicArr = typeData.dicDetailDTOList</span><br><span class="line">   <span class="comment">//通过codeName找到对应数组</span></span><br><span class="line">   <span class="keyword">let</span> data = dicArr.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCodeName === codeName&#125;)</span><br><span class="line">   <span class="keyword">return</span> data ? data.dicCode : <span class="string">""</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 通过字典的code获取字典name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> *  dictTypeName: 字典类型</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> *     code: 该字典的值</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * &#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getCodeNameByCode = <span class="keyword">async</span> (dictTypeName,code) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">let</span> dicArr = typeData.dicDetailDTOList</span><br><span class="line">   <span class="comment">//通过codeName找到对应数组</span></span><br><span class="line">   <span class="keyword">let</span> data = dicArr.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCode === code&#125;)</span><br><span class="line">   <span class="keyword">return</span> data ? data.dicCodeName : <span class="string">""</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 通过字典类型获取字典数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;dictTypeName&#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: dicDetailDTOList : 字典数据数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getArrByDicType = <span class="keyword">async</span> (dictTypeName) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">return</span> typeData.dicDetailDTOList</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 通过字典类型获取字典数据,并根据条件过滤字典数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * dictTypeName: 字典类型 英文名  必填</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * filters: 筛选数据数组 默认[]</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * filterType: 筛选类型  默认 dicCodeName</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * reverse: 是否反向筛选 默认true</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * &#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: dicDetailDTOList : 字典数据数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> filterByDicType = <span class="keyword">async</span> (options) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> defaultOption = &#123;</span><br><span class="line">        filters:[],</span><br><span class="line">        filterType: <span class="string">"dicCodeName"</span>,</span><br><span class="line">        reverse: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    options = <span class="built_in">Object</span>.assign(defaultOption,options)</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === options.type&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === options.type&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">let</span> dicData = typeData.dicDetailDTOList</span><br><span class="line">   <span class="keyword">const</span> &#123;filters, filterType, reverse&#125; = options</span><br><span class="line">   <span class="keyword">if</span> (reverse)&#123;</span><br><span class="line">      dicData = dicData.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> !filters.includes(item[filterType])</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dicData = dicData.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> filters.includes(item[filterType])</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> dicData</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Descripttion</span>: 判断是否有字典数据或者该字段类型的字典数据,没有的话请求接口</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;type&#125;</span> </span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">judgeDict</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!data)&#123;</span><br><span class="line">        <span class="keyword">await</span> getDictData().then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"judgeDict -&gt; res"</span>, res)</span><br><span class="line">            <span class="keyword">if</span>(res.code === <span class="number">0</span>)&#123;</span><br><span class="line">              localStorage.setItem(<span class="string">"dictList"</span>,<span class="built_in">JSON</span>.stringify(res.data))</span><br><span class="line">              <span class="built_in">window</span>.dictData = res.data</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="built_in">window</span>.dictData = []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>使用</p>
<p>不用筛选时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;DictSelect :dictType=&quot;&apos;SYS_TYPE&apos;&quot; v-model=&quot;formSearch.sysType&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>使用筛选时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;DictSelect :dictType=&quot;&#123;type: &apos;SYS_TYPE&apos;,filters: [&apos;1&apos;,&apos;2&apos;],filterType: &apos;dicCode&apos;,reverse: true&#125;&quot; v-model=&quot;formSearch.sysType&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>type: 字典类型          fielters: 过滤的数据    filterType： 过滤的类型   reverse： 是否反向筛选</p>
<p>数据配合过滤器使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-table-column label=&quot;系统类型&quot; prop=&quot;sysType&quot; min-width=&quot;100&quot; show-overflow-tooltip &gt;</span><br><span class="line">   &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">		&#123;&#123; scope.row.sysType | dictFormat(sysDict) &#125;&#125;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">   dictFormat(val, status)&#123;</span><br><span class="line">      <span class="keyword">return</span> !status ? <span class="string">""</span> : status.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCode === val &#125;) ? status.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCode === val &#125;).dicCodeName : <span class="string">""</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$DictInstance.getArrByDicType(<span class="string">"SYS_TYPE"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.sysDict = res</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>每个数据类型都可以采用这个过滤器，于是将这个过滤器搬到全局过滤器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">// 全局过滤</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> filters <span class="keyword">from</span> <span class="string">"./filters"</span> <span class="comment">// global filters</span></span><br><span class="line"><span class="comment">// register global utility filters</span></span><br><span class="line"><span class="built_in">Object</span>.keys(filters).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  Vue.filter(key, filters[key])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在filters文件夹下的index文件写入全局过滤方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 数据字典过滤器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;val为数据值,status为数据&#125;</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: 数据编码对应的数据名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">dictFormat</span>(<span class="params">val, status</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !status ? <span class="string">""</span> : status.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCode === val &#125;) ? status.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCode === val &#125;).dicCodeName : <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于当需要多个数据时得调用多次同样得方法获取数据，因此急需封装一个获取多个字典数据得方法</p>
<p>于是在dictFunc文件下新增一个方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 通过字典类型数组获取字典数据数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;dictTypeNameList&#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: dicDetailDTOList : 字典数据数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getArrByDicTypes = <span class="keyword">async</span> (dictTypeNameList) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dictTypeNameList.length; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> dictTypeName = dictTypeNameList[i]</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">    <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;)</span><br><span class="line">    typeData = typeData || <span class="string">""</span></span><br><span class="line">    <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">    <span class="comment">//再拿一次该字典</span></span><br><span class="line">    <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拿到该字典数组</span></span><br><span class="line">    arr.push(typeData.dicDetailDTOList)</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取字典数据</span></span><br><span class="line"><span class="keyword">this</span>.$DictInstance.getArrByDicTypes([<span class="string">"SYS_TYPE"</span>, <span class="string">"V_UPDATE_STATUS"</span>]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.sysDict = res[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">this</span>.updateDict = res[<span class="number">1</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>后期使用需要别得方法，再继续封装。如果bug请帮忙指点 微信号syx365night</p>
]]></content>
      <tags>
        <tag>dict</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6将两个数组合并成一个对象数组</title>
    <url>/2020/04/24/ES6%E5%B0%86%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E5%90%88%E5%B9%B6%E6%88%90%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="ES6将两个数组合并成一个对象数组"><a href="#ES6将两个数组合并成一个对象数组" class="headerlink" title="ES6将两个数组合并成一个对象数组"></a>ES6将两个数组合并成一个对象数组</h1><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>有这么两个数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> metrodates = [</span><br><span class="line">  <span class="string">"2008-01"</span>,</span><br><span class="line">  <span class="string">"2008-02"</span>,</span><br><span class="line">  <span class="string">"2008-03"</span>,..ect</span><br><span class="line"> ];</span><br><span class="line"> <span class="keyword">let</span> figures = [</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="number">0.555</span>,</span><br><span class="line">  <span class="number">0.293</span>,..ect</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>
<p>想要这样的结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [</span><br><span class="line">   &#123;<span class="attr">data</span>: <span class="number">0</span>, <span class="attr">date</span>: <span class="string">"2008-01"</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">data</span>: <span class="number">0.555</span>, <span class="attr">date</span>: <span class="string">"2008-02"</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">data</span>: <span class="number">0.293</span>, <span class="attr">date</span>: <span class="string">"2008-03"</span>&#125;,..ect</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<h1 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> metrodates)&#123;     </span><br><span class="line"> result.push(&#123;<span class="attr">data</span>: figures[index], <span class="attr">date</span>: metrodates[index]&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此方案为最原始方法，简单，但过于low</p>
<h1 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = metrodates.map(<span class="function">(<span class="params">date,i</span>) =&gt;</span> (&#123;date, <span class="attr">data</span>: figures[i]&#125;));</span><br></pre></td></tr></table></figure>
<p>此方案使用了ES6中的map，简洁，但本质还是遍历，显得有些low</p>
<h1 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zip = <span class="function">(<span class="params">[x,...xs], [y,...ys]</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (x === <span class="literal">undefined</span> || y === <span class="literal">undefined</span>)</span><br><span class="line">    	<span class="keyword">return</span> [];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> [[x,y], ...zip(xs, ys)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = zip(metrodates, figures).map(<span class="function">(<span class="params">[date, data]</span>) =&gt;</span> (&#123;date, data&#125;));</span><br></pre></td></tr></table></figure>
<p>此方案使用了ES6+递归，显得高大上起来了。</p>
<h1 id="方案四"><a href="#方案四" class="headerlink" title="方案四"></a>方案四</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isEmpty = <span class="function"><span class="params">xs</span> =&gt;</span> xs.length === <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> head = <span class="function">(<span class="params">[x,...xs]</span>) =&gt;</span> x;</span><br><span class="line"><span class="keyword">const</span> tail = <span class="function">(<span class="params">[x,...xs]</span>) =&gt;</span> xs; </span><br><span class="line"><span class="keyword">const</span> map = <span class="function">(<span class="params">f, ...xxs</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">let</span> loop = <span class="function">(<span class="params">acc, xxs</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (xxs.some(isEmpty))</span><br><span class="line">			<span class="keyword">return</span> acc;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> loop([...acc, f(...xxs.map(head))], xxs.map(tail));</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">return</span> loop([], xxs);</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">let</span> result = map(<span class="function">(<span class="params">date, data</span>) =&gt;</span> (&#123;date, data&#125;), metrodates, figures);</span><br></pre></td></tr></table></figure>
<p>此方案是方案三的加强版，它能接受多个数组映射成对象数组，威力无比！</p>
<p>为什么会有这需求呢？ 因为 <a href="https://echarts.apache.org/zh/index.html" target="_blank" rel="noopener">echarts</a> 的数据接口 横坐标和纵坐标是分开的，但是<a href="https://g2.antv.vision/zh" target="_blank" rel="noopener">G2</a>的数据结构是个对象数组，后端人员是将坐标分开成多个数组的，所以需要将他们对应起来，所以就有了上面这个需求</p>
<p><a href="https://www.cnblogs.com/guanghe/p/11445426.html" target="_blank" rel="noopener">原文</a></p>
]]></content>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode插件从vscode-fileheader到koroFileHeader</title>
    <url>/2020/04/23/vscode%E6%8F%92%E4%BB%B6%E4%BB%8Evscode-fileheader%E5%88%B0koroFileHeader/</url>
    <content><![CDATA[<h4 id="vscode插件从vscode-fileheader到koroFileHeader"><a href="#vscode插件从vscode-fileheader到koroFileHeader" class="headerlink" title="vscode插件从vscode-fileheader到koroFileHeader"></a>vscode插件从vscode-fileheader到koroFileHeader</h4><p><em>前言</em></p>
<p>为什么要使用这个插件？ 这个插件能快速为我们在文件头部生成 解释说明文档如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> * @Description: 用于演示临时切换</span></span><br><span class="line"><span class="comment"> * @Autor: syx</span></span><br><span class="line"><span class="comment"> * @Date: 2020-03-22 12:01:17</span></span><br><span class="line"><span class="comment"> * @LastEditors: syx</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-04-09 20:13:19</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure>
<p>包含 描述，作者，创建日期，最后修改者，最后修改时间。</p>
<p>当我们项目是团队协作的时候可以很快的找到上一个修改者</p>
<p>为什么要换插件呢？ 其实是因为 前者生成的头部解释没包括 描述字段，是自行添加的，应该是这样的，没错，反正我是没生成过描述，或者我没配置好吧。</p>
<p>于是安装了后者</p>
<p>安装完后者并配置后，发现 快捷键 ctrl+alt+i 无效了，原因是因为和之前的冲突了吧。于是将前者禁用掉，重启，果断变好了。</p>
<p>安装后者的第二个原因就是，ctrl+alt+t 可以生成函数注释，经常写接口注释的时候可以使用。</p>
<p>详细的内容，来个百度链接吧。<a href="https://www.cnblogs.com/fanghl/p/11264394.html" target="_blank" rel="noopener">参考文章</a></p>
<p><img src="/2020/04/23/vscode插件从vscode-fileheader到koroFileHeader/image-20200423235909959.png" alt="image-20200423235909959"></p>
<p><img src="/2020/04/23/vscode插件从vscode-fileheader到koroFileHeader/image-20200423235940835.png" alt="image-20200423235940835"></p>
<p><img src="/2020/04/23/vscode插件从vscode-fileheader到koroFileHeader/image-20200424000010153.png" alt="image-20200424000010153"></p>
<p>配置代码如下 在setting.json 文件配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">// 文件头部注释</span></span><br><span class="line">    "fileheader.customMade": &#123;</span><br><span class="line">        "Descripttion":"",</span><br><span class="line">        "version":"",</span><br><span class="line">        "Author":"syx",</span><br><span class="line">        "Date":"Do not edit",</span><br><span class="line">        "LastEditors":"syx",</span><br><span class="line">        "LastEditTime":"Do not Edit"</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//函数注释</span></span><br><span class="line">    "fileheader.cursorMode": &#123;</span><br><span class="line">        "name":"",</span><br><span class="line">        "test":"test font",</span><br><span class="line">        "msg":"",</span><br><span class="line">        "param":"",</span><br><span class="line">        "return":""</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h3><p>（1）文件头部注释</p>
<ol>
<li>快捷键：<strong>crtl+alt+i（window）</strong>,<strong>ctrl+cmd+t (mac)</strong></li>
<li>生成样式如下：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> * @Descripttion: </span></span><br><span class="line"><span class="comment"> * @version: </span></span><br><span class="line"><span class="comment"> * @Author: syx</span></span><br><span class="line"><span class="comment"> * @Date: 2020-04-22 14:29:06</span></span><br><span class="line"><span class="comment"> * @LastEditors: syx</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-04-23 21:52:33</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）函数注释</p>
<ol>
<li>快捷键：<strong>ctrl+alt+t (window)</strong>, <strong>ctrl+alt+t(mac)</strong></li>
<li>函数注释不一定生成在头部，自己把控<strong>
</strong></li>
<li>生成样式如下：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name</span>: </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@test</span>: test font</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@msg</span>: </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;type&#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>sftp自动部署总结版</title>
    <url>/2020/04/23/sftp%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93%E7%89%88/</url>
    <content><![CDATA[<h2 id="sftp-自动部署步骤"><a href="#sftp-自动部署步骤" class="headerlink" title="sftp 自动部署步骤"></a>sftp 自动部署步骤</h2><ol>
<li>在<code>vscode</code>扩展中搜索 <code>sftp</code> 并下载安装</li>
<li><code>F1</code>或者<code>ctrl+shift+p</code>调出命令窗口输入 <code>sftp</code> 点击 <code>SFTP:Config</code></li>
<li>编辑 <code>sftp.json</code> 文件并保存会在当前工程下形成 <code>sftp.json</code> 文件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"My Server"</span>,<span class="comment">//使用时需要把注释去掉</span></span><br><span class="line">    <span class="string">"host"</span>: <span class="string">"ip地址"</span>,<span class="comment">//服务器ip</span></span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"sftp"</span>,</span><br><span class="line">    <span class="string">"port"</span>: <span class="number">22</span>,<span class="comment">//端口</span></span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"root"</span>,<span class="comment">//用户名</span></span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"密码"</span>,<span class="comment">//登录密码</span></span><br><span class="line">    <span class="string">"remotePath"</span>: <span class="string">"发布路径"</span>,<span class="comment">//代码部署路径</span></span><br><span class="line">    <span class="string">"uploadOnSave"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只需要配置<code>host</code>、<code>username</code>、<code>password</code>以及 <code>remotePath</code>四个参数就可以使用了。</p>
<ol>
<li>同步到远程</li>
</ol>
<ul>
<li>同步全部的工程文件，可以在需要同步的文件夹上面右键：选择SFTP:Sync Local -&gt; remote，即可同步到远程服务器。</li>
<li>同步单一的文件，在以在需要同步的文件上右键，选择Upload，即可同步到远程服务器</li>
</ul>
<ol>
<li>完整的配置项列表,可以按需配置</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   &#123;</span><br><span class="line">    <span class="string">"host"</span>: <span class="string">"远程ip地址"</span>,</span><br><span class="line">    <span class="string">"port"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"登录名"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"登录密码"</span>,</span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"sftp"</span>, </span><br><span class="line">    <span class="string">"agent"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">"privateKeyPath"</span>: <span class="string">"null或如果链接服务器用的不是账号密码是key文件 这里为key文件路径"</span>, </span><br><span class="line">    <span class="string">"passphrase"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="string">"passive"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"interactiveAuth"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"remotePath"</span>: <span class="string">"需要打到的远程的文件夹地址"</span>,</span><br><span class="line">    <span class="string">"context"</span>: <span class="string">"本地项目地址"</span>,</span><br><span class="line">    <span class="string">"uploadOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"syncMode"</span>: <span class="string">"update"</span>,</span><br><span class="line">    <span class="string">"ignore"</span>: [</span><br><span class="line">        <span class="string">"**/.vscode/**"</span>,</span><br><span class="line">        <span class="string">"**/.git/**"</span>,</span><br><span class="line">        <span class="string">"**/.DS_Store"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"watcher"</span>: &#123;</span><br><span class="line">        <span class="string">"files"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"autoUpload"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"autoDelete"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置多个-sftp，切换部署"><a href="#配置多个-sftp，切换部署" class="headerlink" title="#配置多个 sftp，切换部署"></a><a href="http://hall.idocore.com/views/release/2020/20200421.html#配置多个-sftp，切换部署" target="_blank" rel="noopener">#</a>配置多个 sftp，切换部署</h2><ol>
<li>配置文件sftp.json</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"vue-charging-pc"</span>,  <span class="comment">//名字  使用时需要把注释去掉</span></span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"sftp"</span>,  <span class="comment">//协议  使用时需要把注释去掉</span></span><br><span class="line">    <span class="string">"port"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"root"</span>,   <span class="comment">//服务器用户名</span></span><br><span class="line">    <span class="comment">// "privateKeyPath": "服务器密钥文件路径",  //或者服务器密钥文件登录</span></span><br><span class="line">    <span class="string">"remotePath"</span>: <span class="string">"/home/charge/springboot/view/"</span>,  <span class="comment">//部署到服务器的目录，会被profiles中的配置覆盖</span></span><br><span class="line">    <span class="string">"profiles"</span>:&#123;</span><br><span class="line">        <span class="string">"zhishang"</span>: &#123;    <span class="comment">//sftp 的名字  当使用这个时 按下面的配置进行部署 </span></span><br><span class="line">            <span class="string">"host"</span>: <span class="string">"服务器主机地址"</span>,</span><br><span class="line">            <span class="string">"port"</span>: <span class="number">22130</span>,</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">            <span class="string">"password"</span>: <span class="string">"xxxx@1"</span>,</span><br><span class="line">            <span class="string">"remotePath"</span>: <span class="string">"/home/www/ylzued"</span>,</span><br><span class="line">            <span class="string">"uploadOnSave"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"god"</span>:&#123;</span><br><span class="line">            <span class="string">"host"</span>: <span class="string">"服务器主机地址"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>切换部署服务 <code>ctrl + shift + p</code>打开,点击 <code>SFTP:Set Profile</code>，出现配置的列表，选择需要的服务设置（active）。 如下图： <img src="http://hall.idocore.com/profiles.png" alt="avatar"></li>
<li>同步到远程</li>
</ol>
<ul>
<li>同步全部的工程文件，可以在需要同步的文件夹上面右键：选择SFTP:Sync Local -&gt; remote，即可同步到远程服务器。</li>
<li>同步单一的文件，在以在需要同步的文件上右键，选择Upload，即可同步到远程服务器</li>
</ul>
]]></content>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6常用语法</title>
    <url>/2020/04/23/ES6%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h2><p>ES6，全称ECMAScript6.0是 JavaScript 的下一个版本标准2015.06发版。 ES6主要是为了解决 ES5 的先天不足，比如 JavaScript 里并没有类的概念，但是目前浏览器的 JavaScript 是 ES5版本，大多数高版本的浏览器也支持 ES6，不过只实现了 ES6 的部分特性和功能。 本次主要介绍一些常用的ES6语法。如下</p>
<blockquote>
<ul>
<li>ES6 解构赋值</li>
<li>ES6 Map和Set</li>
<li>ES6 字符串、对象、数组和函数</li>
<li>ES6 Reflect与Proxy</li>
<li>ES6 Promise对象</li>
<li>ES6 Generator函数和async函数</li>
</ul>
</blockquote>
<hr>
<p>[TOC]</p>
<h2 id="1-解构赋值"><a href="#1-解构赋值" class="headerlink" title="#1.解构赋值"></a><a href="http://hall.idocore.com/views/es6/common.html#_1-解构赋值" target="_blank" rel="noopener">#</a>1.解构赋值</h2><p>解构赋值是对赋值运算符的扩展。 他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。 在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</p>
<blockquote>
<h4 id="数组模型的解构"><a href="#数组模型的解构" class="headerlink" title="#数组模型的解构"></a><a href="http://hall.idocore.com/views/es6/common.html#数组模型的解构" target="_blank" rel="noopener">#</a>数组模型的解构</h4></blockquote>
<h5 id="基本"><a href="#基本" class="headerlink" title="#基本"></a><a href="http://hall.idocore.com/views/es6/common.html#基本" target="_blank" rel="noopener">#</a><strong>基本</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 2</span></span><br><span class="line"><span class="comment">// c = 3</span></span><br></pre></td></tr></table></figure>
<h5 id="可嵌套"><a href="#可嵌套" class="headerlink" title="#可嵌套"></a><a href="http://hall.idocore.com/views/es6/common.html#可嵌套" target="_blank" rel="noopener">#</a><strong>可嵌套</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, [[b], c]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 2</span></span><br><span class="line"><span class="comment">// c = 3</span></span><br></pre></td></tr></table></figure>
<h5 id="可忽略"><a href="#可忽略" class="headerlink" title="#可忽略"></a><a href="http://hall.idocore.com/views/es6/common.html#可忽略" target="_blank" rel="noopener">#</a><strong>可忽略</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, , b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 3</span></span><br></pre></td></tr></table></figure>
<h5 id="剩余运算符"><a href="#剩余运算符" class="headerlink" title="#剩余运算符"></a><a href="http://hall.idocore.com/views/es6/common.html#剩余运算符" target="_blank" rel="noopener">#</a><strong>剩余运算符</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//a = 1</span></span><br><span class="line"><span class="comment">//b = [2, 3]</span></span><br></pre></td></tr></table></figure>
<h5 id="字符串"><a href="#字符串" class="headerlink" title="#字符串"></a><a href="http://hall.idocore.com/views/es6/common.html#字符串" target="_blank" rel="noopener">#</a><strong>字符串</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br><span class="line"><span class="comment">// a = 'h'</span></span><br><span class="line"><span class="comment">// b = 'e'</span></span><br><span class="line"><span class="comment">// c = 'l'</span></span><br><span class="line"><span class="comment">// d = 'l'</span></span><br><span class="line"><span class="comment">// e = 'o'</span></span><br></pre></td></tr></table></figure>
<h5 id="解构默认值"><a href="#解构默认值" class="headerlink" title="#解构默认值"></a><a href="http://hall.idocore.com/views/es6/common.html#解构默认值" target="_blank" rel="noopener">#</a><strong>解构默认值</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">2</span>] = [<span class="literal">undefined</span>]; <span class="comment">// a = 2</span></span><br></pre></td></tr></table></figure>
<p>1</p>
<p>当解构模式有匹配结果，且匹配结果是 undefined 时，会触发默认值作为返回结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [];     <span class="comment">// a = 3, b = 3</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [<span class="number">1</span>];    <span class="comment">// a = 1, b = 1</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [<span class="number">1</span>, <span class="number">2</span>]; <span class="comment">// a = 1, b = 2</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<h4 id="对象模型的解构"><a href="#对象模型的解构" class="headerlink" title="#对象模型的解构"></a><a href="http://hall.idocore.com/views/es6/common.html#对象模型的解构" target="_blank" rel="noopener">#</a>对象模型的解构</h4></blockquote>
<h5 id="基本-1"><a href="#基本-1" class="headerlink" title="#基本"></a><a href="http://hall.idocore.com/views/es6/common.html#基本-2" target="_blank" rel="noopener">#</a><strong>基本</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">'aaa'</span>, <span class="attr">bar</span>: <span class="string">'bbb'</span> &#125;;</span><br><span class="line"><span class="comment">// foo = 'aaa'</span></span><br><span class="line"><span class="comment">// bar = 'bbb'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">baz</span> : foo &#125; = &#123; <span class="attr">baz</span> : <span class="string">'ddd'</span> &#125;;</span><br><span class="line"><span class="comment">// foo = 'ddd'</span></span><br></pre></td></tr></table></figure>
<h5 id="可嵌套可忽略"><a href="#可嵌套可忽略" class="headerlink" title="#可嵌套可忽略"></a><a href="http://hall.idocore.com/views/es6/common.html#可嵌套可忽略" target="_blank" rel="noopener">#</a><strong>可嵌套可忽略</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">p</span>: [<span class="string">'hello'</span>, &#123;<span class="attr">y</span>: <span class="string">'world'</span>&#125;] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line"><span class="comment">// x = 'hello'</span></span><br><span class="line"><span class="comment">// y = 'world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">p</span>: [<span class="string">'hello'</span>, &#123;<span class="attr">y</span>: <span class="string">'world'</span>&#125;] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">p</span>: [x, &#123;  &#125;] &#125; = obj;</span><br><span class="line"><span class="comment">// x = 'hello'</span></span><br></pre></td></tr></table></figure>
<h5 id="剩余运算符-1"><a href="#剩余运算符-1" class="headerlink" title="#剩余运算符"></a><a href="http://hall.idocore.com/views/es6/common.html#剩余运算符-2" target="_blank" rel="noopener">#</a><strong>剩余运算符</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b, ...rest&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span>&#125;;</span><br><span class="line"><span class="comment">// a = 10</span></span><br><span class="line"><span class="comment">// b = 20</span></span><br><span class="line"><span class="comment">// rest = &#123;c: 30, d: 40&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-Map和Set"><a href="#2-Map和Set" class="headerlink" title="#2.Map和Set"></a><a href="http://hall.idocore.com/views/es6/common.html#_2-map和set" target="_blank" rel="noopener">#</a>2.Map和Set</h2><h3 id="Map-对象"><a href="#Map-对象" class="headerlink" title="#Map 对象"></a><a href="http://hall.idocore.com/views/es6/common.html#map-对象" target="_blank" rel="noopener">#</a><strong>Map 对象</strong></h3><p>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。</p>
<p><strong>Maps 和 Objects 的区别</strong></p>
<ul>
<li>一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。</li>
<li>Map 中的键值是有序的（FIFO 原则），而添加到对象中的键则不是</li>
<li>Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。</li>
<li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。</li>
</ul>
<p><strong>Map中的key可以是字符串、对象和函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">var</span> keyString = <span class="string">"a string"</span>; </span><br><span class="line"><span class="keyword">var</span> keyString = <span class="string">"a string"</span>; </span><br><span class="line"><span class="keyword">var</span> keyFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">myMap.set(keyString, <span class="string">"和键'a string'关联的值"</span>);</span><br><span class="line">myMap.set(keyObj, <span class="string">"和键 keyObj 关联的值"</span>);</span><br><span class="line">myMap.set(keyFunc, <span class="string">"和键 keyFunc 关联的值"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="Map的迭代"><a href="#Map的迭代" class="headerlink" title="#Map的迭代"></a><a href="http://hall.idocore.com/views/es6/common.html#map的迭代" target="_blank" rel="noopener">#</a><strong>Map的迭代</strong></h4><h5 id="for…of"><a href="#for…of" class="headerlink" title="#for…of"></a><a href="http://hall.idocore.com/views/es6/common.html#for-of" target="_blank" rel="noopener">#</a><strong>for…of</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">myMap.set(<span class="number">0</span>, <span class="string">"zero"</span>);</span><br><span class="line">myMap.set(<span class="number">1</span>, <span class="string">"one"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 将会显示两个 log。 一个是 "0 = zero" 另一个是 "1 = one"</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> myMap) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" = "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> myMap.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" = "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这个 entries 方法返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的 [key, value] 数组。 */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 将会显示两个log。 一个是 "0" 另一个是 "1"</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> myMap.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这个 keys 方法返回一个新的 Iterator 对象， 它按插入顺序包含了 Map 对象中每个元素的键。 */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 将会显示两个log。 一个是 "zero" 另一个是 "one"</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> myMap.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这个 values 方法返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的值。 */</span></span><br></pre></td></tr></table></figure>
<h4 id="Map对象的操作"><a href="#Map对象的操作" class="headerlink" title="#Map对象的操作"></a><a href="http://hall.idocore.com/views/es6/common.html#map对象的操作" target="_blank" rel="noopener">#</a><strong>Map对象的操作</strong></h4><h5 id="Map-与-Array的转换"><a href="#Map-与-Array的转换" class="headerlink" title="#Map 与 Array的转换"></a><a href="http://hall.idocore.com/views/es6/common.html#map-与-array的转换" target="_blank" rel="noopener">#</a><strong>Map 与 Array的转换</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kvArray = [[<span class="string">"key1"</span>, <span class="string">"value1"</span>], [<span class="string">"key2"</span>, <span class="string">"value2"</span>]];</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Map 构造函数可以将一个 二维 键值对数组转换成一个 Map 对象</span></span><br><span class="line"><span class="keyword">var</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>(kvArray);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用 Array.from 函数可以将一个 Map 对象转换成一个二维键值对数组</span></span><br><span class="line"><span class="keyword">var</span> outArray = <span class="built_in">Array</span>.from(myMap);</span><br></pre></td></tr></table></figure>
<h5 id="Map-的克隆"><a href="#Map-的克隆" class="headerlink" title="#Map 的克隆"></a><a href="http://hall.idocore.com/views/es6/common.html#map-的克隆" target="_blank" rel="noopener">#</a><strong>Map 的克隆</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myMap1 = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">"key1"</span>, <span class="string">"value1"</span>], [<span class="string">"key2"</span>, <span class="string">"value2"</span>]]);</span><br><span class="line"><span class="keyword">var</span> myMap2 = <span class="keyword">new</span> <span class="built_in">Map</span>(myMap1);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(original === clone); </span><br><span class="line"><span class="comment">// 打印 false。 Map 对象构造函数生成实例，迭代出新的对象。</span></span><br></pre></td></tr></table></figure>
<h5 id="Map-的合并"><a href="#Map-的合并" class="headerlink" title="#Map 的合并"></a><a href="http://hall.idocore.com/views/es6/common.html#map-的合并" target="_blank" rel="noopener">#</a><strong>Map 的合并</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">'one'</span>], [<span class="number">2</span>, <span class="string">'two'</span>], [<span class="number">3</span>, <span class="string">'three'</span>],]);</span><br><span class="line"><span class="keyword">var</span> second = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">'uno'</span>], [<span class="number">2</span>, <span class="string">'dos'</span>]]);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 合并两个 Map 对象时，如果有重复的键值，则后面的会覆盖前面的，对应值即 uno，dos， three</span></span><br><span class="line"><span class="keyword">var</span> merged = <span class="keyword">new</span> <span class="built_in">Map</span>([...first, ...second]);</span><br></pre></td></tr></table></figure>
<h3 id="Set-对象"><a href="#Set-对象" class="headerlink" title="#Set 对象"></a><a href="http://hall.idocore.com/views/es6/common.html#set-对象" target="_blank" rel="noopener">#</a><strong>Set 对象</strong></h3><p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p>
<p><strong>Set 中的特殊值</strong></p>
<p>Set 对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待：</p>
<ul>
<li>+0 与 -0 在存储判断唯一性的时候是恒等的，所以不重复；</li>
<li>undefined 与 undefined 是恒等的，所以不重复；</li>
<li>NaN 与 NaN 是不恒等的，但是在 Set 中只能存一个，不重复。</li>
</ul>
<h4 id="不可重复性"><a href="#不可重复性" class="headerlink" title="#不可重复性"></a><a href="http://hall.idocore.com/views/es6/common.html#不可重复性" target="_blank" rel="noopener">#</a><strong>不可重复性</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"> </span><br><span class="line">mySet.add(<span class="number">1</span>); <span class="comment">// Set(1) &#123;1&#125;</span></span><br><span class="line">mySet.add(<span class="number">5</span>); <span class="comment">// Set(2) &#123;1, 5&#125;</span></span><br><span class="line">mySet.add(<span class="number">5</span>); <span class="comment">// Set(2) &#123;1, 5&#125; 这里体现了值的唯一性</span></span><br><span class="line">mySet.add(<span class="string">"some text"</span>); </span><br><span class="line"><span class="comment">// Set(3) &#123;1, 5, "some text"&#125; 这里体现了类型的多样性</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;; </span><br><span class="line">mySet.add(o);</span><br><span class="line">mySet.add(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;); </span><br><span class="line"><span class="comment">// Set(5) &#123;1, 5, "some text", &#123;…&#125;, &#123;…&#125;&#125; </span></span><br><span class="line"><span class="comment">// 这里体现了对象之间引用不同不恒等，即使值相同，Set 也能存储</span></span><br></pre></td></tr></table></figure>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="#类型转换"></a><a href="http://hall.idocore.com/views/es6/common.html#类型转换" target="_blank" rel="noopener">#</a><strong>类型转换</strong></h4><h5 id="Array"><a href="#Array" class="headerlink" title="#Array"></a><a href="http://hall.idocore.com/views/es6/common.html#array" target="_blank" rel="noopener">#</a><strong>Array</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array 转 Set</span></span><br><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"value1"</span>, <span class="string">"value2"</span>, <span class="string">"value3"</span>]);</span><br><span class="line"><span class="comment">// 用...操作符，将 Set 转 Array</span></span><br><span class="line"><span class="keyword">var</span> myArray = [...mySet];</span><br><span class="line"><span class="built_in">String</span></span><br><span class="line"><span class="comment">// String 转 Set</span></span><br><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">'hello'</span>);  <span class="comment">// Set(4) &#123;"h", "e", "l", "o"&#125;</span></span><br><span class="line"><span class="comment">// 注：Set 中 toString 方法是不能将 Set 转换成 String</span></span><br></pre></td></tr></table></figure>
<h4 id="Set对象一些用法"><a href="#Set对象一些用法" class="headerlink" title="#Set对象一些用法"></a><a href="http://hall.idocore.com/views/es6/common.html#set对象一些用法" target="_blank" rel="noopener">#</a><strong>Set对象一些用法</strong></h4><h5 id="数组去重"><a href="#数组去重" class="headerlink" title="#数组去重"></a><a href="http://hall.idocore.com/views/es6/common.html#数组去重" target="_blank" rel="noopener">#</a><strong>数组去重</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">[...mySet]; <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<h5 id="并集"><a href="#并集" class="headerlink" title="#并集"></a><a href="http://hall.idocore.com/views/es6/common.html#并集" target="_blank" rel="noopener">#</a><strong>并集</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">var</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]); <span class="comment">// &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure>
<h5 id="交集"><a href="#交集" class="headerlink" title="#交集"></a><a href="http://hall.idocore.com/views/es6/common.html#交集" target="_blank" rel="noopener">#</a><strong>交集</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">var</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> b.has(x))); <span class="comment">// &#123;2, 3&#125;</span></span><br></pre></td></tr></table></figure>
<h5 id="差集"><a href="#差集" class="headerlink" title="#差集"></a><a href="http://hall.idocore.com/views/es6/common.html#差集" target="_blank" rel="noopener">#</a><strong>差集</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">var</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> !b.has(x))); <span class="comment">// &#123;1&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-字符串、对象、数组和函数"><a href="#3-字符串、对象、数组和函数" class="headerlink" title="#3.字符串、对象、数组和函数"></a><a href="http://hall.idocore.com/views/es6/common.html#_3-字符串、对象、数组和函数" target="_blank" rel="noopener">#</a>3.字符串、对象、数组和函数</h2><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="#字符串"></a><a href="http://hall.idocore.com/views/es6/common.html#字符串-2" target="_blank" rel="noopener">#</a><strong>字符串</strong></h3><h4 id="字符串补全"><a href="#字符串补全" class="headerlink" title="#字符串补全"></a><a href="http://hall.idocore.com/views/es6/common.html#字符串补全" target="_blank" rel="noopener">#</a><strong>字符串补全</strong></h4><ul>
<li>padStart：返回新的字符串，表示用参数字符串从头部（左侧）补全原字符串。</li>
<li><p>padEnd：返回新的字符串，表示用参数字符串从尾部（右侧）补全原字符串。</p>
<p>以上两个方法接受两个参数，第一个参数是指定生成的字符串的最小长度，第二个参数是用来补全的字符串。如果没有指定第二个参数，默认用空格填充。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"h"</span>.padStart(<span class="number">5</span>,<span class="string">"o"</span>));  <span class="comment">// "ooooh"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"h"</span>.padEnd(<span class="number">5</span>,<span class="string">"o"</span>));    <span class="comment">// "hoooo"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"h"</span>.padStart(<span class="number">5</span>));      <span class="comment">// "    h"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果指定的长度小于或者等于原字符串的长度，则返回原字符串:</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span>.padStart(<span class="number">5</span>,<span class="string">"A"</span>));  <span class="comment">// "hello"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果原字符串加上补全字符串长度大于指定长度，则截去超出位数的补全字符串:</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span>.padEnd(<span class="number">10</span>,<span class="string">",world!"</span>));  <span class="comment">// "hello,worl"</span></span><br></pre></td></tr></table></figure>
<h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="#模板字符串"></a><a href="http://hall.idocore.com/views/es6/common.html#模板字符串" target="_blank" rel="noopener">#</a><strong>模板字符串</strong></h4><p>模板字符串相当于加强版的字符串，用反引号`,除了作为普通字符串，还可以用来定义多行字符串，还可以在字符串中加入变量和表达式。</p>
<h5 id="基本用法"><a href="#基本用法" class="headerlink" title="#基本用法"></a><a href="http://hall.idocore.com/views/es6/common.html#基本用法" target="_blank" rel="noopener">#</a><strong>基本用法</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">`Hello'\n'world`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string); </span><br><span class="line"><span class="comment">// "Hello'</span></span><br><span class="line"><span class="comment">// 'world"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 换行用法 模板字符串会保留空格和换行</span></span><br><span class="line"><span class="keyword">let</span> string1 =  <span class="string">`Hey,</span></span><br><span class="line"><span class="string">can you stop angry now?`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string1);</span><br><span class="line"><span class="comment">// Hey,</span></span><br><span class="line"><span class="comment">// can you stop angry now?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串插入变量和表达式</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"Tom"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">let</span> info = <span class="string">`My Name is <span class="subst">$&#123;name&#125;</span>,I am <span class="subst">$&#123;age+<span class="number">1</span>&#125;</span> years old next year.`</span></span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br><span class="line"><span class="comment">// My Name is Tom,I am 28 years old next year.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"have fun!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> string2= <span class="string">`Game start,<span class="subst">$&#123;f()&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string2);  </span><br><span class="line"><span class="comment">// Game start,have fun!</span></span><br></pre></td></tr></table></figure>
<h5 id="标签用法"><a href="#标签用法" class="headerlink" title="#标签用法"></a><a href="http://hall.idocore.com/views/es6/common.html#标签用法" target="_blank" rel="noopener">#</a><strong>标签用法</strong></h5><p>标签模板，是一个函数的调用，其中调用的参数是模板字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert<span class="string">`Hello world!`</span>;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">alert(<span class="string">'Hello world!'</span>);</span><br><span class="line"></span><br><span class="line">getPersonInfo(a,b,c)</span><br><span class="line">getPersonInfo<span class="string">`<span class="subst">$&#123;person&#125;</span> is <span class="subst">$&#123;age&#125;</span> years old`</span> </span><br><span class="line"><span class="comment">//三个参数为 ["", "is", "years old"], person, age</span></span><br></pre></td></tr></table></figure>
<h3 id="对象"><a href="#对象" class="headerlink" title="#对象"></a><a href="http://hall.idocore.com/views/es6/common.html#对象" target="_blank" rel="noopener">#</a><strong>对象</strong></h3><h4 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="#属性的简洁表示法"></a><a href="http://hall.idocore.com/views/es6/common.html#属性的简洁表示法" target="_blank" rel="noopener">#</a><strong>属性的简洁表示法</strong></h4><p>这个在我们vue项目中模块导出或者注册组件经常用到</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    specifyAreaSelect</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    actions,</span><br><span class="line">    state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="#属性名表达式"></a><a href="http://hall.idocore.com/views/es6/common.html#属性名表达式" target="_blank" rel="noopener">#</a><strong>属性名表达式</strong></h4><p>ES6允许用表达式作为属性名，但是一定要将表达式放在方括号内。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"> [<span class="string">"he"</span>+<span class="string">"llo"</span>]()&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"Hi"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.hello();  <span class="comment">//"Hi"</span></span><br><span class="line"><span class="comment">//注意点：属性的简洁表示法和属性名表达式不能同时使用，否则会报错。</span></span><br></pre></td></tr></table></figure>
<h4 id="对象的拓展运算符"><a href="#对象的拓展运算符" class="headerlink" title="#对象的拓展运算符"></a><a href="http://hall.idocore.com/views/es6/common.html#对象的拓展运算符" target="_blank" rel="noopener">#</a><strong>对象的拓展运算符</strong></h4><p>拓展运算符（…）用于取出参数对象所有可遍历属性然后拷贝到当前对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基本</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">"Amy"</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> someone = &#123; ...person &#125;;</span><br><span class="line">someone;  <span class="comment">//&#123;name: "Amy", age: 15&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//合并对象</span></span><br><span class="line"><span class="keyword">let</span> age = &#123;<span class="attr">age</span>: <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> name = &#123;<span class="attr">name</span>: <span class="string">"Amy"</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> person = &#123;...age, ...name&#125;;</span><br><span class="line">person;  <span class="comment">//&#123;age: 15, name: "Amy"&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="对象新方法"><a href="#对象新方法" class="headerlink" title="#对象新方法"></a><a href="http://hall.idocore.com/views/es6/common.html#对象新方法" target="_blank" rel="noopener">#</a><strong>对象新方法</strong></h4><p>Object.assign() 用于将源对象的所有可枚举属性复制到目标对象中。</p>
<h5 id="基本-2"><a href="#基本-2" class="headerlink" title="#基本"></a><a href="http://hall.idocore.com/views/es6/common.html#基本-3" target="_blank" rel="noopener">#</a><strong>基本</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> object2 = &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> object3 = &#123;<span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(target,object2,object3);  </span><br><span class="line"><span class="comment">// 第一个参数是目标对象，后面的参数是源对象</span></span><br><span class="line">target;  <span class="comment">// &#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure>
<h5 id="注意点"><a href="#注意点" class="headerlink" title="#注意点"></a><a href="http://hall.idocore.com/views/es6/common.html#注意点" target="_blank" rel="noopener">#</a><strong>注意点</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//assign 的属性拷贝是浅拷贝:</span></span><br><span class="line"><span class="keyword">let</span> sourceObj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> targetObj = &#123;<span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(targetObj, sourceObj);</span><br><span class="line">targetObj.a.b = <span class="number">2</span>;</span><br><span class="line">sourceObj.a.b;  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同名属性替换</span></span><br><span class="line">targetObj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>:<span class="number">2</span>&#125;&#125;;</span><br><span class="line">sourceObj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">"hh"</span>&#125;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(targetObj, sourceObj);</span><br><span class="line">targetObj;  <span class="comment">// &#123;a: &#123;b: "hh"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的处理</span></span><br><span class="line"><span class="built_in">Object</span>.assign([<span class="number">2</span>,<span class="number">3</span>], [<span class="number">5</span>]);  <span class="comment">// [5,3]</span></span><br><span class="line"><span class="comment">//会将数组处理成对象，所以先将 [2,3] 转为 &#123;0:2,1:3&#125; ，然后再进行属性复制，所以源对象的 0 号属性覆盖了目标对象的 0。</span></span><br></pre></td></tr></table></figure>
<h3 id="数组"><a href="#数组" class="headerlink" title="#数组"></a><a href="http://hall.idocore.com/views/es6/common.html#数组" target="_blank" rel="noopener">#</a><strong>数组</strong></h3><h4 id="数组的创建"><a href="#数组的创建" class="headerlink" title="#数组的创建"></a><a href="http://hall.idocore.com/views/es6/common.html#数组的创建" target="_blank" rel="noopener">#</a><strong>数组的创建</strong></h4><h5 id="Array-from"><a href="#Array-from" class="headerlink" title="#Array.from()"></a><a href="http://hall.idocore.com/views/es6/common.html#array-from" target="_blank" rel="noopener">#</a><strong>Array.from()</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>])); <span class="comment">// [1, 2]</span></span><br><span class="line"><span class="comment">//可迭代</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (n) =&gt; n * <span class="number">2</span>)); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>
<h4 id="类数组对象"><a href="#类数组对象" class="headerlink" title="#类数组对象"></a><a href="http://hall.idocore.com/views/es6/common.html#类数组对象" target="_blank" rel="noopener">#</a><strong>类数组对象</strong></h4><p>一个类数组对象必须含有 length 属性，且元素属性名必须是数值或者可转换为数值的字符。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(&#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'1'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'2'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(); <span class="comment">// ['1', '2', 3]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 没有 length 属性,则返回空数组</span></span><br><span class="line"><span class="keyword">let</span> array = <span class="built_in">Array</span>.from(&#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'1'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'2'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">// []</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 元素属性名不为数值且无法转换为数值，返回长度为 length 元素值为 undefined 的数组  </span></span><br><span class="line"><span class="keyword">let</span> array1 = <span class="built_in">Array</span>.from(&#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  length: <span class="number">2</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(array1); <span class="comment">// [undefined, undefined]</span></span><br></pre></td></tr></table></figure>
<h4 id="扩展的方法"><a href="#扩展的方法" class="headerlink" title="#扩展的方法"></a><a href="http://hall.idocore.com/views/es6/common.html#扩展的方法" target="_blank" rel="noopener">#</a><strong>扩展的方法</strong></h4><h5 id="find"><a href="#find" class="headerlink" title="#find()"></a><a href="http://hall.idocore.com/views/es6/common.html#find" target="_blank" rel="noopener">#</a><strong>find()</strong></h5><p>查找数组中符合条件的元素,若有多个符合条件的元素，则返回第一个元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr.find(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 数组空位处理为 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log([, <span class="number">1</span>].find(<span class="function"><span class="params">n</span> =&gt;</span> <span class="literal">true</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h5 id="fill"><a href="#fill" class="headerlink" title="#fill()"></a><a href="http://hall.idocore.com/views/es6/common.html#fill" target="_blank" rel="noopener">#</a><strong>fill()</strong></h5><p>将一定范围索引的数组元素内容填充为单个指定的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// 参数1：用来填充的值</span></span><br><span class="line"><span class="comment">// 参数2：被填充的起始索引</span></span><br><span class="line"><span class="comment">// 参数3(可选)：被填充的结束索引，默认为数组末尾</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.fill(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">// [1, 0, 3, 4]</span></span><br></pre></td></tr></table></figure>
<h5 id="flat"><a href="#flat" class="headerlink" title="#flat()"></a><a href="http://hall.idocore.com/views/es6/common.html#flat" target="_blank" rel="noopener">#</a><strong>flat()</strong></h5><p>展开数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span> ,[<span class="number">2</span>, <span class="number">3</span>]].flat()); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 指定转换的嵌套层数</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]]].flat(<span class="number">2</span>)); <span class="comment">// [1, 2, 3, [4, 5]]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 不管嵌套多少层</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]]].flat(<span class="literal">Infinity</span>)); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 自动跳过空位</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, [<span class="number">2</span>, , <span class="number">3</span>]].flat());<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span> // [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="#扩展运算符"></a><a href="http://hall.idocore.com/views/es6/common.html#扩展运算符" target="_blank" rel="noopener">#</a><strong>扩展运算符</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    arr1 = [...arr];</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([...[<span class="number">1</span>, <span class="number">2</span>],...[<span class="number">3</span>, <span class="number">4</span>]]); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="#函数"></a><a href="http://hall.idocore.com/views/es6/common.html#函数" target="_blank" rel="noopener">#</a><strong>函数</strong></h3><h4 id="默认传参"><a href="#默认传参" class="headerlink" title="#默认传参"></a><a href="http://hall.idocore.com/views/es6/common.html#默认传参" target="_blank" rel="noopener">#</a><strong>默认传参</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name,age=<span class="number">17</span></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(name+<span class="string">","</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">"Amy"</span>,<span class="number">18</span>);  <span class="comment">// Amy,18</span></span><br><span class="line">fn(<span class="string">"Amy"</span>,<span class="string">""</span>);  <span class="comment">// Amy,</span></span><br><span class="line">fn(<span class="string">"Amy"</span>);     <span class="comment">// Amy,17</span></span><br></pre></td></tr></table></figure>
<h4 id="不定参数"><a href="#不定参数" class="headerlink" title="#不定参数"></a><a href="http://hall.idocore.com/views/es6/common.html#不定参数" target="_blank" rel="noopener">#</a><strong>不定参数</strong></h4><p>不定参数用来表示不确定参数个数，形如，…变量名，由…加上一个具名参数标识符组成。具名参数只能放在参数组的<strong>最后</strong>，并且有且只有一个不定参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">...values</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(values.length);</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>);      <span class="comment">//2</span></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);  <span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="#箭头函数"></a><a href="http://hall.idocore.com/views/es6/common.html#箭头函数" target="_blank" rel="noopener">#</a><strong>箭头函数</strong></h4><p>箭头函数提供了函数更简洁的写法，同时函数内的this指向也会有一定改变</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当无参数或者多个参数时</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br><span class="line">f(<span class="number">6</span>,<span class="number">2</span>);  <span class="comment">//8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多行语句需要用&#123;&#125;把函数体包起来</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">let</span> result = a+b;</span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">6</span>,<span class="number">2</span>);  <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当箭头函数要返回对象的时候，为了区分于代码块，要用 () 将对象包裹起来</span></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function">(<span class="params">id,name</span>) =&gt;</span> &#123;<span class="attr">id</span>: id, <span class="attr">name</span>: name&#125;;</span><br><span class="line">f(<span class="number">6</span>,<span class="number">2</span>);  <span class="comment">// SyntaxError: Unexpected token :</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 不报错</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function">(<span class="params">id,name</span>) =&gt;</span> (&#123;<span class="attr">id</span>: id, <span class="attr">name</span>: name&#125;);</span><br><span class="line">f(<span class="number">6</span>,<span class="number">2</span>);  <span class="comment">// &#123;id: 6, name: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意点：没有 this、super、arguments 和 new.target 绑定。</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 箭头函数里面没有 this 对象，</span></span><br><span class="line">  <span class="comment">// 此时的 this 是外层的 this 对象，即 Window </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">func(<span class="number">55</span>)  <span class="comment">// Window </span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="params">()</span> =&gt;</span> &#123;    </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">func(<span class="number">55</span>);  <span class="comment">// ReferenceError: arguments is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数体中的 this 对象，是定义函数时的对象，而不是使用函数时的对象。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 定义时，this 绑定的是 fn 中的 this 对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// fn 的 this 对象为 &#123;a: 19&#125;</span></span><br><span class="line">fn.call(&#123;<span class="attr">a</span>: <span class="number">18</span>&#125;);  <span class="comment">// 18</span></span><br></pre></td></tr></table></figure>
<h2 id="4-Reflect与Proxy"><a href="#4-Reflect与Proxy" class="headerlink" title="#4.Reflect与Proxy"></a><a href="http://hall.idocore.com/views/es6/common.html#_4-reflect与proxy" target="_blank" rel="noopener">#</a><strong>4.Reflect与Proxy</strong></h2><p>Proxy 与 Reflect 是 ES6 为了操作对象引入的 API 。</p>
<p>Proxy 可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。它不直接操作对象，而是像代理模式，通过对象的代理对象进行操作，在进行这些操作时，可以添加一些需要的额外操作。</p>
<p>Reflect 可以用于获取目标对象的行为，它与 Object 类似，但是更易读，为操作对象提供了一种更优雅的方式。它的方法与 Proxy 是对应的。</p>
<p>vue3.0中，双向绑定就是使用了Proxy语法代替了原来的defineProperty，掌握Proxy对我们使用vue会有很大的帮助</p>
<h3 id="Proxy"><a href="#Proxy" class="headerlink" title="#Proxy"></a><a href="http://hall.idocore.com/views/es6/common.html#proxy" target="_blank" rel="noopener">#</a><strong>Proxy</strong></h3><p>一个 Proxy 对象由两个部分组成： target 、 handler 。在通过 Proxy 构造函数生成实例对象时，需要提供这两个参数。 target 即目标对象， handler 是一个对象，声明了代理 target 的指定行为。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="keyword">get</span>: function(target, key) &#123;</span><br><span class="line">        <span class="comment">//参数target是访问的对象，key是访问的对象属性名</span></span><br><span class="line">        <span class="comment">//以下是访问对象的值时运行的代码</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'getting '</span>+key);</span><br><span class="line">        <span class="keyword">return</span> target[key]; <span class="comment">// 不是target.key</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(target, key, value) &#123;</span><br><span class="line">        <span class="comment">//参数target是访问的对象，key是访问的对象属性名，value是新设置的值</span></span><br><span class="line">        <span class="comment">//以下是设置对象的值时运行的代码</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'setting '</span>+key);</span><br><span class="line">        target[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br><span class="line">proxy.name     <span class="comment">// 实际执行 handler.get</span></span><br><span class="line">proxy.age = <span class="number">25</span> <span class="comment">// 实际执行 handler.set</span></span><br><span class="line"><span class="comment">// getting name</span></span><br><span class="line"><span class="comment">// setting age</span></span><br><span class="line"><span class="comment">// 25</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// target 可以为空对象</span></span><br><span class="line"><span class="keyword">let</span> targetEpt = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> proxyEpt = <span class="keyword">new</span> <span class="built_in">Proxy</span>(targetEpt, handler)</span><br><span class="line"><span class="comment">// 调用 get 方法，此时目标对象为空，没有 name 属性</span></span><br><span class="line">proxyEpt.name <span class="comment">// getting name</span></span><br><span class="line"><span class="comment">// 调用 set 方法，向目标对象中添加了 name 属性</span></span><br><span class="line">proxyEpt.name = <span class="string">'Tom'</span></span><br><span class="line"><span class="comment">// setting name</span></span><br><span class="line"><span class="comment">// "Tom"</span></span><br><span class="line"><span class="comment">// 再次调用 get ，此时已经存在 name 属性</span></span><br><span class="line">proxyEpt.name</span><br><span class="line"><span class="comment">// getting name</span></span><br><span class="line"><span class="comment">// "Tom"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// handler 对象也可以为空，相当于不设置拦截操作，直接访问目标对象</span></span><br></pre></td></tr></table></figure>
<h4 id="用Proxy写一个拦截器"><a href="#用Proxy写一个拦截器" class="headerlink" title="#用Proxy写一个拦截器"></a><a href="http://hall.idocore.com/views/es6/common.html#用proxy写一个拦截器" target="_blank" rel="noopener">#</a><strong>用Proxy写一个拦截器</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> validator = &#123;</span><br><span class="line">    <span class="keyword">set</span>: function(obj, prop, value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prop === <span class="string">'age'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(value)) &#123;<span class="comment">//不为数字报错</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'The age is not an integer'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt; <span class="number">200</span>) &#123;<span class="comment">//大于200报错</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">'The age seems invalid'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对于满足条件的 age 属性以及其他属性，直接保存</span></span><br><span class="line">        obj[prop] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> proxy= <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, validator)</span><br><span class="line">proxy.age = <span class="number">100</span>;</span><br><span class="line">proxy.age           <span class="comment">// 100</span></span><br><span class="line">proxy.age = <span class="string">'oppps'</span> <span class="comment">// 报错</span></span><br><span class="line">proxy.age = <span class="number">300</span>     <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
<p>注意，严格模式下，set代理如果没有返回true，就会报错。</p>
<h3 id="Reflect"><a href="#Reflect" class="headerlink" title="#Reflect"></a><a href="http://hall.idocore.com/views/es6/common.html#reflect" target="_blank" rel="noopener">#</a><strong>Reflect</strong></h3><p>ES6 中将 Object 的一些明显属于语言内部的方法移植到了 Reflect 对象上（当前某些方法会同时存在于 Object 和 Reflect 对象上），未来的新方法会只部署在 Reflect 对象上。 Reflect 对象对某些方法的返回结果进行了修改，使其更合理。 Reflect 对象使用函数的方式实现了 Object 的命令式操作。</p>
<p>查找并返回 target 对象的 name 属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> exam = &#123;</span><br><span class="line">    name: <span class="string">"Tom"</span>,</span><br><span class="line">    age: <span class="number">24</span>,</span><br><span class="line">    <span class="keyword">get</span> info()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.get(exam, <span class="string">'name'</span>); <span class="comment">// "Tom"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当 target 对象中存在 name 属性的 getter 方法， getter 方法的 this 会绑定 // receiver</span></span><br><span class="line"><span class="keyword">let</span> receiver = &#123;</span><br><span class="line">    name: <span class="string">"Jerry"</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.get(exam, <span class="string">'info'</span>, receiver); <span class="comment">// Jerry20</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当 name 为不存在于 target 对象的属性时，返回 undefined</span></span><br><span class="line"><span class="built_in">Reflect</span>.get(exam, <span class="string">'birth'</span>); <span class="comment">// undefined</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当 target 不是对象时，会报错</span></span><br><span class="line"><span class="built_in">Reflect</span>.get(<span class="number">1</span>, <span class="string">'name'</span>); <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure>
<h3 id="组合使用"><a href="#组合使用" class="headerlink" title="#组合使用"></a><a href="http://hall.idocore.com/views/es6/common.html#组合使用" target="_blank" rel="noopener">#</a><strong>组合使用</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> exam = &#123;</span><br><span class="line">    name: <span class="string">"Tom"</span>,</span><br><span class="line">    age: <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="keyword">get</span>: function(target, key)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"getting "</span>+key);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target,key);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(target, key, value)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"setting "</span>+key+<span class="string">" to "</span>+value)</span><br><span class="line">        <span class="built_in">Reflect</span>.set(target, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(exam, handler)</span><br><span class="line">proxy.name = <span class="string">"Jerry"</span></span><br><span class="line">proxy.name</span><br><span class="line"><span class="comment">// setting name to Jerry</span></span><br><span class="line"><span class="comment">// getting name</span></span><br><span class="line"><span class="comment">// "Jerry"</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.runoob.com/w3cnote/es6-reflect-proxy.html" target="_blank" rel="noopener">更多详情</a></p>
<h2 id="5-Promise"><a href="#5-Promise" class="headerlink" title="#5.Promise"></a><a href="http://hall.idocore.com/views/es6/common.html#_5-promise" target="_blank" rel="noopener">#</a><strong>5.Promise</strong></h2><p>Promise是异步编程的一种解决方案。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。</p>
<h3 id="Promise-状态"><a href="#Promise-状态" class="headerlink" title="#Promise 状态"></a><a href="http://hall.idocore.com/views/es6/common.html#promise-状态" target="_blank" rel="noopener">#</a><strong>Promise 状态</strong></h3><p>Promise 异步操作有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。除了异步操作的结果，任何其他操作都无法改变这个状态。 Promise 对象只有：从 pending 变为 fulfilled 和从 pending 变为 rejected 的状态改变。只要处于 fulfilled 和 rejected ，状态就不会再变了即 resolved（已定型）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="string">'success1'</span>);</span><br><span class="line">    resolve(<span class="string">'success2'</span>);</span><br><span class="line">&#125;); </span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;  </span><br><span class="line">    resolve(<span class="string">'success3'</span>); </span><br><span class="line">    reject(<span class="string">'reject'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(value); <span class="comment">// success1</span></span><br><span class="line">&#125;);</span><br><span class="line">p2.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(value); <span class="comment">// success3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>注意： 无法取消 Promise ，一旦新建它就会立即执行，无法中途取消。如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>
<h3 id="then-方法"><a href="#then-方法" class="headerlink" title="#then 方法"></a><a href="http://hall.idocore.com/views/es6/common.html#then-方法" target="_blank" rel="noopener">#</a><strong>then 方法</strong></h3><p>then 方法接收两个函数作为参数，第一个参数是 Promise 执行成功时的回调，第二个参数是 Promise 执行失败时的回调，两个函数只会有一个被调用。 在 JavaScript 事件队列的当前运行完成之前，回调函数永远不会被调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  resolve(<span class="string">'success'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'first'</span>);</span><br><span class="line"><span class="comment">// first</span></span><br><span class="line"><span class="comment">// success</span></span><br></pre></td></tr></table></figure>
<p>通过 .then 形式添加的回调函数，不论什么时候，都会被调用。 可以添加多个回调函数，它们会按照插入顺序并且独立运行。适合我们在业务中先请求一个接口完成后再请求另一个接口。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  resolve(<span class="number">1</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; <span class="comment">// 第一个then // 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; <span class="comment">// 第二个then // 2</span></span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; <span class="comment">// 第三个then // undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'resolve'</span>); </span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; <span class="comment">// 第四个then // resolve</span></span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'reject'</span>); </span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; <span class="comment">// 第五个then //reject:reject</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'resolve:'</span> + value);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'reject:'</span> + err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>then 方法将返回一个 resolved 或 rejected 状态的 Promise 对象用于链式调用，且 Promise 对象的值就是这个返回值。</p>
<h3 id="Promise封装axios"><a href="#Promise封装axios" class="headerlink" title="#Promise封装axios"></a><a href="http://hall.idocore.com/views/es6/common.html#promise封装axios" target="_blank" rel="noopener">#</a><strong>Promise封装axios</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> checkLogin: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 返回一个promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      axios(&#123;</span><br><span class="line">            url: url</span><br><span class="line">            method: <span class="string">'post'</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">            .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">              resolve(res.data);</span><br><span class="line">              <span class="comment">// console.log(res);</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">              reject(error);</span><br><span class="line">              <span class="comment">// console.log(error);</span></span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.checkLogin().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="comment">// 执行成功的回调函数</span></span><br><span class="line">        &#125;,</span><br><span class="line">        error =&gt; &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(error); </span><br><span class="line">        <span class="comment">// 执行失败的回调函数</span></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Promise-prototype-catch方法：捕捉错误"><a href="#Promise-prototype-catch方法：捕捉错误" class="headerlink" title="#Promise.prototype.catch方法：捕捉错误"></a><a href="http://hall.idocore.com/views/es6/common.html#promise-prototype-catch方法：捕捉错误" target="_blank" rel="noopener">#</a><strong>Promise.prototype.catch方法：捕捉错误</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">posts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处理前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'发生错误！'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Promise-all方法，Promise-race方法"><a href="#Promise-all方法，Promise-race方法" class="headerlink" title="#Promise.all方法，Promise.race方法"></a><a href="http://hall.idocore.com/views/es6/common.html#promise-all方法，promise-race方法" target="_blank" rel="noopener">#</a><strong>Promise.all方法，Promise.race方法</strong></h3><p>Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。例如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.all([p1,p2,p3]);</span><br></pre></td></tr></table></figure>
<p>Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 对象的实例。（Promise.all 方法的参数不一定是数组，但是必须具有 iterator 接口，且返回的每个成员都是 Promise 实例。） p 的状态由 p1、p2、p3 决定，分成两种情况。</p>
<ul>
<li>只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</li>
<li>只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成一个Promise对象的数组</span></span><br><span class="line"><span class="keyword">var</span> promises = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getJSON(<span class="string">"/post/"</span> + id + <span class="string">".json"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="keyword">function</span>(<span class="params">posts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...  </span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Promise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.race([p1,p2,p3]);</span><br></pre></td></tr></table></figure>
<p>只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的返回值。 如果Promise.all方法和Promise.race方法的参数，不是Promise实例，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。</p>
<h2 id="6-Generator函数和async函数"><a href="#6-Generator函数和async函数" class="headerlink" title="#6.Generator函数和async函数"></a><a href="http://hall.idocore.com/views/es6/common.html#_6-generator函数和async函数" target="_blank" rel="noopener">#</a><strong>6.Generator函数和async函数</strong></h2><p>Generator可以通过 yield关键字，把函数的执行流挂起，为改变执行流程提供了可能，从而为异步编程提供解决方案。</p>
<h3 id="Generator-函数组成"><a href="#Generator-函数组成" class="headerlink" title="#Generator 函数组成"></a><a href="http://hall.idocore.com/views/es6/common.html#generator-函数组成" target="_blank" rel="noopener">#</a><strong>Generator 函数组成</strong></h3><p>Generator 有两个区分于普通函数的部分：是在 function 后面，函数名之前有个 * ；函数内部有 yield 表达式。</p>
<p>其中 * 用来表示函数为 Generator 函数，yield 用来定义函数内部的状态。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"one"</span>);</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">'1'</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"two"</span>);</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">'2'</span>; </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"three"</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">'3'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="执行机制"><a href="#执行机制" class="headerlink" title="#执行机制"></a><a href="http://hall.idocore.com/views/es6/common.html#执行机制" target="_blank" rel="noopener">#</a><strong>执行机制</strong></h3><p>调用 Generator 函数和调用普通函数一样，在函数名后面加上()即可，但是 Generator 函数不会像普通函数一样立即执行，而是返回一个指向内部状态对象的指针，所以要调用遍历器对象Iterator 的 next 方法，指针就会从函数头部或者上一次停下来的地方开始执行，直到遇到yield。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">func.next();</span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// &#123;value: "1", done: false&#125;</span></span><br><span class="line"> </span><br><span class="line">func.next();</span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// &#123;value: "2", done: false&#125;</span></span><br><span class="line"> </span><br><span class="line">func.next();</span><br><span class="line"><span class="comment">// three</span></span><br><span class="line"><span class="comment">// &#123;value: "3", done: true&#125;</span></span><br><span class="line"> </span><br><span class="line">func.next();</span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>
<p>第一次调用 next 方法时，从 Generator 函数的头部开始执行，先是打印了 one ,执行到 yield 就停下来，并将yield 后边表达式的值 ‘1’，作为返回对象的 value 属性值，此时函数还没有执行完， 返回对象的 done 属性值是 false。 第二次调用 next 方法时，同上步 。 第三次调用 next 方法时，先是打印了 three ，然后执行了函数的返回操作，并将 return 后面的表达式的值，作为返回对象的 value 属性值，此时函数已经结束，多以 done 属性值为true 。 第四次调用 next 方法时， 此时函数已经执行完了，所以返回 value 属性值是 undefined ，done 属性值是 true 。如果执行第三步时，没有 return 语句的话，就直接返回 {value: undefined, done: true}。</p>
<p>注意点：当 next 传入参数的时候，该参数会作为上一步yield的返回值</p>
<h4 id="return方法"><a href="#return方法" class="headerlink" title="#return方法"></a><a href="http://hall.idocore.com/views/es6/common.html#return方法" target="_blank" rel="noopener">#</a><strong>return方法</strong></h4><p>return 方法返回给定值，并结束遍历Generator函数。return方法提供参数时，返回该参数；不提供参数时，返回 undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = foo();</span><br><span class="line">f.next();</span><br><span class="line"><span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line">f.return(<span class="string">"foo"</span>);</span><br><span class="line"><span class="comment">// &#123;value: "foo", done: true&#125;</span></span><br><span class="line">f.next();</span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="keyword">throw</span> 方法</span><br><span class="line"><span class="keyword">throw</span> 方法可以再 Generator 函数体外面抛出异常，再函数体内部捕获。</span><br><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'catch inner'</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> i = g();</span><br><span class="line">i.next();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i.throw(<span class="string">'a'</span>);</span><br><span class="line">  i.throw(<span class="string">'b'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'catch outside'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// catch inner a</span></span><br><span class="line"><span class="comment">// catch outside b</span></span><br></pre></td></tr></table></figure>
<p>遍历器对象抛出了两个错误，第一个被 Generator 函数内部捕获，第二个因为函数体内部的catch 函数已经执行过了，不会再捕获这个错误，所以这个错误就抛出 Generator 函数体，被函数体外的 catch 捕获。</p>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="#使用场景"></a><a href="http://hall.idocore.com/views/es6/common.html#使用场景" target="_blank" rel="noopener">#</a><strong>使用场景</strong></h4><p>为不具备 Iterator 接口的对象提供遍历方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">objectEntries</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> propKeys = <span class="built_in">Reflect</span>.ownKeys(obj);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> propKey <span class="keyword">of</span> propKeys) &#123;</span><br><span class="line">        <span class="keyword">yield</span> [propKey, obj[propKey]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> jane = &#123; <span class="attr">first</span>: <span class="string">'Jane'</span>, <span class="attr">last</span>: <span class="string">'Doe'</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key,value] <span class="keyword">of</span> objectEntries(jane)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first: Jane</span></span><br><span class="line"><span class="comment">// last: Doe</span></span><br></pre></td></tr></table></figure>
<p>Reflect.ownKeys() 返回对象所有的属性，不管属性是否可枚举，包括 Symbol。jane 原生是不具备 Iterator 接口无法通过 for… of遍历。这边用了 Generator 函数加上了 Iterator 接口，所以就可以遍历 jane 对象了。</p>
<h3 id="async函数"><a href="#async函数" class="headerlink" title="#async函数"></a><a href="http://hall.idocore.com/views/es6/common.html#async函数" target="_blank" rel="noopener">#</a><strong>async函数</strong></h3><p>async 是 ES7 才有的与异步操作有关的关键字，和 Promise ， Generator 有很大关联的</p>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="#返回值"></a><a href="http://hall.idocore.com/views/es6/common.html#返回值" target="_blank" rel="noopener">#</a><strong>返回值</strong></h4><p>async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">helloAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"helloAsync"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(helloAsync())  <span class="comment">// Promise &#123;&lt;resolved&gt;: "helloAsync"&#125;</span></span><br><span class="line"> </span><br><span class="line">helloAsync().then(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(v);         <span class="comment">// helloAsync</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>async 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await 就会先暂停执行 ，等到触发的异步操作完成后，恢复 async 函数的执行并返回解析值。 await 关键字仅在 async function 中有效。如果在async function函数体外使用await，你只会得到一个语法错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAwait</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">//一个请求</span></span><br><span class="line">     <span class="built_in">console</span>.log(response)</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">helloAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">await</span> testAwait();</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"end"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">helloAsync();</span><br><span class="line"><span class="comment">// response</span></span><br><span class="line"><span class="comment">// end</span></span><br></pre></td></tr></table></figure>
<p>应用场景：先请求数据，再根据请求到的数据完成下一个请求。</p>
<p>正常情况下，await 命令后面是一个 Promise 对象，它也可以跟其他值，如字符串，布尔值，数值以及普通函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAwait</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"testAwait"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">helloAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">await</span> testAwait();</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"helloAsync"</span>);</span><br><span class="line">&#125;</span><br><span class="line">helloAsync();</span><br><span class="line"><span class="comment">// testAwait</span></span><br><span class="line"><span class="comment">// helloAsync</span></span><br></pre></td></tr></table></figure>
<p>await针对所跟不同表达式的处理方式： Promise 对象：await 会暂停执行，等待 Promise 对象 resolve，然后恢复 async 函数的执行并返回解析值。 非 Promise 对象：直接返回对应的值。</p>
]]></content>
      <tags>
        <tag>ES6 js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件得通信总结</title>
    <url>/2020/04/11/Vue%E7%BB%84%E4%BB%B6%E5%BE%97%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Vue组件的通信总结"><a href="#Vue组件的通信总结" class="headerlink" title="Vue组件的通信总结"></a>Vue组件的通信总结</h1><h2 id="1、props-emit"><a href="#1、props-emit" class="headerlink" title="#1、props/$emit"></a><a href="http://hall.idocore.com/views/vue/2018/121501.html#_1、props-emit" target="_blank" rel="noopener">#</a>1、props/$emit</h2><p>最常用的一种父子间传递数据的方式。</p>
<blockquote>
<p>父组件通过绑定属性来向子组件传递数据，子组件通过 <code>props</code> 属性来获取对应的数据；子组件通过<code>$emit</code> 事件向父组件发送消息，将自己的数据传递给父组件。</p>
</blockquote>
<p>在某些情况下，需要子组件改变父组件的值，推荐使用(2.3.0+)版本新增的<code>.sync</code>语法糖。 使用方法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A.vue父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;add-modal </span><br><span class="line">      v-<span class="keyword">if</span>=<span class="string">"modalVisiable"</span> </span><br><span class="line">      :visiable.sync=<span class="string">'modalVisiable'</span> </span><br><span class="line">      @submit=<span class="string">"saveForm"</span></span><br><span class="line">    /&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    name: 'A',</span></span><br><span class="line"><span class="regexp">    data()&#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            modalVisiable: false</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// B.vue子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Modal </span><br><span class="line">      v-model=<span class="string">"show"</span></span><br><span class="line">      width=<span class="string">"600"</span></span><br><span class="line">      title=<span class="string">"弹框"</span> </span><br><span class="line">      :loading=<span class="string">'true'</span></span><br><span class="line">      @on-cancel=<span class="string">"$emit('update:visiable', false)"</span></span><br><span class="line">    &gt;</span><br><span class="line">    &lt;<span class="regexp">/Modal&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'A'</span>,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            show: <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        <span class="keyword">this</span>.show = <span class="keyword">this</span>.visiable</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        visiable: &#123;</span><br><span class="line">          type: <span class="built_in">Boolean</span>,</span><br><span class="line">          <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过 this.$emit(‘update:visiable’, false) 来改变父元素的状态</p>
<hr>
<h2 id="2、-eventBus事件总线-emit-on"><a href="#2、-eventBus事件总线-emit-on" class="headerlink" title="#2、 eventBus事件总线 $emit/$on"></a><a href="http://hall.idocore.com/views/vue/2018/121501.html#_2、-eventbus事件总线-emit-on" target="_blank" rel="noopener">#</a>2、 eventBus事件总线 $emit/$on</h2><p>使用场景：在中小型项目，作为<code>vuex</code>的替代工具。在组件之中引入一个新的vue实例，分别调用这个实例的事件触发和监听来实现通信和参数传递。</p>
<p><strong>使用方法：</strong></p>
<p>（1）main.js全局注册</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//第一种注册方式</span></span><br><span class="line"><span class="keyword">var</span> EventBus = <span class="keyword">new</span> Vue();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Object</span>.defineProperties(Vue.prototype, &#123;</span><br><span class="line">        $bus: &#123;</span><br><span class="line">            <span class="keyword">get</span>: function () &#123;</span><br><span class="line">                <span class="keyword">return</span> EventBus</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种注册方式</span></span><br><span class="line">Vue.prototype.$bus = <span class="keyword">new</span> Vue()</span><br></pre></td></tr></table></figure>
<p>（2）发送组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$bus.$emit(<span class="string">"updateMessage"</span>, <span class="keyword">this</span>.message)</span><br></pre></td></tr></table></figure>
<p><code>updateMessage</code>事件可以是<strong>字符串、数组、对象</strong>等任何格式</p>
<p>如果事件在多页面运用，要在销毁该页面时接触绑定，要不然在其他页面也触发了该页面的事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeDestroy () &#123;</span><br><span class="line">     $<span class="keyword">this</span>.$bus.$off(<span class="string">'updateMessage'</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>(3)接收组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$bus.$on(<span class="string">'updateMessage'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(value);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="3、-provide-inject"><a href="#3、-provide-inject" class="headerlink" title="#3、 provide / inject"></a><a href="http://hall.idocore.com/views/vue/2018/121501.html#_3、-provide-inject" target="_blank" rel="noopener">#</a>3、 provide / inject</h2><blockquote>
<p>这对选项需要一起使用，父组件使用 <code>provide</code> 向下提供数据，其下所有子组件都可以通过<code>inject</code>注入。不管中间隔了多少代，都可以注入多个来自不同父级提供的数据</p>
<ul>
<li><code>provide</code> 选项是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性</li>
<li><code>inject</code> 选项是一个字符串数组，或一个对象</li>
</ul>
</blockquote>
<p>使用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;<span class="comment">// 父组件</span></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;com-a&gt;&lt;<span class="regexp">/com-a&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import ComA from './</span>a<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  '</span>name<span class="string">': '</span>home<span class="string">',</span></span><br><span class="line"><span class="string">  '</span>components<span class="string">': &#123;ComA&#125;,</span></span><br><span class="line"><span class="string">  provide() &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      '</span>a<span class="string">': '</span>Hello<span class="string">',</span></span><br><span class="line"><span class="string">      '</span>show<span class="string">': val =&gt; !val</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;<span class="comment">// 子组件</span></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button @click=<span class="string">"showFn(textShow)"</span>&gt;点击我切换下面文字展示及隐藏</span><br><span class="line">    &lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div v-if="textShow"&gt;我是一段随意被操控的文字&#123;&#123;a&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'ComA'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'textShow'</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'inject'</span>: [</span><br><span class="line">    <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'show'</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'methods'</span>: &#123;</span><br><span class="line">    showFn(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.textShow = <span class="keyword">this</span>.show(val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果是在app.vue 文件（根文件）里面全局注册信息，就可以在整个路由里面去引用 （类似于全局的数据管理vuex）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;<span class="regexp">/router-view&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    name: 'app',</span></span><br><span class="line"><span class="regexp">    provide()&#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            app: this</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>
<p>接下来任何组件只要通过<code>inject</code>注入app的话，都可以直接通过<code>this.app.xx</code> 来访问<code>app.vue</code> 的所有实例。</p>
<hr>
<h2 id="4、-parent-children"><a href="#4、-parent-children" class="headerlink" title="#4、 $parent / $children"></a><a href="http://hall.idocore.com/views/vue/2018/121501.html#_4、-parent-children" target="_blank" rel="noopener">#</a>4、 $parent / $children</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$parent 可以用来从一个子组件访问父组件的实例。它提供了一种机会，可以在后期随时触达父级组件，来替代将数据以 prop 的方式传入子组件的方式</span><br></pre></td></tr></table></figure>
<p><strong>子组件：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"b-content"</span>&gt;</span><br><span class="line">    &lt;div&gt;我是子组件&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&#123;&#123;msgText&#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'childComp'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="string">'msgText'</span>: <span class="string">''</span>,</span><br><span class="line">      <span class="string">'childMsg'</span>: <span class="string">'来自子元素的呐喊'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.msgText = <span class="keyword">this</span>.$parent.parentMsg;</span><br><span class="line">    <span class="comment">// MsgText: 来自父组件的呵呵</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>$children</code>可以遍历全部子组件，需要注意 <code>$children</code> 并不保证顺序，也不是响应式的。</p>
<p><strong>父组件：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"b-content"</span>&gt;</span><br><span class="line">    &lt;div&gt;我是父组件&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;child-comp&gt;&lt;/</span>child-comp&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> childComp <span class="keyword">from</span> <span class="string">'./child'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'parentComp'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'parentMsg'</span>: <span class="string">'来自父组件的呵呵'</span>&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'components'</span>: &#123;childComp&#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// 读取子组件数据，注意$children子组件的排序是不安全的</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$children[<span class="number">0</span>].childMsg);</span><br><span class="line">    <span class="comment">// 来自子元素的呐喊</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="5、-root-amp-refs"><a href="#5、-root-amp-refs" class="headerlink" title="#5、 $root &amp; refs"></a><a href="http://hall.idocore.com/views/vue/2018/121501.html#_5、-root-refs" target="_blank" rel="noopener">#</a>5、 $root &amp; refs</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$root 属性是在每个 new Vue 实例的子组件中，其根实例可以通过 $root 属性进行访问</span><br></pre></td></tr></table></figure>
<p>Vue 根实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue 根实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    baz: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>所有的子组件都可以将这个实例作为一个全局 store 来访问或使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取根组件的数据</span></span><br><span class="line"><span class="keyword">this</span>.$root.foo</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入根组件的数据</span></span><br><span class="line"><span class="keyword">this</span>.$root.foo = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问根组件的计算属性</span></span><br><span class="line"><span class="keyword">this</span>.$root.bar</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用根组件的方法</span></span><br><span class="line"><span class="keyword">this</span>.$root.baz()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>$refs属性当你需要在 <code>JavaScript</code> 里直接访问一个子组件。你可以通过 <code>ref</code> 这个 <code>attribute</code> 为子组件赋予一个 ID 引用。 一个对象，持有注册过 <code>ref</code> 特性 的所有 DOM 元素和组件实例。例如：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;my-component ref=<span class="string">"childrenCompA"</span>&gt;&lt;<span class="regexp">/my-component&gt;</span></span><br><span class="line"><span class="regexp">访问子组件：this.$refs.childrenCompA</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="6、-Vuex"><a href="#6、-Vuex" class="headerlink" title="#6、 Vuex"></a><a href="http://hall.idocore.com/views/vue/2018/121501.html#_6、-vuex" target="_blank" rel="noopener">#</a>6、 Vuex</h2><p>在做中大型的单页应用的时候，例如需要多人协作开发，全局维护登录状态等，我们可以选择vuex来进行状态管理。</p>
<blockquote>
<p><code>state</code>里面是存储在vuex里的数据，通过在根实例中注册 <code>store</code> 选项，该 <code>store</code> 实例会注入到根组件下的所有子组件中，且子组件能通过 <code>this.$store</code> 访问到。</p>
</blockquote>
<p>当需要获取多个数据时，可以通过下面这种方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">computed:&#123;</span><br><span class="line">    ...mapState(<span class="string">'commissionSetting'</span>, [</span><br><span class="line">      <span class="string">'listData'</span></span><br><span class="line">    ])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>不是所有的状态都适合放在vuex里面，有些状态只属于单个组件，所以还是要视情况来定。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; mutations` 更改 `Vuex` 的 `store` 中的状态的唯一方法是提交 `mutation</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  updateListData(state, payload)&#123;</span><br><span class="line">    state.listData = payload</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不能直接调用<code>updateListData</code>，需要以相应的<code>type</code> 调用 <code>store.commit</code> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.commit(<span class="string">'updateListData'</span>, data)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>actions 提交的是 mutation，而不是直接变更状态。 Action 可以包含任意异步操作。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> getListAction(&#123;commit&#125;, params)&#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> getList(params)</span><br><span class="line">    <span class="keyword">const</span> &#123;code, message, data&#125; = result</span><br><span class="line">    <span class="keyword">if</span>(code === SUCCESS &amp;&amp; data)&#123;</span><br><span class="line">      <span class="comment">// 提交更改数据</span></span><br><span class="line">      commit(<span class="string">'updateListData'</span>, data.rows)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      vueInit.$Message.error(&#123;</span><br><span class="line">        content: message || <span class="string">'请您稍后再试~'</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p>
<p>应用层级的状态应该集中到单个 <code>store</code> 对象中。 提交 <code>mutation</code> 是更改状态的唯一方法，并且这个过程是同步的。 异步逻辑都应该封装到 <code>action</code> 里面。</p>
<p>只要你遵守以上规则，如何组织代码随你便。如果你的 <code>store</code>文件太大，只需将 <code>action、mutation</code> 和 <code>getter</code> 分割到单独的文件。</p>
]]></content>
      <tags>
        <tag>-vue</tag>
      </tags>
  </entry>
  <entry>
    <title>关于a标签target——blank使用rel=noopener</title>
    <url>/2020/04/05/%E5%85%B3%E4%BA%8Ea%E6%A0%87%E7%AD%BEtarget%E2%80%94%E2%80%94blank%E4%BD%BF%E7%94%A8rel-noopener/</url>
    <content><![CDATA[<h3 id="一、为什么要使用rel-’noopener’？"><a href="#一、为什么要使用rel-’noopener’？" class="headerlink" title="一、为什么要使用rel=’noopener’？"></a>一、为什么要使用rel=’noopener’？</h3><p>先举个栗子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"b.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>da<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.opener.location.href =<span class="string">"http://google.com"</span></span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中在a.html中有个超链接，点击后打开新的tab页，神奇的发现原tab页已经变成了谷歌页面。原因是使用<code>target=_blank</code>打开新的窗口时，赋予了新的窗口一些权限可以操作原tab页，其中<code>window.location</code>就是一个。不使用 <code>rel=noopener</code>就是让用户暴露在钓鱼攻击上。</p>
<p><img src="/2020/04/05/关于a标签target——blank使用rel-noopener/image-20200405012544513.png" alt="image-20200405012544513"></p>
<p>window.opener</p>
<h3 id="二、使用rel-noopener"><a href="#二、使用rel-noopener" class="headerlink" title="二、使用rel=noopener"></a>二、使用rel=noopener</h3><p>为了防止<code>window.opener</code>被滥用，在使用<code>targrt=_blank</code>时需要加上<code>rel=noopener</code><br> <code>[</code>](<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>)</p>
<h3 id="三、rel-norefferrer"><a href="#三、rel-norefferrer" class="headerlink" title="三、rel=norefferrer"></a>三、rel=norefferrer</h3><p><code>rel=noopener</code>支持chrome49和opera36，不支持火狐，为了兼容需要加上<code>rel=noreferrer</code><br> <code>[</code>](<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>)</p>
<h3 id="四、eslint提示"><a href="#四、eslint提示" class="headerlink" title="四、eslint提示"></a>四、eslint提示</h3><p><img src="/2020/04/05/关于a标签target——blank使用rel-noopener/image-20200405012621821.png" alt="image-20200405012621821"></p>
<p>eslint提示</p>
<p>eslint提示后根据文档实际尝试了一下，之前忽略的小问题居然还有这么大安全问题，网络安全不可小觑。</p>
]]></content>
      <tags>
        <tag>-vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-admin-template学习及升级改造</title>
    <url>/2020/04/04/vue-admin-template%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0/</url>
    <content><![CDATA[<h4 id="vue-admin-template学习及升级改造"><a href="#vue-admin-template学习及升级改造" class="headerlink" title="vue-admin-template学习及升级改造"></a>vue-admin-template学习及升级改造</h4><p><a href="https://panjiachen.github.io/vue-element-admin-site/zh/" target="_blank" rel="noopener">vue-element-admin官网</a></p>
<p>下模板地址 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> clone the project</span><br><span class="line">git clone https://github.com/PanJiaChen/vue-admin-template.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> enter the project directory</span><br><span class="line">cd vue-admin-template</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> install dependency</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> develop</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>项目目录结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── build                      <span class="comment"># 构建相关</span></span><br><span class="line">├── mock                       <span class="comment"># 项目mock 模拟数据</span></span><br><span class="line">├── plop-templates             <span class="comment"># 基本模板</span></span><br><span class="line">├── public                     <span class="comment"># 静态资源</span></span><br><span class="line">│   │── favicon.ico            <span class="comment"># favicon图标</span></span><br><span class="line">│   └── index.html             <span class="comment"># html模板</span></span><br><span class="line">├── src                        <span class="comment"># 源代码</span></span><br><span class="line">│   ├── api                    <span class="comment"># 所有请求</span></span><br><span class="line">│   ├── assets                 <span class="comment"># 主题 字体等静态资源</span></span><br><span class="line">│   ├── components             <span class="comment"># 全局公用组件</span></span><br><span class="line">│   ├── directive              <span class="comment"># 全局指令</span></span><br><span class="line">│   ├── filters                <span class="comment"># 全局 filter</span></span><br><span class="line">│   ├── icons                  <span class="comment"># 项目所有 svg icons</span></span><br><span class="line">│   ├── lang                   <span class="comment"># 国际化 language</span></span><br><span class="line">│   ├── layout                 <span class="comment"># 全局 layout</span></span><br><span class="line">│   ├── router                 <span class="comment"># 路由</span></span><br><span class="line">│   ├── store                  <span class="comment"># 全局 store管理</span></span><br><span class="line">│   ├── styles                 <span class="comment"># 全局样式</span></span><br><span class="line">│   ├── utils                  <span class="comment"># 全局公用方法</span></span><br><span class="line">│   ├── vendor                 <span class="comment"># 公用vendor</span></span><br><span class="line">│   ├── views                  <span class="comment"># views 所有页面</span></span><br><span class="line">│   ├── App.vue                <span class="comment"># 入口页面</span></span><br><span class="line">│   ├── main.js                <span class="comment"># 入口文件 加载组件 初始化等</span></span><br><span class="line">│   └── permission.js          <span class="comment"># 权限管理</span></span><br><span class="line">├── tests                      <span class="comment"># 测试</span></span><br><span class="line">├── .env.xxx                   <span class="comment"># 环境变量配置</span></span><br><span class="line">├── .eslintrc.js               <span class="comment"># eslint 配置项</span></span><br><span class="line">├── .babelrc                   <span class="comment"># babel-loader 配置</span></span><br><span class="line">├── .travis.yml                <span class="comment"># 自动化CI配置</span></span><br><span class="line">├── vue.config.js              <span class="comment"># vue-cli 配置</span></span><br><span class="line">├── postcss.config.js          <span class="comment"># postcss 配置</span></span><br><span class="line">└── package.json               <span class="comment"># package.json</span></span><br></pre></td></tr></table></figure>
<p>运行项目第一个界面是登录界面，登录代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleLogin() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs.loginForm.validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">          <span class="keyword">this</span>.loading = <span class="literal">true</span>;</span><br><span class="line">          <span class="comment">//调用user模块红的login</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"点击登陆按钮"</span>)</span><br><span class="line">          <span class="keyword">this</span>.$store.dispatch(<span class="string">'user/login'</span>, <span class="keyword">this</span>.loginForm).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"登录成功"</span>);</span><br><span class="line">            <span class="keyword">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="keyword">this</span>.redirect || <span class="string">'/'</span> &#125;);</span><br><span class="line">            <span class="keyword">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">          &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'error submit!!'</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>this.$store.dispatch(‘user/login’, this.loginForm)  点击过登录按钮后，调用了$store里的一个方法，名叫login</p>
<p>下面来看看$store里的这个login方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; login, logout, getInfo,self&#125; <span class="keyword">from</span> <span class="string">'@/api/user'</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken, setToken, removeToken &#125; <span class="keyword">from</span> <span class="string">'@/utils/auth'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// user login</span></span><br><span class="line">  login(&#123; commit &#125;, userInfo) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = userInfo;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"vuex中的请求"</span>)</span><br><span class="line">      login(&#123; <span class="attr">username</span>: username.trim(), <span class="attr">password</span>: password &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'vuex中'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">        <span class="keyword">const</span> &#123; data &#125; = response;</span><br><span class="line">        commit(<span class="string">'SET_TOKEN'</span>, data.token);<span class="comment">//存在vueX中</span></span><br><span class="line">        setToken(data.token);<span class="comment">//存在cookie中</span></span><br><span class="line">        resolve();</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">        reject(error);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>两个login?  熟悉vuex的话应该知道，第一个login是$store中的方法，第二个login方法是，api里的login方法，用来调用接口的</p>
<p>再来看看api中的login方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">'/user/login'</span>,</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面是api中的login方法，它调用了request.js，request.js是封装了axios，是用来请求后台接口的，如果这个接口请求成功了，就回到了第一步中的.then()方法中</p>
<p>request.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123; MessageBox, Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">'@/utils/auth'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.VUE_APP_BASE_API, <span class="comment">// url = base url + request url</span></span><br><span class="line">  <span class="comment">// withCredentials: true, // send cookies when cross-domain requests</span></span><br><span class="line">  timeout: <span class="number">5000</span> <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// request interceptor</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// do something before request is sent</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (store.getters.token) &#123;</span><br><span class="line">      <span class="comment">// let each request carry token</span></span><br><span class="line">      <span class="comment">// ['X-Token'] is a custom headers key</span></span><br><span class="line">      <span class="comment">// please modify it according to the actual situation</span></span><br><span class="line">      config.headers[<span class="string">'X-Token'</span>] = getToken()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// do something with request error</span></span><br><span class="line">    <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// response interceptor</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * If you want to get http information such as headers or status</span></span><br><span class="line"><span class="comment">   * Please return  response =&gt; response</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Determine the request status by custom code</span></span><br><span class="line"><span class="comment">   * Here is just an example</span></span><br><span class="line"><span class="comment">   * You can also judge the status by HTTP Status Code</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.data</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if the custom code is not 20000, it is judged as an error.</span></span><br><span class="line">    <span class="keyword">if</span> (res.code !== <span class="number">20000</span>) &#123;</span><br><span class="line">      Message(&#123;</span><br><span class="line">        message: res.message || <span class="string">'Error'</span>,</span><br><span class="line">        type: <span class="string">'error'</span>,</span><br><span class="line">        duration: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;</span></span><br><span class="line">      <span class="keyword">if</span> (res.code === <span class="number">50008</span> || res.code === <span class="number">50012</span> || res.code === <span class="number">50014</span>) &#123;</span><br><span class="line">        <span class="comment">// 重新登录</span></span><br><span class="line">        MessageBox.confirm(<span class="string">'You have been logged out, you can cancel to stay on this page, or log in again'</span>, <span class="string">'Confirm logout'</span>, &#123;</span><br><span class="line">          confirmButtonText: <span class="string">'Re-Login'</span>,</span><br><span class="line">          cancelButtonText: <span class="string">'Cancel'</span>,</span><br><span class="line">          type: <span class="string">'warning'</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          store.dispatch(<span class="string">'user/resetToken'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            location.reload()</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(res.message || <span class="string">'Error'</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err'</span> + error) <span class="comment">// for debug</span></span><br><span class="line">    Message(&#123;</span><br><span class="line">      message: error.message,</span><br><span class="line">      type: <span class="string">'error'</span>,</span><br><span class="line">      duration: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure>
<p>请求拦截和响应拦截就不多说了。</p>
<p>讲下permission </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">'nprogress'</span> <span class="comment">// progress bar  进度条插件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'nprogress/nprogress.css'</span> <span class="comment">// progress bar style</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">'@/utils/auth'</span> <span class="comment">// get token from cookie</span></span><br><span class="line"><span class="keyword">import</span> getPageTitle <span class="keyword">from</span> <span class="string">'@/utils/get-page-title'</span>    <span class="comment">//页面标题</span></span><br><span class="line"></span><br><span class="line">NProgress.configure(&#123; <span class="attr">showSpinner</span>: <span class="literal">false</span> &#125;) <span class="comment">// NProgress Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">'/login'</span>] <span class="comment">// no redirect whitelist 不需要token白名单</span></span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="keyword">async</span>(to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// start progress bar</span></span><br><span class="line">  NProgress.start()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set page title</span></span><br><span class="line">  <span class="built_in">document</span>.title = getPageTitle(to.meta.title)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// determine whether the user has logged in</span></span><br><span class="line">  <span class="keyword">const</span> hasToken = getToken()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasToken) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">      <span class="comment">// if is logged in, redirect to the home page 如果有token访问登录界面跳到根路径</span></span><br><span class="line">      next(&#123; <span class="attr">path</span>: <span class="string">'/'</span> &#125;)</span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> hasGetUserInfo = store.getters.name</span><br><span class="line">      <span class="keyword">if</span> (hasGetUserInfo) &#123;</span><br><span class="line">          <span class="comment">//如果有token且有用户信息直接进去</span></span><br><span class="line">        next()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//有token 没用户信息  去请求获取用户信息，再进去页面</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// get user info</span></span><br><span class="line">          <span class="keyword">await</span> store.dispatch(<span class="string">'user/getInfo'</span>)</span><br><span class="line"></span><br><span class="line">          next()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="comment">// remove token and go to login page to re-login</span></span><br><span class="line">           <span class="comment">//请求用户信息失败跳到登录界面并记录当前失败界面</span></span><br><span class="line">          <span class="keyword">await</span> store.dispatch(<span class="string">'user/resetToken'</span>)</span><br><span class="line">          Message.error(error || <span class="string">'Has Error'</span>)</span><br><span class="line">          next(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">          NProgress.done()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* has no token 没有token 查看是否在白名单 是的话放行 否则去登录也并记录访问页面*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (whiteList.indexOf(to.path) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="comment">// in the free login whitelist, go directly</span></span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// other pages that do not have permission to access are redirected to the login page.</span></span><br><span class="line">      next(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// finish progress bar</span></span><br><span class="line">  NProgress.done()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>有token：再看看是不是去登录页的，登录页肯定不能拦截的，如果是登录页就直接放行。如果不是登录页，就要看看本地有没有用户信息，看看cookie中有没有用户信息（不一定是token，也可能是localstorage）。如果有用户信息，放行。如果没有用户信息，就调用接口去获取登录信息，然后后面还有一点代码，涉及到了动态添加路由（这里先说到这，后面具体说动态添加权限路由的事）。获取到用户信息后放行。如果在获取用户信息的过程中报错，则回到登录页</p>
<p>无token：先看看用户要进入的页面是不是在白名单内，一般登录、注册、忘记密码都是在白名单内的，这些页面，在无token的情况下也是直接放行。如果不在白名单内，滚回登录页。</p>
<p>以上就是element-admin的登录逻辑了。</p>
<p>接下来讲 路由和侧边栏</p>
<h5 id="路由和侧边栏"><a href="#路由和侧边栏" class="headerlink" title="路由和侧边栏"></a>路由和侧边栏</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当设置 true 的时候该路由不会在侧边栏出现 如401，login等页面，或者如一些编辑页面/edit/1</span></span><br><span class="line">hidden: <span class="literal">true</span> <span class="comment">// (默认 false)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当设置 noRedirect 的时候该路由在面包屑导航中不可被点击</span></span><br><span class="line">redirect: <span class="string">'noRedirect'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当你一个路由下面的 children 声明的路由大于1个时，自动会变成嵌套的模式--如组件页面</span></span><br><span class="line"><span class="comment">//只有一个时，会将那个子路由当做根路由显示在侧边栏--如引导页面</span></span><br><span class="line"><span class="comment">//若你想不管路由下面的 children 声明的个数都显示你的根路由</span></span><br><span class="line"><span class="comment">//你可以设置 alwaysShow: true，这样它就会忽略之前定义的规则，一直显示根路由</span></span><br><span class="line">alwaysShow: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">name: <span class="string">'router-name'</span> <span class="comment">//设定路由的名字，一定要填写不然使用&lt;keep-alive&gt;时会出现各种问题</span></span><br><span class="line">meta: &#123;</span><br><span class="line">  roles: [<span class="string">'admin'</span>, <span class="string">'editor'</span>] <span class="comment">//设置该路由进入的权限，支持多个权限叠加</span></span><br><span class="line">  title: <span class="string">'title'</span> <span class="comment">//设置该路由在侧边栏和面包屑中展示的名字</span></span><br><span class="line">  icon: <span class="string">'svg-name'</span> <span class="comment">//设置该路由的图标</span></span><br><span class="line">  noCache: <span class="literal">true</span> <span class="comment">//如果设置为true，则不会被 &lt;keep-alive&gt; 缓存(默认 false)</span></span><br><span class="line">  breadcrumb: <span class="literal">false</span> <span class="comment">// 如果设置为false，则不会在breadcrumb面包屑中显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>侧边栏使用的是element的el-menu，一些配置可以看文档<a href="https://element.eleme.cn/#/zh-CN/component/menu" target="_blank" rel="noopener">element-navmenu</a></p>
<p>点击登录就会进去有layout布局的页面</p>
<p><img src="/2020/04/04/vue-admin-template学习及升级改造/image-20200404210454238.png" alt="image-20200404210454238"></p>
<p>页面布局目录</p>
<blockquote>
<p>layout</p>
<blockquote>
<p>components</p>
<blockquote>
<p>Sidebar</p>
<blockquote>
<p>FixOSBug.js  响应式布局适应手机端？</p>
<p>index.vue   侧边栏菜单 </p>
<p>item.vue   配置菜单icon和内容</p>
<p>Link.vue   将菜单包起来实现点击跳转</p>
<p>Logo.vue   顶部logo</p>
</blockquote>
<p>AppMain.vue    主要窗口容器</p>
<p>index.js    导出三个部分容器</p>
<p>Navbar.vue    面包屑容器</p>
</blockquote>
<p>mixin</p>
<p>index.vue    将页面分为侧边栏   面包屑导航栏   主要展示窗口  三部分</p>
</blockquote>
</blockquote>
<h2 id="点击侧边栏-刷新当前路由"><a href="#点击侧边栏-刷新当前路由" class="headerlink" title="点击侧边栏 刷新当前路由"></a>点击侧边栏 刷新当前路由</h2><p>点击相同菜单实现路由刷新</p>
<p>第一个想到的是用query，添加点击事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//SidebarItem.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;!item.hidden&quot;&gt;</span><br><span class="line">    &lt;template v-if=&quot;hasOneShowingChild(item.children,item) &amp;&amp; (!onlyOneChild.children||onlyOneChild.noShowingChildren)&amp;&amp;!item.alwaysShow&quot;&gt;</span><br><span class="line">      &lt;app-link v-if=&quot;onlyOneChild.meta&quot; :to=&quot;resolvePath(onlyOneChild.path)&quot;&gt;</span><br><span class="line">        &lt;el-menu-item :index=&quot;resolvePath(onlyOneChild.path)&quot; :class=&quot;&#123;&apos;submenu-title-noDropdown&apos;:!isNest&#125;&quot;  @click=&quot;clickLink(onlyOneChild.path)&quot;&gt;</span><br><span class="line">          &lt;item :icon=&quot;onlyOneChild.meta.icon||(item.meta&amp;&amp;item.meta.icon)&quot; :title=&quot;onlyOneChild.meta.title&quot; /&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">      &lt;/app-link&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-submenu v-else ref=&quot;subMenu&quot; :index=&quot;resolvePath(item.path)&quot; popper-append-to-body&gt;</span><br><span class="line">      &lt;template slot=&quot;title&quot;&gt;</span><br><span class="line">        &lt;item v-if=&quot;item.meta&quot; :icon=&quot;item.meta &amp;&amp; item.meta.icon&quot; :title=&quot;item.meta.title&quot; /&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;sidebar-item</span><br><span class="line">        v-for=&quot;child in item.children&quot;</span><br><span class="line">        :key=&quot;child.path&quot;</span><br><span class="line">        :is-nest=&quot;true&quot;</span><br><span class="line">        :item=&quot;child&quot;</span><br><span class="line">        :base-path=&quot;resolvePath(child.path)&quot;</span><br><span class="line">        class=&quot;nest-menu&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/el-submenu&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    ...</span><br><span class="line">    export default&#123;</span><br><span class="line">          ....</span><br><span class="line">        methods:&#123;</span><br><span class="line">			 clickLink(path) &#123;</span><br><span class="line">              this.$router.push(&#123;</span><br><span class="line">                path,</span><br><span class="line">                query: &#123;</span><br><span class="line">                  t: +new Date() // 保证每次点击路由的query项都是不一样的，确保会重新刷新view</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>这样子的话是有进度条改变，但是怎么知道页面有没有刷新呢？在form页面created的时候打印数据</p>
<p>看下有没有重新打印数据即可知道有没有刷新</p>
<p>测试这种方式是不可行的</p>
<p>感觉就是因为 和 link那个冲突了吧  于是干脆 在link的to那里  添加   ？t = new Date（）</p>
<p>结果发现还是不可行  分析应该是日期渲染的时候已经是固定了，不会再变了，因此点击时还是旧的时间</p>
<p>和没有添加是一样的</p>
<p>最后干脆用页面重定向吧 先固定跳转到一个页面再根据传过来的参数跳转到响应界面</p>
<p>在views上添加一个文件夹 redirect  地下创建一个index.vue</p>
<p>路由上添加页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js  路由</span></span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/redirect'</span>,</span><br><span class="line">    name: <span class="string">'redirect'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../views/redirect/index'</span>], resolve)</span><br><span class="line">    hidden: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后再到link.vue上做响应处理 跳转到 redirect界面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//link.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- eslint-disable vue/require-component-is --&gt;</span><br><span class="line">  &lt;component v-bind=&quot;linkProps(to)&quot;&gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;/component&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; isExternal &#125; from &apos;@/utils/validate&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    to: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    linkProps(url) &#123;</span><br><span class="line">      if (isExternal(url)) &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          is: &apos;a&apos;,</span><br><span class="line">          href: url,</span><br><span class="line">          target: &apos;_blank&apos;</span><br><span class="line">          rel: &apos;noopener&apos; </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return &#123;</span><br><span class="line">        is: &apos;router-link&apos;,</span><br><span class="line">        to: &#123; name: &apos;redirect&apos;, params: &#123; path: url &#125;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>上面发现了个noopener   这个听说是防止进入钓鱼网站的</p>
<p>上面就实现了点击跳转到重定向页面。接下来重定向页面做处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--redirect/index.vue--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;direct&quot;&gt;重定向&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    const &#123; params &#125; = this.$route</span><br><span class="line">    const &#123; path &#125; = params</span><br><span class="line">    console.log(path)</span><br><span class="line">    // window.location.replace(path || &apos;/&apos;)   这种会导致整个页面刷新 侧边栏也刷新</span><br><span class="line">    this.$router.replace(path || &apos;/&apos;)  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>官网是使用 beforeCreate()    测试并不可行 会导致redirect页面没出来页面就刷到别的页面 导致浏览器</p>
<p>地址是 redirect  然而页面确实是点击的页面  但是再点击相同菜单时 浏览器就会报错。</p>
<p><img src="/2020/04/04/vue-admin-template学习及升级改造/image-20200407233532833.png" alt="image-20200407233532833"></p>
<p>一直很详细官方文档的，一开始没看浏览器报错  以为为什么页面和浏览器的地址不同步。百度了一小时</p>
<p>都有，后面改为  created 后问题解决  都会同步，只不过肉眼看得到 浏览器是先跳到 redirect页面再跳转</p>
<p>而已。不过也能接受。  由于刚刚的redirect 页面是没有布置在layout的。导致页面侧边栏页面也会重新</p>
<p>刷新，因此将redirect 页面放到layout里，就可以实现layout不刷新</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js  路由配置</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/redirect'</span>,</span><br><span class="line">    redirect: <span class="string">'/redirect/index'</span>,</span><br><span class="line">    hidden: <span class="literal">true</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/redirect/index'</span>,</span><br><span class="line">        name: <span class="string">'redirect'</span>,</span><br><span class="line">        params: &#123;</span><br><span class="line">          path: <span class="string">''</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../views/redirect/index'</span>], resolve)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>但是还是有个问题，重复点击相同菜单时确实可以刷新，但是点击浏览器的后退还是在当前页面，所以</p>
<p>得解决点击相同页面时采用replace的方式。</p>
<h6 id="解决思路第一个："><a href="#解决思路第一个：" class="headerlink" title="解决思路第一个："></a>解决思路第一个：</h6><p>因为是才用router-link的方式跳转的，所以在该方式下控制  replace属性</p>
<p>但是由于 渲染菜单的时候就会渲染 replace属性，导致并不知道点击的时候是不是就是点击同个菜单</p>
<p>于是采用计算属性，但是还是不行。。。后面放弃在这里修改</p>
<p>思路一  out</p>
<h6 id="思路二-："><a href="#思路二-：" class="headerlink" title="思路二 ："></a>思路二 ：</h6><p>路由前置守卫那里判断，如果跳转的路由的 params的path和当前路由的fullpath一致，则采用replace的</p>
<p>方式进行跳转。于是查阅了路由前置守卫的文档，发现next可以这么用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</span><br><span class="line"></span><br><span class="line">next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。</span><br><span class="line"></span><br><span class="line">next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</span><br><span class="line"></span><br><span class="line">next(&apos;/&apos;) 或者 next(&#123; path: &apos;/&apos; &#125;): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: &apos;home&apos; 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项。</span><br><span class="line"></span><br><span class="line">next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError() 注册过的回调。</span><br></pre></td></tr></table></figure>
<p><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener">全局前置守卫</a></p>
<p>于是在permission文件里添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否是相同路由</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgeReplace</span>(<span class="params">to, from</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (to.params.path === <span class="keyword">from</span>.fullPath) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">judgeReplace(to, <span class="keyword">from</span>) ? next(&#123;<span class="attr">replace</span>: <span class="literal">true</span>&#125;) : next()</span><br></pre></td></tr></table></figure>
<p>但是发现并没有用，感觉又被官网骗了   next({replace: true}) 这个到底是我用的方法错了 还是 咋地？</p>
<p>后面又改变思路</p>
<h6 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h6><p>页面跳转方式不采用component 设置标签为 router-link的方式了</p>
<p>改用@click 跳转  因为点击时是可以知道当前路由和要去的路由的</p>
<p>于是修改 link.vue 的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- eslint-disable vue/require-component-is --&gt;</span><br><span class="line">  &lt;!-- &lt;component v-bind=&quot;linkProps(to)&quot; &gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;/component&gt; --&gt;</span><br><span class="line">  &lt;div @click=&quot;goPath(to)&quot;&gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; isExternal &#125; from &apos;@/utils/validate&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    to: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // linkProps(url) &#123;</span><br><span class="line">    //   if (isExternal(url)) &#123;</span><br><span class="line">    //     return &#123;</span><br><span class="line">    //       is: &apos;a&apos;,</span><br><span class="line">    //       href: url,</span><br><span class="line">    //       target: &apos;_blank&apos;,</span><br><span class="line">    //       rel: &apos;noopener&apos;</span><br><span class="line">    //     &#125;</span><br><span class="line">    //   &#125;</span><br><span class="line">    //   return &#123;</span><br><span class="line">    //     is: &apos;router-link&apos;,</span><br><span class="line">    //     to: &#123; name: &apos;redirect&apos;, params: &#123; path: url &#125;&#125;</span><br><span class="line">    //   &#125;</span><br><span class="line">    // &#125;,</span><br><span class="line">    goPath(url) &#123;</span><br><span class="line">      if (isExternal(url)) &#123;</span><br><span class="line">        return window.open(url)</span><br><span class="line">      &#125;</span><br><span class="line">      if (url === this.$route.fullPath) &#123;</span><br><span class="line">        this.$router.replace(&#123; name: &apos;redirect&apos;, params: &#123; path: url &#125;&#125;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.$router.push(&#123; name: &apos;redirect&apos;, params: &#123; path: url &#125;&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>于是解决了，点击相同路由得后退好几趟得问题</p>
]]></content>
      <tags>
        <tag>-vue</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp总结点东西</title>
    <url>/2020/03/31/uniapp%E6%80%BB%E7%BB%93%E7%82%B9%E4%B8%9C%E8%A5%BF/</url>
    <content><![CDATA[<h4 id="uniapp"><a href="#uniapp" class="headerlink" title="uniapp"></a>uniapp</h4><p><a href="https://uniapp.dcloud.io/quickstart" target="_blank" rel="noopener">uniapp快速上手</a></p>
<p>快速上手啥的就不多讲了，查阅官方文档 更详细</p>
<ol>
<li><p>还是搞个全局样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*每个页面公共css */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*这个很重要，没有这个子页面的 height 100% 都无效*/</span></span><br><span class="line">	<span class="selector-tag">uni-page-body</span> &#123;</span><br><span class="line">		<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* flex相关开始 */</span></span><br><span class="line">	<span class="selector-class">.flex</span> &#123;</span><br><span class="line">		<span class="attribute">display</span>: flex;</span><br><span class="line">		<span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">		<span class="attribute">align-items</span>: center;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="selector-class">.flex-center</span> &#123;</span><br><span class="line">		<span class="attribute">justify-content</span>: center;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="selector-class">.flex-between</span> &#123;</span><br><span class="line">		<span class="attribute">justify-content</span>: space-between;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="selector-class">.flex-around</span> &#123;</span><br><span class="line">		<span class="attribute">justify-content</span>: space-around;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="selector-class">.flex-end</span> &#123;</span><br><span class="line">		<span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="selector-class">.flex-col</span> &#123;</span><br><span class="line">		<span class="attribute">flex-direction</span>: column;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="selector-class">.flex-wrap</span> &#123;</span><br><span class="line">		<span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="selector-class">.flex-grow</span> &#123;</span><br><span class="line">		<span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="selector-class">.flex-shrink</span> &#123;</span><br><span class="line">		<span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/* flex相关结束 */</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 向右的箭头开始 */</span></span><br><span class="line">	<span class="selector-class">.jiantou-right</span>&#123;</span><br><span class="line">		<span class="attribute">position</span>: relative;</span><br><span class="line">		&amp;::after&#123;</span><br><span class="line">			content: '';</span><br><span class="line">			<span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">			<span class="selector-tag">width</span>: 10<span class="selector-tag">rpx</span>;</span><br><span class="line">			<span class="selector-tag">height</span>: 10<span class="selector-tag">rpx</span>;</span><br><span class="line">			<span class="selector-tag">right</span>: 10<span class="selector-tag">rpx</span>;</span><br><span class="line">			<span class="selector-tag">top</span>: 50%;</span><br><span class="line">			<span class="selector-tag">margin-top</span>: <span class="selector-tag">-5rpx</span>;</span><br><span class="line">			<span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(<span class="selector-tag">-45deg</span>);</span><br><span class="line">			<span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>  <span class="selector-id">#909090</span>;</span><br><span class="line">			<span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>  <span class="selector-id">#909090</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/* 向右的箭头结束 */</span></span><br><span class="line">	<span class="comment">/* 文本隐藏开始 */</span></span><br><span class="line">	<span class="selector-class">.eli</span>&#123;</span><br><span class="line">		<span class="attribute">overflow</span>:hidden;</span><br><span class="line">		<span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">		<span class="attribute">white-space</span>:nowrap;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-class">.eli3</span>&#123;</span><br><span class="line">		<span class="attribute">overflow</span>: hidden;</span><br><span class="line">		<span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">		<span class="attribute">display</span>:-webkit-box; </span><br><span class="line">		<span class="attribute">-webkit-box-orient</span>:vertical;</span><br><span class="line">		<span class="attribute">-webkit-line-clamp</span>:<span class="number">3</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-class">.eli4</span>&#123;</span><br><span class="line">		<span class="attribute">overflow</span>:hidden; </span><br><span class="line">		<span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">		<span class="attribute">display</span>:-webkit-box; </span><br><span class="line">		<span class="attribute">-webkit-box-orient</span>:vertical;</span><br><span class="line">		<span class="attribute">-webkit-line-clamp</span>:<span class="number">4</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/* 文本隐藏结束 */</span> </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.uni-input-placeholder</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#B4B4B4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大概举个常用的列出来</p>
</li>
<li><p>封装uniapp的请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//common/config.js</span></span><br><span class="line"><span class="keyword">let</span> url_config = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">'development'</span>)&#123;</span><br><span class="line">    <span class="comment">// 开发环境</span></span><br><span class="line">    url_config = <span class="string">'/api'</span>    <span class="comment">//写成api是因为遇到了 跨域问题</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 生产环境</span></span><br><span class="line">    url_config = <span class="string">'http://XXXXX'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> url_config</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//common/request.js</span></span><br><span class="line"><span class="keyword">import</span> urlConfig <span class="keyword">from</span> <span class="string">'./config.js'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'store'</span></span><br><span class="line"><span class="keyword">const</span> request = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> headers = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">request.globalRequest = <span class="function">(<span class="params">url, method = <span class="string">'GET'</span>, data</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">let</span> accountId = store.state.userInfo.id</span><br><span class="line">	<span class="keyword">let</span> token = store.state.userInfo.token</span><br><span class="line">	<span class="keyword">if</span>(token &amp;&amp; accountId)&#123;</span><br><span class="line">		headers[<span class="string">'token'</span>] = token</span><br><span class="line">		headers[<span class="string">'accountId'</span>] = accountId</span><br><span class="line">	&#125;   </span><br><span class="line">	<span class="keyword">if</span> (method.toLowerCase() == <span class="string">'post'</span>) &#123;</span><br><span class="line">        headers[<span class="string">'content-type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (store.state.mustShowLoading) &#123;</span><br><span class="line">		uni.showLoading(&#123;</span><br><span class="line">			title: store.state.tips,</span><br><span class="line">			mask: <span class="literal">true</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">		store.state.loadingCount++</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'请求了'</span> + store.state.loadingCount)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">console</span>.log(headers)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">		uni.request(&#123;</span><br><span class="line">		    url: urlConfig + url,</span><br><span class="line">		    method,</span><br><span class="line">		    data: data,</span><br><span class="line">		    dataType: <span class="string">'json'</span>,</span><br><span class="line">		    header: headers,</span><br><span class="line">			success: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">const</span> res = data.data</span><br><span class="line">				<span class="keyword">if</span>((res.code !== <span class="number">1</span> || !res.success) &amp;&amp; store.state.mustShowError)&#123;</span><br><span class="line">					uni.showModal(&#123;</span><br><span class="line">						showCancel: <span class="literal">false</span>,</span><br><span class="line">						title: res.info,</span><br><span class="line">						success(btnInfo) &#123;</span><br><span class="line">							<span class="keyword">if</span>(btnInfo.confirm &amp;&amp; (res.status == <span class="string">'666'</span> || res.status == <span class="string">'555'</span> ))&#123;</span><br><span class="line">								uni.redirectTo(&#123;</span><br><span class="line">									url: <span class="string">'/pages/login/login/login'</span></span><br><span class="line">								&#125;)</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;)</span><br><span class="line">					reject(res)</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					resolve(res)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			error: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(store.state.mustShowError)&#123;</span><br><span class="line">					uni.showModal(&#123;</span><br><span class="line">						showCancel: <span class="literal">false</span>,</span><br><span class="line">						title: data</span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;</span><br><span class="line">				reject(data)</span><br><span class="line">			&#125;,</span><br><span class="line">			complete: <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (store.state.loadingCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				  store.state.loadingCount--</span><br><span class="line">				  <span class="built_in">console</span>.log(<span class="string">'响应后还有'</span> + store.state.loadingCount)</span><br><span class="line">				  <span class="keyword">if</span> (store.state.loadingCount == <span class="number">0</span>) &#123;</span><br><span class="line">					store.state.tips = <span class="string">'正在加载'</span></span><br><span class="line">					uni.hideLoading()</span><br><span class="line">				  &#125;</span><br><span class="line">				&#125;</span><br><span class="line">				store.state.mustShowError = <span class="literal">true</span></span><br><span class="line">				store.state.mustShowLoading = <span class="literal">true</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'common/request.js'</span></span><br><span class="line"><span class="keyword">import</span> url <span class="keyword">from</span> <span class="string">'common/config.js'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index.js'</span>;</span><br><span class="line"></span><br><span class="line">Vue.prototype.$store = store  </span><br><span class="line">Vue.prototype.$request = request</span><br><span class="line">Vue.prototype.$url = url</span><br><span class="line">Vue.prototype.$Router = router;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">App.mpType = <span class="string">'app'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    ...App</span><br><span class="line">&#125;)</span><br><span class="line">app.$mount()</span><br></pre></td></tr></table></figure>
</li>
</ol>
   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line">   <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">   <span class="keyword">import</span> &#123;</span><br><span class="line">	loginByAccount,</span><br><span class="line">   	loginByCode</span><br><span class="line">   &#125; <span class="keyword">from</span> <span class="string">'../api/login.js'</span></span><br><span class="line">   Vue.use(Vuex)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">const</span> sessionStorageState = sessionStorage.getItem(<span class="string">'state'</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span> state</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (sessionStorageState) &#123;</span><br><span class="line">     state = <span class="built_in">JSON</span>.parse(sessionStorageState)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     state = &#123;</span><br><span class="line">       login: <span class="literal">false</span>,</span><br><span class="line">       userInfo: &#123;&#125;, <span class="comment">//用户信息  </span></span><br><span class="line">       time: <span class="number">30</span>,</span><br><span class="line">       tips: <span class="string">'正在加载'</span>, <span class="comment">//请求提示信息</span></span><br><span class="line">       loadingCount: <span class="number">0</span>, <span class="comment">//请求的数量</span></span><br><span class="line">       mustShowLoading: <span class="literal">true</span>, <span class="comment">//是否请求开启 loading</span></span><br><span class="line">       mustShowError: <span class="literal">true</span>, <span class="comment">//请求错误时是否自动报错</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">   	state,</span><br><span class="line">   	mutations: &#123;</span><br><span class="line">   		SET_USERINFO(state, obj) &#123;</span><br><span class="line">   			state.userInfo = obj</span><br><span class="line">   		&#125;</span><br><span class="line">   	&#125;,</span><br><span class="line">   	actions: &#123;</span><br><span class="line">   		<span class="comment">//账号密码登录</span></span><br><span class="line">   		LoginByAccount(&#123;</span><br><span class="line">   			commit</span><br><span class="line">   		&#125;, userInfo) &#123;</span><br><span class="line">   			<span class="keyword">const</span> account = userInfo.account.trim()</span><br><span class="line">   			<span class="keyword">const</span> password = userInfo.password</span><br><span class="line">   			<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   				loginByAccount(&#123;</span><br><span class="line">   					account,</span><br><span class="line">   					password</span><br><span class="line">   				&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   					<span class="keyword">const</span> data = res.data || <span class="string">''</span></span><br><span class="line">   					<span class="comment">// Cookies.set('Token', response.data.token) //登录成功后将token存储在cookie之中</span></span><br><span class="line">   					commit(<span class="string">'SET_USERINFO'</span>, data)</span><br><span class="line">   					resolve()</span><br><span class="line">   				&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">   					reject(error)</span><br><span class="line">   				&#125;);</span><br><span class="line">   			&#125;);</span><br><span class="line">   		&#125;,</span><br><span class="line">   		</span><br><span class="line">   		<span class="comment">//验证码登录</span></span><br><span class="line">   		LoginByCode(&#123;</span><br><span class="line">   			commit</span><br><span class="line">   		&#125;, phoneData) &#123;</span><br><span class="line">   			<span class="keyword">const</span> phone = phoneData.phone</span><br><span class="line">   			<span class="keyword">const</span> code = phoneData.code</span><br><span class="line">   			<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   				loginByCode(&#123;</span><br><span class="line">   					phone,</span><br><span class="line">   					code</span><br><span class="line">   				&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   					<span class="keyword">const</span> data = res.data || <span class="string">''</span></span><br><span class="line">   					<span class="comment">// Cookies.set('Token', response.data.token) //登录成功后将token存储在cookie之中</span></span><br><span class="line">   					commit(<span class="string">'SET_USERINFO'</span>, data)</span><br><span class="line">   					resolve()</span><br><span class="line">   				&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">   					reject(error)</span><br><span class="line">   				&#125;);</span><br><span class="line">   			&#125;);</span><br><span class="line">   		&#125;</span><br><span class="line">   	&#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
<p>   就这样吧，太久了，懒得写了</p>
<p>   补充下：移动端不是使用uni-app开发的也可以去uni-app网站寻找组件，非常好用。</p>
]]></content>
      <tags>
        <tag>-uniapp</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ssh密钥登录服务器</title>
    <url>/2020/03/28/%E4%BD%BF%E7%94%A8ssh%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h4 id="使用ssh密钥登录服务器"><a href="#使用ssh密钥登录服务器" class="headerlink" title="使用ssh密钥登录服务器"></a>使用ssh密钥登录服务器</h4><p>为什么突然想用ssh密钥登录服务器？</p>
<p>因为在vscode的sftp插件配置上需要配服务器地址及密码，所以就感觉密码暴露出来不是非常友好。</p>
<p>因此想用ssh密钥文件登录服务器</p>
<p>于是百度各种文章，最终终于ok</p>
<ol>
<li><p>使用xshell客户端软件登录服务器</p>
</li>
<li><p>进去系统默认就是在 root目录  在该目录下查看是否有 .ssh 目录</p>
<p> 不能就用ls查看，因为” .ssh “目录都会被隐藏，只是用 ls 指令查看不了必须使用:</p>
<p>​     ls –all    #查看之后发现不存在.ssh 目录</p>
</li>
<li><p>创建 ssh 目录    ssh-keygen –t rsa –b 4096</p>
<p> #-t 指的是创建的密钥类型有：rsa1（SSH-1） 、rsa（SSH-2） 、 dsa （SSH-2）</p>
</li>
</ol>
<p>​          #-b 指定密钥的长度，对于RSA密钥，最小768，默认2048位，DSA密钥位1024位。</p>
<p>这里笔者加了-b 参数，指定了长度，也可以不加-b参数，直接使用ssh-keygen -t rsa，ssh-keygen命令的参数后文再介绍。</p>
<p>执行密钥生成命令，基本上是一路回车既可以了，但是需要注意的是：执行命令的过程中是会提示呢输入密钥的密码的（如下图中红色箭头处，输入两次相同的，即是又一次确认密码），不需要密码直接回车就行。</p>
<p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328214633681.png" alt="image-20200328214633681"></p>
<p>密钥生成后会在当前目录下多出两个文件，id_rsa和id_rsa.pub，其中id_rsa是私钥（敲黑板：这个很重要，不能外泄），id_rsa.pub这个是公钥，</p>
<p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328214933323.png" alt="image-20200328214933323"></p>
<ol start="4">
<li>cd /root/.ssh，执行ls看看目录下是否有authorized_keys文件没有的话则执行以下命令创建：</li>
</ol>
<p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328215157716.png" alt="image-20200328215157716"></p>
<p>执行成功会创建空authorized_keys文件，授予600权限（注意：此处权限必须是600）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 600 /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328215326478.png" alt="image-20200328215326478"></p>
<p>如果已经有了authorized_keys文件，这直接执行以下的密钥追加工作。</p>
<p>将上面生成的公钥id_rsa.pub追加到authorized_keys文件中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>
<p>如下图所示，注意图中红色箭头处，是&gt;&gt;而不是&gt;，双尖括号&gt;&gt;表示像向文件中追加：</p>
<p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328215650155.png" alt="image-20200328215650155"></p>
<ol start="5">
<li>将密钥下载到本地  sz id_rsa  </li>
</ol>
<p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328215932789.png" alt="image-20200328215932789"></p>
<p>测试是否可用</p>
<p>测试</p>
<ol>
<li><p>打开xshell 链接服务器</p>
<p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328220039434.png" alt="image-20200328220039434"></p>
</li>
</ol>
<p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328220230870.png" alt="image-20200328220230870"><br><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328220418463.png" alt="image-20200328220418463"></p>
<p>然后就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen可用的参数选项有：</span><br><span class="line"> </span><br><span class="line">     -a trials</span><br><span class="line">             在使用 -T 对 DH-GEX 候选素数进行安全筛选时需要执行的基本测试数量。</span><br><span class="line"> </span><br><span class="line">     -B      显示指定的公钥/私钥文件的 bubblebabble 摘要。</span><br><span class="line"> </span><br><span class="line">     -b bits</span><br><span class="line">             指定密钥长度。对于RSA密钥，最小要求768位，默认是2048位。DSA密钥必须恰好是1024位(FIPS 186-2 标准的要求)。</span><br><span class="line"> </span><br><span class="line">     -C comment</span><br><span class="line">             提供一个新注释</span><br><span class="line"> </span><br><span class="line">     -c      要求修改私钥和公钥文件中的注释。本选项只支持 RSA1 密钥。</span><br><span class="line">             程序将提示输入私钥文件名、密语(如果存在)、新注释。</span><br><span class="line"> </span><br><span class="line">     -D reader</span><br><span class="line">             下载存储在智能卡 reader 里的 RSA 公钥。</span><br><span class="line"> </span><br><span class="line">     -e      读取OpenSSH的私钥或公钥文件，并以 RFC 4716 SSH 公钥文件格式在 stdout 上显示出来。</span><br><span class="line">             该选项能够为多种商业版本的 SSH 输出密钥。</span><br><span class="line"> </span><br><span class="line">     -F hostname</span><br><span class="line">             在 known_hosts 文件中搜索指定的 hostname ，并列出所有的匹配项。</span><br><span class="line">             这个选项主要用于查找散列过的主机名/ip地址，还可以和 -H 选项联用打印找到的公钥的散列值。</span><br><span class="line"> </span><br><span class="line">     -f filename</span><br><span class="line">             指定密钥文件名。</span><br><span class="line"> </span><br><span class="line">     -G output_file</span><br><span class="line">             为 DH-GEX 产生候选素数。这些素数必须在使用之前使用 -T 选项进行安全筛选。</span><br><span class="line"> </span><br><span class="line">     -g      在使用 -r 打印指纹资源记录的时候使用通用的 DNS 格式。</span><br><span class="line"> </span><br><span class="line">     -H      对 known_hosts 文件进行散列计算。这将把文件中的所有主机名/ip地址替换为相应的散列值。</span><br><span class="line">             原来文件的内容将会添加一个&quot;.old&quot;后缀后保存。这些散列值只能被 ssh 和 sshd 使用。</span><br><span class="line">             这个选项不会修改已经经过散列的主机名/ip地址，因此可以在部分公钥已经散列过的文件上安全使用。</span><br><span class="line"> </span><br><span class="line">     -i      读取未加密的SSH-2兼容的私钥/公钥文件，然后在 stdout 显示OpenSSH兼容的私钥/公钥。</span><br><span class="line">             该选项主要用于从多种商业版本的SSH中导入密钥。</span><br><span class="line"> </span><br><span class="line">     -l      显示公钥文件的指纹数据。它也支持 RSA1 的私钥。</span><br><span class="line">             对于RSA和DSA密钥，将会寻找对应的公钥文件，然后显示其指纹数据。</span><br><span class="line"> </span><br><span class="line">     -M memory</span><br><span class="line">             指定在生成 DH-GEXS 候选素数的时候最大内存用量(MB)。</span><br><span class="line"> </span><br><span class="line">     -N new_passphrase</span><br><span class="line">             提供一个新的密语。</span><br><span class="line"> </span><br><span class="line">     -P passphrase</span><br><span class="line">             提供(旧)密语。</span><br><span class="line"> </span><br><span class="line">     -p      要求改变某私钥文件的密语而不重建私钥。程序将提示输入私钥文件名、原来的密语、以及两次输入新密语。</span><br><span class="line"> </span><br><span class="line">     -q      安静模式。用于在 /etc/rc 中创建新密钥的时候。</span><br><span class="line"> </span><br><span class="line">     -R hostname</span><br><span class="line">             从 known_hosts 文件中删除所有属于 hostname 的密钥。</span><br><span class="line">             这个选项主要用于删除经过散列的主机(参见 -H 选项)的密钥。</span><br><span class="line"> </span><br><span class="line">     -r hostname</span><br><span class="line">             打印名为 hostname 的公钥文件的 SSHFP 指纹资源记录。</span><br><span class="line"> </span><br><span class="line">     -S start</span><br><span class="line">             指定在生成 DH-GEX 候选模数时的起始点(16进制)。</span><br><span class="line"> </span><br><span class="line">     -T output_file</span><br><span class="line">             测试 Diffie-Hellman group exchange 候选素数(由 -G 选项生成)的安全性。</span><br><span class="line"> </span><br><span class="line">     -t type</span><br><span class="line">             指定要创建的密钥类型。可以使用：&quot;rsa1&quot;(SSH-1) &quot;rsa&quot;(SSH-2) &quot;dsa&quot;(SSH-2)</span><br><span class="line"> </span><br><span class="line">     -U reader</span><br><span class="line">             把现存的RSA私钥上传到智能卡 reader</span><br><span class="line"> </span><br><span class="line">     -v      详细模式。ssh-keygen 将会输出处理过程的详细调试信息。常用于调试模数的产生过程。</span><br><span class="line">             重复使用多个 -v 选项将会增加信息的详细程度(最大3次)。</span><br><span class="line"> </span><br><span class="line">     -W generator</span><br><span class="line">             指定在为 DH-GEX 测试候选模数时想要使用的 generator</span><br><span class="line"> </span><br><span class="line">     -y      读取OpenSSH专有格式的公钥文件，并将OpenSSH公钥显示在 stdout 上。</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/nahancy/java/article/details/79059135" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <tags>
        <tag>-ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>图解ssh原理</title>
    <url>/2020/03/28/%E5%9B%BE%E8%A7%A3ssh%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="图解ssh原理"><a href="#图解ssh原理" class="headerlink" title="图解ssh原理"></a>图解ssh原理</h3><p><img src="/2020/03/28/图解ssh原理/image-20200328194548684.png" alt="image-20200328194548684"></p>
<h2 id="1-初见SSH"><a href="#1-初见SSH" class="headerlink" title="1. 初见SSH"></a>1. 初见SSH</h2><p>SSH是一种协议标准，其目的是实现<strong>安全远程登录</strong>以及其它<strong>安全网络服务</strong>。</p>
<blockquote>
<p>SSH仅仅是一<strong>协议标准</strong>，其具体的实现有很多，既有开源实现的OpenSSH，也有商业实现方案。使用范围最广泛的当然是开源实现OpenSSH。</p>
</blockquote>
<h2 id="2-SSH工作原理"><a href="#2-SSH工作原理" class="headerlink" title="2. SSH工作原理"></a>2. SSH工作原理</h2><p>在讨论SSH的原理和使用前，我们需要分析一个问题：<strong>为什么需要SSH？</strong></p>
<p>从1.1节SSH的定义中可以看出，SSH和telnet、ftp等协议主要的区别在于<strong>安全性</strong>。这就引出下一个问题：<strong>如何实现数据的安全呢？</strong>首先想到的实现方案肯定是对数据进行<strong>加密</strong>。加密的方式主要有两种：</p>
<ul>
<li>对称加密（也称为秘钥加密）</li>
<li>非对称加密（也称公钥加密）</li>
</ul>
<p>所谓对称加密，指加密解密使用同一套秘钥。如下图所示：<br>Client:</p>
<p><img src="/2020/03/28/图解ssh原理/image-20200328194711738.png" alt="image-20200328194711738"></p>
<p><img src="/2020/03/28/图解ssh原理/image-20200328194800578.png" alt="image-20200328194800578"></p>
<p>对称加密的加密强度高，很难破解。但是在实际应用过程中不得不面临一个棘手的问题：<strong>如何安全的保存密钥呢？</strong>尤其是考虑到数量庞大的Client端，很难保证密钥不被泄露。一旦一个Client端的密钥被窃据，那么整个系统的安全性也就不复存在。为了解决这个问题，<strong>非对称加密</strong>应运而生。非对称加密有两个密钥：<strong>“公钥”</strong>和<strong>“私钥”</strong>。</p>
<blockquote>
<p>两个密钥的特性：公钥加密后的密文，只能通过对应的私钥进行解密。而通过公钥推理出私钥的可能性微乎其微。</p>
</blockquote>
<p>下面看下使用非对称加密方案的登录流程：</p>
<p><img src="/2020/03/28/图解ssh原理/image-20200328194830679.png" alt="image-20200328194830679"></p>
<ul>
<li>1.远程Server收到Client端用户TopGun的登录请求，Server把自己的公钥发给用户。</li>
<li>2.Client使用这个公钥，将密码进行加密。</li>
<li>3.Client将加密的密码发送给Server端。</li>
<li>4.远程Server用自己的私钥，解密登录密码，然后验证其合法性。</li>
<li>5.若验证结果，给Client相应的响应。</li>
</ul>
<blockquote>
<p>私钥是Server端独有，这就保证了Client的登录信息即使在网络传输过程中被窃据，也没有私钥进行解密，保证了数据的安全性，这充分利用了非对称加密的特性。</p>
</blockquote>
<p><strong>这样就一定安全了吗？</strong></p>
<p>上述流程会有一个问题：<strong>Client端如何保证接受到的公钥就是目标Server端的？</strong>，如果一个攻击者中途拦截Client的登录请求，向其发送自己的公钥，Client端用攻击者的公钥进行数据加密。攻击者接收到加密信息后再用自己的私钥进行解密，不就窃取了Client的登录信息了吗？这就是所谓的<strong>中间人攻击</strong></p>
<p><img src="/2020/03/28/图解ssh原理/image-20200328194913851.png" alt="image-20200328194913851"></p>
<p><strong>SSH中是如何解决这个问题的？</strong></p>
<p><strong>1. 基于口令的认证</strong></p>
<p>从上面的描述可以看出，问题就在于<strong>如何对Server的公钥进行认证？</strong>在https中可以通过CA来进行公证，可是SSH的<strong>publish key</strong>和<strong>private key</strong>都是自己生成的，没法公证。只能通过Client端自己对公钥进行确认。通常在第一次登录的时候，系统会出现下面提示信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The authenticity of host 'ssh-server.example.com (12.18.429.21)' can't be established.</span><br><span class="line">RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure>
<p>上面的信息说的是：无法确认主机ssh-server.example.com（12.18.429.21）的真实性，不过知道它的公钥指纹，是否继续连接？</p>
<blockquote>
<p>之所以用fingerprint代替key，主要是key过于长（RSA算法生成的公钥有1024位），很难直接比较。所以，对公钥进行hash生成一个128位的指纹，这样就方便比较了。</p>
</blockquote>
<p>如果输入<strong>yes</strong>后，会出现下面信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Warning: Permanently added 'ssh-server.example.com,12.18.429.21' (RSA) to the list of known hosts. </span><br><span class="line">Password: (enter password)</span><br></pre></td></tr></table></figure>
<p>该host已被确认，并被追加到文件<strong>known_hosts</strong>中，然后就需要输入密码，之后的流程就按照图1-3进行。</p>
<p><strong>2.基于公钥认证</strong></p>
<p>在上面介绍的登录流程中可以发现，每次登录都需要输入密码，很麻烦。SSH提供了另外一种可以免去输入密码过程的登录方式：<strong>公钥登录</strong>。流程如下：</p>
<p><img src="/2020/03/28/图解ssh原理/image-20200328195103766.png" alt="image-20200328195103766"></p>
<ul>
<li>1.Client将自己的公钥存放在Server上，追加在文件authorized_keys中。</li>
<li>2.Server端接收到Client的连接请求后，会在authorized_keys中匹配到Client的公钥pubKey，并生成随机数R，用Client的公钥对该随机数进行加密得到pubKey(R)<br>，然后将加密后信息发送给Client。</li>
<li>3.Client端通过私钥进行解密得到随机数R，然后对随机数R和本次会话的SessionKey利用MD5生成摘要Digest1，发送给Server端。</li>
<li>4.Server端会也会对R和SessionKey利用同样摘要算法生成Digest2。</li>
<li>5.Server端会最后比较Digest1和Digest2是否相同，完成认证过程。</li>
</ul>
<p>在步骤1中，Client将自己的公钥存放在Server上。需要用户手动将公钥copy到server上。这就是在配置ssh的时候进程进行的操作。下图是GitHub上SSH keys设置视图：</p>
<p><img src="/2020/03/28/图解ssh原理/image-20200328195211872.png" alt="image-20200328195211872">3. SSH实践</p>
<p><strong>生成密钥操作</strong></p>
<p>经过上面的原理分析，下面三行命令的含义应该很容易理解了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -P <span class="string">''</span> -f ~/.ssh/id_rsa</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 0600 ~/.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure>
<p>ssh-keygen是用于生产密钥的工具。</p>
<ul>
<li>-t：指定生成密钥类型（rsa、dsa、ecdsa等）</li>
<li>-P：指定passphrase，用于确保私钥的安全</li>
<li>-f：指定存放密钥的文件（公钥文件默认和私钥同目录下，不同的是，存放公钥的文件名需要加上后缀.pub）</li>
</ul>
<p>首先看下面~/.ssh中的四个文件：</p>
<p><img src="/2020/03/28/图解ssh原理/image-20200328195333040.png" alt="image-20200328195333040"></p>
<ul>
<li>1.id_rsa：保存私钥</li>
<li>2.id_rsa.pub：保存公钥</li>
<li>3.authorized_keys：保存已授权的客户端公钥</li>
<li>4.known_hosts：保存已认证的远程主机ID（关于known_hosts详情，见文末更新内容）</li>
</ul>
<p>四个角色的关系如下图所示：</p>
<p><img src="/2020/03/28/图解ssh原理/image-20200328195407029.png" alt="image-20200328195407029"></p>
<p>需要注意的是：一台主机可能既是Client，也是Server。所以会同时拥有authorized_keys和known_hosts。</p>
<p><strong>登录操作</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以用户名user，登录远程主机host</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh user@host</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地用户和远程用户相同，则用户名可省去</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh host</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> SSH默认端口22，可以用参数p修改端口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh -p 2017 user@host</span></span><br></pre></td></tr></table></figure>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>本文以图文方式对SSH原理进行解析（主要指远程登录，没有涉及端口转发等功能）。同时分析了非对称加密的特性，以及在实践过程中如何对加密操作进行改进。</p>
<h3 id="1-known-hosts中存储的内容是什么？"><a href="#1-known-hosts中存储的内容是什么？" class="headerlink" title="1. known_hosts中存储的内容是什么？"></a>1. known_hosts中存储的内容是什么？</h3><p>known_hosts中存储是已认证的远程主机host key，每个SSH Server都有一个secret, unique ID, called a host key。</p>
<h3 id="2-host-key何时加入known-hosts的？"><a href="#2-host-key何时加入known-hosts的？" class="headerlink" title="2. host key何时加入known_hosts的？"></a>2. host key何时加入known_hosts的？</h3><p>当我们第一次通过SSH登录远程主机的时候，Client端会有如下提示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host key not found from the list of known hosts.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure>
<p>此时，如果我们选择yes，那么该host key就会被加入到Client的known_hosts中，格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> domain name+encryption algorithm+host key</span></span><br><span class="line">example.hostname.com ssh-rsa AAAAB4NzaC1yc2EAAAABIwAAAQEA。。。</span><br></pre></td></tr></table></figure>
<h3 id="3-为什么需要known-hosts？"><a href="#3-为什么需要known-hosts？" class="headerlink" title="3. 为什么需要known_hosts？"></a>3. 为什么需要known_hosts？</h3><p>最后探讨下为什么需要known_hosts，这个文件主要是通过Client和Server的双向认证，从而避免中间人（man-in-the-middle attack）攻击，每次Client向Server发起连接的时候，不仅仅Server要验证Client的合法性，Client同样也需要验证Server的身份，SSH client就是通过known_hosts中的host key来验证Server的身份的。</p>
<blockquote>
<p>这中方案足够安全吗？当然不，比如第一次连接一个未知Server的时候，known_hosts还没有该Server的host key，这不也可能遭到中间人攻击吗？这可能只是安全性和可操作性之间的折中吧。</p>
</blockquote>
<p><a href="https://www.cnblogs.com/diffx/p/9553587.html" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <tags>
        <tag>-ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>一步一步完成个vue项目</title>
    <url>/2020/03/24/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AE%8C%E6%88%90%E4%B8%AAvue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h3 id="一步一步完成个vue项目"><a href="#一步一步完成个vue项目" class="headerlink" title="一步一步完成个vue项目"></a>一步一步完成个vue项目</h3><p>环境： git  node</p>
<ol>
<li>安装vue脚手架  </li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli-service-global</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue -V   </span><br><span class="line">@vue/cli 4.2.3</span><br></pre></td></tr></table></figure>
<p>跳出版本号 即表示安装成功</p>
<ol start="2">
<li>创建一个项目  vue-study</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue create -d vue-study</span><br></pre></td></tr></table></figure>
<p>-d 表示按默认配置创建一个项目</p>
<ol start="3">
<li>执行vue ui 使用可视化界面控制项目并安装所需依赖</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure>
<p>浏览器就会跳出项目可视化界面，可自行导入项目</p>
<p><img src="/2020/03/24/一步一步完成个vue项目/image-20200324111811682.png" alt="image-20200324111811682"></p>
<p>点击依赖展开的界面就可以查看项目已安装的依赖，未安装的依赖也可以在这进行安装</p>
<p>安装了vue全家桶  vuex、vue-router、axios、qs</p>
<p><img src="/2020/03/24/一步一步完成个vue项目/image-20200324112056441.png" alt="image-20200324112056441"></p>
<p>点击运行既可以将项目跑起来也可以执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>
<p>点击输出 就能看到本地链接，点击链接就能看到项目</p>
<p><img src="/2020/03/24/一步一步完成个vue项目/image-20200324112220752.png" alt="image-20200324112220752"></p>
<ol start="4">
<li>在vscode编辑器上打开该文件，目录展示如下</li>
</ol>
<p><img src="/2020/03/24/一步一步完成个vue项目/image-20200324112411006.png" alt="image-20200324112411006"></p>
<p>可见目录与我们想要的目录还是不够的</p>
<ol start="5">
<li>将目录建成如下结构</li>
</ol>
<blockquote>
<p>src        //源代码</p>
<blockquote>
<p>api       //所有请求</p>
<p>assets  //主题 字体等静态资源</p>
<p>components      //全局公用组件</p>
<p>directive          //全局指令</p>
<p>filters    //全局过滤器</p>
<p>icons    //项目所有svg icons</p>
<p>lang    //国际化 language    非必须</p>
<p>mock    //项目mock模拟数据 非必须</p>
<p>router    //路由</p>
<p>store   //全局store 管理</p>
<p>styles   //全局样式</p>
<p>utils    //全局公用方法</p>
<p>vendor     //公用vendor  非必须</p>
<p>views   //view</p>
<p>App.vue  //入口页面</p>
<p>main.js   //入口加载组件初始化</p>
<p>permission.js   //权限管理       非必须</p>
</blockquote>
<p>static</p>
<blockquote>
<p>Tinymce        //富文本</p>
</blockquote>
<p>public</p>
<blockquote>
<p>favicon.ico     //favicon图标</p>
<p>index.html     //html模板</p>
</blockquote>
<p>babel.config.js       //babel-loader 配置</p>
<p>eslintrc.js         //eslint配置项</p>
<p>.gitignore      //git忽略项</p>
<p>package.json      //package.json</p>
<p>README.md     //使用说明书</p>
<p>vue.config.js      //配置文件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认vue.config.js 文件内容</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>修改main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index'</span> <span class="comment">// 全局 路由 配置</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/index'</span> <span class="comment">//   全局 状态 配置</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$bus = <span class="keyword">new</span> Vue()          <span class="comment">//$bug</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>
<p>在router和store文件夹下创建index.js文件，在view文件夹下创建index.vue文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="comment">//引入组件的第一种方式</span></span><br><span class="line"><span class="comment">//import index from '../views/index.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入组件的第二种方式  这种方式为懒加载模式，加载到该页面时才会加载</span></span><br><span class="line"><span class="comment">//const index = () =&gt; import('../views/index.vue')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入组件的第三种方式  这种方式也是懒加载模式</span></span><br><span class="line"><span class="keyword">const</span> index =  <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../views/index.vue'</span>], resolve)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    mode: <span class="string">'hash'</span>,</span><br><span class="line">    routers: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/'</span>,</span><br><span class="line">            redirect: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">'index'</span> &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/index'</span>,</span><br><span class="line">            name: <span class="string">'index'</span>,</span><br><span class="line">            component: index, <span class="comment">// 登录页</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<p><strong>上面这个是错误的，字段是 routes  不是 routers    注意了,就这个错误搞得我怀疑人生。切记改正</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--view/index.vue--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;index&quot;&gt;首页&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//store/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> VueX = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;&#125;,</span><br><span class="line">    mutations:&#123;&#125;,</span><br><span class="line">    actions: &#123;&#125;,</span><br><span class="line">  	modules: &#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueX</span><br></pre></td></tr></table></figure>
<p>修改完后运行界面展示如下</p>
<p><img src="/2020/03/24/一步一步完成个vue项目/image-20200328133738665.png" alt="image-20200328133738665"></p>
<h3 id="接下来一步一步配置vue-config-js"><a href="#接下来一步一步配置vue-config-js" class="headerlink" title="接下来一步一步配置vue.config.js"></a>接下来一步一步配置vue.config.js</h3><h4 id="先配置别名吧alias"><a href="#先配置别名吧alias" class="headerlink" title="先配置别名吧alias"></a>先配置别名吧alias</h4><p><img src="/2020/03/24/一步一步完成个vue项目/image-20200328153142287.png" alt="image-20200328153142287"></p>
<p><a href="https://shenxiaobu.github.io/2019/03/13/webpack%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/">webpack使用二</a></p>
<p>这样就理解了alias的作用了</p>
<p>接下来配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vue.config.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入path模块  下面用到了  path.resolve()  至于 __dirname node知识自行百度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(__dirname)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">            resolve: &#123;</span><br><span class="line">                alias: &#123;</span><br><span class="line">                <span class="string">'~'</span>: path.resolve(__dirname, <span class="string">'./src'</span>),</span><br><span class="line">                <span class="string">'~views'</span>: path.resolve(__dirname, <span class="string">'./src/views'</span>),</span><br><span class="line">                &#125; <span class="comment">// 别名配置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__dirname   Node.js 中，__dirname 总是指向被执行 js 文件的绝对路径，所以当你在 /d1/d2/myscript.js 文件中写了 __dirname， 它的值就是 /d1/d2 。</span><br><span class="line"></span><br><span class="line">相反，./ 会返回你执行 node 命令的路径，例如你的工作路径。</span><br><span class="line"></span><br><span class="line">有一个特殊情况是在 require() 中使用 ./ 时，这时的路径就会是含有 require() 的脚本文件的相对路径。</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/zsensei/article/details/79094714" target="_blank" rel="noopener">Node.js 中 __dirname 和 ./ 的区别</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用上述配置的时候，路由上的路径就可以改为  此时 遇到 ~ 就替换为 ./src</span></span><br><span class="line"><span class="keyword">const</span> index =  <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'~/views/index.vue'</span>], resolve)</span><br><span class="line"><span class="comment">//或   此时 遇到 ~views 就替换为 ./src/views</span></span><br><span class="line"><span class="keyword">const</span> index =  <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'~views/index.vue'</span>], resolve)</span><br></pre></td></tr></table></figure>
<p>“~”这个是随意配的，一般是采用 @  但是喜新厌旧，用腻了，就采用 ~。</p>
<p>打球去了，配置会一步一步接下去的。2020.03.28 15:51</p>
]]></content>
      <tags>
        <tag>-vue -vue/cli</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli3项目的webpack配置</title>
    <url>/2020/03/23/vue-cli3%E9%A1%B9%E7%9B%AE%E7%9A%84webpack%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="vue-cli3搭建完整项目之webpack配置"><a href="#vue-cli3搭建完整项目之webpack配置" class="headerlink" title="vue-cli3搭建完整项目之webpack配置"></a>vue-cli3搭建完整项目之webpack配置</h1><p>前面篇介绍了项目初始化，下面就要开始对项目webpack进行配置，由于vue-cli3将webpack的基础配置全部内嵌了，这就导致我们初始化项目完成之后发现原先的webpack的config配置全部都消失不见了，那该怎么办呢？别慌，vue-cli3早就考虑到了这一点，它预留了一个vue.config.js的js文件供我们对webpack进行自定义配置。</p>
<p>vue.config.js官方配置指南</p>
<p>一、在项目根目录下新建vue.config.js文件与package.json同级<br>    下面是我的vue.config.js文件,里面有详细的注释，这里不再赘述</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">'./'</span>, <span class="comment">// 基本路径</span></span><br><span class="line">  outputDir: <span class="string">'dist'</span>, <span class="comment">// 输出文件目录</span></span><br><span class="line">  lintOnSave: <span class="literal">false</span>, <span class="comment">// eslint-loader 是否在保存的时候检查</span></span><br><span class="line">  <span class="comment">// see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md</span></span><br><span class="line">  <span class="comment">// webpack配置</span></span><br><span class="line">  chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">      <span class="comment">// 开发生产共同配置</span></span><br><span class="line">      resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">          <span class="string">'@'</span>: path.resolve(__dirname, <span class="string">'./src'</span>),</span><br><span class="line">          <span class="string">'@c'</span>: path.resolve(__dirname, <span class="string">'./src/components'</span>),</span><br><span class="line">          <span class="string">'@p'</span>: path.resolve(__dirname, <span class="string">'./src/pages'</span>)</span><br><span class="line">        &#125; <span class="comment">// 别名配置</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  productionSourceMap: <span class="literal">false</span>, <span class="comment">// 生产环境是否生成 sourceMap 文件</span></span><br><span class="line">  <span class="comment">// css相关配置</span></span><br><span class="line">  css: &#123;</span><br><span class="line">    extract: <span class="literal">true</span>, <span class="comment">// 是否使用css分离插件 ExtractTextPlugin</span></span><br><span class="line">    sourceMap: <span class="literal">false</span>, <span class="comment">// 开启 CSS source maps?</span></span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      css: &#123;&#125;, <span class="comment">// 这里的选项会传递给 css-loader</span></span><br><span class="line">      postcss: &#123;&#125; <span class="comment">// 这里的选项会传递给 postcss-loader</span></span><br><span class="line">    &#125;, <span class="comment">// css预设器配置项 详见https://cli.vuejs.org/zh/config/#css-loaderoptions</span></span><br><span class="line">    modules: <span class="literal">false</span> <span class="comment">// 启用 CSS modules for all css / pre-processor files.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  parallel: <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length &gt; <span class="number">1</span>, <span class="comment">// 是否为 Babel 或 TypeScript 使用 thread-loader。该选项在系统的 CPU 有多于一个内核时自动启用，仅作用于生产构建。</span></span><br><span class="line">  pwa: &#123;&#125;, <span class="comment">// PWA 插件相关配置 see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa</span></span><br><span class="line">  <span class="comment">// webpack-dev-server 相关配置</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: process.platform === <span class="string">'darwin'</span>,</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>, <span class="comment">// 允许外部ip访问</span></span><br><span class="line">    port: <span class="number">8022</span>, <span class="comment">// 端口</span></span><br><span class="line">    https: <span class="literal">false</span>, <span class="comment">// 启用https</span></span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: <span class="literal">true</span>,</span><br><span class="line">      errors: <span class="literal">true</span></span><br><span class="line">    &#125;, <span class="comment">// 错误、警告在页面弹出</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://www.baidu.com/api'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">// 允许websockets跨域</span></span><br><span class="line">        <span class="comment">// ws: true,</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="comment">// 代理转发配置，用于调试环境</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 第三方插件配置</span></span><br><span class="line">  pluginOptions: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="alias别名配置"><a href="#alias别名配置" class="headerlink" title="alias别名配置"></a>alias别名配置</h4><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>当项目逐渐变大之后，文件与文件直接的引用关系会很复杂，这时候就需要使用<a href="https://webpack.js.org/configuration/resolve/" target="_blank" rel="noopener">alias</a> 了。 有的人喜欢alias 指向src目录下，再使用相对路径找文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">'~'</span>: resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">import</span> stickTop <span class="keyword">from</span> <span class="string">'~/components/stickTop'</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>
<p>或者也可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alias: &#123;</span><br><span class="line">  <span class="string">'src'</span>: path.resolve(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">  <span class="string">'components'</span>: path.resolve(__dirname, <span class="string">'../src/components'</span>),</span><br><span class="line">  <span class="string">'api'</span>: path.resolve(__dirname, <span class="string">'../src/api'</span>),</span><br><span class="line">  <span class="string">'utils'</span>: path.resolve(__dirname, <span class="string">'../src/utils'</span>),</span><br><span class="line">  <span class="string">'store'</span>: path.resolve(__dirname, <span class="string">'../src/store'</span>),</span><br><span class="line">  <span class="string">'router'</span>: path.resolve(__dirname, <span class="string">'../src/router'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">import</span> stickTop <span class="keyword">from</span> <span class="string">'components/stickTop'</span></span><br><span class="line"><span class="keyword">import</span> getArticle <span class="keyword">from</span> <span class="string">'api/article'</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>
<p>没有好与坏对与错，纯看个人喜好和团队规范。</p>
<h4 id="二、优化打包chunk-vendors-js文件体积过大"><a href="#二、优化打包chunk-vendors-js文件体积过大" class="headerlink" title="二、优化打包chunk-vendors.js文件体积过大"></a>二、优化打包chunk-vendors.js文件体积过大</h4><p>​    当我们运行项目并且打包的时候，会发现chunk-vendors.js这个文件非常大，那是因为webpack将所有的依赖全都压缩到了这个文件里面，这时我们可以将其拆分，将所有的依赖都打包成单独的js。</p>
<p>方案一：利用splitChunks将每个依赖包单独打包，在生产环境下配置，代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span></span><br><span class="line">      <span class="comment">// 将每个依赖包打包成单独的js文件</span></span><br><span class="line">      <span class="keyword">let</span> optimization = &#123;</span><br><span class="line">        runtimeChunk: <span class="string">'single'</span>,</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">          chunks: <span class="string">'all'</span>,</span><br><span class="line">          maxInitialRequests: <span class="literal">Infinity</span>,</span><br><span class="line">          minSize: <span class="number">20000</span>, <span class="comment">// 依赖包超过20000bit将被单独打包</span></span><br><span class="line">          cacheGroups: &#123;</span><br><span class="line">            vendor: &#123;</span><br><span class="line">              test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">              name (<span class="built_in">module</span>) &#123;</span><br><span class="line">                <span class="comment">// get the name. E.g. node_modules/packageName/not/this/part.js</span></span><br><span class="line">                <span class="comment">// or node_modules/packageName</span></span><br><span class="line">                <span class="keyword">const</span> packageName = <span class="built_in">module</span>.context.match(<span class="regexp">/[\\/]node_modules[\\/](.*?)([\\/]|$)/</span>)[<span class="number">1</span>]</span><br><span class="line">                <span class="comment">// npm package names are URL-safe, but some servers don't like @ symbols</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">`npm.<span class="subst">$&#123;packageName.replace(<span class="string">'@'</span>, <span class="string">''</span>)&#125;</span>`</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">        optimization</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">      <span class="comment">// 开发生产共同配置</span></span><br><span class="line">      resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">          <span class="string">'@'</span>: path.resolve(__dirname, <span class="string">'./src'</span>),</span><br><span class="line">          <span class="string">'@c'</span>: path.resolve(__dirname, <span class="string">'./src/components'</span>),</span><br><span class="line">          <span class="string">'@p'</span>: path.resolve(__dirname, <span class="string">'./src/pages'</span>)</span><br><span class="line">        &#125; <span class="comment">// 别名配置</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="方案二、利用DllPlugin和DllReferencePlugin将依赖包打包成外部文件在index中引入"><a href="#方案二、利用DllPlugin和DllReferencePlugin将依赖包打包成外部文件在index中引入" class="headerlink" title="方案二、利用DllPlugin和DllReferencePlugin将依赖包打包成外部文件在index中引入"></a>方案二、利用DllPlugin和DllReferencePlugin将依赖包打包成外部文件在index中引入</h4><ol>
<li>在package.json中新建library,用于存储即将要打包的依赖包名和打包后的文件名</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    "name": "demo-cli3",</span><br><span class="line">  	"version": "1.0.0",</span><br><span class="line">    "version_lib": "1.0.0",</span><br><span class="line">    "library": &#123;</span><br><span class="line">       "lib_v1_0": [</span><br><span class="line">           <span class="string">"jquery/dist/jquery.min.js"</span></span><br><span class="line">        ],</span><br><span class="line">        "vueBucket_v1_2": [</span><br><span class="line">           "vue-router",</span><br><span class="line">           <span class="string">"vuex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;j</span><br></pre></td></tr></table></figure>
<p>创建webpack.dll.config.js文件，代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;library&#125; = <span class="built_in">require</span>(<span class="string">'./package.json'</span>)</span><br><span class="line"><span class="comment">// const assetsSubDirectory = process.env.NODE_ENV === 'production'</span></span><br><span class="line"><span class="comment">//   ? build.assetsSubDirectory : dev.assetsSubDirectory</span></span><br><span class="line"><span class="keyword">let</span> &#123; version_lib &#125; = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</span><br><span class="line">version_lib = version_lib.replace(<span class="regexp">/\./g</span>,<span class="string">'_'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: library,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./libs/package/js'</span>),</span><br><span class="line">    filename: <span class="string">`[name].<span class="subst">$&#123;version_lib&#125;</span>.dll.js`</span>,</span><br><span class="line">    library: <span class="string">'[name]_library'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization:&#123;</span><br><span class="line">    minimizer:[</span><br><span class="line">      <span class="keyword">new</span> UglifyPlugin(&#123;</span><br><span class="line">        uglifyOptions: &#123;</span><br><span class="line">          warnings: <span class="literal">false</span>,</span><br><span class="line">          compress: &#123;</span><br><span class="line">            drop_console: <span class="literal">true</span>, <span class="comment">// console</span></span><br><span class="line">            drop_debugger: <span class="literal">false</span>,</span><br><span class="line">            pure_funcs: [<span class="string">'console.log'</span>] <span class="comment">// 移除console</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.ContextReplacementPlugin(<span class="regexp">/moment[\/\\]locale$/</span>, /zh-cn|en-gb/),</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      path: path.resolve(__dirname, <span class="string">'./libs/package/json'</span>, <span class="string">'[name].manifest.json'</span>),</span><br><span class="line">      name: <span class="string">'[name]_library'</span>,</span><br><span class="line">      context: process.cwd()</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在vue.config.js中配置DllReferencePlugin</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; version, version_lib , openGzip,library &#125; = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span>;</span><br><span class="line">      ...</span><br><span class="line">      <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">        ...</span><br><span class="line">        plugins:[</span><br><span class="line">          ...config.plugins,</span><br><span class="line">          ...Object.keys(library).map(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">              context: process.cwd(),</span><br><span class="line">              manifest: <span class="built_in">require</span>(<span class="string">`./libs/package/json/<span class="subst">$&#123;name&#125;</span>.manifest.json`</span>),</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;);</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>将打包好的js自动添加进index.html中</p>
<p>下载add-asset-html-webpack-plugin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev add-asset-html-webpack-plugin</span><br></pre></td></tr></table></figure>
<p>在vue.config.js中配置add-asset-html-webpack-plugin</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">   ...</span><br><span class="line">   configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span>;</span><br><span class="line">        ...</span><br><span class="line">      <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">        ...</span><br><span class="line">        plugins:[</span><br><span class="line">          ...</span><br><span class="line">          <span class="keyword">new</span> AddAssetHtmlPlugin(<span class="built_in">Object</span>.keys(library).map(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">              filepath: <span class="built_in">require</span>.resolve(path.resolve(<span class="string">`libs/package/js/<span class="subst">$&#123;name&#125;</span>.<span class="subst">$&#123;version_lib&#125;</span>.dll.js`</span>)),</span><br><span class="line">              outputPath: <span class="string">'static/lib/js'</span>,</span><br><span class="line">              publicPath:<span class="string">'./static/lib/js'</span>,</span><br><span class="line">              includeSourcemap: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)),</span><br><span class="line">        ]</span><br><span class="line">      &#125;);</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：方案一、方案二可同时使用，单独使用方案二不需要将vue也添加进打包序列，那样会重复打包（在chunk-venders.js中始终会将vue打包进去），若同时使用则不会出现该情况。<br>至此，打包优化结束，运行打包，你会发现原先的vender文件没有了，同时多了好几个依赖的js文件（方案一）<br><img src="/2020/03/23/vue-cli3项目的webpack配置/image-20200323205311545.png" alt="image-20200323205311545"></p>
<h2 id="三、打包时去除打印信息（console）"><a href="#三、打包时去除打印信息（console）" class="headerlink" title="三、打包时去除打印信息（console）"></a>三、打包时去除打印信息（console）</h2><p>下载uglifyjs-webpack-plugin<br><a href="https://blog.csdn.net/u013884068/article/details/83511343" target="_blank" rel="noopener">uglifyjs-webpack-plugin中文文档</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev uglifyjs-webpack-plugin</span><br></pre></td></tr></table></figure>
<p>在vue.config.js文件中引入，并在configureWebpack的optimization中添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line"> configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span></span><br><span class="line">      <span class="comment">// 将每个依赖包打包成单独的js文件</span></span><br><span class="line">      <span class="keyword">let</span> optimization = &#123;</span><br><span class="line">        ...</span><br><span class="line">        minimizer: [<span class="keyword">new</span> UglifyPlugin(&#123;</span><br><span class="line">          uglifyOptions: &#123;</span><br><span class="line">            compress: &#123;</span><br><span class="line">              warnings: <span class="literal">false</span>,</span><br><span class="line">              drop_console: <span class="literal">true</span>, <span class="comment">// console</span></span><br><span class="line">              drop_debugger: <span class="literal">false</span>,</span><br><span class="line">              pure_funcs: [<span class="string">'console.log'</span>] <span class="comment">// 移除console</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">        optimization</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行打包，你会发现我们在页面中写的那些打印日志的代码都消失了<br>注：以上代码适用于uglifyjs-webpack-plugin 2.1.1及以前的版本，新版uglifyjs-webpack-plugin需写成以下方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">minimizer: [<span class="keyword">new</span> UglifyPlugin(&#123;</span><br><span class="line">   uglifyOptions: &#123;</span><br><span class="line">       warnings: <span class="literal">false</span>,</span><br><span class="line">       compress: &#123;</span><br><span class="line">         drop_console: <span class="literal">true</span>, <span class="comment">// console</span></span><br><span class="line">         drop_debugger: <span class="literal">false</span>,</span><br><span class="line">         pure_funcs: [<span class="string">'console.log'</span>] <span class="comment">// 移除console</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="四、配置全局jQuery"><a href="#四、配置全局jQuery" class="headerlink" title="四、配置全局jQuery"></a>四、配置全局jQuery</h2><ol>
<li>下载jQuery npm包</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev jquery</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>设置‘jquery$’别名,代码如下：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 修复HMR</span></span><br><span class="line">    config.resolve.symlinks(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 别名配置</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"__dirname"</span>,__dirname);</span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">'@'</span>, path.resolve(__dirname, <span class="string">'./src'</span>))</span><br><span class="line">      .set(<span class="string">'@a'</span>, path.resolve(__dirname, <span class="string">'./src/assets'</span>))</span><br><span class="line">      .set(<span class="string">'@c'</span>, path.resolve(__dirname, <span class="string">'./src/components'</span>))</span><br><span class="line">      .set(<span class="string">'@p'</span>, path.resolve(__dirname, <span class="string">'./src/pages'</span>))</span><br><span class="line">      .set(<span class="string">'jquery$'</span>, <span class="string">'jquery/dist/jquery.min.js'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>使用ProvidePlugin插件为jQuery添加全局变量</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"> configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">     ...</span><br><span class="line">    <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">      <span class="comment">// 开发生产共同配置</span></span><br><span class="line">      <span class="comment">// externals: &#123;</span></span><br><span class="line">      <span class="comment">//   'vue': 'Vue',</span></span><br><span class="line">      <span class="comment">//   'element-ui': 'ELEMENT',</span></span><br><span class="line">      <span class="comment">//   'vue-router': 'VueRouter',</span></span><br><span class="line">      <span class="comment">//   'vuex': 'Vuex'</span></span><br><span class="line">      <span class="comment">// &#125; // 防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(用于csdn引入)</span></span><br><span class="line">      plugins:[</span><br><span class="line">        ...config.plugins,</span><br><span class="line">        <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">          jQuery: <span class="string">"jquery"</span>,</span><br><span class="line">          $: <span class="string">"jquery"</span>,</span><br><span class="line">          <span class="string">"windows.jQuery"</span>:<span class="string">"jquery"</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>至此可以在全局使用jquery了</li>
</ol>
<p>五、开启gizp压缩<br>gizp压缩是一种http请求优化方式，通过减少文件体积来提高加载速度。html、js、css文件甚至json数据都可以用它压缩，可以减小60%以上的体积。webpack在打包时可以借助 compression webpack plugin 实现gzip压缩。</p>
<ol>
<li><p>下载 compression webpack plugin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -D compression-webpack-plugin</span><br></pre></td></tr></table></figure>
</li>
<li><p>在package.json中添加openGzip字段，用作gizp开启开关</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;demo-cli3&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;openGizp&quot;: false,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>vue.config.js 中配置如下</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CompressionPlugin = <span class="built_in">require</span>(<span class="string">"compression-webpack-plugin"</span>);</span><br><span class="line">...</span><br><span class="line">configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span>;</span><br><span class="line">      <span class="comment">// 将每个依赖包打包成单独的js文件</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">if</span>(openGzip)&#123;</span><br><span class="line">        config.plugins = [</span><br><span class="line">          ...config.plugins,</span><br><span class="line">          <span class="keyword">new</span> CompressionPlugin(&#123;</span><br><span class="line">            test:<span class="regexp">/\.js$|\.html$|.\css/</span>, <span class="comment">//匹配文件名</span></span><br><span class="line">            threshold: <span class="number">10240</span>,<span class="comment">//对超过10k的数据压缩</span></span><br><span class="line">            deleteOriginalAssets: <span class="literal">false</span> <span class="comment">//不删除源文件</span></span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>注：生成的压缩文件以.gz为后缀，一般浏览器都已支持.gz的资源文件，在http请求的Request Headers 中能看到 Accept-Encoding:gzip。要使服务器返回.gz文件，还需要对服务器进行配置，根据Request Headers的Accept-Encoding标签进行鉴别，如果支持gzip就返回.gz文件。</li>
</ol>
<h2 id="六、将版本号添加进打包的js名中"><a href="#六、将版本号添加进打包的js名中" class="headerlink" title="六、将版本号添加进打包的js名中"></a>六、将版本号添加进打包的js名中</h2><ol>
<li>vue.config.js 中配置如下</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">let</span> &#123; version , openGzip &#125; = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</span><br><span class="line">version = version.replace(<span class="regexp">/\./g</span>,<span class="string">'_'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  assetsDir: <span class="string">"static"</span>,</span><br><span class="line"> configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span>;</span><br><span class="line">        ...</span><br><span class="line">      <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">        output:&#123;</span><br><span class="line">          ...config.output,</span><br><span class="line">          filename: <span class="string">`static/js/[name].[chunkhash].<span class="subst">$&#123;version&#125;</span>.js`</span>,</span><br><span class="line">          chunkFilename: <span class="string">`static/js/[name].[chunkhash].<span class="subst">$&#123;version&#125;</span>.js`</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">      &#125;);</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h4 id="完整代码如下："><a href="#完整代码如下：" class="headerlink" title="完整代码如下："></a>完整代码如下：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">// const UglifyPlugin = require('uglifyjs-webpack-plugin');</span></span><br><span class="line"><span class="keyword">const</span> CompressionPlugin = <span class="built_in">require</span>(<span class="string">"compression-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">let</span> &#123; version, version_lib , openGzip,library &#125; = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</span><br><span class="line">version = version.replace(<span class="regexp">/\./g</span>,<span class="string">'_'</span>);</span><br><span class="line">version_lib = version_lib.replace(<span class="regexp">/\./g</span>,<span class="string">'_'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">'./'</span>, <span class="comment">// 基本路径</span></span><br><span class="line">  outputDir: <span class="string">'dist'</span>, <span class="comment">// 输出文件目录</span></span><br><span class="line">  assetsDir: <span class="string">"static"</span>,</span><br><span class="line">  lintOnSave: <span class="literal">false</span>, <span class="comment">// eslint-loader 是否在保存的时候检查</span></span><br><span class="line">  <span class="comment">// see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md</span></span><br><span class="line">  <span class="comment">// webpack配置</span></span><br><span class="line">  chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 修复HMR</span></span><br><span class="line">    config.resolve.symlinks(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 别名配置</span></span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">'@'</span>, path.resolve(__dirname, <span class="string">'./src'</span>))</span><br><span class="line">      .set(<span class="string">'@a'</span>, path.resolve(__dirname, <span class="string">'./src/assets'</span>))</span><br><span class="line">      .set(<span class="string">'@c'</span>, path.resolve(__dirname, <span class="string">'./src/components'</span>))</span><br><span class="line">      .set(<span class="string">'@p'</span>, path.resolve(__dirname, <span class="string">'./src/pages'</span>))</span><br><span class="line">      .set(<span class="string">'jquery$'</span>, <span class="string">'jquery/dist/jquery.min.js'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将每个依赖包打包成单独的js文件</span></span><br><span class="line">     <span class="comment">/* let optimization = &#123;</span></span><br><span class="line"><span class="comment">        runtimeChunk: 'single',</span></span><br><span class="line"><span class="comment">        splitChunks: &#123;</span></span><br><span class="line"><span class="comment">          chunks: 'all',</span></span><br><span class="line"><span class="comment">          maxInitialRequests: Infinity,</span></span><br><span class="line"><span class="comment">          minSize: 20000, // 依赖包超过20000bit将被单独打包</span></span><br><span class="line"><span class="comment">          cacheGroups: &#123;</span></span><br><span class="line"><span class="comment">            vendor: &#123;</span></span><br><span class="line"><span class="comment">              test: /[\\/]node_modules[\\/]/,</span></span><br><span class="line"><span class="comment">              name (module) &#123;</span></span><br><span class="line"><span class="comment">                // get the name. E.g. node_modules/packageName/not/this/part.js  or node_modules/packageName</span></span><br><span class="line"><span class="comment">                const packageName = module.context.match(/[\\/]node_modules[\\/](.*?)([\\/]|$)/)[1];</span></span><br><span class="line"><span class="comment">                // npm package names are URL-safe, but some servers don't like @ symbols</span></span><br><span class="line"><span class="comment">                return `npm.$&#123;packageName.replace('@', '')&#125;`;</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">        &#125;,</span></span><br><span class="line"><span class="comment">        minimizer: [</span></span><br><span class="line"><span class="comment">          new UglifyPlugin(&#123;</span></span><br><span class="line"><span class="comment">            uglifyOptions: &#123;</span></span><br><span class="line"><span class="comment">              warnings: false,</span></span><br><span class="line"><span class="comment">              compress: &#123;</span></span><br><span class="line"><span class="comment">                drop_console: true, // console</span></span><br><span class="line"><span class="comment">                drop_debugger: false,</span></span><br><span class="line"><span class="comment">                pure_funcs: ['console.log'] // 移除console</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          &#125;)</span></span><br><span class="line"><span class="comment">        ]</span></span><br><span class="line"><span class="comment">      &#125;;*/</span></span><br><span class="line">      <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">        output:&#123;</span><br><span class="line">          ...config.output,</span><br><span class="line">          filename: <span class="string">`static/js/[name].[chunkhash].<span class="subst">$&#123;version&#125;</span>.js`</span>,</span><br><span class="line">          chunkFilename: <span class="string">`static/js/[name].[chunkhash].<span class="subst">$&#123;version&#125;</span>.js`</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// optimization,</span></span><br><span class="line">        plugins:[</span><br><span class="line">          ...config.plugins,</span><br><span class="line">          ...Object.keys(library).map(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">              context: process.cwd(),</span><br><span class="line">              manifest: <span class="built_in">require</span>(<span class="string">`./libs/package/json/<span class="subst">$&#123;name&#125;</span>.manifest.json`</span>),</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;),</span><br><span class="line">          <span class="keyword">new</span> AddAssetHtmlPlugin(<span class="built_in">Object</span>.keys(library).map(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">              filepath: <span class="built_in">require</span>.resolve(path.resolve(<span class="string">`libs/package/js/<span class="subst">$&#123;name&#125;</span>.<span class="subst">$&#123;version_lib&#125;</span>.dll.js`</span>)),</span><br><span class="line">              outputPath: <span class="string">'static/lib/js'</span>,</span><br><span class="line">              publicPath:<span class="string">'./static/lib/js'</span>,</span><br><span class="line">              includeSourcemap: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)),</span><br><span class="line">        ]</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span>(openGzip)&#123;</span><br><span class="line">        config.plugins = [</span><br><span class="line">          ...config.plugins,</span><br><span class="line">          <span class="keyword">new</span> CompressionPlugin(&#123;</span><br><span class="line">            test:<span class="regexp">/\.js$|\.html$|.\css/</span>, <span class="comment">//匹配文件名</span></span><br><span class="line">            threshold: <span class="number">10240</span>,<span class="comment">//对超过10k的数据压缩</span></span><br><span class="line">            deleteOriginalAssets: <span class="literal">false</span> <span class="comment">//不删除源文件</span></span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">      <span class="comment">// 开发生产共同配置</span></span><br><span class="line">      <span class="comment">// externals: &#123;</span></span><br><span class="line">      <span class="comment">//   'vue': 'Vue',</span></span><br><span class="line">      <span class="comment">//   'element-ui': 'ELEMENT',</span></span><br><span class="line">      <span class="comment">//   'vue-router': 'VueRouter',</span></span><br><span class="line">      <span class="comment">//   'vuex': 'Vuex'</span></span><br><span class="line">      <span class="comment">// &#125; // 防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(用于csdn引入)</span></span><br><span class="line">      plugins:[</span><br><span class="line">        ...config.plugins,</span><br><span class="line">        <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">          jQuery: <span class="string">"jquery"</span>,</span><br><span class="line">          $: <span class="string">"jquery"</span>,</span><br><span class="line">          <span class="string">"windows.jQuery"</span>:<span class="string">"jquery"</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  productionSourceMap: <span class="literal">false</span>, <span class="comment">// 生产环境是否生成 sourceMap 文件</span></span><br><span class="line">  <span class="comment">// css相关配置</span></span><br><span class="line">  css: &#123;</span><br><span class="line">    extract: <span class="literal">true</span>, <span class="comment">// 是否使用css分离插件 ExtractTextPlugin</span></span><br><span class="line">    sourceMap: <span class="literal">false</span>, <span class="comment">// 开启 CSS source maps?</span></span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      css: &#123;&#125;, <span class="comment">// 这里的选项会传递给 css-loader</span></span><br><span class="line">      postcss: &#123;&#125; <span class="comment">// 这里的选项会传递给 postcss-loader</span></span><br><span class="line">    &#125;, <span class="comment">// css预设器配置项</span></span><br><span class="line">    modules: <span class="literal">false</span> <span class="comment">// 启用 CSS modules for all css / pre-processor files.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  parallel: <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length &gt; <span class="number">1</span>, <span class="comment">// 是否为 Babel 或 TypeScript 使用 thread-loader。该选项在系统的 CPU 有多于一个内核时自动启用，仅作用于生产构建。</span></span><br><span class="line">  pwa: &#123;&#125;, <span class="comment">// PWA 插件相关配置 see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa</span></span><br><span class="line">  <span class="comment">// webpack-dev-server 相关配置</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: process.platform === <span class="string">'darwin'</span>,</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>, <span class="comment">// 允许外部ip访问</span></span><br><span class="line">    port: <span class="number">8022</span>, <span class="comment">// 端口</span></span><br><span class="line">    https: <span class="literal">false</span>, <span class="comment">// 启用https</span></span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: <span class="literal">true</span>,</span><br><span class="line">      errors: <span class="literal">true</span></span><br><span class="line">    &#125;, <span class="comment">// 错误、警告在页面弹出</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">`<span class="subst">$&#123;process.env.VUE_APP_BASE_API&#125;</span>/api`</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">// 允许websockets跨域</span></span><br><span class="line">        <span class="comment">// ws: true,</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="comment">// 代理转发配置，用于调试环境</span></span><br><span class="line">  &#125;, <span class="comment">// 第三方插件配置</span></span><br><span class="line">  pluginOptions: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>注：如需其他的配置可在上方<a href="https://cli.vuejs.org/zh/config/#vue-config-js" target="_blank" rel="noopener">官网配置指南</a>中查找相关配置</p>
]]></content>
      <tags>
        <tag>-vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode配置多个sftp</title>
    <url>/2020/03/23/VSCode%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAsftp/</url>
    <content><![CDATA[<h3 id="VSCode配置多个sftp，同一个文件可以分别上传到配置的sftp服务器"><a href="#VSCode配置多个sftp，同一个文件可以分别上传到配置的sftp服务器" class="headerlink" title="VSCode配置多个sftp，同一个文件可以分别上传到配置的sftp服务器"></a>VSCode配置多个sftp，同一个文件可以分别上传到配置的sftp服务器</h3><p>上面的章节已经学会了 如何一键将文件部署到服务器，但是现在遇到了一种情况，偶尔需要将文件上传</p>
<p>到客户服务器，偶尔是传到自己测试服务器。以现有的实力要实现的话 就是部署一次改一次 配置。</p>
<p>部署一次还行，经常部署肯定是不可取的，于是啥都不会只能百度咯</p>
<p>于是就搜到了这篇文章<a href="https://blog.csdn.net/u012560340/article/details/83030680" target="_blank" rel="noopener">配置多个sftp</a></p>
<p>大概关键字就是  profiles 这个字段</p>
<p>安装完 sftp 插件后 需要 按 ctrl + shift + p  搜索 sftp</p>
<p>了这个插件之后，还要配置它才能用，因为鬼才知道你的服务器是哪个，端口是什么等等。<br>最左侧选择文件模块，现在当前目录文件，当然，sftp的配置都是针对某个目录的，说白了就是某个项目，是先有项目，然后才知道你要上传什么文件，在文件模块，找到“.vscode”，展开它，发现“sftp.json”这一项就是配置sftp的文件，没有的话自己新建一个，名字要一模一样，如下图：</p>
<p><img src="/2020/03/23/VSCode配置多个sftp/image-20200323170631873.png" alt="image-20200323170631873"></p>
<p>“context”是本地目录路径，这个路径跟服务器的路径对应起来，“ignore”就是要忽略的文件，或文件夹，这里这样写就会忽略这些文件夹，“port”是服务器端口，“remotePath”是跟“context”对应的服务器那边的目录路径。<br>最关键就是这个“profiles”，多个服务器就在它里面配置，“profiles”是一个对象，里面每一个属性代表一个服务器，这里“test_h5”就是其中一个服务器的名字，“real_m_240”就是另一个服务器的名字，“profiles”里面的服务器配置就是每个服务器的配置信息，而“profiles”外面的属性就是所有服务器的公共属性，比如“profiles”外面的“port”属性，就是里面所有服务器的公共属性，如果“profiles”里面某个服务器的配置属性跟“profiles”外面的某个属性名字一样，那么，里面的属性会覆盖外面的属性。<br>“host”就是服务器的ip地址，“username”和“password”就是登录服务器要用的账号名和密码。<br>配置好之后，保存这个文件，sftp的配置就生效了，重启一下VSCode也是比较稳的做法。</p>
<p>因为是json文件，所以需要严格遵守json格式</p>
<p>json格式要求： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字段和 值都需要 引号包着  最后一个字段不能有逗号</span></span><br></pre></td></tr></table></figure>
<p>具体配置如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"vue-charging-pc"</span>,  <span class="comment">//名字  使用时需要把注释去掉</span></span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"sftp"</span>,  <span class="comment">//协议  使用时需要把注释去掉</span></span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,   <span class="comment">//服务器用户名</span></span><br><span class="line">    <span class="attr">"privateKeyPath"</span>: <span class="string">"服务器密钥文件路径"</span>,  <span class="comment">//服务器密钥文件</span></span><br><span class="line">    <span class="attr">"remotePath"</span>: <span class="string">"/home/charge/springboot/view/"</span>,  <span class="comment">//部署到服务器的目录</span></span><br><span class="line">    <span class="attr">"profiles"</span>:&#123;</span><br><span class="line">        <span class="attr">"zhishang"</span>: &#123;    <span class="comment">//sftp 的名字  当使用这个时 按下面的配置进行部署 </span></span><br><span class="line">            <span class="attr">"host"</span>: <span class="string">"服务器主机地址"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"god"</span>:&#123;</span><br><span class="line">            <span class="attr">"host"</span>: <span class="string">"服务器主机地址"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>-vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>vsCode插件sftp的使用及async/await的使用等</title>
    <url>/2020/03/22/vsCode%E6%8F%92%E4%BB%B6sftp%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8Aasync-await%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AD%89/</url>
    <content><![CDATA[<h3 id="vscode插件sftp的使用及async-await"><a href="#vscode插件sftp的使用及async-await" class="headerlink" title="vscode插件sftp的使用及async/await"></a>vscode插件sftp的使用及async/await</h3><p>在vscode拓展上搜索 sftp 安装即可</p>
<p>配置：</p>
<p>一般在开发项目时，总是有多个项目在同时开发。如果要为单一的项目配置的话，就需要打开此项目，快捷键win+shift+p 打开命令：输入：sftp 即可在该项目的根目录下生成.vscode的文件夹，并生成了一个sftp.json的文件。配置如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"远程ip地址"</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"登录名"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"登录密码"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"sftp"</span>, </span><br><span class="line">    <span class="attr">"agent"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"privateKeyPath"</span>: <span class="string">"null或如果链接服务器用的不是账号密码是key文件 这里为key文件路径"</span>, </span><br><span class="line">    <span class="attr">"passphrase"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"passive"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="attr">"interactiveAuth"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"remotePath"</span>: <span class="string">"需要打到的远程的文件夹地址"</span>,</span><br><span class="line">    <span class="attr">"context"</span>: <span class="string">"本地项目地址"</span>,</span><br><span class="line">    <span class="attr">"uploadOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"syncMode"</span>: <span class="string">"update"</span>,</span><br><span class="line">    <span class="attr">"ignore"</span>: [</span><br><span class="line">        <span class="string">"**/.vscode/**"</span>,</span><br><span class="line">        <span class="string">"**/.git/**"</span>,</span><br><span class="line">        <span class="string">"**/.DS_Store"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"watcher"</span>: &#123;</span><br><span class="line">        <span class="attr">"files"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"autoUpload"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"autoDelete"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<p>只需要配置host、username、password以及 remotePath四个参数就可以使用了。</p>
<p>1、同步全部的工程文件，可以在需要同步的文件夹上面右键：选择SFTP:Sync to remote，即可同步到远程服务器。</p>
<p>2、同步单一的文件，在以在需要同步的文件上右键，选择SFTP:Upload，即可同步到远程服务器。</p>
<p>注意：<br>不建议开启autoUpload和autoDelete操作，避免不小心把临时改动update到服务器上，就不好玩了。</p>
<h3 id="async-await-的使用"><a href="#async-await-的使用" class="headerlink" title="async/await 的使用"></a>async/await 的使用</h3><p>promise很好的解决了回调地狱的问题，但是当异步嵌套的时候会有很多then，也是挺难看的</p>
<p>所以引入了 generator，这里跳过generator 直接来将 async/await</p>
<blockquote>
<ol>
<li>await后面接一个会return new promise的函数并执行它</li>
<li>await只能放在async函数里</li>
</ol>
</blockquote>
<ul>
<li>使用async和await获取成功的结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 摇色子(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> sino = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">6</span> +<span class="number">1</span>)</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(sino)</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n =<span class="keyword">await</span> 摇色子()</span><br><span class="line">    <span class="built_in">console</span>.log(n)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>
<p>上面这段代码async中使<code>await 摇色子()</code>先执行，等到三秒后执行完再把得到的结果赋值给左边的n，也就是说test函数需要三秒钟才执行完成，所以test函数是异步的，因此前面必须写async</p>
<ul>
<li>获取失败的结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 摇色子(<span class="params">猜测</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> sino = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">6</span> +<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(sino &gt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(猜测 === <span class="string">'大'</span>)&#123;</span><br><span class="line">                resolve(sino)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                reject(sino)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(猜测 === <span class="string">'大'</span>)&#123;</span><br><span class="line">                reject(sino)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                resolve(sino)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(sino)</span><br><span class="line">        &#125;,<span class="number">300</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//把await及获取它的值的操作放在try里</span></span><br><span class="line">        <span class="keyword">let</span> n =<span class="keyword">await</span> 摇色子(<span class="string">'大'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'赢了'</span> + n)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">      <span class="comment">//失败的操作放在catch里</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'输了'</span> + error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>
<p>把await和成功后的操作放到try里，失败的放在catch</p>
<ul>
<li>为什么要用await<br> 为了使我们的异步代码，更像同步的代码</li>
<li>有多个promise，怎么拿到所有的promise都结束后的结果<br> 比如有两个色子，我想得到这两个色子的点数</li>
</ul>
<ol>
<li>使用promise</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 摇色子(<span class="params">猜测</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> sino = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">6</span> +<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(sino &gt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(猜测 === <span class="string">'大'</span>)&#123;</span><br><span class="line">                resolve(sino)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">                reject(sino)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(猜测 === <span class="string">'大'</span>)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">                reject(sino)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                resolve(sino)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(sino)</span><br><span class="line">        &#125;,<span class="number">300</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.all([摇色子(<span class="string">'大'</span>),摇色子(<span class="string">'大'</span>)]).then(<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(x)&#125;,(y)=&gt;&#123;<span class="built_in">console</span>.log(y)&#125;)</span><br></pre></td></tr></table></figure>
<p>promise.all里面跟一个数组，数组的每一项是一个返回promise的函数调用，then的第一个参数是所有的promise都成功后调用，拿到所有promise的结果是一个数组；第二个参数拿到的是第一个失败的值</p>
<ol start="2">
<li>使用await<br> await是直接获取多个promise的结果的，因为Promise.all()返回的也是一个promise所以如果要使用await拿到多个promise的值，可以直接await Promise.all()</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> n = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([摇色子(<span class="string">'大'</span>),摇色子(<span class="string">'大'</span>)])</span><br><span class="line">        <span class="built_in">console</span>.log(n)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>
<ul>
<li>async函数会返回一个promise，并且Promise对象的状态值是resolved（成功的）</li>
</ul>
<ol>
<li>如果你没有在async函数中写return，那么Promise对象resolve的值就是是undefined</li>
</ol>
<p><img src="/2020/03/22/vsCode插件sftp的使用及async-await的使用等/image-20200322225755137.png" alt="image-20200322225755137"></p>
<ol start="2">
<li>如果你写了return，那么return的值就会作为你成功的时候传入的值</li>
</ol>
<p><img src="/2020/03/22/vsCode插件sftp的使用及async-await的使用等/image-20200322225931451.png" alt="image-20200322225931451"></p>
<p><strong>await 等到之后，做了一件什么事情？</strong><br> 那么右侧表达式的结果，就是await要等的东西。<br> 等到之后，对于await来说，分2个情况</p>
<ul>
<li>不是promise对象</li>
<li>是promise对象</li>
</ul>
<blockquote>
<p>如果不是 promise , await会阻塞后面的代码，先执行async外面的同步代码，同步代码执行完，再回到async内部，把这个非promise的东西，作为 await表达式的结果。<br> 如果它等到的是一个 promise 对象，await 也会暂停async后面的代码，先执行async外面的同步代码，等着 Promise 对象 fulfilled，然后把 resolve 的参数作为 await 表达式的运算结果。</p>
</blockquote>
<ul>
<li>如果asycn里的代码都是同步的，那么这个函数被调用就会同步执行</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b'</span>)</span><br><span class="line"><span class="comment">//a</span></span><br><span class="line"><span class="comment">//b</span></span><br></pre></td></tr></table></figure>
<p>如果在await后面接的这个promsie都是同步的，后面的promise会同步执行，但是拿到这个值还是得等待（特别注意：如果promise没有一个成功的值传入，对await来说就算是失败了，下面的代码就不会执行），所以不管await后面的代码是同步还是异步，await总是需要时间，从右向左执行，先执行右侧的代码，执行完后，发现有await关键字，于是让出线程，阻塞代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> fn()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">f1()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//3js</span></span><br></pre></td></tr></table></figure>
<p>这个代码因为fn是属于同步的，所以先打印出1，然后是3，但是因为没有resolve结果，所以await拿不到值，因此不会打印2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> fn()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">f1()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<p>这个代码与前面相比多了个resolve说明promise成功了，所以await能拿到结果，因此就是1 3 2</p>
<p>async/await在项目中的应用</p>
<p>校验验证码再执行修改验证码操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> validateCode() &#123;</span><br><span class="line">     <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">     <span class="keyword">const</span> res1 = <span class="keyword">await</span> _this.$axios.post(</span><br><span class="line">       <span class="string">"/pc/msg/validate"</span>,</span><br><span class="line">       _this.$qs.stringify(_this.data)</span><br><span class="line">     );</span><br><span class="line">     <span class="keyword">if</span> (!res1.data.success) &#123;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">const</span> res2 = <span class="keyword">await</span> _this.$axios.post(</span><br><span class="line">       <span class="string">"/pc/account/change-phone"</span>,</span><br><span class="line">       _this.$qs.stringify(&#123;</span><br><span class="line">         accountId: _this.$store.state.userInfo.id,</span><br><span class="line">         phone: _this.data.phone</span><br><span class="line">       &#125;)</span><br><span class="line">     );</span><br><span class="line">     <span class="keyword">if</span> (res2.data.success) &#123;</span><br><span class="line">       _this.$message.success(<span class="string">"绑定号码修改成功"</span>);</span><br><span class="line">       setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         _this.step++;</span><br><span class="line">         _this.$store.state.userInfo.linkPhone = _this.data.phone;</span><br><span class="line">         _this.validate();</span><br><span class="line">       &#125;, <span class="number">1000</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   modify(formName)&#123;</span><br><span class="line">       <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">       _this.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(valid);</span><br><span class="line">           <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           _this.validateCode();</span><br><span class="line">         &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h4 id="vue中内联样式加载背景图片"><a href="#vue中内联样式加载背景图片" class="headerlink" title="vue中内联样式加载背景图片"></a>vue中内联样式加载背景图片</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span> <span class="attr">style</span>=<span class="string">"background:url('../assets/images/Portal/News/time.png') no-repeat top center/82px 82px"</span>&gt;</span>官方APP<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>像这样直接加载本地图片是加载不出来的，改成网络图片的话就可以。但是我就是要加载本地背景图</p>
<p>解决办法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span> <span class="attr">:style</span>=<span class="string">"'background: url(' + require('../assets/images/Portal/News/time.png') + ') no-repeat top center/82px 82px'"</span>&gt;</span>官方APP<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>采用require方式引入本地图片</p>
<h4 id="vue中引入子组件的方式"><a href="#vue中引入子组件的方式" class="headerlink" title="vue中引入子组件的方式"></a>vue中引入子组件的方式</h4><p>错误方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;footer&#125; <span class="keyword">from</span> <span class="string">'../footer'</span></span><br></pre></td></tr></table></figure>
<p>正确方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">import</span> footer <span class="keyword">from</span> <span class="string">'../footer'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        <span class="string">'v-foot'</span>: footer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="keyword">const</span> footer = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../components/Footer'</span>], resolve)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        <span class="string">'v-foot'</span>: footer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        <span class="string">'v-foot'</span>:  <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../components/Footer'</span>], resolve)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>-vscode -async</tag>
      </tags>
  </entry>
  <entry>
    <title>常用正则表达式</title>
    <url>/2020/03/19/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><ul>
<li>数字：<strong>^[0-9]*$</strong></li>
<li>n位的数字：<strong>^\d{n}$</strong></li>
<li>至少n位的数字<strong>：^\d{n,}$</strong></li>
<li>m-n位的数字：<strong>^\d{m,n}$</strong></li>
<li>零和非零开头的数字：<strong>^(0|[1-9][0-9]*)$</strong></li>
<li>非零开头的最多带两位小数的数字：<strong>^([1-9][0-9]*)+(.[0-9]{1,2})?$</strong></li>
<li>带1-2位小数的正数或负数：<strong>^(-)?\d+(.\d{1,2})$</strong></li>
<li>正数、负数、和小数：<strong>^(-|+)?\d+(.\d+)?$</strong></li>
<li>有两位小数的正实数：<strong>^[0-9]+(.[0-9]{2})?$</strong></li>
<li>有1~3位小数的正实数：<strong>^[0-9]+(.[0-9]{1,3})?$</strong></li>
<li>非零的正整数：<strong>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^+?[1-9][0-9]*$</strong></li>
<li>非零的负整数：<strong>^-[1-9][]0-9”*$ 或 ^-[1-9]\d*$</strong></li>
<li>非负整数：<strong>^\d+$ 或 ^[1-9]\d*|0$</strong></li>
<li>非正整数：<strong>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</strong></li>
<li>非负浮点数：<strong>^\d+(.\d+)?$ 或 ^[1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0$</strong></li>
<li>非正浮点数：<strong>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d*.\d*|0.\d*[1-9]\d*))|0?.0+|0$</strong></li>
<li>正浮点数：<strong>^[1-9]\d*.\d*|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$</strong></li>
<li>负浮点数：<strong>^-([1-9]\d*.\d*|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$</strong></li>
<li>浮点数：<strong>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0)$</strong></li>
</ul>
<hr>
<h2 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h2><ul>
<li>汉字：<strong>^[\u4e00-\u9fa5]{0,}$</strong></li>
<li>英文和数字：<strong>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</strong></li>
<li>长度为3-20的所有字符：<strong>^.{3,20}$</strong></li>
<li>由26个英文字母组成的字符串：<strong>^[A-Za-z]+$</strong></li>
<li>由26个大写英文字母组成的字符串：<strong>^[A-Z]+$</strong></li>
<li>由26个小写英文字母组成的字符串：<strong>^[a-z]+$</strong></li>
<li>由数字和26个英文字母组成的字符串：<strong>^[A-Za-z0-9]+$</strong></li>
<li>由数字、26个英文字母或者下划线组成的字符串：<strong>^\w+$ 或 ^\w{3,20}$</strong></li>
<li>中文、英文、数字包括下划线：<strong>^[\u4E00-\u9FA5A-Za-z0-9_]+$</strong></li>
<li>中文、英文、数字但不包括下划线等符号：<strong>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</strong></li>
<li>可以输入含有^%&amp;’,;=?$\”等字符：<strong>[^%&amp;’,;=?$\x22]+</strong></li>
<li>禁止输入含有~的字符：<strong>[^~\x22]+</strong></li>
</ul>
<hr>
<h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2><ul>
<li>Email地址：<strong>^\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*$</strong></li>
<li>域名：<strong>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+.?</strong></li>
<li>InternetURL：<strong>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$</strong></li>
<li>手机号码：<strong>^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</strong></li>
<li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<strong>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</strong></li>
<li>国内电话号码(0511-4405222、021-87888822)：<strong>\d{3}-\d{8}|\d{4}-\d{7}</strong></li>
<li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: <strong>((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</strong></li>
<li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：<strong>(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)</strong></li>
<li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<strong>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</strong></li>
<li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<strong>^[a-zA-Z]\w{5,17}$</strong></li>
<li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$</strong></li>
<li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</strong></li>
<li>日期格式：<strong>^\d{4}-\d{1,2}-\d{1,2}</strong></li>
<li>一年的12个月(01～09和1～12)：<strong>^(0?[1-9]|1[0-2])$</strong></li>
<li>一个月的31天(01～09和1～31)：<strong>^((0?[1-9])|((1|2)[0-9])|30|31)$</strong></li>
<li>钱的输入格式：<ol>
<li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<strong>^[1-9][0-9]*$</strong></li>
<li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<strong>^(0|[1-9][0-9]*)$</strong></li>
<li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<strong>^(0|-?[1-9][0-9]*)$</strong></li>
<li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<strong>^[0-9]+(.[0-9]+)?$</strong></li>
<li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<strong>^[0-9]+(.[0-9]{2})?$</strong></li>
<li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<strong>^[0-9]+(.[0-9]{1,2})?$</strong></li>
<li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<strong>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</strong></li>
<li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<strong>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</strong></li>
<li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li>
</ol>
</li>
<li>xml文件：<strong>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</strong></li>
<li>中文字符的正则表达式：<strong>[\u4e00-\u9fa5]</strong></li>
<li>双字节字符：<strong>[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</strong></li>
<li>空白行的正则表达式：<strong>\n\s*\r (可以用来删除空白行)</strong></li>
<li>HTML标记的正则表达式：<strong>&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</strong></li>
<li>腾讯QQ号：<strong>[1-9][0-9]{4,} (腾讯QQ号从10000开始)</strong></li>
<li>中国邮政编码：<strong>[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</strong></li>
<li>IP地址：<strong>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</strong></li>
</ul>
]]></content>
      <tags>
        <tag>-RegExp -js</tag>
      </tags>
  </entry>
  <entry>
    <title>多个请求下加载的展示与关闭</title>
    <url>/2020/03/12/%E5%A4%9A%E4%B8%AA%E8%AF%B7%E6%B1%82%E4%B8%8B%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%B1%95%E7%A4%BA%E4%B8%8E%E5%85%B3%E9%97%AD/</url>
    <content><![CDATA[<h4 id="多个请求下加载的展示与关闭"><a href="#多个请求下加载的展示与关闭" class="headerlink" title="多个请求下加载的展示与关闭"></a>多个请求下加载的展示与关闭</h4><p>问题：发送请求前加个 遮罩层，请求结束时关闭遮罩层</p>
<p>解决： 采用饿了吗的组件 实现遮罩层的开启与关闭</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启</span></span><br><span class="line"><span class="keyword">const</span> loading = <span class="keyword">this</span>.$loading(&#123;</span><br><span class="line">          lock: <span class="literal">true</span>,</span><br><span class="line">          text: <span class="string">'Loading'</span>,</span><br><span class="line">          spinner: <span class="string">'el-icon-loading'</span>,</span><br><span class="line">          background: <span class="string">'rgba(0, 0, 0, 0.7)'</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line"> loading.close();</span><br></pre></td></tr></table></figure>
<p>残留问题 一个页面同时发送多个请求时，每个请求都得写一遍，繁琐，而且繁琐的情况下还有bug</p>
<p>bug：当一个请求结束 别的请求未结束时 遮罩层被关闭了。</p>
<p>解决：在 app.vue配置一个全局loading</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//app.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      v-show=&quot;$store.state.isShowLoading&quot;</span><br><span class="line">      class=&quot;el-loading-mask is-fullscreen&quot;</span><br><span class="line">      style=&quot;background-color: rgba(0, 0, 0, 0.7); z-index: 2000;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div class=&quot;el-loading-spinner&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-loading&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;p class=&quot;el-loading-text&quot; ref=&quot;tips&quot;&gt;正在加载&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>如果要问这个 加载的是怎么来的？那我告诉你</p>
<p>因为我们是有用 element组件的，所以代码上打出 一个 loading 的界面，然后不要关闭 loading</p>
<p>审查元素，把这个遮罩层的元素都拿过来就好了。</p>
<p>还有另一种方法就是在弹出 loading的 时候在控制台输入 debugger 回车，loading也不会关闭</p>
<p>如果还是debugger拦截不到的话 就在控制台把网速 调成  slow-3g</p>
<p><img src="/2020/03/12/多个请求下加载的展示与关闭/1584021890068.png" alt="1584021890068"></p>
<p><img src="/2020/03/12/多个请求下加载的展示与关闭/1584021997454.png" alt="1584021997454"></p>
<p>这样就拿到了上面的元素</p>
<p>言归正传</p>
<p>在axios上设置拦截</p>
<p>上面的代码看到了是用 store.state.isShowLoading 控制是否显示的，一开始是用 全局变量 </p>
<p>Vue.prototype.isShowLoading  但是发现app上的 .isShowLoading 一直都是false，并不会</p>
<p>随时更改，后面就用vuex的store</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vuex index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> sessionStorageState = sessionStorage.getItem(<span class="string">'state'</span>)</span><br><span class="line"><span class="keyword">let</span> state</span><br><span class="line"><span class="keyword">if</span> (sessionStorageState) &#123;</span><br><span class="line">  state = <span class="built_in">JSON</span>.parse(sessionStorageState)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    isShowLoading: <span class="literal">false</span>, <span class="comment">//是否展示加载框</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> VueX = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations: &#123;&#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line">  modules: &#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueX</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//axios index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store/index'</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line">Vue.prototype.$axios = axios</span><br><span class="line">Vue.prototype.$qs = qs</span><br><span class="line">Vue.prototype.BASE_URL = <span class="string">"默认请求地址"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决本地调试跨域问题,使用 "/api"实现代理  配置请看 Vue.config.js</span></span><br><span class="line">axios.defaults.baseURL = process.env.NODE_ENV === <span class="string">'development'</span> ? <span class="string">'/api'</span> : Vue.prototype.BASE_URL</span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    store.state.isShowLoading = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    store.state.isShowLoading = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  <span class="comment">// 响应成功</span></span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">      store.state.isShowLoading = <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 响应失败</span></span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    store.state.isShowLoading = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>这个拦截器的功能是在请求前打开 loading，请求结束或出错时关闭 loading。<br>如果每次只有一个请求，这样运行是没问题的。但同时有多个请求并发，就会出现和前面说的一样的问题了。</p>
<p>举例：</p>
<p>假如现在同时发起两个请求，在请求前，拦截器 store.state.isShowLoading = true 将 loading 打开。<br>现在有一个请求结束了。store.state.isShowLoading = false 拦截器关闭 loading，但是另一个请求由于某些原因并没有结束。<br>造成的后果就是页面请求还没完成，loading 却关闭了，用户会以为页面加载完成了，结果页面不能正常运行，导致用户体验不好。</p>
<p><strong>解决方案</strong><br>在vuex上增加一个 <code>loadingCount</code> 变量，用来计算请求的次数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vuex index.js</span></span><br><span class="line">state = &#123;</span><br><span class="line">    isShowLoading: <span class="literal">false</span>, <span class="comment">//是否展示加载框</span></span><br><span class="line">    loadingCount: <span class="number">0</span>,<span class="comment">//请求的数量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当有请求的时候loadingCount++，当请求报错的时候 直接 loadingCount = 0，isShowLoading = false</p>
<p>响应结束时 loadingCount–  当loadingCount == 0  将 isShowLoading 设置成false  或者 响应报错时</p>
<p>将 loadingCount 设为 0     isShowLoading 设置成false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//axios index.js</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    store.state.isShowLoading = <span class="literal">true</span></span><br><span class="line">    store.state.loadingCount++</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求了'</span> + store.state.loadingCount)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    store.state.isShowLoading = <span class="literal">false</span></span><br><span class="line">    store.state.loadingCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  <span class="comment">// 响应成功</span></span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    store.state.loadingCount--</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'响应后还有'</span> + store.state.loadingCount)</span><br><span class="line">    <span class="keyword">if</span> (store.state.loadingCount == <span class="number">0</span>) &#123;</span><br><span class="line">      store.state.isShowLoading = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> response</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 响应失败</span></span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    store.state.isShowLoading = <span class="literal">false</span></span><br><span class="line">    store.state.loadingCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>个拦截器的功能是：<br>每当发起一个请求，打开 loading，同时 loadingCount 加1。<br>每当一个请求结束， loadingCount 减1，并判断 loadingCount 是否为 0，如果为 0，则关闭 loading。<br>这样即可解决，多个请求下有某个请求提前结束，导致 loading 关闭的问题。</p>
<p>即使这样还是不能满足开发需求，因为提示语被固定了，其实我早有准备，看到最前面的代码中那个</p>
<p>refs=”tips“ 了没？早就准备好用refs改变tips了</p>
<p>在请求之前 使用 this.$refs.tips.innerHtml = “想要的提示语”</p>
<p>发现并不能改，于是打印  this.$refs.tips  结果显示undefined，所以组件上并不能获得 父组件甚</p>
<p>至爷爷级组件的 ref。 所以想到了 使用  $bus 。</p>
<p>在子组件上触发改变提示语的 方法，在 app.vue上 接收这个方法，并改变内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">this</span>.$bus.$emit(<span class="string">"changeTips"</span>,<span class="string">"想改的内容"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.vue</span></span><br><span class="line"><span class="keyword">this</span>.$bus.$on(<span class="string">"changeTips"</span>, val =&gt; &#123;</span><br><span class="line">	<span class="keyword">this</span>.$refs.tips.innerHTML = val</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这样的话就实现了 更改 提示语的要求，但是发现改完之后别的 请求的提示语没变回来，所以就需要在请求结束之后将提示语改回来。</p>
<p>所以在axios上使用$bus的emit方法 将文字改回来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//axios index.js方法</span></span><br><span class="line"><span class="comment">//请求报错时，响应结束时，响应报错时 添加下面语句</span></span><br><span class="line">Vue.prototype.$bus.$emit(<span class="string">"changeTips"</span>,<span class="string">"1234154"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 $bus 前提是 有引入 ，在main.js上</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index'</span> <span class="comment">// 全局 路由 配置</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/index'</span> <span class="comment">//   全局 状态 配置</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./mixin/mixin'</span> <span class="comment">//              全局 mixin 注入 配置</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./plugins/element-ui'</span> <span class="comment">//       全局 element-ui 配置</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./plugins/view-design'</span> <span class="comment">//      全局 view-design 配置</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./plugins/vue-scroll'</span> <span class="comment">//       全局 vue-scroll 配置</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./plugins/infinite-scroll'</span> <span class="comment">//  全局 infinite-scroll 无限滚动 配置</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./plugins/date-format'</span> <span class="comment">//      全局 注入时间处理工具</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./axios/index'</span> <span class="comment">//              全局 axios 配置</span></span><br><span class="line">Vue.prototype.$bus = <span class="keyword">new</span> Vue()    <span class="comment">//使用$bus  </span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>
<p>不知道为什么 axios是在 定义$bus之前的，但是在 axios上 可以使用 $bus.  可能是new出来的原因吧</p>
<p>有人会说多个请求时 修改提示语，中途会被别的请求给覆盖回去，这个说法是对的，但是同时会有多个</p>
<p>请求的时候一般都是加载数据，只有单个请求时才会修改提示语。例如 修改数据，提交数据，删除数据等等</p>
<p>所以加载数据时无需更改提示语</p>
<p>但是感觉控制显示隐藏使用  vuex ，控制提示语 使用 $bus有点不协调，后面在vuex里 加了个提示语的变量</p>
<p>统一都用vuex</p>
<p>最终 app.vue如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vuex index.js</span></span><br><span class="line">state = &#123;</span><br><span class="line">    isShowLoading: <span class="literal">false</span>, <span class="comment">//是否展示加载框</span></span><br><span class="line">    loadingCount: <span class="number">0</span>,<span class="comment">//请求的数量</span></span><br><span class="line">    tips: <span class="string">'正在加载'</span>, <span class="comment">//加载提示语</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--app.vue--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      v-show=&quot;$store.state.isShowLoading&quot;</span><br><span class="line">      class=&quot;el-loading-mask is-fullscreen&quot;</span><br><span class="line">      style=&quot;background-color: rgba(0, 0, 0, 0.7); z-index: 2000;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div class=&quot;el-loading-spinner&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-loading&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;p class=&quot;el-loading-text&quot; ref=&quot;tips&quot;&gt;&#123;&#123; $store.state.tips &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//axios index.js</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    store.state.isShowLoading = <span class="literal">true</span></span><br><span class="line">    store.state.loadingCount++</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求了'</span> + store.state.loadingCount)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    store.state.isShowLoading = <span class="literal">false</span></span><br><span class="line">    store.state.loadingCount = <span class="number">0</span></span><br><span class="line">    store.state.tips = <span class="string">'正在加载'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  <span class="comment">// 响应成功</span></span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    store.state.loadingCount--</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'响应后还有'</span> + store.state.loadingCount)</span><br><span class="line">    <span class="keyword">if</span> (store.state.loadingCount == <span class="number">0</span>) &#123;</span><br><span class="line">      store.state.tips = <span class="string">'正在加载'</span></span><br><span class="line">      store.state.isShowLoading = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">   	<span class="keyword">return</span> response</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 响应失败</span></span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    store.state.isShowLoading = <span class="literal">false</span></span><br><span class="line">    store.state.loadingCount = <span class="number">0</span></span><br><span class="line">    store.state.tips = <span class="string">'正在加载'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请求前需要修改提示语的地方</span></span><br><span class="line"><span class="keyword">this</span>.$store.state.tips = <span class="string">"想要的提示语"</span></span><br></pre></td></tr></table></figure>
<p>这样按理说其实就是结束了 </p>
<p>但是由于有使用 session缓存，当有缓存时时从 session拿数据保存到state的。</p>
<p>所以偶尔出现 loadingCount 不是为0的情况，所以加了个 保存到session之前将 loadingCount 设置为0</p>
<p>isShowLoading设置为false，这个情况让我一直摸不着 找了挺久问题的。loading一直关不掉，才有上面每次</p>
<p>请求和响应时打印  loadingCount </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--app.vue--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      v-show=&quot;$store.state.isShowLoading&quot;</span><br><span class="line">      class=&quot;el-loading-mask is-fullscreen&quot;</span><br><span class="line">      style=&quot;background-color: rgba(0, 0, 0, 0.7); z-index: 2000;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div class=&quot;el-loading-spinner&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-loading&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;p class=&quot;el-loading-text&quot; ref=&quot;tips&quot;&gt;&#123;&#123; $store.state.tips &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;App&apos;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    //监听页面刷新，页面刷新时将 vuex 的数据存储起来</span><br><span class="line">    window.addEventListener(&apos;unload&apos;, this.saveState)</span><br><span class="line">    //页面加载完清除sessionStorage中的 state</span><br><span class="line">    window.addEventListener(&apos;load&apos;, () =&gt; &#123;</span><br><span class="line">      console.log(&apos;load加载完成&apos;)</span><br><span class="line">      //清除state</span><br><span class="line">      sessionStorage.removeItem(&apos;state&apos;)</span><br><span class="line">      //清除所有</span><br><span class="line">      // sessionStorage.clear();</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(this.$store.state.loadingCount)</span><br><span class="line">    console.log(this.$store.state.isShowLoading)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //将vuex 的数据 存储到浏览器缓存</span><br><span class="line">    saveState() &#123;</span><br><span class="line">      console.log(&apos;页面刷新&apos;)</span><br><span class="line">      //存之前将 一些变量重置下</span><br><span class="line">      this.$store.state.isShowLoading = false</span><br><span class="line">      this.$store.state.loadingCount = 0</span><br><span class="line">      this.$store.state.tips = &quot;正在加载&quot;</span><br><span class="line">      sessionStorage.setItem(&apos;state&apos;, JSON.stringify(this.$store.state))</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">@import &apos;./assets/styles/reset.css&apos;;</span><br><span class="line">@import &apos;./assets/styles/commons.css&apos;;</span><br><span class="line">#app &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">&#125;</span><br><span class="line">/* </span><br><span class="line">  AdminInvoiceManageDeliveryAddress 寄送地址页面的 选择地区 el-cascader的样式</span><br><span class="line">*/</span><br><span class="line">.el-cascader-panel &#123;</span><br><span class="line">  height: 300px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>看到了  el-cascader，下一篇我们就讲这个</p>
<p>刚弄完就遇到同事说 他有个地方轮询了，不需要这个加载画面，说可以配置一下吗？</p>
<p>答案肯定是可以的，于是</p>
<ol>
<li>在vuex里面再加个变量  mustShowLoading  设置为 true</li>
<li>请求拦截那里 设置 当mustShowLoading为true时才打开加载窗口</li>
<li>将mustShowLoading设置为true</li>
<li>不需要加载画面的窗口 请求前将mustShowLoading 设为false</li>
</ol>
<p>代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//store index.js</span></span><br><span class="line">state = &#123;</span><br><span class="line">    isShowLoading: <span class="literal">false</span>, <span class="comment">//是否展示加载框</span></span><br><span class="line">    loadingCount: <span class="number">0</span>, <span class="comment">//请求的数量</span></span><br><span class="line">    tips: <span class="string">'正在加载'</span>, <span class="comment">//加载提示语</span></span><br><span class="line">    mustShowLoading: <span class="literal">true</span>, <span class="comment">//是否请求开启 loading</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//axios index.js</span></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (store.state.mustShowLoading) &#123;</span><br><span class="line">      store.state.isShowLoading = <span class="literal">true</span></span><br><span class="line">      store.state.loadingCount++</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'请求了'</span> + store.state.loadingCount)</span><br><span class="line">    &#125;</span><br><span class="line">    store.state.mustShowLoading = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    store.state.isShowLoading = <span class="literal">false</span></span><br><span class="line">    store.state.loadingCount = <span class="number">0</span></span><br><span class="line">    store.state.mustShowLoading = <span class="literal">true</span></span><br><span class="line">    store.state.tips = <span class="string">'正在加载'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>一开始是这样的，结果忘记后面响应时 是有将 count– 的，导致 count不会等于 0 导致加载框去不掉</p>
<p>最终方案</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//axios.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">'@/assets/js/resetMessage'</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios</span><br><span class="line">Vue.prototype.$qs = qs</span><br><span class="line">Vue.prototype.FILE_PATH = <span class="string">'http://img.test.zhishangsoft.com/charge/file/'</span></span><br><span class="line">Vue.prototype.IMG_PATH = <span class="string">'http://img.test.zhishangsoft.com/charge/images/'</span></span><br><span class="line">Vue.prototype.BASE_URL = <span class="string">'http://47.99.240.206:9071'</span></span><br><span class="line">axios.defaults.baseURL = process.env.NODE_ENV === <span class="string">'development'</span> ? <span class="string">'/api'</span> : Vue.prototype.BASE_URL</span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> accountId = store.state.accountId</span><br><span class="line">    <span class="keyword">let</span> token = store.state.token</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      <span class="comment">// 判断是否存在token，如果存在的话，则每个http header都加上token</span></span><br><span class="line">      config.headers.common.token = <span class="string">`<span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">      config.headers.common.accountId = <span class="string">`<span class="subst">$&#123;accountId&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (store.state.mustShowLoading) &#123;</span><br><span class="line">      store.state.isShowLoading = <span class="literal">true</span></span><br><span class="line">      store.state.loadingCount++</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'请求了'</span> + store.state.loadingCount)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    store.state.isShowLoading = <span class="literal">false</span></span><br><span class="line">    store.state.loadingCount = <span class="number">0</span></span><br><span class="line">    store.state.mustShowLoading = <span class="literal">true</span></span><br><span class="line">    store.state.tips = <span class="string">'正在加载'</span></span><br><span class="line">    message.error(<span class="string">'请求失败'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  <span class="comment">// 响应成功</span></span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (store.state.loadingCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      store.state.loadingCount--</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'响应后还有'</span> + store.state.loadingCount)</span><br><span class="line">      <span class="keyword">if</span> (store.state.loadingCount == <span class="number">0</span>) &#123;</span><br><span class="line">        store.state.tips = <span class="string">'正在加载'</span></span><br><span class="line">        store.state.isShowLoading = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    store.state.mustShowLoading = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (response.data.code === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.data.code === <span class="number">0</span>) &#123;</span><br><span class="line">      message.error(response.data.info)</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 响应失败</span></span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    store.state.isShowLoading = <span class="literal">false</span></span><br><span class="line">    store.state.loadingCount = <span class="number">0</span></span><br><span class="line">    store.state.mustShowLoading = <span class="literal">true</span></span><br><span class="line">    store.state.tips = <span class="string">'正在加载'</span></span><br><span class="line">    message.error(<span class="string">'响应失败啦'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>-vue -element</tag>
      </tags>
  </entry>
  <entry>
    <title>页面刷新后vuex数据消失问题，以及登录token啥的</title>
    <url>/2020/02/29/%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E5%90%8Evuex%E6%95%B0%E6%8D%AE%E6%B6%88%E5%A4%B1%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BB%A5%E5%8F%8A%E7%99%BB%E5%BD%95token%E5%95%A5%E7%9A%84/</url>
    <content><![CDATA[<h4 id="页面刷新后vuex数据消失问题，以及登录成功后设置请求头，跨域问题"><a href="#页面刷新后vuex数据消失问题，以及登录成功后设置请求头，跨域问题" class="headerlink" title="页面刷新后vuex数据消失问题，以及登录成功后设置请求头，跨域问题"></a>页面刷新后vuex数据消失问题，以及登录成功后设置请求头，跨域问题</h4><p>问题：vue项目肯定少不了使用vuex保存数据，但是vuex保存的数据只要页面一刷新，vuex的数据就初始化了。</p>
<h2 id="1-产生原因"><a href="#1-产生原因" class="headerlink" title="1. 产生原因"></a>1. 产生原因</h2><p>其实很简单，因为store里的数据是保存在运行内存中的,当页面刷新时，页面会重新加载vue实例，store里面的数据就会被重新赋值。</p>
<h4 id="2-解决思路"><a href="#2-解决思路" class="headerlink" title="2 解决思路"></a>2 解决思路</h4><p>1 一种是state里的数据全部是通过请求来触发action或mutation来改变</p>
<p>2 一种是将state里的数据保存一份到本地存储(localStorage、sessionStorage、cookie）中</p>
<p>很显然，第一种方案基本不可行，除非项目很小或者vuex存储的数据很少。而第二种可以保证刷新页面数据不丢失且易于读取。</p>
<h4 id="3-解决过程"><a href="#3-解决过程" class="headerlink" title="3 解决过程"></a>3 解决过程</h4><p>1 首先得选择合适的客户端存储</p>
<p>localStorage是永久存储在本地，除非你主动去删除;</p>
<p>sessionStorage是存储到当前页面关闭为止;</p>
<p>cookie则根据你设置的有效时间来存储，但缺点是不能储存大数据且不易读取。</p>
<p>我选择的是sessionStorage,选择的原因vue是单页面应用，操作都是在一个页面跳转路由，另一个原因是sessionStorage可以保证打开页面时sessionStorage的数据为空，而如果是localStorage则会读取上一次打开页面的数据。</p>
<p>2 然后是怎么用sessionStorage来保存state里的数据。</p>
<h5 id="第一种方案"><a href="#第一种方案" class="headerlink" title="第一种方案"></a>第一种方案</h5><p>由于state里的数据是响应式，所以sessionStorage存储也要跟随变化。又由于vuex规定所有state里数据必须通过mutation方法来修改，所以第一种方案就是mutation修改state的同时修改sessionStorage对应存储的属性</p>
<h5 id="第二种方案"><a href="#第二种方案" class="headerlink" title="第二种方案"></a>第二种方案</h5><p>第一种方案确实可以解决问题，但这种方法很明显让人觉得怪异，都这样了，那不如直接用sessionStorage来做状态管理。</p>
<p>那怎么才能不用每次修改state时同时也要修改sessionStorage呢？这时我们可以换一个思路，因为我们是只有在刷新页面时才会丢失state里的数据，那有没有办法在点击页面刷新时先将state数据保存到sessionStorage,然后才真正刷新页面?</p>
<p>当然有，beforeunload这个事件在页面刷新时先触发的。那这个事件应该在哪里触发呢？我们总不能每个页面都监听这个事件，所以我选择放在app.vue这个入口组件中，这样就可以保证每次刷新页面都可以触发。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--app.vue--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;App&apos;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    //监听页面刷新，页面刷新时将 vuex 的数据存储起来  使用 beforeunload 或 unload 都可以</span><br><span class="line">    window.addEventListener(&apos;unload&apos;, this.saveState)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //将vuex 的数据 存储到浏览器缓存</span><br><span class="line">    saveState() &#123;</span><br><span class="line">      console.log(&apos;页面刷新&apos;)</span><br><span class="line">      //存之前将 一些变量重置下</span><br><span class="line">      this.$store.state.isShowLoading = false</span><br><span class="line">      this.$store.state.loadingCount = 0</span><br><span class="line">      this.$store.state.tips = &quot;正在加载&quot;</span><br><span class="line">      sessionStorage.setItem(&apos;state&apos;, JSON.stringify(this.$store.state))</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>然后 store index.js 文件做如下处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//store index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sessionStorageState = sessionStorage.getItem(<span class="string">'state'</span>)</span><br><span class="line"><span class="keyword">let</span> state</span><br><span class="line"><span class="keyword">if</span> (sessionStorageState) &#123;  <span class="comment">//如果有sessionStorage的话拿 里面的数据</span></span><br><span class="line">  state = <span class="built_in">JSON</span>.parse(sessionStorageState)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    token: <span class="number">0</span>, <span class="comment">//       用户token</span></span><br><span class="line">    accountId: <span class="number">0</span>, <span class="comment">//   用户ID</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> VueX = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    login(state, obj) &#123;</span><br><span class="line">      state.token = obj.token</span><br><span class="line">      state.accountId = obj.id</span><br><span class="line">    &#125;,</span><br><span class="line">    clearInfo(state) &#123;</span><br><span class="line">      state.token = <span class="literal">null</span></span><br><span class="line">      state.accountId = <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line">  modules: &#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueX</span><br></pre></td></tr></table></figure>
<p>这样就解决了页面刷新时 vuex数据消失的问题，但是还是有个问题，这样的话 存储的一些数据就暴露在 sessionStorage 了，存在安全隐患，需要解决这问题</p>
<p>就是state的数据加载完后清除sessionStorage。</p>
<p>所以在app.vue 的mounted 里添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//页面加载完清除sessionStorage中的 state</span></span><br><span class="line">   <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'load加载完成'</span>)</span><br><span class="line">     <span class="comment">//清除state</span></span><br><span class="line">     sessionStorage.removeItem(<span class="string">'state'</span>)</span><br><span class="line">     <span class="comment">//清除所有</span></span><br><span class="line">     <span class="comment">// sessionStorage.clear();</span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>
<p>这样就解决了</p>
<p>接下来将全局设置请求头</p>
<h4 id="axios全局设置请求头"><a href="#axios全局设置请求头" class="headerlink" title="axios全局设置请求头"></a>axios全局设置请求头</h4><p>一些接口是要求登陆后才能访问的，登录后会从后台得到一个登录凭证token，和用户id。通过把这两个值设置</p>
<p>到请求头才可以访问一些接口。通过请求拦截配置请求头</p>
<p>先看看登录</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//登录成功后将获取到的数据存到 vuex</span></span><br><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'login'</span>, &#123;</span><br><span class="line">            id: success.id,</span><br><span class="line">            token: success.token,</span><br><span class="line">          &#125;)</span><br></pre></td></tr></table></figure>
<p>再看拦截</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//axios 请求拦截</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store/index'</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line">Vue.prototype.$axios = axios</span><br><span class="line">Vue.prototype.$qs = qs</span><br><span class="line">Vue.prototype.BASE_URL = <span class="string">'127.0.0.1:11111请求的ip'</span></span><br><span class="line">axios.defaults.baseURL = process.env.NODE_ENV === <span class="string">'development'</span> ? <span class="string">'/api'</span> : Vue.prototype.BASE_URL</span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> accountId = store.state.accountId</span><br><span class="line">    <span class="keyword">let</span> token = store.state.token</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      <span class="comment">// 判断是否存在token，如果存在的话，则每个http header都加上token</span></span><br><span class="line">      config.headers.common.token = <span class="string">`<span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">      config.headers.common.accountId = <span class="string">`<span class="subst">$&#123;accountId&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  <span class="comment">// 响应成功</span></span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.data.code === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.data.code === <span class="number">0</span>) &#123;</span><br><span class="line">      message(response.data.info)</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 响应失败</span></span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>这样就设置好全局请求头了。</p>
<h4 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h4><p>由于本地调试的访问地址是 localhost:8080或者本机ip地址，而请求的接口地址是  XXX.XXX.XXX.XXX:XXXX的ip地址，所以就会产生跨域.</p>
<p>解决办法就是在 vue.config.js上使用代理</p>
<p>具体如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="keyword">const</span> CompressionPlugin = <span class="built_in">require</span>(<span class="string">'compression-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">'./'</span>,</span><br><span class="line">  indexPath: <span class="string">'index.html'</span>,</span><br><span class="line">  filenameHashing: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  pages: &#123;</span><br><span class="line">    index: &#123;</span><br><span class="line">      entry: <span class="string">'src/main.js'</span>,</span><br><span class="line">      template: <span class="string">'public/index.html'</span>,</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">      title: <span class="string">'Index Page'</span>,</span><br><span class="line">      chunks: [<span class="string">'chunk-vendors'</span>, <span class="string">'chunk-common'</span>, <span class="string">'index'</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  runtimeCompiler: <span class="literal">false</span>,</span><br><span class="line">  productionSourceMap: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  configureWebpack: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">          <span class="keyword">new</span> CompressionPlugin(&#123;</span><br><span class="line">            algorithm: <span class="string">'gzip'</span>,</span><br><span class="line">            test: <span class="regexp">/\.(js|css)$/</span>,</span><br><span class="line">            threshold: <span class="number">10240</span>,</span><br><span class="line">            deleteOriginalAssets: <span class="literal">false</span>,</span><br><span class="line">            minRatio: <span class="number">0.8</span>,</span><br><span class="line">          &#125;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'接口ip地址及端口号'</span>, </span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//axios index.js</span></span><br><span class="line">Vue.prototype.BASE_URL = <span class="string">'项目部署后的ip地址及端口号'</span></span><br><span class="line"><span class="comment">//开发环境的话使用 /api  实现代理  生产环境使用 项目部署后的 ip地址及端口号</span></span><br><span class="line">axios.defaults.baseURL = process.env.NODE_ENV === <span class="string">'development'</span> ? <span class="string">'/api'</span> : Vue.prototype.BASE_URL</span><br></pre></td></tr></table></figure>
<p>这样处理后重启项目，本地环境 跨域问题解决。</p>
<p>但是打包后生产环境会有跨域问题</p>
<p>这时就需要配置 nginx 的配置文件了</p>
<p>配置文件如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#定义变量 charge-vue的值为 接口ip地址及端口号</span><br><span class="line">upstream charge-vue&#123;</span><br><span class="line">        server IP地址:端口号;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">		listen 端口号;</span><br><span class="line">		server_name  项目启动ip或域名;</span><br><span class="line">		location / &#123;</span><br><span class="line">				root /home/charge/springboot/view/dist;  //项目文件路径</span><br><span class="line">				try_files $uri $uri/ /index.html;    //项目入口文件</span><br><span class="line">				add_header X-Frame-Options SAMEORIGIN;</span><br><span class="line">				expires      3d;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		location ~* \.(txt)$ &#123;</span><br><span class="line">				root /usr/share/nginx/html;</span><br><span class="line">				expires      7d;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		location /api/ &#123;                    //当访问遇到 /api/前缀时 代理到上面的接口</span><br><span class="line">				proxy_pass http://charge-vue;</span><br><span class="line">				proxy_set_header Host $host;</span><br><span class="line">				proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">				proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">								client_max_body_size 50m;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		 location /pc/ &#123;              //当访问遇到 /pc/前缀时 代理到上面的接口</span><br><span class="line">                                proxy_pass http://charge-vue;</span><br><span class="line">                                proxy_set_header Host $host;</span><br><span class="line">                                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                                                                client_max_body_size 50m;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此 线上版本跨域问题也解决</p>
]]></content>
      <tags>
        <tag>-vuex -vue -axios</tag>
      </tags>
  </entry>
  <entry>
    <title>element-ui遇到的坑</title>
    <url>/2020/02/27/element-ui%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h4 id="element-ui遇到的坑"><a href="#element-ui遇到的坑" class="headerlink" title="element-ui遇到的坑"></a>element-ui遇到的坑</h4><h5 id="Carousel-走马灯"><a href="#Carousel-走马灯" class="headerlink" title="Carousel 走马灯"></a>Carousel 走马灯</h5><p>需求：轮播图宽度百分百，高度自适应。</p>
<p>问题：走马灯必须设置高度，否则高度默认300；</p>
<p>解决思路：获取图片高度后再设置 走马灯高度 为图片高度。</p>
<p><strong>打印图片高度，偶尔是 0，偶尔是真正的图片高度。</strong></p>
<p>原因： 由于图片加载需要时间，所以 高度为0；</p>
<p>所以必须在图片加载完后才能拿到图片高度，因此使用延迟测试时下，基本上可以。但是这样是不严谨的。</p>
<p>最后：在轮播图图片加载完成后才执行设置轮播图高度。</p>
<p>代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!--banner部分开始--&gt;</span><br><span class="line">    &lt;div class=&quot;banner-box&quot;&gt;</span><br><span class="line">      &lt;el-carousel :autoplay=&quot;false&quot; arrow=&quot;never&quot; trigger=&quot;click&quot; :height=&quot;bannerHeight&quot;&gt;</span><br><span class="line">        &lt;el-carousel-item v-for=&quot;(item, index) in bannerList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">          &lt;a :href=&quot;item.url&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">            &lt;img ref=&quot;img&quot; width=&quot;100%&quot; @load=&quot;loadCompelete(index)&quot; :src=&quot;item.src&quot; :alt=&quot;item&quot; /&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">        &lt;/el-carousel-item&gt;</span><br><span class="line">      &lt;/el-carousel&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!--banner部分结束--&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                completeBannerImgs: [], //已完成加载的轮播图图片索引</span><br><span class="line">      			bannerHeight: &apos;0px&apos;,</span><br><span class="line">                bannerList: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        url: &apos;https://www.qq.com&apos;,</span><br><span class="line">                        src:</span><br><span class="line">                        &apos;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1582374543898&amp;di=7447d83b1d496897775b011b2c1f3362&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.08lr.cn%2Fuploads%2Fallimg%2F170822%2F1-1FR2164649.jpg&apos;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        url: &apos;https://www.baidu.com&apos;,</span><br><span class="line">                        src: &apos;http://qiniu.xiaobusoft.com/banner.png&apos;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        url: &apos;https://www.baidu.com&apos;,</span><br><span class="line">                        src: &apos;http://p0.ifengimg.com/pmop/2017/0518/524BD5F65E9CED48A41F12E2C9BC6A5A61C457FE_size35_w578_h315.jpeg&apos;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            var _this = this</span><br><span class="line">            _this.initEven()</span><br><span class="line">        &#125;,</span><br><span class="line">        method:&#123;</span><br><span class="line">            //初始化事件</span><br><span class="line">            initEven() &#123;</span><br><span class="line">              var _this = this</span><br><span class="line">              //窗口改变时改变轮播图高度</span><br><span class="line">              window.onresize = function() &#123;</span><br><span class="line">               	 _this.imgUpload()</span><br><span class="line">              &#125;</span><br><span class="line">            //判断轮播图是否加载完成</span><br><span class="line">            loadCompelete(index) &#123;</span><br><span class="line">                this.completeBannerImgs.push(index)</span><br><span class="line">                if (this.completeBannerImgs.length == this.bannerList.length) &#123;</span><br><span class="line">                    console.log(&apos;图片加载完&apos;)</span><br><span class="line">                    this.imgUpload()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //选出最低高度做为轮播图高度</span><br><span class="line">            imgUpload() &#123;</span><br><span class="line">                var _this = this</span><br><span class="line">                var height</span><br><span class="line">                for (var i = 0; i &lt; _this.$refs.img.length; i++) &#123;</span><br><span class="line">                    if (i == 0) &#123;</span><br><span class="line">                        height = _this.$refs.img[i].height</span><br><span class="line">                    &#125; else if (height &gt; _this.$refs.img[i].height) &#123;</span><br><span class="line">                        height = _this.$refs.img[i].height</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                _this.bannerHeight = height + &apos;px&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>以上方法解决轮播图高度问题，测试过 low-3g 网络，fast-3g网络，均可用。暂没遇到问题。</p>
<h5 id="Message-消息提示"><a href="#Message-消息提示" class="headerlink" title="Message 消息提示"></a>Message 消息提示</h5><p>按需引入Message</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br></pre></td></tr></table></figure>
<p>根据<a href="https://element.eleme.io/#/zh-CN/component/message" target="_blank" rel="noopener">elemment-ui文档</a>调用Message</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$message(&apos;这是一条消息提示&apos;);</span><br></pre></td></tr></table></figure>
<p>此时会报错  <strong>this.$message is not a function</strong></p>
<p>原因 vue实例中并没有$message这个方法</p>
<p>解决：在后面添加  Vue.prototype.$message = Message</p>
<p>即如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line">Vue.prototype.$message = Message</span><br></pre></td></tr></table></figure>
<p>此时弹框就可以用了。有时会遇到<strong>页面刷新时（只有刷新时复现）</strong> 有个消息框在页面上。</p>
<p>原因：引用时加了  Vue.use(Message)</p>
<p>即如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line">Vue.use(Message)</span><br><span class="line">Vue.prototype.$message = Message</span><br></pre></td></tr></table></figure>
<p>解决就是<strong><em>把这行去掉即可</em></strong>，或者<strong>将Vue.use(Message)改为Vue.component(Message.name, Message)</strong></p>
<p>上述问题都解决后，这个Message还是有问题的。</p>
<p>会遇到重复弹出多个message框的情况。</p>
<p><img src="/2020/02/27/element-ui遇到的坑/1582779800317.png" alt="1582779800317"></p>
<p>如何解决呢？</p>
<p>可以看到，element-ui是动态往页面根节点插入message元素来实现弹框效果的，都拥有el-message类</p>
<p><img src="/2020/02/27/element-ui遇到的坑/1582779945248.png" alt="1582779945248"></p>
<p>那么我们就可以通过判断页面中message的个数来决定要不要弹出第二个提示框</p>
<p>这就需要重新写一下element-ui的message</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//resetMessage.js</span></span><br><span class="line"><span class="comment">/**重置message，防止重复点击重复弹出message弹框 */</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    Message</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">const</span> showMessage = <span class="built_in">Symbol</span>(<span class="string">'showMessage'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoneMessage</span> </span>&#123;</span><br><span class="line">    [showMessage](type, options, single) &#123;</span><br><span class="line">        <span class="keyword">if</span> (single) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">document</span>.getElementsByClassName(<span class="string">'el-message'</span>).length === <span class="number">0</span>) &#123;</span><br><span class="line">                Message[type](options)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Message[type](options)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    info(options, single = <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>[showMessage](<span class="string">'info'</span>, options, single)</span><br><span class="line">    &#125;</span><br><span class="line">    warning(options, single = <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>[showMessage](<span class="string">'warning'</span>, options, single)</span><br><span class="line">    &#125;</span><br><span class="line">    error(options, single = <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>[showMessage](<span class="string">'error'</span>, options, single)</span><br><span class="line">    &#125;</span><br><span class="line">    success(options, single = <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>[showMessage](<span class="string">'success'</span>, options, single)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> message = <span class="keyword">new</span> DoneMessage();</span><br></pre></td></tr></table></figure>
<p>main.js引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  message</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@/utils/resetMessage'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line">Vue.prototype.$message = message;</span><br></pre></td></tr></table></figure>
<p>全局调用方法：</p>
<p><strong>this.$message.error(‘hello’)或者this,$message.error({message:’hello’})</strong></p>
<p>注意：挂载自定义message必须放在Vue.use(ElementUI)后面，才能覆盖element-ui默认的message，不然没有效果</p>
<p>这样就不用担心重复点击会弹出好多弹框了</p>
<p>上面的方法是根据 页面中 el-message的数量决定要不要弹出下一个提示框，重复提示的时候必须等上一个message隐藏了之后才能弹出下一个，这就导致后续的点击没有反应，缺少页面反馈，会有卡顿的现象，如果快速点击不同提示的按钮，由于第一个弹框还没隐藏，后续不同的提示也不会展示；</p>
<p>例如：两个点击按钮，两种提示语，点击了一个弹出对应提示语，但是点击另一个弹不出新得提示语言；</p>
<p>解决：</p>
<p>利用element-ui中message的close方法，在下一个弹框弹出前先把上一个弹框实例关闭掉</p>
<p>把之前的代码改造一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//resetMessage.js</span></span><br><span class="line"><span class="comment">/**重置message，防止重复点击重复弹出message弹框 */</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    Message</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">const</span> showMessage = <span class="built_in">Symbol</span>(<span class="string">'showMessage'</span>);</span><br><span class="line"><span class="keyword">let</span> messageInstance = <span class="literal">null</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoneMessage</span> </span>&#123;</span><br><span class="line">    [showMessage](type, options, single) &#123;</span><br><span class="line">        <span class="keyword">if</span> (messageInstance &amp;&amp; single) &#123;</span><br><span class="line">            messageInstance.close()</span><br><span class="line">        &#125;</span><br><span class="line">        messageInstance = Message[type](options)</span><br><span class="line">    &#125;</span><br><span class="line">    info(options, single = <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>[showMessage](<span class="string">'info'</span>, options, single)</span><br><span class="line">    &#125;</span><br><span class="line">    warning(options, single = <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>[showMessage](<span class="string">'warning'</span>, options, single)</span><br><span class="line">    &#125;</span><br><span class="line">    error(options, single = <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>[showMessage](<span class="string">'error'</span>, options, single)</span><br><span class="line">    &#125;</span><br><span class="line">    success(options, single = <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>[showMessage](<span class="string">'success'</span>, options, single)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> message = <span class="keyword">new</span> DoneMessage();</span><br></pre></td></tr></table></figure>
<p>这样重复点击的时候页面弹框和用户的行为有了一定的交互，体验更好</p>
<p>但是还是有不足</p>
<p>不足： 因为是通过new方法创建的对象，所以只能拿通过$message.error()的形式调用，不支持$message({})形式调用，参考element-ui中message方法的实现，将封装再次优化一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//resetMessage.js</span></span><br><span class="line"><span class="comment">/**重置message，防止重复点击重复弹出message弹框 */</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    Message</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">let</span> messageInstance = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> resetMessage = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(messageInstance) &#123;</span><br><span class="line">        messageInstance.close()</span><br><span class="line">    &#125;</span><br><span class="line">    messageInstance = Message(options)</span><br><span class="line">&#125;</span><br><span class="line">;[<span class="string">'error'</span>,<span class="string">'success'</span>,<span class="string">'info'</span>,<span class="string">'warning'</span>].forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">    resetMessage[type] = <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> options === <span class="string">'string'</span>) &#123;</span><br><span class="line">            options = &#123;</span><br><span class="line">                message:options</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        options.type = type</span><br><span class="line">        <span class="keyword">return</span> resetMessage(options)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> message = resetMessage</span><br></pre></td></tr></table></figure>
<p>这样两种调用方式都支持了</p>
]]></content>
      <tags>
        <tag>-vue -elementUi</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA2019.3最新激活教程</title>
    <url>/2020/02/18/IDEA2019.3%E6%9C%80%E6%96%B0%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="IDEA-2019-3-最新激活教程，有效期到-2089-年"><a href="#IDEA-2019-3-最新激活教程，有效期到-2089-年" class="headerlink" title="IDEA 2019.3 最新激活教程，有效期到 2089 年"></a>IDEA 2019.3 最新激活教程，有效期到 2089 年</h3><p><img src="/2020/02/18/IDEA2019.3最新激活教程/ideaLogo.jpg" alt="img"></p>
<blockquote>
<p>申明：本教程 IntelliJ IDEA 破解补丁、激活码均收集于网络，请勿商用，仅供个人学习使用，如有侵权，请联系作者删除。</p>
</blockquote>
<p>注意</p>
<ul>
<li>本教程理论上适用于 IntelliJ IDEA 所有版本，请放心食用~</li>
<li>本教程适用于 JetBrains 全系列产品，包括 Pycharm、IDEA、WebStorm、Phpstorm、Datagrip、RubyMine、CLion、AppCode 等。</li>
<li>本教程无需修改hosts文件。</li>
</ul>
<p>一、前言</p>
<p>说实话，IDEA 更新是真滴快，还以为 IDEA 2019.2.4 后面会更新 IDEA 2019.2.5 版本，谁知道 11 月份刚结束，官方直接就上了 2019.3 版本 …</p>
<blockquote>
<p>据官方说 IDEA 2019.3 版本在启动速度以及 UI 交互上做了很大优化。</p>
</blockquote>
<p>今天无事便更新一波，尝尝鲜，使用的方法还是之前 2019.2 的破解方法，同样可以破解成功，Happy~, 又可以愉快的玩耍了。</p>
<p>废话少说，开始激活破解 …</p>
<p>三、下载最新的 IDEA 2019.3</p>
<p>其实也可以从老版本直接升级，这里为了照顾大部分人可能第一次安装，我们选择从官网下载，下载地址为: <a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download/</a></p>
<p><img src="/2020/02/18/IDEA2019.3最新激活教程/ideaDownload.jpg" alt="img"></p>
<p>点击下载，静待下载完成~</p>
<p>四、启动 IDEA 2019.3 安装包</p>
<p>这里笔者机器上，之前是安装过 IDEA 2019.2.3 版本的，所以提示是否删除老版本，这里我们选择删除老版本：</p>
<p><img src="/2020/02/18/IDEA2019.3最新激活教程/ideaDeleteOld.jpg" alt="img"></p>
<blockquote>
<p>注意: 若你第一次安装，是没有这一步的，跳过看后面即可~</p>
</blockquote>
<p>继续点击下一步，这里笔者的电脑是 64 位的，顺便将 64 位的 IDEA 启动图标生成到桌面上：</p>
<p><img src="/2020/02/18/IDEA2019.3最新激活教程/idea64.png" alt="img"></p>
<p>点击下一步，这里又弹出卸载老版本 IDEA 2019.2.3 可以做的操作，如果是第一次安装，则没有这一步，看下面步骤即可~</p>
<p>这里由于我之前安装有老版本的 IDEA, 选择将老版本的缓存、本地历史也删除掉：</p>
<p><img src="/2020/02/18/IDEA2019.3最新激活教程/ideaDeleteHistroy.png" alt="img"></p>
<blockquote>
<p>注意：很多小伙伴激活失败，很可能是之前老版本的遗留缓存导致的，在升级的时候，一定记住要给删除掉，否则，可能导致激活失败的情况~</p>
</blockquote>
<p>继续点击下一步，启动 IDEA 2019.3, 启动成功后，我们可以看到 IDEA 新的欢迎界面如下:</p>
<p><img src="/2020/02/18/IDEA2019.3最新激活教程/idea.jpg" alt="img"></p>
<p>五、开始激活</p>
<p>在激活之前，主要注意：无需改动 host 文件。</p>
<p><strong>重点：激活码需要结合破解补丁，一起使用，请参考下面步骤**</strong>⬇️⬇️⬇️**</p>
<p>如下图所示，我们先选择免费试用 30 天，先进去再说:</p>
<p><img src="/2020/02/18/IDEA2019.3最新激活教程/ideaTry.jpg" alt="img"></p>
<p>六、配置破解补丁</p>
<p>进去过后，我们随便建个项目，点击菜单栏<strong>Help -&gt; Edit Custom VM Options</strong>:</p>
<blockquote>
<p>注意：切记一定要通过 IDEA 来修改 .vmoptions 文件，不要手动直接去修改，现在 IDEA 针对反破解已经越来越严格了~</p>
</blockquote>
<p><img src="/2020/02/18/IDEA2019.3最新激活教程/ideaBuding.png" alt="img"></p>
<p>下载破解补丁成功以后，笔者将它放置在了 IDEA 的安装目录/bin路径下，以防止后面被自己误删:</p>
<p><img src="/2020/02/18/IDEA2019.3最新激活教程/ideaPojie.jpg" alt="img"></p>
<blockquote>
<p>注意：补丁全路径中不要包含中文，否则，可能导致破解失败！另外，jetbrains-agent.jar补丁是不需要解压的~</p>
</blockquote>
<blockquote>
<p>最新的破解补丁与激活码的网盘链接，已在公众号消息中回复，注意滑动屏幕查看。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>注意：在 [小哈学Java] 公众号回复关键字：<strong>**idea</strong>， 会<strong>自动回复3条信息</strong>，分别是：</p>
</blockquote>
<blockquote>
<ol>
<li><p><strong>激活码与最新破解补丁的网盘链接</strong></p>
</li>
<li><p><strong>图文破解教程</strong></p>
</li>
<li><p><strong>破解失败问题集锦汇总（没激活成功的小伙伴，注意看下，是不是有同样的情况导致激活失败了~）</strong></p>
<p>注意滑动屏幕查看哟~</p>
<p><strong>（注意：**</strong>内含两个不同的IDEA版本破解补丁，请对应版本使用~）**</p>
<p><img src="/2020/02/18/IDEA2019.3最新激活教程/jihuoma.png" alt="img"></p>
</li>
</ol>
</blockquote>
<p><img src="/2020/02/18/IDEA2019.3最新激活教程/ideajihuo.png" alt="img"></p>
<p>在 .vmoptions 文件中配置我们补丁放置的全路径位置。</p>
<ol>
<li>-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2019.3\bin\jetbrains-agent.jar</li>
</ol>
<p>七、重启IDEA</p>
<p>破解补丁配置完成以后，重启IDEA。</p>
<p>八、填入激活码，激活</p>
<p>重启完成后，开始填入激活码，点击菜单栏<strong>Help -&gt; Register</strong>:</p>
<p><img src="/2020/02/18/IDEA2019.3最新激活教程/jihuo2.png" alt="img"></p>
<p><img src="/2020/02/18/IDEA2019.3最新激活教程/jihuo3.png" alt="img"></p>
<blockquote>
<p>注意：激活码需搭配上面的破解补丁一起使用才有效！！！</p>
</blockquote>
<p>点击激活:</p>
<p><img src="/2020/02/18/IDEA2019.3最新激活教程/jihuo4.png" alt="img"></p>
<p>可以看到，已经激活到 2089 年了，开心编码吧~</p>
]]></content>
      <tags>
        <tag>-idea</tag>
      </tags>
  </entry>
  <entry>
    <title>监测汇总</title>
    <url>/2020/02/11/%E7%9B%91%E6%B5%8B%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h3 id="产业监测系统汇总"><a href="#产业监测系统汇总" class="headerlink" title="产业监测系统汇总"></a>产业监测系统汇总</h3><p>1 下拉选项样式初始化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xiaobuSelectInit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	    <span class="built_in">console</span>.log(<span class="string">"xiaobuSelectInit"</span>);</span><br><span class="line">        <span class="keyword">var</span> unSelected = <span class="string">"#B4B4B4"</span>;</span><br><span class="line">        <span class="keyword">var</span> selected = <span class="string">"#323232"</span>;</span><br><span class="line">        <span class="keyword">var</span> len = $(<span class="string">"select"</span>).length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> val = $(<span class="string">"select"</span>).eq(i).val();</span><br><span class="line">            <span class="keyword">var</span> text = $(<span class="string">"select"</span>).eq(i).find(<span class="string">"option"</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            <span class="keyword">if</span>(val == <span class="string">''</span> || (val == <span class="number">0</span> &amp;&amp; text != <span class="string">'国内'</span>) || !val || val == <span class="string">'请选择'</span>)&#123;</span><br><span class="line">                $(<span class="string">"select"</span>).eq(i).css(<span class="string">"color"</span>, unSelected);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $(<span class="string">"select"</span>).eq(i).css(<span class="string">"color"</span>, selected);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>2 树图选项列表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回符合树结构的  对象list</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">xiaobuGetNodes</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!list) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> nodes = [];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> list) &#123;</span><br><span class="line">           <span class="keyword">var</span> item = list[index];</span><br><span class="line">           <span class="keyword">var</span> node = &#123;</span><br><span class="line">               <span class="string">"id"</span>: item.id,</span><br><span class="line">               <span class="string">"title"</span>: item.name,</span><br><span class="line">               <span class="string">"subs"</span>: xiaobuGetNodes(item.list)</span><br><span class="line">           &#125;</span><br><span class="line">           nodes.push(node);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> nodes;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>3 给 .xiaobu-year-list设置下拉年份选项，用data-value设置该值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下拉年份</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">xiaobuSelectYearInit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//年份范围限制</span></span><br><span class="line">     <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">     <span class="keyword">var</span> startYear = myDate.getFullYear();<span class="comment">//起始年份</span></span><br><span class="line">     <span class="keyword">var</span> endYear = startYear - <span class="number">100</span>;<span class="comment">//结束年份</span></span><br><span class="line">     <span class="keyword">var</span> obj = $(<span class="string">".xiaobu-year-list"</span>);</span><br><span class="line">     obj.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">var</span> i = startYear; i &gt;= endYear; i--)&#123;</span><br><span class="line">             $(<span class="keyword">this</span>).append(<span class="string">'&lt;option value='</span> + i + <span class="string">'&gt;'</span> + i + <span class="string">'&lt;/option&gt;'</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">var</span> val = $(<span class="keyword">this</span>).attr(<span class="string">"data-value"</span>);</span><br><span class="line">         $(<span class="keyword">this</span>).val(val);</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改变下拉年份的时候给该元素一个data-value,防执行xiaobuSelectYearInit的时候数值被清空</span></span><br><span class="line">       $(<span class="string">"body"</span>).on(<span class="string">"change"</span>,<span class="string">'.xiaobu-year-list'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> val = $(<span class="keyword">this</span>).val();</span><br><span class="line">           $(<span class="keyword">this</span>).attr(<span class="string">"data-value"</span>,val);</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure>
<p>4 树图选项插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建构造函数  xiaobuComboTree，传入参数 元素，对象参数</span></span><br><span class="line"><span class="comment">    init 初始化对象 initstruct 初始化结构  init 初始化dom</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">$, window, document</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> comboTreePlugins = <span class="string">'xiaobuComboTree'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">        source: [],</span><br><span class="line">        isMultiple: <span class="literal">false</span>,</span><br><span class="line">        cascadeSelect: <span class="literal">false</span>,</span><br><span class="line">        folderSelect: <span class="literal">true</span>,  <span class="comment">//是否展开选项</span></span><br><span class="line">        selected: [],</span><br><span class="line">        isShowParent: <span class="literal">false</span>,</span><br><span class="line">        selectedlength: <span class="number">100</span>,</span><br><span class="line">        placeholder: <span class="string">'请选择'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于是闭包  这里是私有方法 外部访问不到</span></span><br><span class="line">    <span class="keyword">var</span> xiaobuComboTree = <span class="function"><span class="keyword">function</span> (<span class="params">element, options,callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.options = $.extend(&#123;&#125;, defaults, options);</span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.callback = callback || <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.ulcontainer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//已选数据</span></span><br><span class="line">        <span class="keyword">this</span>.oliIdArray = [];</span><br><span class="line">        <span class="comment">//选项数据</span></span><br><span class="line">        <span class="keyword">this</span>.copysource = [];</span><br><span class="line">        <span class="comment">//选择结果容器</span></span><br><span class="line">        <span class="keyword">this</span>.roleSelects = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//选项容器的复制dom</span></span><br><span class="line">        <span class="keyword">this</span>.copydom = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//搜索框容器input标签</span></span><br><span class="line">        <span class="keyword">this</span>.comboxinput = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//搜索框容器</span></span><br><span class="line">        <span class="keyword">this</span>.comboxinputcontainer = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//选项容器  包含  选项 与 搜索结果为空</span></span><br><span class="line">        <span class="keyword">this</span>.comboxulcontainer = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//数据选项容器</span></span><br><span class="line">        <span class="keyword">this</span>.selectul = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//提示内容容器</span></span><br><span class="line">        <span class="keyword">this</span>.myplaceholder = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//无搜索结果容器</span></span><br><span class="line">        <span class="keyword">this</span>.noresults = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    xiaobuComboTree.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.extend(<span class="literal">true</span>, <span class="keyword">this</span>.copysource, <span class="keyword">this</span>.options.source);</span><br><span class="line">        <span class="keyword">this</span>.initstruct();</span><br><span class="line">        <span class="keyword">this</span>.initdom();</span><br><span class="line">        <span class="keyword">this</span>.ulcontainer = $(<span class="keyword">this</span>.element).find(<span class="string">'div[_id=comboxulcontainer]'</span>);</span><br><span class="line">        <span class="keyword">this</span>.comboxinput = $(<span class="keyword">this</span>.element).find(<span class="string">'input[_id=comboxinput]'</span>);</span><br><span class="line">        <span class="keyword">this</span>.roleSelects = $(<span class="keyword">this</span>.element).find(<span class="string">'div[_id=role_selectsb]'</span>);</span><br><span class="line">        <span class="keyword">this</span>.comboxinputcontainer = $(<span class="keyword">this</span>.element).find(<span class="string">'div[_id=comboxinputcontainer]'</span>);</span><br><span class="line">        <span class="keyword">this</span>.comboxulcontainer = $(<span class="keyword">this</span>.element).find(<span class="string">'div[_id=comboxulcontainer]'</span>)</span><br><span class="line">        <span class="keyword">this</span>.copydom = <span class="keyword">this</span>.selectul.clone();</span><br><span class="line">        <span class="keyword">this</span>.myplaceholder = $(<span class="keyword">this</span>.element).find(<span class="string">'span[_id=myplaceholder]'</span>);</span><br><span class="line">        <span class="keyword">this</span>.noresults = $(<span class="keyword">this</span>.element).find(<span class="string">'.noresults'</span>);</span><br><span class="line">        <span class="keyword">this</span>.initevent();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    xiaobuComboTree.prototype.initstruct = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.copysource.length; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.copysource[i][<span class="string">'class'</span>] = <span class="string">'first'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    xiaobuComboTree.prototype.initdom = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>.element).append(</span><br><span class="line">            <span class="string">'&lt;div class="input-keyword-wrap"&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;div _id="role_selectsb" class="select-menu-input imitationSelect role_selectsb"&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;span _id="myplaceholder" class="input-tips"&gt;'</span> +</span><br><span class="line">            <span class="keyword">this</span>.options.placeholder +</span><br><span class="line">            <span class="string">'&lt;/span&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;i class="fa fa-caret-down handle-arrow"&gt;&lt;/i&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;div class="drop-down-wrap"&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;div _id="comboxinputcontainer" class="comboxinputcontainer keyword-search"&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;input _id="comboxinput" placeholder="输入关键词搜索" type="text"&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;span tag="search" class="search-icons"&gt;&lt;i class="fa fa-search"&gt;&lt;/i&gt;&lt;/span&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;div _id="comboxulcontainer"&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;div _id="noresault" class="noresults"&gt;无搜索结果&lt;/div&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;ul class="select-tree-list select-tree" _id="selectUl"&gt;&lt;/ul&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;/div&gt;'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.selectul = $(<span class="keyword">this</span>.element).find(<span class="string">'ul[_id=selectUl]'</span>);</span><br><span class="line">        <span class="keyword">this</span>.createitem(<span class="keyword">this</span>.copysource, <span class="keyword">this</span>.selectul);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    xiaobuComboTree.prototype.initevent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点击元素</span></span><br><span class="line">        $(<span class="keyword">this</span>.element).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            event = event || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//找到存放结果的容器 closet</span></span><br><span class="line">            <span class="keyword">var</span> closet = $(event.target).closest(<span class="string">'.input-keyword-wrap'</span>),</span><br><span class="line">                icon = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果点击的是 输入框 或者 是右边的箭头</span></span><br><span class="line">            <span class="keyword">if</span> (($(event.target).hasClass(<span class="string">'imitationSelect'</span>) || $(event.target).hasClass(<span class="string">'fa'</span>)) &amp;&amp; closet.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"点击了输入框 或者 右边的箭头"</span>);</span><br><span class="line">                $(_this.element).find(<span class="string">'.drop-down-wrap'</span>).toggle();</span><br><span class="line">                <span class="keyword">if</span> (!icon) &#123;</span><br><span class="line">                    icon = $(_this.element).find(<span class="string">'.input-keyword-wrap&gt;i'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (icon.hasClass(<span class="string">"fa-caret-down"</span>)) &#123;</span><br><span class="line">                    $(<span class="keyword">this</span>).css(&#123;</span><br><span class="line">                        <span class="string">'position'</span>: <span class="string">'absolute'</span>,</span><br><span class="line">                        <span class="string">'background-color'</span>: <span class="string">'#FFF'</span>,</span><br><span class="line">                        <span class="string">'z-index'</span>: <span class="string">'99'</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                    icon.removeClass(<span class="string">"fa-caret-down"</span>).addClass(<span class="string">"fa-caret-up"</span>); <span class="comment">//点击input选择适合，小图标动态切换</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $(<span class="keyword">this</span>).css(<span class="string">'position'</span>, <span class="string">''</span>);</span><br><span class="line">                    icon.removeClass(<span class="string">"fa-caret-up"</span>).addClass(<span class="string">"fa-caret-down"</span>); <span class="comment">//点击input选择适合，小图标动态切换</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> target = $(event.target).hasClass(<span class="string">'title-containers'</span>) ? $(event.target) : $(event.target)</span><br><span class="line">                .parent().hasClass(<span class="string">'title-containers'</span>) ? $(event.target).parent() : <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (target) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果已选择的大于设定的数目，并且当前是选择动作 则不执行</span></span><br><span class="line">                <span class="keyword">if</span> ((_this.oliIdArray.length &gt;= _this.options.selectedlength) &amp;&amp; !target.hasClass(<span class="string">'actived_li'</span>) &amp;&amp; _this.options.isMultiple) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'最大可选条目已设置'</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (target.attr(<span class="string">'role'</span>) !== <span class="string">'parent'</span>) &#123;</span><br><span class="line">                    event.target = target;</span><br><span class="line">                    <span class="keyword">var</span> oliId = target.attr(<span class="string">"data-id"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (target.hasClass(<span class="string">'actived_li'</span>)) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"点击了非父元素非单选框盒子且选中状态的选项"</span>);</span><br><span class="line">                        _this.uncheckrow(oliId);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"点击了非父元素非单选框盒子且为选中状态的选项"</span>);</span><br><span class="line">                        <span class="keyword">if</span> (!_this.options.isMultiple) &#123; <span class="comment">//如果是单选，则已选条目大于零，并且所点击的不是 激活状态的，不执行</span></span><br><span class="line">                            <span class="keyword">if</span> (_this.oliIdArray.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">"单选时 清除 其他的选项"</span>)</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; _this.oliIdArray.length; j++) &#123;</span><br><span class="line">                                    _this.uncheckrow(_this.oliIdArray[j]);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        _this.checkrow(target, oliId, <span class="literal">false</span>); <span class="comment">//第三个参数表示点击的是否是checkbox</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!_this.options.isMultiple) &#123;</span><br><span class="line">                        _this.hideul();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ($(event.target).attr(<span class="string">'type'</span>) === <span class="string">'checkbox'</span>) &#123;</span><br><span class="line">                <span class="comment">// if ((_this.oliIdArray.length &gt;= _this.options.selectedlength) &amp;&amp; $(event.target).prop(</span></span><br><span class="line">                <span class="comment">//         'checked')) &#123;</span></span><br><span class="line">                <span class="comment">//     console.log('超出最大条目');</span></span><br><span class="line">                <span class="comment">//     return false;</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">               </span><br><span class="line">                <span class="keyword">var</span> _target = $(event.target).closest(<span class="string">'.title-containers'</span>);</span><br><span class="line">                <span class="keyword">if</span> (_target.hasClass(<span class="string">'actived_li'</span>)) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"点击了单选框盒子且为选中状态的选项"</span>);</span><br><span class="line">                    _this.uncheckrow($(event.target).attr(<span class="string">'data-id'</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"点击了单选框盒子且为非选中状态的选项"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (!_this.options.isMultiple) &#123; <span class="comment">//如果是单选，则已选条目大于零，并且所点击的不是 激活状态的，不执行</span></span><br><span class="line">                        <span class="keyword">if</span> (_this.oliIdArray.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">"单选时 清除 其他的选项"</span>)</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; _this.oliIdArray.length; j++) &#123;</span><br><span class="line">                                _this.uncheckrow(_this.oliIdArray[j]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">console</span>.log($(event.target));</span><br><span class="line">                    _this.checkrow(_target, $(event.target).attr(<span class="string">'data-id'</span>), <span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//点击x关闭事件处理</span></span><br><span class="line">            <span class="keyword">if</span> ($(event.target).attr(<span class="string">'class'</span>) === <span class="string">'close'</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"点击删除选项"</span>)</span><br><span class="line">                _this.uncheckrow($(event.target).attr(<span class="string">'data-id'</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> containerparent = $(event.target).attr(<span class="string">'role'</span>) === <span class="string">'parent'</span> ? $(event.target) : $(event</span><br><span class="line">                .target).parent().attr(<span class="string">'role'</span>) === <span class="string">'parent'</span> ? $(event.target).parent() : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!containerparent) &#123;</span><br><span class="line">                target = $(event.target).attr(<span class="string">'tag'</span>) === <span class="string">'closeitem'</span> ?</span><br><span class="line">                    $(event.target) : $(event.target).parent().attr(<span class="string">'tag'</span>) === <span class="string">'closeitem'</span> ?</span><br><span class="line">                    $(event.target).parent() : <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ($(event.target).attr(<span class="string">'tag'</span>) === <span class="string">'search'</span> || $(event.target).parent().attr(<span class="string">'tag'</span>) === <span class="string">'search'</span>) &#123;</span><br><span class="line">                _this.comboxinput.val(<span class="string">''</span>);</span><br><span class="line">                _this.comboxinput.trigger(<span class="string">'keyup'</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (target || containerparent) &#123;</span><br><span class="line">                <span class="keyword">var</span> _parent = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (containerparent) &#123;</span><br><span class="line">                    _parent = containerparent</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    _parent = target.closest(<span class="string">'.title-containers'</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//展开和隐藏子选项</span></span><br><span class="line">                _parent.next().toggle();</span><br><span class="line">                target = target.find(<span class="string">'i'</span>);</span><br><span class="line">                <span class="comment">//切换父选项左边的图标</span></span><br><span class="line">                <span class="keyword">if</span> (target.hasClass(<span class="string">'fa-caret-down'</span>)) &#123;</span><br><span class="line">                    target.removeClass(<span class="string">'fa-caret-down'</span>).addClass(<span class="string">'fa-caret-right'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    target.removeClass(<span class="string">'fa-caret-right'</span>).addClass(<span class="string">'fa-caret-down'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (event.stopPropagation) &#123;</span><br><span class="line">                event.stopPropagation(); <span class="comment">// 针对 Mozilla 和 Opera</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.event) &#123;</span><br><span class="line">                <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>; <span class="comment">// 针对 IE</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.comboxinput.on(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            event = event || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">            _this.selectul.find(<span class="string">'.hide'</span>).removeClass(<span class="string">'hide'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断搜索框里是否有内容，如果有则添加删除按钮</span></span><br><span class="line">            <span class="keyword">if</span> (event.currentTarget.value != <span class="string">""</span>) &#123;</span><br><span class="line">                $(<span class="keyword">this</span>).siblings(<span class="string">'span'</span>).find(<span class="string">'i'</span>).removeClass(<span class="string">'fa-search'</span>).addClass(<span class="string">'fa-close'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="keyword">this</span>).siblings(<span class="string">'span'</span>).find(<span class="string">'i'</span>).removeClass(<span class="string">'fa-close'</span>).addClass(<span class="string">'fa-search'</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> lis = _this.selectul.find(<span class="string">'li'</span>),</span><br><span class="line">                targetli = <span class="literal">null</span>,</span><br><span class="line">                _tempattr = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            lis.each(<span class="function"><span class="keyword">function</span> (<span class="params">index, item</span>) </span>&#123;</span><br><span class="line">                $(item).attr(<span class="string">'matched'</span>, <span class="string">''</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">var</span> val = $(event.target).val();</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">parent</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> lichild = parent.children(<span class="string">'li'</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (lichild.length) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, _p = lichild, len = _p.length; i &lt; len; i++) &#123;</span><br><span class="line">                        targetli = _p.eq(i), _tempattr = targetli.attr(<span class="string">'data-name'</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (_tempattr.indexOf(val) &gt;= <span class="number">0</span> &amp;&amp; _tempattr !== <span class="string">' '</span> &amp;&amp; _tempattr !== <span class="string">''</span>) &#123;</span><br><span class="line">                            targetli.attr(<span class="string">'matched'</span>, <span class="string">'matched'</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> subulcontainer = targetli.find(<span class="string">'&gt;.tree-sub-body'</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (subulcontainer.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">var</span> _tempul = subulcontainer.find(<span class="string">'&gt;ul'</span>);</span><br><span class="line">                            getChildren(_tempul);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            getChildren(_this.selectul);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (val.trim() !== <span class="string">''</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> lis1 = _this.selectul.find(<span class="string">'li'</span>);</span><br><span class="line">                lis1.each(<span class="function"><span class="keyword">function</span> (<span class="params">index, item</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> _item = $(item);</span><br><span class="line">                    <span class="keyword">var</span> matched = _item.find(<span class="string">'li[matched="matched"]'</span>);</span><br><span class="line">                    <span class="keyword">if</span> (_item.length === <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//相当于continue</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (matched.length === <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (_item.attr(<span class="string">'matched'</span>) === <span class="string">'matched'</span>) &#123; <span class="comment">//如果当前元素匹配，则保留当前的删除它后面的所有元素</span></span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> _matcheditem = _item.find(<span class="string">'&gt;div.tree-sub-body'</span>);</span><br><span class="line">                            _matcheditem.each(<span class="function"><span class="keyword">function</span> (<span class="params">index, item</span>) </span>&#123;</span><br><span class="line">                                $(item).addClass(<span class="string">'hide'</span>);</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            _item.addClass(<span class="string">'hide'</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> children = _this.comboxulcontainer.find(<span class="string">'li[matched=matched]'</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (children.length === <span class="number">0</span>) &#123;</span><br><span class="line">                    _this.selectul.hide();</span><br><span class="line">                    _this.noresults.show();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    _this.noresults.hide();</span><br><span class="line">                    _this.selectul.show();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                _this.selectul.show();</span><br><span class="line">                _this.selectul.find(<span class="string">'.hide'</span>).removeClass(<span class="string">'hide'</span>);</span><br><span class="line">                _this.noresults.hide();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点击任意地方隐藏下拉</span></span><br><span class="line">        $(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            _this.hideul();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    xiaobuComboTree.prototype.createitem = <span class="function"><span class="keyword">function</span> (<span class="params">SampleJSONData, container,parentName,parentId</span>) </span>&#123;</span><br><span class="line">        parentName = parentName || <span class="string">''</span>;</span><br><span class="line">        parentId = parentId || <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; SampleJSONData.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> oliName = SampleJSONData[j].title;</span><br><span class="line">            <span class="keyword">var</span> oliId = SampleJSONData[j].id;</span><br><span class="line">            <span class="comment">// li容器</span></span><br><span class="line">            <span class="keyword">var</span> item = $(<span class="string">'&lt;li data-parentId = "'</span> + parentId + <span class="string">'" data-parentName="'</span> + parentName + <span class="string">'" data-name="'</span> + oliName + <span class="string">'" data-id="'</span> + oliId + <span class="string">'"&gt;&lt;/li&gt;'</span>),</span><br><span class="line">                divitem = $(<span class="string">'&lt;div data-name="'</span> + oliName + <span class="string">'" data-id="'</span> + oliId + <span class="string">'" class="title-containers"&gt;&lt;/div&gt;'</span>);</span><br><span class="line">            spanitem = $(<span class="string">'&lt;span tag="closeitem" class="handle-left-icons"&gt;&lt;/span&gt;'</span>);</span><br><span class="line"></span><br><span class="line">            divitem.append(spanitem);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//如果存在子选项 添加左边按钮和 role属性为 parent</span></span><br><span class="line">             <span class="keyword">if</span> (SampleJSONData[j][<span class="string">'subs'</span>]) &#123;</span><br><span class="line">                 <span class="keyword">if</span>(!<span class="keyword">this</span>.options.folderSelect)&#123;</span><br><span class="line">                     spanitem.append(<span class="string">'&lt;i class="fa fa-caret-right"&gt;&lt;/i&gt;'</span>);</span><br><span class="line">                 &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                     spanitem.append(<span class="string">'&lt;i class="fa fa-caret-down"&gt;&lt;/i&gt;'</span>);</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                divitem.append(spanitem);</span><br><span class="line">                divitem.attr(<span class="string">'role'</span>, <span class="string">'parent'</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果是父选项</span></span><br><span class="line">            <span class="keyword">if</span> (SampleJSONData[j][<span class="string">'subs'</span>] != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.options.isFirstClassSelectable) &#123;</span><br><span class="line">                    appendcheckbox(divitem, oliId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                appendcheckbox(divitem, oliId);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 放入名称</span></span><br><span class="line">            divitem.append(<span class="string">'&lt;span class="title-group-name"&gt;'</span> + oliName + <span class="string">'&lt;/span&gt;'</span>);</span><br><span class="line">            item.append(divitem);</span><br><span class="line">            container.append(item);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (SampleJSONData[j][<span class="string">'subs'</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> titlediv = $(<span class="string">'&lt;div class="tree-sub-body"&gt;&lt;/div&gt;'</span>);</span><br><span class="line">                item.append(titlediv);</span><br><span class="line">                <span class="keyword">var</span> subul = $(<span class="string">'&lt;ul&gt;&lt;/ul&gt;'</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果不可展开则  收起 子选项</span></span><br><span class="line">                <span class="keyword">if</span>(!<span class="keyword">this</span>.options.folderSelect)&#123;</span><br><span class="line">                    titlediv.hide();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                titlediv.append(subul);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.createitem(SampleJSONData[j][<span class="string">'subs'</span>], subul,SampleJSONData[j][<span class="string">'title'</span>],SampleJSONData[j][<span class="string">'id'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取消方法</span></span><br><span class="line">    xiaobuComboTree.prototype.uncheckrow = <span class="function"><span class="keyword">function</span> (<span class="params">oliId, ida</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>,</span><br><span class="line">            icon = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> id = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> childInput = $(<span class="keyword">this</span>).siblings().find(<span class="string">'input'</span>);</span><br><span class="line">        <span class="keyword">if</span>(!_this.options.isMultiple)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"单选时取消选中"</span>)</span><br><span class="line">            <span class="comment">//单选时</span></span><br><span class="line">            <span class="comment">//将数值置为空</span></span><br><span class="line">            _this.oliIdArray = [];</span><br><span class="line">            _this.roleSelects.attr(<span class="string">"data-id"</span>, _this.oliIdArray);</span><br><span class="line">            <span class="comment">//将所有选项设置为  未选</span></span><br><span class="line">            $(_this.element).find(<span class="string">'.title-containers'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ($(item).attr(<span class="string">'data-id'</span>) == oliId) &#123;</span><br><span class="line">                    $(item).find(<span class="string">'input'</span>).prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</span><br><span class="line">                    $(item).removeClass(<span class="string">"actived_li"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _this.oliIdArray.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (_this.oliIdArray[i] == oliId) &#123; <span class="comment">//表示数组里面有这个元素</span></span><br><span class="line">                    id = i; <span class="comment">//元素位置</span></span><br><span class="line">                    _this.oliIdArray.splice(i, <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//把当前点击的oliId赋值到显示的input的oliId里面</span></span><br><span class="line">                    _this.roleSelects.attr(<span class="string">"data-id"</span>, _this.oliIdArray);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'parent删除当前的序号'</span> + oliId + <span class="string">';'</span> + <span class="string">'剩下数组'</span> + _this.oliIdArray)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, len = childInput.length; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _this.oliIdArray.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_this.oliIdArray[i] == $(childInput[j]).attr(<span class="string">'data-id'</span>)) &#123; <span class="comment">//表示数组里面有这个元素</span></span><br><span class="line">                        id = i; <span class="comment">//元素位置</span></span><br><span class="line">                        _this.oliIdArray.splice(i, <span class="number">1</span>);</span><br><span class="line">                        <span class="comment">//把当前点击的oliId赋值到显示的input的oliId里面</span></span><br><span class="line">                        _this.roleSelects.attr(<span class="string">"data-id"</span>, _this.oliIdArray);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'child删除当前的序号'</span> + oliId + <span class="string">';'</span> + <span class="string">'剩下数组'</span> + _this.oliIdArray)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            $(_this.element).find(<span class="string">'.title-containers'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, item</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ($(item).attr(<span class="string">'data-id'</span>) == oliId) &#123;</span><br><span class="line">                    $(item).removeClass(<span class="string">'actived_li'</span>);</span><br><span class="line">                    <span class="keyword">var</span> $checkbox = $(item).find(<span class="string">'input'</span>);</span><br><span class="line">                    $checkbox.prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</span><br><span class="line">                    $(item).parents(<span class="string">'.tree-sub-body'</span>).siblings(<span class="string">'.title-containers'</span>).removeClass(<span class="string">'actived_li'</span>);</span><br><span class="line">                    $(item).parents(<span class="string">'.tree-sub-body'</span>).siblings(<span class="string">'.title-containers'</span>).find(<span class="string">'input'</span>).prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</span><br><span class="line">                    $(item).siblings().find(<span class="string">".title-containers"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, itemz</span>) </span>&#123;</span><br><span class="line">                        $(itemz).removeClass(<span class="string">'actived_li'</span>);</span><br><span class="line">                        <span class="keyword">var</span> $checkboxz = $(itemz).find(<span class="string">'input'</span>);</span><br><span class="line">                        $checkboxz.prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//点击已选择的checked 进行删除</span></span><br><span class="line">            _this.roleSelects.find(<span class="string">'&gt;span'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, item</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ($(item).attr(<span class="string">'data-id'</span>) == oliId) &#123;</span><br><span class="line">                    item.remove();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ($(item).attr(<span class="string">'data-id'</span>) == ida) &#123;</span><br><span class="line">                    item.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $(_this.roleSelects).empty();</span><br><span class="line">        <span class="keyword">var</span> totalDom = <span class="keyword">this</span>.element.find(<span class="string">'.select-tree'</span>).find(<span class="string">'.title-containers.actived_li'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = totalDom.length; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($(totalDom[i]).parent().parent().parent().siblings(<span class="string">'.title-containers'</span>).hasClass(<span class="string">'actived_li'</span>)) &#123;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> id = $(totalDom[i]).attr(<span class="string">'data-id'</span>);</span><br><span class="line">                <span class="keyword">var</span> name = $(totalDom[i]).attr(<span class="string">'data-name'</span>)</span><br><span class="line">                <span class="keyword">var</span> item = $(<span class="string">"&lt;span data-id='"</span> + id + <span class="string">"' class='input-keyword-item'&gt;&lt;/span&gt;"</span>),</span><br><span class="line">                    namespan = $(<span class="string">"&lt;span&gt;"</span> + name + <span class="string">"&lt;/span&gt;"</span>),</span><br><span class="line">                    checkicon = $(<span class="string">"&lt;i class='close' data-id='"</span> + id + <span class="string">"' &gt;x&lt;/i&gt;"</span>);</span><br><span class="line">                item.append(namespan);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.options.isMultiple) &#123;</span><br><span class="line">                    item.append(checkicon);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    item.addClass(<span class="string">'single-keyword'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                _this.roleSelects.append(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> abc = _this.roleSelects.find(<span class="string">'.input-keyword-item'</span>).length;</span><br><span class="line">        <span class="keyword">if</span> (abc == <span class="number">0</span>) &#123;</span><br><span class="line">            $(_this.roleSelects).remove(<span class="string">'data-id'</span>);</span><br><span class="line">            _this.roleSelects.append(_this.myplaceholder);</span><br><span class="line">            _this.myplaceholder.show();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(_this.oliIdArray.length);</span><br><span class="line">        _this.callback &amp;&amp; _this.callback(_this.getDatas());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选中方法</span></span><br><span class="line">    xiaobuComboTree.prototype.checkrow = <span class="function"><span class="keyword">function</span> (<span class="params">target, oliId, ischeckbox</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        target.addClass(<span class="string">"actived_li"</span>); <span class="comment">//点击当前的添加   actived_li这个类；</span></span><br><span class="line">        <span class="comment">// 判断当前元素前面是否有checkbox，如果有且点击的不是单选框就选中</span></span><br><span class="line">        <span class="keyword">var</span> inputcheckbox = target.find(<span class="string">'input'</span>);</span><br><span class="line">        <span class="keyword">if</span> (inputcheckbox.length &gt; <span class="number">0</span> &amp;&amp; !ischeckbox) &#123;</span><br><span class="line">            inputcheckbox.prop(<span class="string">'checked'</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        _this.oliIdArray.push(oliId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!_this.options.isMultiple)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"单选 选中时打印的"</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> childInput = target.siblings().find(<span class="string">'input'</span>);</span><br><span class="line">            <span class="keyword">var</span> childAcitve = target.siblings().find(<span class="string">'.title-containers'</span>);</span><br><span class="line">            <span class="comment">//如果是多选的话 选中父选项 将子选项也全选中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, leng1 = childAcitve.length; i &lt; leng1; i++) &#123;</span><br><span class="line">                $(childAcitve[i]).addClass(<span class="string">"actived_li"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = childInput.length; i &lt; len; i++) &#123;</span><br><span class="line">                $(childInput[i]).prop(<span class="string">'checked'</span>, <span class="literal">true</span>);</span><br><span class="line">                _this.oliIdArray.push($(childInput[i]).attr(<span class="string">'data-id'</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _this.roleSelects.attr(<span class="string">"data-id"</span>, _this.oliIdArray); <span class="comment">//把当前点击的oliId赋值到显示的input的oliId里面</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//子选项全选中时  父选项也勾起来</span></span><br><span class="line">            <span class="keyword">var</span> checkInput = inputcheckbox.parent().parent().parent().siblings(<span class="string">'li'</span>).find(<span class="string">'input'</span>);</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = checkInput.length; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ($(checkInput[i]).prop(<span class="string">'checked'</span>)) &#123;</span><br><span class="line">                    a++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a == checkInput.length) &#123;</span><br><span class="line">                inputcheckbox.parent().parent().parent().parent().parent(<span class="string">'.tree-sub-body'</span>).siblings(<span class="string">'.title-containers'</span>).find(<span class="string">'input'</span>).prop(<span class="string">'checked'</span>, <span class="literal">true</span>)</span><br><span class="line">                inputcheckbox.parent().parent().parent().parent().parent(<span class="string">'.tree-sub-body'</span>).siblings(<span class="string">'.title-containers'</span>).addClass(<span class="string">"actived_li"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> checkInputs = inputcheckbox.parents(<span class="string">'.tree-sub-body'</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = checkInputs.length; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> selectLength = $(checkInputs[i]).children().children().children(<span class="string">'.title-containers.actived_li'</span>).length;</span><br><span class="line">                <span class="keyword">var</span> childrenLength = $(checkInputs[i]).children().children().children(<span class="string">'.title-containers'</span>).length;</span><br><span class="line">                <span class="keyword">if</span> (selectLength == childrenLength) &#123;</span><br><span class="line">                    $(checkInputs[i]).siblings(<span class="string">'.title-containers'</span>).addClass(<span class="string">'actived_li'</span>);</span><br><span class="line">                    $(checkInputs[i]).siblings(<span class="string">'.title-containers'</span>).find(<span class="string">'input'</span>).prop(<span class="string">'checked'</span>, <span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $(_this.roleSelects).empty();</span><br><span class="line">        <span class="keyword">var</span> totalDom = <span class="keyword">this</span>.element.find(<span class="string">'.select-tree'</span>).find(<span class="string">'.title-containers.actived_li'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = totalDom.length; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($(totalDom[i]).parent().parent().parent().siblings(<span class="string">'.title-containers'</span>).hasClass(<span class="string">'actived_li'</span>)) &#123;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> id = $(totalDom[i]).attr(<span class="string">'data-id'</span>);</span><br><span class="line">                <span class="keyword">var</span> name = $(totalDom[i]).attr(<span class="string">'data-name'</span>);</span><br><span class="line">                <span class="keyword">if</span>(_this.options.isShowParent)&#123;</span><br><span class="line">                    <span class="keyword">var</span> parentName = $(totalDom[i]).closest(<span class="string">"li"</span>).attr(<span class="string">"data-parentName"</span>);</span><br><span class="line">                    <span class="built_in">console</span>.log(parentName)</span><br><span class="line">                    <span class="keyword">if</span>(parentName.indexOf(<span class="string">"市"</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">                        parentName = <span class="string">""</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    name = parentName + name;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// var id = $(totalDom[i]).attr('data-id');</span></span><br><span class="line">                <span class="keyword">var</span> item = $(<span class="string">"&lt;span data-id='"</span> + id + <span class="string">"' class='input-keyword-item'&gt;&lt;/span&gt;"</span>),</span><br><span class="line">                    namespan = $(<span class="string">"&lt;span&gt;"</span> + name + <span class="string">"&lt;/span&gt;"</span>),</span><br><span class="line">                    checkicon = $(<span class="string">"&lt;i class='close' data-id='"</span> + id + <span class="string">"' &gt;x&lt;/i&gt;"</span>);</span><br><span class="line">                item.append(namespan);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.options.isMultiple) &#123;</span><br><span class="line">                    item.append(checkicon);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    item.addClass(<span class="string">'single-keyword'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                _this.roleSelects.append(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (_this.oliIdArray.length === <span class="number">0</span>) &#123;</span><br><span class="line">            _this.myplaceholder.show();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(_this.oliIdArray.length);</span><br><span class="line">        _this.callback &amp;&amp; _this.callback(_this.getDatas());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//隐藏选项</span></span><br><span class="line">    xiaobuComboTree.prototype.hideul = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// event=event||window.event;</span></span><br><span class="line">        $(<span class="keyword">this</span>.element).find(<span class="string">'.input-keyword-wrap .fa'</span>).removeClass(<span class="string">"fa-caret-up"</span>).addClass(<span class="string">"fa-caret-down"</span>); <span class="comment">//当点隐藏ul弹窗时候，把小图标恢复原状</span></span><br><span class="line">        $(<span class="keyword">this</span>.element).find(<span class="string">'.drop-down-wrap'</span>).hide(); <span class="comment">//当点击空白处，隐藏ul弹窗</span></span><br><span class="line">        <span class="comment">//清除搜素框</span></span><br><span class="line">        <span class="keyword">this</span>.clearSearchValue();</span><br><span class="line">        $(<span class="keyword">this</span>.element).css(<span class="string">'position'</span>, <span class="string">''</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    xiaobuComboTree.prototype.clearSearchValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"清除搜索框内容"</span>);</span><br><span class="line">        <span class="keyword">this</span>.comboxinput.val(<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">this</span>.comboxinput.trigger(<span class="string">'keyup'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取已选择数据 数组的形式</span></span><br><span class="line">    xiaobuComboTree.prototype.getDatas = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr = [];</span><br><span class="line">        $(<span class="keyword">this</span>.element).find(<span class="string">'.input-keyword-item'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, item</span>) </span>&#123;</span><br><span class="line">            arr.push(&#123;</span><br><span class="line">                id: $(item).attr(<span class="string">'data-id'</span>),</span><br><span class="line">                val: $(item).find(<span class="string">'span'</span>).html()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空选项</span></span><br><span class="line">    xiaobuComboTree.prototype.clearSelect = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//清空选项中的内容</span></span><br><span class="line">        <span class="keyword">this</span>.roleSelects.attr(<span class="string">"data-id"</span>,<span class="keyword">this</span>.oliIdArray);</span><br><span class="line">        <span class="keyword">this</span>.roleSelects.html(<span class="string">'&lt;span _id="myplaceholder" class="input-tips"&gt;'</span> + <span class="keyword">this</span>.options.placeholder + <span class="string">'&lt;/span&gt;'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空选择框的内容</span></span><br><span class="line">        <span class="keyword">var</span> li = <span class="keyword">this</span>.element.find(<span class="string">".select-tree-list .title-containers.actived_li"</span>);</span><br><span class="line">        <span class="keyword">var</span> checkBox = <span class="keyword">this</span>.element.find(<span class="string">".select-tree-list .title-containers.actived_li"</span>).find(<span class="string">'input'</span>);</span><br><span class="line">        li.removeClass(<span class="string">'actived_li'</span>);</span><br><span class="line">        checkBox.prop(<span class="string">"checked"</span>,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示提示框</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组形式传值</span></span><br><span class="line">    xiaobuComboTree.prototype.setDatas = <span class="function"><span class="keyword">function</span> (<span class="params">list</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> arr = [];  <span class="comment">//值</span></span><br><span class="line">        <span class="keyword">if</span>(list.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.clearSelect();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.roleSelects.html(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span>(!_this.options.isMultiple)&#123;</span><br><span class="line">            list = list.slice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">            arr.push(list[i].id);</span><br><span class="line">            <span class="keyword">var</span> item = $(<span class="string">"&lt;span data-id='"</span> + list[i].id + <span class="string">"' class='input-keyword-item'&gt;&lt;/span&gt;"</span>),</span><br><span class="line">                namespan = $(<span class="string">"&lt;span&gt;"</span> + list[i].name + <span class="string">"&lt;/span&gt;"</span>),</span><br><span class="line">                checkicon = $(<span class="string">"&lt;i class='close' data-id='"</span> + list[i].id + <span class="string">"' &gt;x&lt;/i&gt;"</span>);</span><br><span class="line">            item.append(namespan);</span><br><span class="line">            <span class="keyword">if</span> (_this.options.isMultiple) &#123;</span><br><span class="line">                item.append(checkicon);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                item.addClass(<span class="string">'single-keyword'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            _this.roleSelects.append(item);</span><br><span class="line">            _this.myplaceholder.hide();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//勾选选择项</span></span><br><span class="line">            <span class="keyword">var</span> selectCheckBoxs = <span class="keyword">this</span>.element.find($.parseHTML(<span class="string">".title-containers[data-id="</span> + list[i].id + <span class="string">"]"</span>));</span><br><span class="line">            <span class="keyword">var</span> childCheckBox = <span class="keyword">this</span>.element.find($.parseHTML(<span class="string">".title-containers[data-id="</span> + list[i].id + <span class="string">"]"</span>)).siblings(<span class="string">".tree-sub-body"</span>).find(<span class="string">".title-containers"</span>);</span><br><span class="line">            selectCheckBoxs.addClass(<span class="string">"actived_li"</span>);</span><br><span class="line">            childCheckBox.addClass(<span class="string">"actived_li"</span>);</span><br><span class="line">            selectCheckBoxs.find(<span class="string">'input'</span>).prop(<span class="string">"checked"</span>, <span class="literal">true</span>);</span><br><span class="line">            childCheckBox.find(<span class="string">'input'</span>).prop(<span class="string">"checked"</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.oliIdArray = arr;</span><br><span class="line">        <span class="keyword">this</span>.roleSelects.attr(<span class="string">"data-id"</span>,<span class="keyword">this</span>.oliIdArray);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.oliIdArray)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">appendcheckbox</span>(<span class="params">divitem, oliId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $checkboxspan = $(<span class="string">'&lt;span class="handle-checkbox"&gt;&lt;/span&gt;'</span>),</span><br><span class="line">            $checkbox = $(<span class="string">'&lt;input data-id="'</span> + oliId + <span class="string">'" type="checkbox"&gt;'</span>);</span><br><span class="line">        $checkboxspan.append($checkbox);</span><br><span class="line">        divitem.append($checkboxspan);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建调用方法</span></span><br><span class="line">    $.fn[comboTreePlugins] = <span class="function"><span class="keyword">function</span> (<span class="params">options,callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> xiaobuComboTree(<span class="keyword">this</span>,options,callback);</span><br><span class="line">        <span class="comment">//链式调用</span></span><br><span class="line">        <span class="comment">// return this.each(function()&#123;</span></span><br><span class="line">        <span class="comment">//     console.log($(this));</span></span><br><span class="line">        <span class="comment">//     // 单例模式</span></span><br><span class="line">        <span class="comment">//     var me = $(this),</span></span><br><span class="line">        <span class="comment">//         instance = me.data('plugin_' + comboTreePlugins);</span></span><br><span class="line">        <span class="comment">//     if (!instance) &#123;</span></span><br><span class="line">        <span class="comment">//         instance = new xiaobuComboTree(me,options);</span></span><br><span class="line">        <span class="comment">//         me.data('plugin_' + comboTreePlugins,instance);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     if ($.type(options) === "string") return instance[options]();</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(jQuery, <span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*tree.css*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hide</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.show</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1024px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.select-tree-wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:auto;</span><br><span class="line">  <span class="attribute">min-height</span>:<span class="number">34px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e6e7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.input-keyword-wrap</span>&#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">34px</span>;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.input-keyword-wrap</span> <span class="selector-class">.handle-arrow</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.input-keyword-wrap</span> <span class="selector-class">.select-menu-input</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="comment">/*margin-bottom:4px;*/</span></span><br><span class="line">  <span class="comment">/*min-height:36px;*/</span></span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.input-keyword-wrap</span> <span class="selector-class">.input-tips</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">34px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#B4B4B4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.input-keyword-wrap</span> <span class="selector-class">.single-keyword</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.input-keyword-wrap</span> <span class="selector-class">.input-keyword-item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#0095e7</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0095e7</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.input-keyword-wrap</span> <span class="selector-class">.input-keyword-item</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">26px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">26px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span> none;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#323232</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.input-keyword-wrap</span> <span class="selector-class">.input-keyword-item</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">3px</span> <span class="number">8px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.drop-down-wrap</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.noresults</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.handle-left-icons</span>&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.title-group-name</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.handle-checkbox</span>&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.keyword-search</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border-top</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.keyword-search</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span><span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span><span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">30px</span> <span class="number">0</span> <span class="number">10px</span><span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">34px</span><span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span><span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box<span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.keyword-search</span> <span class="selector-class">.search-icons</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.select-tree-list</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">overflow-x</span>: scroll;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.select-tree-list</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.title-container</span>&#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">34px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.title-container</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.title-containers</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#f2f2f2</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#0079fe</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.select-tree-list</span> <span class="selector-tag">li</span> <span class="selector-class">.tree-sub-body</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.select-tree-list</span> <span class="selector-tag">li</span> <span class="selector-class">.tree-sub-body</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">34px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.select-tree-list</span> <span class="selector-tag">li</span> <span class="selector-class">.tree-sub-body</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-class">.title-container</span>&#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">30px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.drop-down-wrap</span> <span class="selector-class">.select-tree-list</span> <span class="selector-tag">li</span> <span class="selector-class">.tree-sub-body</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-class">.tree-sub-body</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-class">.title-container</span>&#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">45px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.actived_li</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#0095e7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title-containers</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">34px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>树选项插件的使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> SampleJSONData = [];   <span class="comment">//树选项数组</span></span><br><span class="line"><span class="keyword">var</span> productService;   <span class="comment">//产品服务类型</span></span><br><span class="line">SampleJSONData = xiaobuGetNodes(list);</span><br><span class="line"><span class="comment">//初始化产品/服务类型树图</span></span><br><span class="line">productService = $(<span class="string">'#justAnInputBox2'</span>).xiaobuComboTree(&#123;</span><br><span class="line">        source: SampleJSONData,</span><br><span class="line">        isMultiple: <span class="literal">true</span>,</span><br><span class="line">        isFirstClassSelectable: <span class="literal">true</span>, <span class="comment">//第一级是否可选</span></span><br><span class="line">        cascadeSelect: <span class="literal">true</span>,</span><br><span class="line">        selectedlength: <span class="number">100</span>, <span class="comment">//最多可选</span></span><br><span class="line">        placeholder: <span class="string">'请选择产品/服务类型'</span>,</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;           <span class="comment">//选项变化回调函数</span></span><br><span class="line">        <span class="keyword">var</span> showType = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> len = data.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[i].val == <span class="string">"工业互联网平台"</span>) &#123;</span><br><span class="line">                showType = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (showType) &#123;</span><br><span class="line">            validateCompanyType = <span class="literal">true</span>;</span><br><span class="line">            $(<span class="string">"#companyType"</span>).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            validateCompanyType = <span class="literal">false</span>;</span><br><span class="line">            $(<span class="string">"#companyType"</span>).hide();</span><br><span class="line">            <span class="comment">//将企业类别的值置空</span></span><br><span class="line">            $(<span class="string">"#companyType select"</span>).val(<span class="number">0</span>);</span><br><span class="line">            xiaobuSelectInit();</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> productService.setDatas(arr);   <span class="comment">//设置选项的值</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> serviceData = productService.getDatas();   <span class="comment">//获取选中的值（id）</span></span><br></pre></td></tr></table></figure>
<p>获取树选项的内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取树选项的值</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getTreeJsonVal</span>(<span class="params">selectedList,selectList</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> list = [];</span><br><span class="line">         <span class="keyword">var</span> map = &#123;&#125;;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> selectedList)&#123;</span><br><span class="line">             map[selectedList[key]] = selectedList[key];</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> selectList)&#123;</span><br><span class="line">             <span class="keyword">var</span> obj = selectList[key];</span><br><span class="line">             <span class="keyword">var</span> tempArr = obj.list || obj.subs;</span><br><span class="line">             <span class="keyword">if</span> (map[obj.id])&#123;</span><br><span class="line">                 list.push(&#123;<span class="attr">id</span>:obj.id,<span class="attr">name</span>: obj.title || obj.name&#125;);</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="keyword">if</span> (tempArr &amp;&amp; tempArr.length)&#123;</span><br><span class="line">                     list = list.concat(getTreeJsonVal(selectedList, tempArr));</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>5 lay-ui 插件的日历调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//add by shenyanxiang</span></span><br><span class="line">  <span class="comment">// 调用 &lt;input type="text" readonly placeholder="请选择时间"  id="不要重复的id即可" class="laydate"&gt;</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadDate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//日历插件调用</span></span><br><span class="line">      $(<span class="string">"body"</span>).on(<span class="string">"click"</span>,<span class="string">"input.laydate"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> elem = <span class="string">"#"</span> + $(<span class="keyword">this</span>).attr(<span class="string">"id"</span>);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"触发小布日历插件"</span> + elem);</span><br><span class="line">          laydate(&#123;</span><br><span class="line">              elem: elem,</span><br><span class="line">              format: <span class="string">'YYYY-MM-DD'</span>,</span><br><span class="line">              min: <span class="string">'1900-01-01'</span>, <span class="comment">//</span></span><br><span class="line">              max: laydate.now(<span class="number">0</span>, <span class="string">"YYYY-MM-DD"</span>), <span class="comment">//最大日期</span></span><br><span class="line">              istime: <span class="literal">false</span>,</span><br><span class="line">              istoday: <span class="literal">true</span>,</span><br><span class="line">              ready: <span class="function"><span class="keyword">function</span> (<span class="params">date</span>) </span>&#123;</span><br><span class="line">                  $(_this).val(DateJsonFormat(date, <span class="keyword">this</span>.format));   <span class="comment">//初次点击时自动显示当前时间</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>6 只允许数值的输入框</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   * add by shenyanxiang</span></span><br><span class="line"><span class="comment">   * canFu : true表示允许负数 false表示不允许</span></span><br><span class="line"><span class="comment">   * canDot : true  表示允许小数点  false表示不允许</span></span><br><span class="line"><span class="comment">   * num ：表示保留小数点后 几位</span></span><br><span class="line"><span class="comment">   * max : 表示小数点左边最大几位数</span></span><br><span class="line"><span class="comment">   * 调用   onkeyup = "xiaobuClearNum(event,this,true,true,2)"  onblur="checkNum(this)"  onpaste="return false"</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">   <span class="comment">//可正数可负数 浮点类型</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">xiaobuClearNum</span>(<span class="params">event,obj,canFu,canDot,num,max</span>)</span>&#123;</span><br><span class="line">       max = max || <span class="number">9</span>;</span><br><span class="line">       canFu = canFu || <span class="literal">false</span>;</span><br><span class="line">       canDot = canDot || <span class="literal">false</span>;</span><br><span class="line">       num = num || <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"执行了clearNoNum"</span>)</span><br><span class="line">    event = <span class="built_in">window</span>.event||event;</span><br><span class="line">    <span class="keyword">if</span>(event.keyCode == <span class="number">37</span> | event.keyCode == <span class="number">39</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> t = obj.value.charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(canDot)&#123;</span><br><span class="line">           <span class="comment">//去除非数字或不是‘.’的其他字符</span></span><br><span class="line">           obj.value = obj.value.replace(<span class="regexp">/[^\d.]/g</span>,<span class="string">''</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           obj.value = obj.value.replace(<span class="regexp">/[^\d]/g</span>,<span class="string">''</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(canDot)&#123;</span><br><span class="line">           <span class="comment">//去除开头连续的 0</span></span><br><span class="line">           obj.value = obj.value.replace(<span class="regexp">/^0&#123;2,&#125;/g</span>,<span class="string">''</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="comment">//去除开头的 0</span></span><br><span class="line">           obj.value = obj.value.replace(<span class="regexp">/^0&#123;1,&#125;/g</span>,<span class="string">''</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//保证第一个数值为 数字而不是 小数点</span></span><br><span class="line">       obj.value = obj.value.replace(<span class="regexp">/^\.(\d&#123;1,&#125;)/g</span>,<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//保证只有出现一个.  而没有多个</span></span><br><span class="line">       obj.value = obj.value.replace(<span class="regexp">/\.&#123;2,&#125;/g</span>,<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//保证 .只能出现一次，而不能出现2次或2次以上,把第一个.换成$#$,把后面的.去掉,再把 $#$ 换回来</span></span><br><span class="line">       obj.value = obj.value.replace(<span class="string">"."</span>,<span class="string">"$#$"</span>).replace(<span class="regexp">/\./g</span>,<span class="string">""</span>).replace(<span class="string">"$#$"</span>,<span class="string">"."</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> len = obj.value.length;</span><br><span class="line">       <span class="keyword">if</span>(canDot)&#123;</span><br><span class="line">           <span class="comment">//保留小数点后num位</span></span><br><span class="line">           <span class="keyword">var</span> dotIndex = obj.value.indexOf(<span class="string">"."</span>);</span><br><span class="line">           <span class="comment">//如果存在小数点且 小数点不在最后一个</span></span><br><span class="line">           <span class="keyword">if</span>(dotIndex &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">               <span class="keyword">var</span> str1 = obj.value.split(<span class="string">'.'</span>)[<span class="number">0</span>];</span><br><span class="line">               <span class="keyword">var</span> str2 = obj.value.split(<span class="string">'.'</span>)[<span class="number">1</span>];</span><br><span class="line">               obj.value = str1.substring(<span class="number">0</span>,max) + <span class="string">'.'</span> + str2.substring(<span class="number">0</span>,num);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               obj.value = obj.value.substring(<span class="number">0</span>,max);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           obj.value = obj.value.substring(<span class="number">0</span>,max);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//如果第一位是负号，将负号补回去，不允许为负值 则注释</span></span><br><span class="line">       <span class="keyword">if</span>(t == <span class="string">'-'</span> &amp;&amp; canFu)&#123;</span><br><span class="line">           obj.value = <span class="string">"-"</span> + obj.value;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//add by shenyanxiang</span></span><br><span class="line">   <span class="comment">//onkeyup = "xiaobuClearNum(event,this,true,true,2)"  onblur="checkNum(this)"  onpaste="return false"</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">checkNum</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">       maxNum = maxNum || <span class="number">1000000000</span>;</span><br><span class="line">       canFu = canFu || <span class="literal">false</span>;</span><br><span class="line">       <span class="comment">//清除最后一个字符为  小数点</span></span><br><span class="line">    obj.value = obj.value.replace(<span class="regexp">/\.$/</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//如果字符串长度大于1且第一位是0且第二位不是 小数点 则把 0去掉</span></span><br><span class="line">       <span class="keyword">if</span>(obj.value.length &gt; <span class="number">1</span> &amp;&amp; obj.value.charAt(<span class="number">0</span>) == <span class="string">"0"</span> &amp;&amp; obj.value.charAt(<span class="number">1</span>) != <span class="string">"."</span>)&#123;</span><br><span class="line">           obj.value = obj.value.substr(<span class="number">1</span>,obj.value.length);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>-jsp</tag>
      </tags>
  </entry>
  <entry>
    <title>有课开发经验汇总</title>
    <url>/2020/02/10/%E6%9C%89%E8%AF%BE%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h3 id="有课开发经验汇总"><a href="#有课开发经验汇总" class="headerlink" title="有课开发经验汇总"></a>有课开发经验汇总</h3><p>随便汇总想到哪写到哪，有些可能是简单的东西，但还是写一下</p>
<ol>
<li>实现自定义遮盖符号的密码框</li>
</ol>
<p><img src="/2020/02/10/有课开发经验汇总/" alt="1581334230361.png"></p>
<p>解决： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &lt;div class=&quot;currentPwd_box input_box&quot;&gt;</span><br><span class="line">            &lt;span&gt;原始密码&lt;/span&gt;&lt;input class=&quot;show&quot; type=&quot;text&quot; spellcheck=&quot;false&quot;   readonly=&quot;readonly&quot; unselectable=&quot;on&quot; onfocus=&quot;this.blur()&quot;  v-model=&apos;oldPwd&apos; name=&apos;oldPwd&apos; :placeholder=&quot;请输入原始密码&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;url&quot; class=&quot;really&quot; spellcheck=&quot;false&quot;  @keyup=&quot;validate(0,reallyOldPwd)&quot; autocorrect=&quot;off&quot; v-model=&apos;reallyOldPwd&apos; name=&apos;reallyOldPwd&apos; :placeholder=&quot;$t(&apos;l.s.user.modifyPwd.inputOldPwd&apos;)&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">   .currentPwd_box input.show,</span><br><span class="line">    .currentPwd_box input.really&#123;</span><br><span class="line">        font-family: &apos;Cour&apos;;   /*等宽字体*/</span><br><span class="line">        width: 4.8rem;</span><br><span class="line">        height: 100%;</span><br><span class="line">        border: none;</span><br><span class="line">        outline: none;</span><br><span class="line">        text-align: right;</span><br><span class="line">        padding: 0 0.54rem 0 0.4rem;</span><br><span class="line">        font-size: 0.32rem;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    .currentPwd_box input.really&#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 0;</span><br><span class="line">        right: 0;</span><br><span class="line">        color: transparent;</span><br><span class="line">        caret-color: rgb(91, 186, 180);</span><br><span class="line">        /* caret-color: transparent; */</span><br><span class="line">        background: transparent;</span><br><span class="line">        /* opacity: 0; */</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>真正的输入框覆盖一层显示 替代符的输入框，将真正的输入框背景和文字都设置成透明。</p>
<p>遇到问题：由于字体宽度不一样，导致光标有时不对，所以需要这些输入框需要使用等宽字体。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family: &apos;Cour&apos;;</span><br><span class="line">    src: url(&apos;../font/cour.ttf&apos;);</span><br><span class="line">    font-weight: normal;</span><br><span class="line">    font-style: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后监听onkeyup，每当输入时将内容改为 替代符号</p>
<ol start="2">
<li>输入框在ios上特殊的问题。</li>
</ol>
<p><img src="/2020/02/10/有课开发经验汇总/1581335169058.png" alt="1581335169058"></p>
<p>输入框type类型为 password 且键盘大写锁定且为最新ios系统，在输入框右边会有 大写锁定浮标</p>
<p><img src="/2020/02/10/有课开发经验汇总/1581335326983.png" alt="1581335326983"></p>
<p>当type类型不管是啥，在ios系统上输入不是英文单词的字符串时就会出现这个，解决方法就是</p>
<p>spellcheck=”false”    检查拼写错误关闭掉</p>
<ol start="3">
<li>ios上顺畅滚动</li>
</ol>
<p>解决办法： -webkit-overflow-scrolling: touch;</p>
<ol start="4">
<li>禁止非文本框或输入框文本复制</li>
</ol>
<p>解决办法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">     <span class="comment">/* //系统默认菜单被禁用 */</span></span><br><span class="line">    <span class="attribute">-webkit-touch-callout</span>:none;</span><br><span class="line">    <span class="comment">/* /webkit浏览器/ */</span></span><br><span class="line">    <span class="attribute">-webkit-user-select</span>:none;</span><br><span class="line">    <span class="comment">/* /早期浏览器/ */</span></span><br><span class="line">    <span class="attribute">-khtml-user-select</span>:none; </span><br><span class="line">    <span class="comment">/* /火狐/ */</span></span><br><span class="line">    <span class="attribute">-moz-user-select</span>:none;</span><br><span class="line">    <span class="comment">/* /IE10/ */</span></span><br><span class="line">    <span class="attribute">-ms-user-select</span>:none;</span><br><span class="line">    <span class="attribute">user-select</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">textarea</span>,<span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>:auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>flex相关样式</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* flex相关开始 */</span></span><br><span class="line"><span class="selector-class">.flex</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-center</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-between</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-around</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-end</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-col</span>&#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-wrap</span>&#123;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-grow</span>&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-shrink</span>&#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* flex相关结束 */</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>防止图片图裂</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"headPhoto"</span> <span class="attr">v-show</span>=<span class="string">"headPhoto"</span> @<span class="attr">error</span>=<span class="string">"setDefault"</span>&gt;</span></span><br><span class="line">setDefault 为设置图列时怎么做的方法</span><br></pre></td></tr></table></figure>
<p>也可以全局替换图列 图标</p>
<ol start="7">
<li>上拉加载,以及安卓手机在也页面滚动时点击屏幕停止滚动会触发div的点击事件的解决方法。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &lt;div @scroll=&quot;onScroll&quot; @click=&quot;stopScroll&quot; :class=&quot;[&apos;msg-list&apos;,&apos;pull-container&apos;,&#123;pc:isPC&#125;]&quot;&gt;</span><br><span class="line">                &lt;div :class=&quot;[&apos;scroll-box&apos;,&#123;on:show&#125;]&quot; v-infinite-scroll=&quot;loadMore&quot; infinite-scroll-disabled=&quot;busy&quot; infinite-scroll-distance=&quot;10&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;top&quot; v-show=&quot;!show&quot;&gt;</span><br><span class="line">                        &lt;span v-cloak&gt;&#123;&#123;unRead&#125;&#125;&#123;&#123;$t(&apos;l.s.msg.list.unreadMessage&apos;)&#125;&#125;&lt;/span&gt;</span><br><span class="line">                        &lt;button @click=&quot;onAllRead&quot;&gt;&#123;&#123;$t(&apos;l.s.msg.list.allRead&apos;)&#125;&#125;&lt;/button&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;menu flex flex-center&quot; v-show=&quot;!show&quot;&gt;</span><br><span class="line">                        &lt;div v-for=&quot;(item,index) in menuList&quot; @click=&quot;type = index&quot; :key=&quot;index&quot; :class=&quot;[&#123;on:index === type&#125;,&apos;flex&apos;,&apos;flex-center&apos;,&apos;flex-col&apos;]&quot;&gt;</span><br><span class="line">                            &lt;s :class=&quot;[&apos;icon&apos;,item.icon_class]&quot;&gt;&lt;/s&gt;</span><br><span class="line">                            &lt;span&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;list-box&quot; &gt;</span><br><span class="line">                        &lt;div class=&quot;list-box-item&quot;&gt; </span><br><span class="line">                            &lt;div class=&quot;empty-msg&quot; v-if=&quot;sysMsg.length == 0&quot;&gt;&#123;&#123;$t(&apos;l.s.msg.list.noMsg&apos;)&#125;&#125;&lt;/div&gt;</span><br><span class="line">                            &lt;ul class=&quot;wx-list&quot; v-if=&quot;sysMsg.length &gt; 0&quot;&gt;</span><br><span class="line">                                &lt;li class=&quot;items wx-link&quot; v-for=&quot;msg in sysMsg&quot;  @click=&quot;goDetail(msg)&quot; :key=&quot;msg.id&quot;&gt;</span><br><span class="line">                                    &lt;div :class=&quot;[&apos;pic&apos;,msg.status == 0?&apos;unread&apos;:&apos;&apos;]&quot;&gt;</span><br><span class="line">                                        &lt;span&gt;&#123;&#123;name(msg.type)&#125;&#125;&lt;/span&gt;</span><br><span class="line">                                    &lt;/div&gt;</span><br><span class="line">                                    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">                                        &lt;div class=&quot;title ellipsis&quot;&gt;&#123;&#123;msg.title&#125;&#125;&lt;/div&gt;</span><br><span class="line">                                        &lt;div class=&quot;desc ellipsis&quot;&gt;&#123;&#123;msg.content&#125;&#125;&lt;/div&gt;</span><br><span class="line">                                    &lt;/div&gt;</span><br><span class="line">                                    &lt;span class=&quot;msg-time&quot;&gt;&#123;&#123;msg.createTimeString&#125;&#125;&lt;/span&gt;</span><br><span class="line">                                &lt;/li&gt;</span><br><span class="line">                            &lt;/ul&gt;</span><br><span class="line">                            &lt;template v-if=&quot;sysMsg.length == 0&quot;&gt;&lt;/template&gt;</span><br><span class="line">                            &lt;div v-else-if=&quot;!haveNextPage&quot; class=&quot;noMore&quot;&gt;没有更多了&lt;/div&gt;</span><br><span class="line">                            &lt;div v-else class=&quot;loading&quot;&gt;&lt;i class=&quot;weui-loading&quot;/&gt; 正在加载&lt;/div&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt; </span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isScrolling: false,</span><br><span class="line">            busy: true,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        	onScroll(e)&#123;</span><br><span class="line">                console.log(e.target.scrollTop);</span><br><span class="line">                if(this.get_GL_OS_NAME() == &quot;android&quot;)&#123;</span><br><span class="line">                    this.isScrolling = true;</span><br><span class="line">                    var t1 = e.target.scrollTop;</span><br><span class="line">                    clearTimeout(this.timer);</span><br><span class="line">                    this.timer = setTimeout(() =&gt; &#123;</span><br><span class="line">                        var t2 = e.target.scrollTop;</span><br><span class="line">                        console.log(t2 == t1);</span><br><span class="line">                        if(t2 == t1)&#123;</span><br><span class="line">                             this.isScrolling = false;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, 1000);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            stopScroll(e)&#123;</span><br><span class="line">                console.log(e);</span><br><span class="line">                if(this.get_GL_OS_NAME() == &quot;android&quot;)&#123;</span><br><span class="line">                    this.isScrolling = false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            loadMore:function()&#123;</span><br><span class="line">                if(this.busy || !this.haveNextPage)&#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                this.loadData();</span><br><span class="line">        	&#125;,</span><br><span class="line">            loadData()&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                _this.busy = true;</span><br><span class="line">                let pageNo = _this.pageNo + 1;</span><br><span class="line">            	let pageSize = _this.pageSize;</span><br><span class="line">                _this.loading = weui.loading(_this.$t(&apos;l.s.msg.list.loading&apos;));</span><br><span class="line">            _this.$axios.post(_this.stuApiUrl + &quot;/sys/msg/search&quot;, </span><br><span class="line">            _this.$qs.stringify(&#123;</span><br><span class="line">            &#125;)).then(function(res)&#123;</span><br><span class="line">                _this.loading.hide();</span><br><span class="line">                _this.busy = false;</span><br><span class="line">                _this.pageNo = pageNo;</span><br><span class="line">                _this.haveNextPage = res.data.haveNextPage;</span><br><span class="line">            &#125;).catch(function()&#123;</span><br><span class="line">                _this.loading.hide();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        goDetail : function(msg)&#123;</span><br><span class="line">            if(this.isScrolling)&#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            if(msg.status == 0)&#123;</span><br><span class="line">                msg.status = 1;</span><br><span class="line">                if(this.unRead &gt; 0)&#123;</span><br><span class="line">                    this.unRead--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            this.$router.push(&apos;/student/msg/detail/&apos; + msg.id);</span><br><span class="line">        &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>关键点   v-infinite-scroll</p>
<p>安卓监听滚动停止</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onScroll(e)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e.target.scrollTop);</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.get_GL_OS_NAME() == <span class="string">"android"</span>)&#123;</span><br><span class="line">          <span class="keyword">this</span>.isScrolling = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">var</span> t1 = e.target.scrollTop;</span><br><span class="line">          clearTimeout(<span class="keyword">this</span>.timer);</span><br><span class="line">          <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">var</span> t2 = e.target.scrollTop;</span><br><span class="line">              <span class="built_in">console</span>.log(t2 == t1);</span><br><span class="line">              <span class="keyword">if</span>(t2 == t1)&#123;</span><br><span class="line">                   <span class="keyword">this</span>.isScrolling = <span class="literal">false</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;, <span class="number">1000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  goDetail : <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.isScrolling)&#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">     dosomething();</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>判断移动端设备全局方法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> GL_OS_NAME;    <span class="comment">//记录设备类型</span></span><br><span class="line"><span class="keyword">const</span> ua = <span class="built_in">window</span>.navigator.userAgent.toLocaleLowerCase();</span><br><span class="line">GL_OS_NAME = <span class="regexp">/iphone|ipad|ipod/</span>.test(ua) ? <span class="string">"ios"</span> : <span class="regexp">/android/</span>.test(ua) ? <span class="string">"android"</span> : <span class="string">"pc"</span>;</span><br><span class="line">Vue.prototype.get_GL_OS_NAME = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GL_OS_NAME;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>new Date() 在ios上的坑</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">要创建一个指定时间的new Date对象时，通常的做法是：</span><br><span class="line"></span><br><span class="line">new Date("2018-04-27 11:11");然后就可以根据这个获取年月日等信息</span><br><span class="line"></span><br><span class="line">这种格式在chrome,firefox,Android中都没有问题。。。。。。但是，但是，但是在IOS中就出问题了，该对象返回的是valid Date??????为什么会返回这个值，这不是有效的意思吗。。。。</span><br><span class="line"></span><br><span class="line">结果发现。。。在IOS中，new Date中指定的字符串还有格式。。。</span><br><span class="line"></span><br><span class="line">new Date("2018/04/27 11:11")，这样才能正确返回结果。。。。。。。。。。。</span><br><span class="line"></span><br><span class="line">Safari和IE没有测试过，不知道是否也会出现这种问题，如果有类似情况出现，那么可以用下面的方法来解决</span><br><span class="line"></span><br><span class="line">var obj=new Date("2018-04-27 11:11").replace(/-/g, "/");</span><br><span class="line"></span><br><span class="line">毕竟 在new Date里面的2018/04/27 这种格式在其它浏览器中也支持。。。。。。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">还有，在安卓和IOS上的微信中的浏览器内核是不一样的，这也会导致上面的安卓和IOS中new Date的差别：</span><br><span class="line">　　安卓6.1版本以上都是使用QQ浏览器的X5内核，5.4-6.1之间的版本如果安装了QQ浏览器的话就是使用X5内核，如果没安装，就是使用的系统内核</span><br><span class="line"></span><br><span class="line">　　IOS有两种，一种是WKWebview，一种是UIWebview，从IOS8版本开始支持WKWebview</span><br></pre></td></tr></table></figure>
<ol start="10">
<li>vue中路由参数不一样时页面没有刷新</li>
</ol>
<p>解决： 使用 ：:key=”this.$route.path”  解决。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;main-box&quot; &gt;</span><br><span class="line">        &lt;keep-alive&gt;</span><br><span class="line">            &lt;router-view :key=&quot;this.$route.path&quot; v-if=&quot;$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/keep-alive&gt;</span><br><span class="line">        &lt;router-view :key=&quot;this.$route.path&quot; v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<ol start="11">
<li>简单音频播放</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--audio.vue--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div :class=&quot;[&apos;btn-music&apos;,&apos;audio-box&apos;,rotate?&apos;rotate&apos;:&apos;&apos;]&quot; v-show=&quot;showPic&quot;  id=&quot;audio_ctrl&quot;&gt;</span><br><span class="line">		&lt;audio :id=&quot;key&quot; style=&quot;display:none&quot;&gt;&lt;/audio&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		data() &#123;</span><br><span class="line">			return &#123;</span><br><span class="line">                audio : null,</span><br><span class="line">                key : &apos;audio_tpl_&apos; + new Date().getTime(),</span><br><span class="line">                src : null, //当前播放的音频</span><br><span class="line">                status : 3, // 0:stop,1:play,2:pause 3：未加载</span><br><span class="line">                canPlay: false,</span><br><span class="line">                failed: false,    //曾经提示失败过</span><br><span class="line">                rotate: false,   //是否旋转图标</span><br><span class="line">                showPic: false,   //是否展示图标</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line">            pause : function()&#123;</span><br><span class="line">                this.status = 2;</span><br><span class="line">                this.rotate = false;</span><br><span class="line">                this.audio.pause();</span><br><span class="line">                // $(&quot;#audio_ctrl&quot;).removeClass(&apos;rotate&apos;);</span><br><span class="line">            &#125;,</span><br><span class="line">            play : function()&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                if(this.src != this.audio.src)&#123;</span><br><span class="line">                    this.audio.src = this.src;</span><br><span class="line">                &#125;</span><br><span class="line">                _this.audio.play();</span><br><span class="line">                if(_this.audio.readyState != 4 )&#123;</span><br><span class="line">                    _this.loading = weui.loading(this.$t(&apos;l.i.audio.loadingAudio&apos;));</span><br><span class="line">                    setTimeout(()=&gt;&#123;</span><br><span class="line">                        if(!_this.canPlay)&#123;</span><br><span class="line">                            _this.stop();</span><br><span class="line">                            _this.audio.pause(); </span><br><span class="line">                            console.log(&quot;10秒内还不可播放&quot;)</span><br><span class="line">                            _this.loading.hide();</span><br><span class="line">                            weui.toast(_this.$t(&apos;l.i.audio.tips&apos;),1000);</span><br><span class="line">                            _this.canPlay = false;</span><br><span class="line">                            _this.failed = true;   //曾经提示失败</span><br><span class="line">                        &#125;</span><br><span class="line">                        console.log(&quot;10秒内可播放&quot;)</span><br><span class="line">                    &#125;,10000);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                console.log(&quot;我要播放&quot;)</span><br><span class="line">                _this.canPlay = true;</span><br><span class="line">                this.loading.hide();</span><br><span class="line">                // $(&quot;#audio_ctrl&quot;).addClass(&apos;rotate&apos;);</span><br><span class="line">                this.rotate = true;</span><br><span class="line">                this.status = 1;</span><br><span class="line">            &#125;,</span><br><span class="line">            stop : function()&#123;</span><br><span class="line">                this.status = 0;</span><br><span class="line">                // $(&quot;#audio_ctrl&quot;).removeClass(&apos;rotate&apos;);</span><br><span class="line">                this.rotate = false;</span><br><span class="line">                // $(&quot;#audio_ctrl&quot;).hide();</span><br><span class="line">                this.showPic = false;</span><br><span class="line">            &#125;,</span><br><span class="line">			playAudio: function(url)&#123;</span><br><span class="line">                var _this= this;</span><br><span class="line">                _this.failed = false;      //只要一点击就将 提示过失败重置</span><br><span class="line">                if(!url)&#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                // $(&apos;#audio_ctrl&apos;).show();</span><br><span class="line">                 this.showPic = true;</span><br><span class="line">                var audio = this.audio;</span><br><span class="line">               </span><br><span class="line">                if(this.status == 0 || this.status == 3)&#123;//直接播放</span><br><span class="line">                    this.src = url;</span><br><span class="line">                    return this.play();</span><br><span class="line">                &#125;</span><br><span class="line">                if(this.src &amp;&amp; this.src == url)&#123;//同一音频</span><br><span class="line">                    if(this.status == 1)&#123;</span><br><span class="line">                        return this.pause();</span><br><span class="line">                    &#125;</span><br><span class="line">                    return this.play();</span><br><span class="line">                &#125;</span><br><span class="line">                //不同音频，直接播放</span><br><span class="line">                if(this.src)&#123;</span><br><span class="line">                    this.src = url;</span><br><span class="line">                    this.status = 3;       //不同音频，将音频状态改为 未加载</span><br><span class="line">                    // if($(&quot;#audio_ctrl&quot;).hasClass(&apos;rotate&apos;))&#123;</span><br><span class="line">                    //     $(&quot;#audio_ctrl&quot;).removeClass(&apos;rotate&apos;);</span><br><span class="line">                    // &#125;</span><br><span class="line">                    if(this.rotate)&#123;</span><br><span class="line">                        this.rotate = false;</span><br><span class="line">                    &#125;</span><br><span class="line">                    this.play();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            toggleStatus()&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                if(_this.rotate)&#123;//正在播放</span><br><span class="line">                    _this.pause();</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    _this.play();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">			initEvent: function()&#123;</span><br><span class="line">                var _this = this;             </span><br><span class="line">                _this.audio.addEventListener(&apos;ended&apos;, function () &#123;  </span><br><span class="line">                    _this.stop();</span><br><span class="line">                &#125;, false);</span><br><span class="line"></span><br><span class="line">                _this.audio.addEventListener(&quot;canplaythrough&quot;, function () &#123;   //当浏览器预计能够在不停下来进行缓冲的情况下持续播放指定的音频/视频时，会发生 canplaythrough 事件</span><br><span class="line">                    if(!_this.failed)&#123;   //提示过失败后即使可以播放了，也不播放</span><br><span class="line">                        _this.play();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                // 拖动图标</span><br><span class="line">                var startX = 0;</span><br><span class="line">                var startY = 0;</span><br><span class="line">                var xPos = 0;</span><br><span class="line">                var yPos = 0;</span><br><span class="line">                var oldXPos = 12;</span><br><span class="line">                var oldYPos = 12;</span><br><span class="line">                var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;</span><br><span class="line">                var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;</span><br><span class="line">                var timeOutEvent;</span><br><span class="line">                var isClick = true;</span><br><span class="line">                $(&quot;#audio_ctrl&quot;).on(&quot;touchstart&quot;,(e)=&gt;&#123;</span><br><span class="line">                    var touchPos = e.touches[0];</span><br><span class="line">                    startX = touchPos.clientX;</span><br><span class="line">                    startY = touchPos.clientY;</span><br><span class="line">                    timeOutEvent = setTimeout(function()&#123;</span><br><span class="line">                        //此处为长按事件</span><br><span class="line">                         _this.stop();</span><br><span class="line">                         _this.audio.pause();</span><br><span class="line">                         isClick = false;</span><br><span class="line">                    &#125;,1000);</span><br><span class="line">                &#125;);</span><br><span class="line">                $(&quot;#audio_ctrl&quot;).on(&quot;touchmove&quot;,(e)=&gt;&#123;</span><br><span class="line">                    clearTimeout(timeOutEvent);</span><br><span class="line">                    isClick = false;</span><br><span class="line">                    e.preventDefault();</span><br><span class="line">                    var touchPos = e.touches[0];</span><br><span class="line">                    xPos = startX - touchPos.clientX + oldXPos;</span><br><span class="line">                    yPos = touchPos.clientY - startY + oldYPos;</span><br><span class="line">                    xPos = xPos &lt; 0 ? 12 : xPos &gt; (width - 52) ? (width - 52) : xPos;</span><br><span class="line">                    yPos = yPos &lt; 0 ? 12 : yPos &gt; (height - 52) ? (height - 52) : yPos;</span><br><span class="line">                    $(&quot;#audio_ctrl&quot;).css(&#123;top:yPos,right:xPos&#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">                $(&quot;#audio_ctrl&quot;).on(&quot;touchend&quot;,(e)=&gt;&#123;</span><br><span class="line">                    oldXPos = xPos;</span><br><span class="line">                    oldYPos = yPos;</span><br><span class="line">                    clearTimeout(timeOutEvent);</span><br><span class="line">                    if(isClick)&#123;//点击</span><br><span class="line">                        //此处为点击事件</span><br><span class="line">                        _this.toggleStatus();</span><br><span class="line">                    &#125;</span><br><span class="line">                    isClick = true;</span><br><span class="line">                &#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		mounted() &#123;</span><br><span class="line">            this.audio = $(&apos;#&apos; + this.key)[0];</span><br><span class="line">            this.initEvent();</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy()&#123;</span><br><span class="line">            if(this.status == 1)&#123;</span><br><span class="line">                return this.pause();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed()&#123;</span><br><span class="line">            $(&quot;#audio_ctrl&quot;).css(&#123;top:12,right:12&#125;);</span><br><span class="line">            // $(&apos;#audio_ctrl&apos;).hide();</span><br><span class="line">            this.showPic = false;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--app.vue--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot; :class=&quot;&#123;&apos;hide-bar&apos;:hidebar&#125;&quot;&gt;</span><br><span class="line">      &lt;v-audio ref=&quot;staudio&quot;&gt;&lt;/v-audio&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import audio from &apos;@/components/include/audio.vue&apos;;</span><br><span class="line">export default &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">     	&quot;v-audio&quot;: audio,</span><br><span class="line">  	&#125;,</span><br><span class="line">    mouted()&#123;</span><br><span class="line">        _this.$nextTick(function()&#123;</span><br><span class="line">             _this.$bus.$on(&apos;playMusic&apos;,value =&gt; &#123;</span><br><span class="line">                _this.play(value);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;   </span><br><span class="line">    </span><br><span class="line"> &lt;!--调用界面--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	this.$bus.$emit(&apos;playMusic&apos;,url);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>-vue</tag>
      </tags>
  </entry>
  <entry>
    <title>h5+开发汇总</title>
    <url>/2019/12/15/h5+app%E5%BC%80%E5%8F%91%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h3 id="h5-开发汇总"><a href="#h5-开发汇总" class="headerlink" title="h5+开发汇总"></a>h5+开发汇总</h3><h4 id="基于h5-api的使用"><a href="#基于h5-api的使用" class="headerlink" title="基于h5+ api的使用"></a>基于h5+ api的使用</h4><p><a href="http://www.html5plus.org/doc/zh_cn/accelerometer.html" target="_blank" rel="noopener">h5+API文档</a></p>
<p>打包后遇到的第一个问题</p>
<p>步骤</p>
<p>打开app，点击页面跳转正常，但是使用物理按键返回时，直接就退出app</p>
<p>期望</p>
<p>使用物理按键返回时，正常的返回，无法返回时提示 再返回一次退出app</p>
<p>解决</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = [<span class="literal">null</span>, <span class="literal">null</span>];    <span class="comment">//记录返回的两次间隔时间</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.plus) &#123;</span><br><span class="line">    plusReady();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'plusready'</span>, plusReady, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plusReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> webview = plus.webview.currentWebview();</span><br><span class="line">    plus.key.addEventListener(<span class="string">'backbutton'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        webview.canBack(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (e.canBack) &#123;</span><br><span class="line">               time = [<span class="literal">null</span>,<span class="literal">null</span>];   <span class="comment">//路由变化重置 time。</span></span><br><span class="line">               router.go(<span class="number">-1</span>); <span class="comment">//返回上一级</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                time.shift();</span><br><span class="line">                time.push(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line">                <span class="keyword">if</span> (time[<span class="number">1</span>] - time[<span class="number">0</span>] &gt; <span class="number">2000</span>) &#123;  <span class="comment">//事件间隔大于 2s 当作第一次 点击返回，做出提示</span></span><br><span class="line">           <span class="comment">//plus.nativeUI.toast  h5+API的提示窗口详细使用请看api，默认前面有应用名称：tips</span></span><br><span class="line">                    plus.nativeUI.toast(<span class="string">"再按一次返回退出应用！"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    plus.runtime.quit();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二个问题</p>
<p>对于类似txt。word等文档文件，使用 h5+pai的 下载并展示下载进度，下载完成后自动使用手机的第三方工具查看</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.prototype.downloadFile = <span class="function"><span class="keyword">function</span>(<span class="params">url, orgName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> saveName = url.substring(url.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>, url.length);</span><br><span class="line">    <span class="keyword">if</span>(!orgName)&#123;</span><br><span class="line">        orgName = saveName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> fileType = util.getFileType(url);  <span class="comment">//获取文件类型，该项目下的自定义获取文件类型方法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'pic'</span> == fileType || <span class="string">'video'</span> == fileType || <span class="string">'audio'</span> == fileType || <span class="string">'link'</span> == fileType) &#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> file = &#123;</span><br><span class="line">        orgName: <span class="string">"_downloads/"</span> + orgName,</span><br><span class="line">        fileName: <span class="string">"_downloads/"</span> + saveName</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.plus)&#123;</span><br><span class="line">        plus.runtime.openFile(file.orgName,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> dtask = plus.downloader.createDownload(url,&#123;<span class="attr">filename</span>: file.orgName&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">item, status</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(item.state &amp;&amp; status == <span class="number">200</span>)&#123;</span><br><span class="line">                    plus.runtime.openFile(item.getFileName());</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $(<span class="string">'#dl_progress'</span>).hide();</span><br><span class="line">                    _this.GL_ALERT(<span class="string">"文件下载失败"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            dtask.addEventListener(<span class="string">"statechanged"</span>, dlProgress, <span class="literal">false</span>);</span><br><span class="line">            dtask.start();</span><br><span class="line">            $(<span class="string">'#dl_progress'</span>).show();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dlProgress = <span class="function"><span class="keyword">function</span>(<span class="params">download, status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!download) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(status == <span class="number">404</span>)&#123;</span><br><span class="line">        $(<span class="string">'#dl_progress'</span>).hide();</span><br><span class="line">        _this.GL_ALERT(<span class="string">"资源下载失败"</span>);</span><br><span class="line">        <span class="comment">//遇到报错停止下载</span></span><br><span class="line">        download.abort();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> rate = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(download.downloadedSize &amp;&amp; download.totalSize)&#123;</span><br><span class="line">        rate = (download.downloadedSize * <span class="number">100</span> / download.totalSize).toFixed(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">'#dl_progress span'</span>).text(rate);</span><br><span class="line">	<span class="keyword">if</span>(download.state == <span class="number">4</span> &amp;&amp; status == <span class="number">200</span>)&#123;</span><br><span class="line">        $(<span class="string">'#dl_progress'</span>).hide()</span><br><span class="line">		weui.toast(<span class="string">"下载成功"</span>,<span class="number">1000</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//app.vue   下载进度展示</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dl_progress"</span> <span class="attr">class</span>=<span class="string">"weui-loading_toast weui-animate-fade-in"</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-toast app"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"weui-loading weui-icon_toast"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"weui-toast__content"</span>&gt;</span>&#123;&#123;$t('l.main.downloadPro')&#125;&#125;<span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span>%<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述代码就是使用h5+API 下载文件并使用第三方工具打开的实现代码，直接从项目代码拿下来，如需使用可根据业务逻辑自行修改。有些全局代码，未展示，因此使用时需查看文档进行更改；</p>
<p>第三个问题，也是下载问题，此次是下载app升级包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//也是采用了上面的进度条</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.downloadWgt = <span class="function"><span class="keyword">function</span>(<span class="params">url,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dtask = plus.downloader.createDownload(url,&#123;<span class="attr">filename</span>: <span class="string">'_doc/update/'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">item, status</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(status == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">// plus.runtime.openFile(item.getFileName());</span></span><br><span class="line">            <span class="comment">//回调函数</span></span><br><span class="line">            callback(item.filename);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            _this.GL_ALERT(<span class="string">"升级包下载失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    dtask.addEventListener(<span class="string">"statechanged"</span>, dlProgress, <span class="literal">false</span>);</span><br><span class="line">    dtask.start();</span><br><span class="line">    $(<span class="string">'#dl_progress'</span>).show();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用界面</span></span><br><span class="line">    download(appPackAliName)&#123;                </span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span>(!appPackAliName)&#123;</span><br><span class="line">            <span class="keyword">return</span> _this.GL_ALERT(<span class="string">'请检查是否已上传升级包？'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.isClick)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">window</span>.plus)&#123;</span><br><span class="line">            _this.isClick = <span class="literal">true</span>;  </span><br><span class="line">            <span class="comment">//调用全局 下载文件方法，并使用回调函数 安装文件</span></span><br><span class="line">            _this.downloadWgt(appPackAliName,<span class="function"><span class="keyword">function</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line">                _this.installWgt(filename); <span class="comment">// 安装wgt包</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    installWgt (path) &#123;</span><br><span class="line">        <span class="comment">// plus.nativeUI.showWaiting('安装wgt文件...');</span></span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        _this.loading = weui.loading(_this.$t(<span class="string">'l.c.installing'</span>))</span><br><span class="line"></span><br><span class="line">        plus.runtime.install(path, &#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// plus.nativeUI.closeWaiting();</span></span><br><span class="line">            _this.loading.hide();</span><br><span class="line">            weui.toast(<span class="string">"安装成功"</span>,<span class="number">1000</span>);</span><br><span class="line">            plus.runtime.restart();</span><br><span class="line">            <span class="comment">// plus.nativeUI.alert('应用资源更新完成！', function () &#123;</span></span><br><span class="line">            <span class="comment">//     plus.runtime.restart();</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            _this.loading.hide();</span><br><span class="line">            _this.GL_ALERT(<span class="string">"安装失败["</span>+e.code+<span class="string">"]："</span>+e.message);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<h4 id="制作wgt升级包注意事项"><a href="#制作wgt升级包注意事项" class="headerlink" title="制作wgt升级包注意事项"></a>制作wgt升级包注意事项</h4><ol>
<li><p>在hbuilderX项目中右键  ——&gt; 发行 —&gt; 制作app资源升级包，</p>
</li>
<li><p>manifest.json文件里面的version字段的name和code一定要比现有的高，code且为整数</p>
</li>
<li><p>manifest.json模块配置，没有使用到的一定要去除掉，否则也会失败</p>
</li>
<li><p>代码中获取版本号信息的代码为如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前app的版本号（资源升级后照样获取的到升级后的版本号），其他方法获取版本号经测试不可用</span></span><br><span class="line"><span class="comment">//下面方法可行</span></span><br><span class="line">plus.runtime.getProperty( plus.runtime.appid, <span class="function"><span class="keyword">function</span> (<span class="params"> wgtinfo </span>) </span>&#123;</span><br><span class="line">        store.commit(<span class="string">"setCurrentVersion"</span>, wgtinfo.version);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果遇到明明升级包的版本号比当前版本号高，升级时却提示版本号错误等提示，可查看升级包的版本号是否升级成功</p>
<p>生成的wgt文件复制一份，并将文件后面加个.zip后缀，此时文件变成一个压缩文件，点击查看，可以查看到里面的有www的文件夹，查看manifest文件的版本号是否修改成功，如果每次制作升级包，版本号明明改了，但是制作完成后添加 .zip后缀查看版本号并没有变时 可 关掉打包软件重新打开再制作升级包。</p>
<p>这个是软件的bug，当你看到这篇文章时，这个bug应该已经被修复了。</p>
</li>
</ol>
<p>遇到的第三个问题</p>
<p>相机权限问题</p>
<p>使用二维码，或者拍照时就需要用到手机摄像头，就需要获取权限。</p>
<p>需求：当第一次访问时，请求相机权限，当拒绝时做出提示。</p>
<p>plus.navigator.checkPermission(type)   方法  可查看手机权限的状态，但是文档上有声明，android全部不支持</p>
<p>因此麻烦来了，安卓要如何判断是否有允许权限</p>
<p>解决代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查权限全局代码，第一个参数 相机权限还是相册权限，第二个参数 权限允许时回调函数 </span></span><br><span class="line"><span class="comment">//第三个参数 权限不允许时，点击弹框的确定回调函数</span></span><br><span class="line">Vue.prototype.checkPermission = <span class="function"><span class="keyword">function</span>(<span class="params">perType,callback,confirmCallback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> check = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// var perType = 'CAMERA';</span></span><br><span class="line">    <span class="keyword">var</span> type = &#123;</span><br><span class="line">        <span class="string">'CAMERA'</span>:<span class="string">'android.permission.CAMERA'</span>,</span><br><span class="line">        <span class="string">'GALLERY'</span>: <span class="string">'android.permission.READ_EXTERNAL_STORAGE'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">window</span>.plus)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkResult</span>(<span class="params">rusult,confirmCallback</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!rusult)&#123;</span><br><span class="line">            weui.dialog(&#123;</span><br><span class="line">                title: <span class="string">"提示"</span>,</span><br><span class="line">                content: i18n.messages[i18n.locale][<span class="string">'l'</span>][<span class="string">'permission'</span>][perType],</span><br><span class="line">                className: <span class="string">'custom-classname'</span>,</span><br><span class="line">                buttons: [&#123;</span><br><span class="line">                    label: <span class="string">"确定"</span>,</span><br><span class="line">                    type: <span class="string">'primary'</span>,</span><br><span class="line">                    onClick: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">                        confirmCallback&amp;&amp;confirmCallback();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ua = <span class="built_in">window</span>.navigator.userAgent.toLocaleLowerCase(); </span><br><span class="line">    <span class="keyword">var</span> isIOS = <span class="regexp">/iphone|ipad|ipod/</span>.test(ua);</span><br><span class="line">    <span class="keyword">if</span>(isIOS)&#123;</span><br><span class="line">        <span class="keyword">var</span> pp = plus.navigator.checkPermission(perType);</span><br><span class="line">        <span class="keyword">switch</span>(pp)&#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'authorized'</span>:</span><br><span class="line">            check = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'denied'</span>:</span><br><span class="line">            check = <span class="literal">false</span>;             </span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'undetermined'</span>:</span><br><span class="line">            check = <span class="literal">true</span>;             </span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'notdeny'</span>:</span><br><span class="line">              check = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'unknown'</span>:</span><br><span class="line">            check = <span class="literal">false</span>;             </span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            check = <span class="literal">false</span>;             </span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//上述代码可缩减，这里懒得缩减了，详细查看api</span></span><br><span class="line">        checkResult(check,confirmCallback);</span><br><span class="line">        callback &amp;&amp; callback(check);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  <span class="comment">//安卓的查看权限</span></span><br><span class="line">        <span class="comment">// 调试</span></span><br><span class="line">        <span class="comment">// check = true;</span></span><br><span class="line">        <span class="comment">// checkResult(check);</span></span><br><span class="line">        <span class="comment">// callback &amp;&amp; callback(check);</span></span><br><span class="line"></span><br><span class="line">        plus.android.requestPermissions([type[perType]], <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(e.deniedAlways.length&gt;<span class="number">0</span>)&#123;	<span class="comment">//权限被永久拒绝</span></span><br><span class="line">                <span class="comment">// 弹出提示框解释为何需要??权限，引导用户打开设置页面开启</span></span><br><span class="line">                check = <span class="literal">false</span>;     </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(e.deniedPresent.length&gt;<span class="number">0</span>)&#123;	<span class="comment">//权限被临时拒绝</span></span><br><span class="line">                <span class="comment">// 弹出提示框解释为何需要??权限，可再次调用plus.android.requestPermissions申请权限</span></span><br><span class="line">                check = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(e.granted.length&gt;<span class="number">0</span>)&#123;	<span class="comment">//权限被允许</span></span><br><span class="line">                <span class="comment">//调用依赖获取??权限的代码</span></span><br><span class="line">                check = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            checkResult(check,confirmCallback);</span><br><span class="line">            callback &amp;&amp; callback(check);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            check = <span class="literal">false</span>;</span><br><span class="line">            checkResult(check,confirmCallback);</span><br><span class="line">            callback &amp;&amp; callback(check);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>二维码界面代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"sacn-box"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[!check?'error-box':'']"</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"scan"</span> v-show=<span class="string">"isScan"</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">"bcid"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"error-msg"</span> v-show=<span class="string">"!check"</span>&gt;&#123;&#123;$t(<span class="string">'l.s.scan.openCamera'</span>)&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">let scan = null;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'scan',</span></span><br><span class="line"><span class="regexp">  data()&#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      loading : null,</span></span><br><span class="line"><span class="regexp">      view : null,</span></span><br><span class="line"><span class="regexp">      Bartab : null,</span></span><br><span class="line"><span class="regexp">      timeout : null,</span></span><br><span class="line"><span class="regexp">      timeout2 : null,</span></span><br><span class="line"><span class="regexp">      check : true,</span></span><br><span class="line"><span class="regexp">      rem12 : '12px',</span></span><br><span class="line"><span class="regexp">      rem14 : '14px',</span></span><br><span class="line"><span class="regexp">      size: 16,   /</span><span class="regexp">/顶部标题 字体大小  “二维码”</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods:&#123;</span></span><br><span class="line"><span class="regexp">    scanCard() &#123;</span></span><br><span class="line"><span class="regexp">        let _this = this;</span></span><br><span class="line"><span class="regexp">        let barcodeStyle = &#123;</span></span><br><span class="line"><span class="regexp">            frameColor : '#000000',</span></span><br><span class="line"><span class="regexp">            scanbarColor : '#000000',</span></span><br><span class="line"><span class="regexp">            background : 'rgba(255,255,255,0)',</span></span><br><span class="line"><span class="regexp">            position :'static'</span></span><br><span class="line"><span class="regexp">        &#125;               </span></span><br><span class="line"><span class="regexp">        if(_this.isScan)&#123;</span></span><br><span class="line"><span class="regexp">            return _this.closeScan();</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        _this.isScan = true; </span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/创建扫码</span></span><br><span class="line"><span class="regexp">        scan = plus.barcode.create('bcid',[plus.barcode.QR],barcodeStyle);     </span></span><br><span class="line"><span class="regexp">        plus.webview.currentWebview().append(scan);</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 打开扫码</span></span><br><span class="line"><span class="regexp">        _this.startScan();</span></span><br><span class="line"><span class="regexp">        scan.onmarked = _this.onmarked;</span></span><br><span class="line"><span class="regexp">        scan.onerror  = _this.onerror;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/开始扫描</span></span><br><span class="line"><span class="regexp">    startScan() &#123;</span></span><br><span class="line"><span class="regexp">      var _this = this;</span></span><br><span class="line"><span class="regexp">        if (!window.plus) return;</span></span><br><span class="line"><span class="regexp">        scan.start();</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/关闭条码识别控件</span></span><br><span class="line"><span class="regexp">    closeScan() &#123;</span></span><br><span class="line"><span class="regexp">        if (!window.plus) return;</span></span><br><span class="line"><span class="regexp">        scan.close();</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    goBack()&#123;</span></span><br><span class="line"><span class="regexp">      this.$router.go(-1);</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    onmarked(type, result, file) &#123;</span></span><br><span class="line"><span class="regexp">        var _this = this;</span></span><br><span class="line"><span class="regexp">        var scanType = false;</span></span><br><span class="line"><span class="regexp">        _this.loading = weui.loading(_this.$t('l.c.handling'));</span></span><br><span class="line"><span class="regexp">        switch (type) &#123;</span></span><br><span class="line"><span class="regexp">            case plus.barcode.QR:</span></span><br><span class="line"><span class="regexp">            type = 'QR';</span></span><br><span class="line"><span class="regexp">            break;</span></span><br><span class="line"><span class="regexp">            case plus.barcode.EAN13:</span></span><br><span class="line"><span class="regexp">            type = 'EAN13';</span></span><br><span class="line"><span class="regexp">            break;</span></span><br><span class="line"><span class="regexp">            case plus.barcode.EAN8:</span></span><br><span class="line"><span class="regexp">            type = 'EAN8';</span></span><br><span class="line"><span class="regexp">            break;</span></span><br><span class="line"><span class="regexp">            default:</span></span><br><span class="line"><span class="regexp">            type = '其它' + type;</span></span><br><span class="line"><span class="regexp">            break;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        result = result.replace(/</span>\n/g, <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">if</span>(result.indexOf(<span class="string">"#"</span>)&gt;<span class="number">-1</span>)&#123;     <span class="comment">//解决当 链接不带  #  时， result.split("#")[1]  不存在而报错  导致 扫码功能异常的问题。</span></span><br><span class="line">          result = result.split(<span class="string">"#"</span>)[<span class="number">1</span>];</span><br><span class="line">          <span class="comment">//允许扫码的路径</span></span><br><span class="line">          <span class="keyword">var</span>  paths = [<span class="string">'/app/scan/'</span>,<span class="string">'/app/scan/login'</span>,<span class="string">'/teacher/user/scan/login/'</span>,<span class="string">'/join/group/'</span>,<span class="string">'/join/class/'</span>,<span class="string">'/student/discuss/wall/'</span>,<span class="string">'/student/discuss/free/'</span>];</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>,len = paths.length; i&lt;len ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(result.indexOf(paths[i]) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">                scanType = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span> ;</span><br><span class="line">            &#125;     </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        _this.loading.hide();</span><br><span class="line">        <span class="keyword">if</span>(scanType)&#123;</span><br><span class="line">            <span class="keyword">return</span> _this.$router.replace(result);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            _this.closeScan();</span><br><span class="line">            weui.dialog(&#123;</span><br><span class="line">                title: _this.$t(<span class="string">'l.s.scan.errTips'</span>),</span><br><span class="line">                content: _this.$t(<span class="string">'l.s.scan.cardErr'</span>),</span><br><span class="line">                className: <span class="string">'custom-classname'</span>,</span><br><span class="line">                buttons: [&#123;</span><br><span class="line">                    label: _this.$t(<span class="string">'l.s.scan.confirm'</span>),</span><br><span class="line">                    type: <span class="string">'primary'</span>,</span><br><span class="line">                    onClick: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        _this.$router.go(<span class="number">-1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="keyword">return</span> _this.$router.replace(result);</span><br><span class="line">    &#125;,  </span><br><span class="line">    onerror(error)&#123;</span><br><span class="line">      _this.GL_ALERT(error);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">      <span class="keyword">var</span> size = $(<span class="string">'html'</span>)[<span class="number">0</span>].style.fontSize.replace(<span class="string">'px'</span>,<span class="string">''</span>);</span><br><span class="line">      <span class="keyword">this</span>.size = size * <span class="number">0.32</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  mounted : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.baseSize = $(<span class="string">'html'</span>).css(<span class="string">'font-size'</span>);</span><br><span class="line">    <span class="keyword">this</span>.baseNum = <span class="keyword">this</span>.baseSize.replace(<span class="string">'px'</span>, <span class="string">''</span>);</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/ipad/i</span>.test(ua))&#123;</span><br><span class="line">      <span class="keyword">this</span>.rem12 = <span class="string">'20px'</span>;</span><br><span class="line">      <span class="keyword">this</span>.rem14 = <span class="string">'24px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.plus)&#123;</span><br><span class="line">      _this.checkPermission(<span class="string">'CAMERA'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            _this.check = data;</span><br><span class="line">            <span class="keyword">if</span>(_this.check)&#123;</span><br><span class="line">                _this.scanCard();   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          _this.$router.go(<span class="number">-1</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _this.GL_ALERT(_this.$t(<span class="string">'l.s.scan.byPhone'</span>));</span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy()&#123;</span><br><span class="line">    <span class="keyword">this</span>.closeScan();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">#bcid &#123;</span></span><br><span class="line"><span class="regexp">      height : 100%;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.error-box&#123;</span></span><br><span class="line"><span class="regexp">  width:100%;</span></span><br><span class="line"><span class="regexp">  height:100vh;</span></span><br><span class="line"><span class="regexp">  display:flex;</span></span><br><span class="line"><span class="regexp">  justify-content: center;</span></span><br><span class="line"><span class="regexp">  align-items: center;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.error-msg&#123;</span></span><br><span class="line"><span class="regexp">  font-size:.4rem;</span></span><br><span class="line"><span class="regexp">  margin:auto;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>
<p>打开相机和相册界面代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//crop.js</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;crop-box&quot; v-show=&quot;isCrop&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;crop-area-bg&quot; v-show=&quot;!imgLoaded&quot; &gt;&#123;&#123;bgMsg&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div :id=&quot;&apos;crop_area&apos;+btnId&quot; class=&quot;crop-area&quot; :style=&quot;&#123;opacity:opacity&#125;&quot; &gt;&lt;/div&gt;</span><br><span class="line">        &lt;span class=&quot;btn-rotate-left&quot; @click=&quot;rotateLeft&quot;&gt;&lt;/span&gt;</span><br><span class="line">        &lt;div class=&quot;btn-box&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;btn-cancel&quot; @click=&quot;cancelCrop&quot;&gt;&#123;&#123;$t(&apos;l.i.crop.cancel&apos;)&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;btn-reset&quot; @click=&quot;rotateReset&quot;&gt;&#123;&#123;$t(&apos;l.i.crop.restore&apos;)&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;btn-commit&quot; @click=&quot;confirmCrop&quot;&gt;&#123;&#123;$t(&apos;l.i.crop.finish&apos;)&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import * as util from &apos;@static/js/util.js&apos;;</span><br><span class="line">	export default&#123;</span><br><span class="line">        props: [</span><br><span class="line">            &apos;btnId&apos;,</span><br><span class="line">            &apos;fileTypes&apos;</span><br><span class="line">		],</span><br><span class="line">		data()&#123;</span><br><span class="line">			return&#123;</span><br><span class="line">                seling: false,     //判断是否在拍照或者读取相册</span><br><span class="line">                client : null,</span><br><span class="line">                region: &apos;oss-cn-shenzhen&apos;,     //根据你买的那个区的做相应的更改</span><br><span class="line">                bucket: &apos;boyintest&apos;,</span><br><span class="line">                id: &apos;uploadImage&apos;,</span><br><span class="line">                percentage: 0,</span><br><span class="line">                opacity : 0,</span><br><span class="line">                url: &apos;&apos;,</span><br><span class="line">                bgMsg : &apos;&apos;,//$t(&apos;l.i.crop.pictureProcessing&apos;)</span><br><span class="line">                uploadFilesName: &apos;&apos;,</span><br><span class="line">                uploadfile: [],</span><br><span class="line">                imgLoaded : false,</span><br><span class="line">                maxLength: 1,</span><br><span class="line">                isCrop : false,</span><br><span class="line">                rotate : 0,</span><br><span class="line">                defaultFileTypes : &apos;jpg,png,jpeg,JPG,PNG,JPEG&apos;,</span><br><span class="line">                credentials : null,</span><br><span class="line">                fileUrlPre : null,</span><br><span class="line">                uploadUrl : null</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		methods:&#123;</span><br><span class="line">            rotateLeft : function()&#123;</span><br><span class="line">                this.crop.rotate(-90);</span><br><span class="line">            &#125;,</span><br><span class="line">            rotateRight : function()&#123;</span><br><span class="line">                this.crop.rotate(10);</span><br><span class="line">            &#125;,</span><br><span class="line">            rotateReset : function()&#123;</span><br><span class="line">                this.crop.reset();</span><br><span class="line">            &#125;,</span><br><span class="line">            getCredentials : function () &#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                _this.$axios.post(_this.apiUrl + &quot;/sts/get-credentials&quot;,_this.$qs.stringify(&#123;type : 20&#125;)).then(function (response) &#123;</span><br><span class="line">                    if (!response || !response.data.success) &#123;</span><br><span class="line">                        return _this.loading.hide();</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    _this.credentials = &#123;</span><br><span class="line">                        bucketName : response.data.bucket,</span><br><span class="line">                        fileBucketName : response.data.filePath,</span><br><span class="line">                        credentials : JSON.stringify(response.data.sts),</span><br><span class="line">                    &#125;;</span><br><span class="line">                    _this.fileUrlPre = response.data.fileUrlPre;</span><br><span class="line">                    _this.uploadUrl = response.data.uploadUrl;</span><br><span class="line">                  </span><br><span class="line">                    // 设置参数</span><br><span class="line">                    _this.uploader.setOption(&#123;</span><br><span class="line">                        url : _this.uploadUrl,</span><br><span class="line">                        multipart_params : _this.credentials</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                    _this.uploader.start();</span><br><span class="line">			    &#125;).catch(function (error) &#123;</span><br><span class="line">			        _this.loading.hide();</span><br><span class="line">                &#125;);	</span><br><span class="line">            &#125;,</span><br><span class="line">            cancelCrop : function()&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                _this.seling = false;</span><br><span class="line">                if(!_this.imgLoaded)&#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                _this.isCrop = false;</span><br><span class="line">                _this.crop.destroy();</span><br><span class="line">                _this.crop = null;</span><br><span class="line">                _this.uploader.disableBrowse(false);</span><br><span class="line">                _this.imgLoaded = false;</span><br><span class="line">                _this.opacity = 0;</span><br><span class="line"></span><br><span class="line">                _this.$emit(&quot;cancelCrop&quot;);</span><br><span class="line">                // _this.$bus.$emit(&apos;cropStatus&apos;, false);</span><br><span class="line">            &#125;,</span><br><span class="line">            confirmCrop : function()&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                _this.seling = false;</span><br><span class="line">                if(!_this.imgLoaded)&#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                if(_this.croping)&#123;</span><br><span class="line">                    return weui.toast(_this.$t(&apos;l.i.crop.uploading&apos;),1000);</span><br><span class="line">                &#125;</span><br><span class="line">                _this.croping = true;</span><br><span class="line">                _this.loading = weui.loading(_this.$t(&apos;l.i.crop.uploading&apos;), &#123;className: &apos;moka-loading&apos;&#125;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    var data = _this.crop.getCanvasData();</span><br><span class="line">                    var width,height;</span><br><span class="line">                    if(data.naturalWidth &gt; 1000)&#123;</span><br><span class="line">                        width = 1000;</span><br><span class="line">                        height = data.naturalHeight * 1000 / data.naturalWidth;</span><br><span class="line">                    &#125;</span><br><span class="line">                    var cas = _this.crop.getCroppedCanvas(&#123;</span><br><span class="line">                        width : width,</span><br><span class="line">                        height : height,</span><br><span class="line">                        // Limit max sizes</span><br><span class="line">                        maxWidth: 4096,</span><br><span class="line">                        maxHeight: 4096,</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    var fileName = _this.file.name;</span><br><span class="line">                    var saveName = new Date().getTime() + &apos;.&apos; + util.getSuffix(fileName);</span><br><span class="line"></span><br><span class="line">                    for(var index in _this.files)&#123;//清除所有文件</span><br><span class="line">                        var upFile = _this.files[index];</span><br><span class="line">                        _this.uploader.removeFile(upFile);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                  </span><br><span class="line">                    cas.toBlob(function (bolb) &#123;</span><br><span class="line">                        var file = new File([bolb], saveName, &#123;type: &apos;image/jpeg&apos;&#125;);</span><br><span class="line">                        _this.croping = false;</span><br><span class="line">                        _this.currFile = file;</span><br><span class="line">                        _this.uploader.addFile(file);</span><br><span class="line">                        _this.loading.hide();</span><br><span class="line">                    &#125;, &quot;image/jpeg&quot;, 0.95)</span><br><span class="line">                &#125; catch (error) &#123;</span><br><span class="line">                    _this.loading.hide();</span><br><span class="line">                    weui.toast(&apos;error&apos;);</span><br><span class="line">                    _this.cancelCrop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            uploaded : function(fileName, src)&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                weui.toast(_this.$t(&apos;l.i.crop.uploadSuccess&apos;),1000);</span><br><span class="line">                _this.$emit(&quot;fileUploadCallback&quot;, fileName, src);</span><br><span class="line">            &#125;,</span><br><span class="line">            initCrop : function(file)&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                // console.log(_this.isCrop);</span><br><span class="line">                if(_this.isCrop)&#123;//正在剪裁</span><br><span class="line">                    _this.isCrop = false;</span><br><span class="line">                    return _this.getCredentials();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                _this.file = file;</span><br><span class="line">                var fileName = _this.file.name;</span><br><span class="line">                </span><br><span class="line">                var fileTypes = _this.defaultFileTypes;</span><br><span class="line">                if(_this.fileTypes &amp;&amp; _this.fileTypes.length &gt; 0)&#123;</span><br><span class="line">                    fileTypes = _this.fileTypes;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var typeTpl = &apos;,&apos; + fileTypes.toLocaleLowerCase()  + &apos;,&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                var suffix = util.getSuffix(fileName).toLocaleLowerCase();</span><br><span class="line">                if(typeTpl.indexOf(suffix) &lt; 0)&#123;</span><br><span class="line">                    _this.uploader.removeFile(file);</span><br><span class="line">                    return _this.GL_ALERT(_this.$t(&apos;l.i.crop.notSupported&apos;));</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                if(suffix != &apos;jpg&apos; &amp;&amp; suffix != &apos;png&apos; &amp;&amp; suffix != &apos;jpeg&apos;)&#123;</span><br><span class="line">                    _this.loading = weui.loading(_this.$t(&apos;l.i.crop.uploading&apos;), &#123;className: &apos;moka-loading&apos;&#125;);</span><br><span class="line">                    _this.currFile = file;</span><br><span class="line">                    return _this.getCredentials();//_this.uploadFile(_this.file);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                _this.$emit(&quot;onCrop&quot;);</span><br><span class="line">                // _this.$bus.$emit(&apos;cropStatus&apos;, true);</span><br><span class="line">                </span><br><span class="line">                _this.isCrop = true;</span><br><span class="line">                _this.loading = weui.loading(_this.$t(&apos;l.i.crop.pictureProcessing&apos;));</span><br><span class="line">                var preloader = new moxie.image.Image();</span><br><span class="line">                preloader.onload = function () &#123;</span><br><span class="line">                    var imgsrc = preloader.type == &apos;image/jpeg&apos; ? preloader.getAsDataURL(&apos;image/jpeg&apos;, 80) : preloader.getAsDataURL(); //得到图片src,实质为一个base64编码的数据</span><br><span class="line">                    _this.file.imgsrc = imgsrc;</span><br><span class="line">                    preloader.destroy();</span><br><span class="line">                    preloader = null;</span><br><span class="line">                    $(&apos;#crop_area&apos;+_this.btnId).html(&apos;&lt;img src=&quot;&apos; + imgsrc + &apos;&quot;&gt;&apos;);</span><br><span class="line">                    if(!_this.crop)&#123;</span><br><span class="line">                        _this.crop  = new Cropper($(&apos;#crop_area&apos;+_this.btnId+&apos; &gt; img&apos;)[0], &#123;</span><br><span class="line">                            dragMode : &apos;move&apos;,</span><br><span class="line">                            background : false,</span><br><span class="line">                            autoCropArea : 1,</span><br><span class="line">                            crop(event) &#123;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            ready()&#123;</span><br><span class="line">                                _this.imgLoaded = true;</span><br><span class="line">                                _this.opacity = 1;</span><br><span class="line">                                _this.loading.hide();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                preloader.load(_this.file.getSource());</span><br><span class="line">                _this.$emit(&quot;finish&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            initUploader : function(options)&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line"></span><br><span class="line">                var fileTypes = _this.defaultFileTypes;</span><br><span class="line">                if(_this.fileTypes &amp;&amp; _this.fileTypes.length &gt; 0)&#123;</span><br><span class="line">                    fileTypes = _this.fileTypes;</span><br><span class="line">                &#125;</span><br><span class="line">                var filters = [];</span><br><span class="line">                if(!$(&apos;#app&apos;).hasClass(&apos;pc&apos;))&#123;</span><br><span class="line">                    filters = [];</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    filters =  [</span><br><span class="line">                        &#123;title: &quot;document&quot;, extensions: fileTypes&#125;//&quot;jpg,png,jpeg,JPG,PNG,JPEG&quot;</span><br><span class="line">                    ];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var typeTpl = &apos;,&apos; + fileTypes.toLocaleLowerCase()  + &apos;,&apos;;</span><br><span class="line"></span><br><span class="line">                var btnId = _this.btnId;</span><br><span class="line">                if(options &amp;&amp; options.btnId)&#123;</span><br><span class="line">                    btnId = options.btnId</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (window.plus) &#123;</span><br><span class="line">                    btnId = _this.btnId + &apos;_hide&apos;;</span><br><span class="line">                    $(&apos;body&apos;).append(&apos;&lt;span id=&quot;&apos; + btnId + &apos;&quot; style=&quot;position:absolute;z-index=-9;&quot;&gt;&lt;/span&gt;&apos;)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var uploader = new plupload.Uploader(&#123;</span><br><span class="line">                    runtimes : &apos;html5,flash&apos;,</span><br><span class="line">                    browse_button : btnId, //选择文件按钮ID </span><br><span class="line">                    max_file_size : &apos;100mb&apos;,  //文件上传最大值</span><br><span class="line">                    multipart : true,</span><br><span class="line">                    chunks : true,//不分块上传</span><br><span class="line">                    chunk_size : &apos;10mb&apos;,//分块大小，小于这个大小的不分块</span><br><span class="line">                    unique_names : true,  // 上传的文件名是否唯一,只有在未进行分块上传时文件名唯一才有效</span><br><span class="line">                    url: _this.uploadUrl, //提交到后台的url地址</span><br><span class="line">                    flash_swf_url: &apos;/js/lib/plupload/plupload.flash.swf&apos;,//plupload.flash.swf文件所在路径</span><br><span class="line">                    multi_selection : false,</span><br><span class="line">                    filters: filters,</span><br><span class="line">                    init : &#123;</span><br><span class="line">                        FileUploaded : function(up, file, info) &#123;//上传服务器方法，暂时未用到</span><br><span class="line">                            up.disableBrowse(false);</span><br><span class="line">                            var result = JSON.parse(info.response);</span><br><span class="line">                            _this.loading.hide();</span><br><span class="line">                            if(!result.success)&#123;</span><br><span class="line">                                return _this.GL_ALERT(_this.$t(&apos;l.i.crop.uploadFailure&apos;));</span><br><span class="line">                            &#125;</span><br><span class="line">                            if(!result || !result.saveName)&#123;</span><br><span class="line">                                return _this.GL_ALERT(_this.$t(&apos;l.i.crop.uploadFailure&apos;));</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                            weui.toast(_this.$t(&apos;l.i.crop.uploadSuccess&apos;), 1000);</span><br><span class="line">                            var attachFileName = _this.currFile.name;    //源文件的名字</span><br><span class="line">                            var saveName = _this.fileUrlPre.concat(&quot;/&quot;, result.saveName);</span><br><span class="line">                            var fileSize = _this.currFile.size;</span><br><span class="line">                            _this.$emit(&quot;imgUploadCallback&quot;, attachFileName, saveName, fileSize);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        FilesAdded : function(up, files)&#123;</span><br><span class="line">                            _this.files = files;</span><br><span class="line">                            _this.file = files[0];</span><br><span class="line">                            _this.initCrop(_this.file);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        BeforeUpload : function(up, file)&#123;</span><br><span class="line">                            _this.cancelCrop();//上传之前 销毁剪裁框</span><br><span class="line">                            up.disableBrowse(true);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        UploadProgress : function(up, file) &#123; </span><br><span class="line">                        	// console.log(&quot;eeeeeeeeeeeee&quot;);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        Error : function(up, err) &#123;</span><br><span class="line">                            // _this.loading.hide();</span><br><span class="line">                            up.disableBrowse(false);</span><br><span class="line">                            up.refresh(); // Reposition Flash/Silverlight</span><br><span class="line">                            _this.GL_ALERT(err.message);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                console.log(&apos;init&apos;);</span><br><span class="line">                uploader.init();</span><br><span class="line">                _this.uploader = uploader;</span><br><span class="line">            &#125;,</span><br><span class="line">            reset : function(btnId)&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                var uploader = _this.uploader;</span><br><span class="line">                uploader.destroy();</span><br><span class="line">                // _this.uploader = null;</span><br><span class="line">                setTimeout(function()&#123;</span><br><span class="line">                    _this.initUploader(&#123;btnId:btnId&#125;);</span><br><span class="line">                &#125;, 500);</span><br><span class="line"></span><br><span class="line">                if (window.plus) &#123;</span><br><span class="line">                    $(&apos;#&apos; + this.btnId).off(&apos;click&apos;);</span><br><span class="line">                    $(&apos;#&apos; + btnId).on(&apos;click&apos;, this.onSel)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            initAppCrop : function(file)&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                if(_this.isCrop)&#123;//正在剪裁</span><br><span class="line">                    _this.isCrop = false;</span><br><span class="line">                    return _this.getCredentials();</span><br><span class="line">                &#125;</span><br><span class="line">                _this.file = file;</span><br><span class="line">                _this.$emit(&quot;onCrop&quot;);</span><br><span class="line">                // _this.$bus.$emit(&apos;cropStatus&apos;, true);</span><br><span class="line">                </span><br><span class="line">                _this.isCrop = true;</span><br><span class="line">                $(&apos;#crop_area&apos;+_this.btnId).html(&apos;&lt;img src=&quot;&apos; + file.src + &apos;&quot;&gt;&apos;);</span><br><span class="line">                if(!_this.crop)&#123;</span><br><span class="line">                    // _this.loading = weui.loading(_this.$t(&apos;l.i.crop.pictureProcessing&apos;));</span><br><span class="line">                    _this.crop  = new Cropper($(&apos;#crop_area&apos;+_this.btnId+&apos; &gt; img&apos;)[0], &#123;</span><br><span class="line">                        dragMode : &apos;move&apos;,</span><br><span class="line">                        background : false,</span><br><span class="line">                        autoCropArea : 1,</span><br><span class="line">                        crop(event) &#123;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        ready()&#123;</span><br><span class="line">                            _this.imgLoaded = true;</span><br><span class="line">                            _this.opacity = 1;</span><br><span class="line">                            _this.loading.hide();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                _this.$emit(&quot;finish&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            getImage : function () &#123;</span><br><span class="line">                const ua = window.navigator.userAgent.toLocaleLowerCase();</span><br><span class="line">                var isIOS = /iphone|ipad|ipod/.test(ua);</span><br><span class="line">                var _this = this;</span><br><span class="line">                _this.checkPermission(&apos;CAMERA&apos;,function(data)&#123;</span><br><span class="line">                   if(data)&#123;</span><br><span class="line">                        var c = plus.camera.getCamera();   </span><br><span class="line">                        var area = 0;  //记录最大像素  </span><br><span class="line">                        var j = 0;  //记录最大像素的索引</span><br><span class="line">                        for(let i = 0; i &lt; c.supportedImageResolutions.length; i++)&#123;</span><br><span class="line">                            var arr = c.supportedImageResolutions[i].split(&quot;*&quot;);</span><br><span class="line">                            if(arr.length &lt; 2)&#123;</span><br><span class="line">                                continue;</span><br><span class="line">                            &#125;</span><br><span class="line">                            var currentArea = arr[0] * arr[1];</span><br><span class="line">                            if(currentArea &gt; area)&#123;</span><br><span class="line">                                area = currentArea;</span><br><span class="line">                                j = i;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        var filename = new Date().getTime() + &apos;.jpg&apos;;</span><br><span class="line">                        c.captureImage(function(filePath) &#123;</span><br><span class="line">                            </span><br><span class="line">                            // filePath  为拍完照保存在本地的路径   _doc/shijain...</span><br><span class="line">                            plus.io.resolveLocalFileSystemURL(filePath, function(entry) &#123;</span><br><span class="line">                                 _this.loading = weui.loading(_this.$t(&apos;l.i.crop.pictureProcessing&apos;));</span><br><span class="line">                                // 可通过entry对象操作 file 文件 </span><br><span class="line">                                entry.file( function ( file ) &#123;</span><br><span class="line">                                    var fileReader = new plus.io.FileReader();</span><br><span class="line">                                    fileReader.onloadend = function ( e ) &#123;</span><br><span class="line">                                        // Get data</span><br><span class="line">                                        // alert( e.target.result );</span><br><span class="line">                                        var imgPath = e.target.result;</span><br><span class="line">                                        var image = new Image();</span><br><span class="line">                                        image.src = imgPath;</span><br><span class="line">                                        image.name = entry.name;</span><br><span class="line">                                        image.onload = function() &#123;</span><br><span class="line">                                            _this.initAppCrop(image); /*上传图片*/</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;;</span><br><span class="line">                                    fileReader.readAsDataURL( file );</span><br><span class="line">                                &#125;, function ( file ) &#123;</span><br><span class="line">                                    alert( file.message );</span><br><span class="line">                                &#125; );</span><br><span class="line">                            &#125;, function(filePath) &#123;</span><br><span class="line">                                 _this.loading.hide();</span><br><span class="line">                                 _this.seling = false;</span><br><span class="line">                                console.log(&quot;读取拍照文件错误：&quot; + filePath.message);</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;, function(s) &#123;</span><br><span class="line">                            //防止选相机时 不拍照了</span><br><span class="line">                            _this.seling = false;</span><br><span class="line">                            console.log(&quot;拍照错误：&quot; + filePath.message);</span><br><span class="line">                        &#125;, &#123;</span><br><span class="line">                            filename: &quot;_doc/&quot; + filename,</span><br><span class="line">                            resolution: c.supportedImageResolutions[j],</span><br><span class="line">                        &#125;)</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            galleryImg : function () &#123;</span><br><span class="line">                const ua = window.navigator.userAgent.toLocaleLowerCase();</span><br><span class="line">                var isIOS = /iphone|ipad|ipod/.test(ua);</span><br><span class="line">                var _this = this;</span><br><span class="line">                _this.checkPermission(&apos;GALLERY&apos;,function(data)&#123;</span><br><span class="line">                    if(!data)&#123;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                    plus.gallery.pick(function(a) &#123;</span><br><span class="line">                        plus.io.resolveLocalFileSystemURL(a, function(entry) &#123;</span><br><span class="line">                             _this.loading = weui.loading(_this.$t(&apos;l.i.crop.pictureProcessing&apos;));</span><br><span class="line">                            // 可通过entry对象操作 file 文件 </span><br><span class="line">                            entry.file( function ( file ) &#123;</span><br><span class="line">                                var fileReader = new plus.io.FileReader();</span><br><span class="line">                                fileReader.onloadend = function ( e ) &#123;</span><br><span class="line">                                    // Get data</span><br><span class="line">                                    // alert( e.target.result );</span><br><span class="line">                                    var imgPath = e.target.result;</span><br><span class="line">                                    var image = new Image();</span><br><span class="line">                                    image.src = imgPath;</span><br><span class="line">                                    image.name = entry.name;</span><br><span class="line">                                    </span><br><span class="line">                                    image.onload = function() &#123;</span><br><span class="line">                                       </span><br><span class="line">                                        _this.initAppCrop(image); /*上传图片*/</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;;</span><br><span class="line">                                fileReader.readAsDataURL( file );</span><br><span class="line">                            &#125;, function ( file ) &#123;</span><br><span class="line">                                alert( file.message );</span><br><span class="line">                            &#125; );</span><br><span class="line">                            // var imgPath = isIOS?entry.toRemoteURL():entry.toLocalURL();</span><br><span class="line">                            // var image = new Image();</span><br><span class="line">                            // image.src = imgPath;</span><br><span class="line">                            // image.name = entry.name;</span><br><span class="line">                            // image.onload = function() &#123;</span><br><span class="line">                            //     _this.initAppCrop(image); /*上传图片*/</span><br><span class="line">                            // &#125;</span><br><span class="line">                        &#125;, function(e) &#123;</span><br><span class="line">                            _this.seling = false;</span><br><span class="line">                            _this.loading.hide();</span><br><span class="line">                            console.log(&quot;读取拍照文件错误：&quot; + e.message);</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;, function(a) &#123;</span><br><span class="line">                        //防止安卓机跳到相册后不选了</span><br><span class="line">                        _this.seling = false;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        filter: &quot;image&quot;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            onSel : function()&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                if(_this.seling)&#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                weui.actionSheet([</span><br><span class="line">                    &#123;</span><br><span class="line">                        label: _this.$t(&apos;l.i.crop.takePhoto&apos;),</span><br><span class="line">                        onClick: function () &#123;_this.seling = true;_this.getImage()&#125;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        label: _this.$t(&apos;l.i.crop.takeByphotos&apos;),</span><br><span class="line">                        onClick: function () &#123;_this.seling = true;_this.galleryImg();&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ], [</span><br><span class="line">                    &#123;</span><br><span class="line">                        label: _this.$t(&apos;l.i.crop.cancel&apos;),</span><br><span class="line">                        onClick: function () &#123;_this.seling = false;&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]);</span><br><span class="line">            &#125;,</span><br><span class="line">            initEvent: function()&#123;</span><br><span class="line">                console.log(&apos;initEvent&apos;);</span><br><span class="line">                $(&apos;#&apos; + this.btnId).off(&apos;click&apos;);</span><br><span class="line">                $(&apos;#&apos; + this.btnId).on(&apos;click&apos;, this.onSel)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">		mounted()&#123;</span><br><span class="line">            if (!HTMLCanvasElement.prototype.toBlob) &#123;</span><br><span class="line">                Object.defineProperty(HTMLCanvasElement.prototype, &apos;toBlob&apos;, &#123;</span><br><span class="line">                    value: function (callback, type, quality) &#123;</span><br><span class="line">                        var binStr = atob( this.toDataURL(type, quality).split(&apos;,&apos;)[1] ),</span><br><span class="line">                            len = binStr.length,</span><br><span class="line">                            arr = new Uint8Array(len);</span><br><span class="line">                        for (var i=0; i&lt;len; i++ ) &#123;</span><br><span class="line">                            arr[i] = binStr.charCodeAt(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        callback( new Blob( [arr], &#123;type: type || &apos;image/png&apos;&#125; ) );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // var topHeight = $(&apos;html&apos;).css(&apos;font-size&apos;);</span><br><span class="line">            // var boxHeight = $(&apos;html&apos;).height() - topHeight.replace(&apos;px&apos;, &apos;&apos;);</span><br><span class="line">            // $(&apos;.crop-box&apos;).css(&apos;top&apos;, topHeight).css(&apos;height&apos;, boxHeight);</span><br><span class="line"></span><br><span class="line">            if (window.plus) &#123;</span><br><span class="line">                console.log(window.plus)</span><br><span class="line">                this.initEvent();</span><br><span class="line">            &#125;</span><br><span class="line">            this.initUploader();</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy : function()&#123;</span><br><span class="line">            this.seling = false;</span><br><span class="line">            if(this.loading)&#123;</span><br><span class="line">                this.loading.hide();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.crop-area img&#123;</span><br><span class="line">    max-width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.checkPermission(&apos;CAMERA&apos;,function(data)&#123;</span><br><span class="line">              if(data)&#123;</span><br><span class="line">                   var c = plus.camera.getCamera();   </span><br><span class="line">                   var area = 0;  //记录最大像素  </span><br><span class="line">                   var j = 0;  //记录最大像素的索引</span><br><span class="line">                   for(let i = 0; i &lt; c.supportedImageResolutions.length; i++)&#123;</span><br><span class="line">                       var arr = c.supportedImageResolutions[i].split(&quot;*&quot;);</span><br><span class="line">                       if(arr.length &lt; 2)&#123;</span><br><span class="line">                           continue;</span><br><span class="line">                       &#125;</span><br><span class="line">                       var currentArea = arr[0] * arr[1];</span><br><span class="line">                       if(currentArea &gt; area)&#123;</span><br><span class="line">                           area = currentArea;</span><br><span class="line">                           j = i;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   var filename = new Date().getTime() + &apos;.jpg&apos;;</span><br><span class="line">                   c.captureImage(function(filePath) &#123;</span><br><span class="line">                       </span><br><span class="line">                       // filePath  为拍完照保存在本地的路径   _doc/shijain...</span><br><span class="line">                       plus.io.resolveLocalFileSystemURL(filePath, function(entry) &#123;</span><br><span class="line">                            _this.loading = weui.loading(_this.$t(&apos;l.i.crop.pictureProcessing&apos;));</span><br><span class="line">                           // 可通过entry对象操作 file 文件 </span><br><span class="line">                           entry.file( function ( file ) &#123;</span><br><span class="line">                               var fileReader = new plus.io.FileReader();</span><br><span class="line">                               fileReader.onloadend = function ( e ) &#123;</span><br><span class="line">                                   // Get data</span><br><span class="line">                                   // alert( e.target.result );</span><br><span class="line">                                   var imgPath = e.target.result;</span><br><span class="line">                                   var image = new Image();</span><br><span class="line">                                   image.src = imgPath;</span><br><span class="line">                                   image.name = entry.name;</span><br><span class="line">                                   image.onload = function() &#123;</span><br><span class="line">                                       _this.initAppCrop(image); /*上传图片*/</span><br><span class="line">                                   &#125;</span><br><span class="line">                               &#125;;</span><br><span class="line">                               fileReader.readAsDataURL( file );</span><br><span class="line">                           &#125;, function ( file ) &#123;</span><br><span class="line">                               alert( file.message );</span><br><span class="line">                           &#125; );</span><br><span class="line">                       &#125;, function(filePath) &#123;</span><br><span class="line">                            _this.loading.hide();</span><br><span class="line">                            _this.seling = false;</span><br><span class="line">                           console.log(&quot;读取拍照文件错误：&quot; + filePath.message);</span><br><span class="line">                       &#125;);</span><br><span class="line">                   &#125;, function(s) &#123;</span><br><span class="line">                       //防止选相机时 不拍照了</span><br><span class="line">                       _this.seling = false;</span><br><span class="line">                       console.log(&quot;拍照错误：&quot; + filePath.message);</span><br><span class="line">                   &#125;, &#123;</span><br><span class="line">                       filename: &quot;_doc/&quot; + filename,</span><br><span class="line">                       resolution: c.supportedImageResolutions[j],</span><br><span class="line">                   &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">           _this.checkPermission(&apos;GALLERY&apos;,function(data)&#123;</span><br><span class="line">               if(!data)&#123;</span><br><span class="line">                   return;</span><br><span class="line">               &#125;</span><br><span class="line">               plus.gallery.pick(function(a) &#123;</span><br><span class="line">                   plus.io.resolveLocalFileSystemURL(a, function(entry) &#123;</span><br><span class="line">                        _this.loading = weui.loading(_this.$t(&apos;l.i.crop.pictureProcessing&apos;));</span><br><span class="line">                       // 可通过entry对象操作 file 文件 </span><br><span class="line">                       entry.file( function ( file ) &#123;</span><br><span class="line">                           var fileReader = new plus.io.FileReader();</span><br><span class="line">                           fileReader.onloadend = function ( e ) &#123;</span><br><span class="line">                               // Get data</span><br><span class="line">                               // alert( e.target.result );</span><br><span class="line">                               var imgPath = e.target.result;</span><br><span class="line">                               var image = new Image();</span><br><span class="line">                               image.src = imgPath;</span><br><span class="line">                               image.name = entry.name;</span><br><span class="line">                               </span><br><span class="line">                               image.onload = function() &#123;</span><br><span class="line">                                  </span><br><span class="line">                                   _this.initAppCrop(image); /*上传图片*/</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;;</span><br><span class="line">                           fileReader.readAsDataURL( file );</span><br><span class="line">                       &#125;, function ( file ) &#123;</span><br><span class="line">                           alert( file.message );</span><br><span class="line">                       &#125; );</span><br><span class="line">                       // var imgPath = isIOS?entry.toRemoteURL():entry.toLocalURL();</span><br><span class="line">                       // var image = new Image();</span><br><span class="line">                       // image.src = imgPath;</span><br><span class="line">                       // image.name = entry.name;</span><br><span class="line">                       // image.onload = function() &#123;</span><br><span class="line">                       //     _this.initAppCrop(image); /*上传图片*/</span><br><span class="line">                       // &#125;</span><br><span class="line">                   &#125;, function(e) &#123;</span><br><span class="line">                       _this.seling = false;</span><br><span class="line">                       _this.loading.hide();</span><br><span class="line">                       console.log(&quot;读取拍照文件错误：&quot; + e.message);</span><br><span class="line">                   &#125;);</span><br><span class="line">               &#125;, function(a) &#123;</span><br><span class="line">                   //防止安卓机跳到相册后不选了</span><br><span class="line">                   _this.seling = false;</span><br><span class="line">               &#125;, &#123;</span><br><span class="line">                   filter: &quot;image&quot;</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;)</span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">         //seling   防止重复点击    </span><br><span class="line">      onSel : function()&#123;</span><br><span class="line">           var _this = this;</span><br><span class="line">           if(_this.seling)&#123;</span><br><span class="line">               return;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           weui.actionSheet([</span><br><span class="line">               &#123;</span><br><span class="line">                   label: _this.$t(&apos;l.i.crop.takePhoto&apos;),</span><br><span class="line">                   onClick: function () &#123;_this.seling = true;_this.getImage()&#125;</span><br><span class="line">               &#125;, &#123;</span><br><span class="line">                   label: _this.$t(&apos;l.i.crop.takeByphotos&apos;),</span><br><span class="line">                   onClick: function () &#123;_this.seling = true;_this.galleryImg();&#125;</span><br><span class="line">               &#125;</span><br><span class="line">           ], [</span><br><span class="line">               &#123;</span><br><span class="line">                   label: _this.$t(&apos;l.i.crop.cancel&apos;),</span><br><span class="line">                   onClick: function () &#123;_this.seling = false;&#125;</span><br><span class="line">               &#125;</span><br><span class="line">           ]);</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure>
<p>代码都是节选，也没做修改，只是总结下 使用相机和相册还有二维码的调用方法，具体请查看api。</p>
<h5 id="第四个问题"><a href="#第四个问题" class="headerlink" title="第四个问题"></a>第四个问题</h5><p>顶部导航栏（标题问题）</p>
<p>问题： 安卓点击输入框时，整个页面是会减小的，因此顶部导航栏还是会固定再顶部，但是ios点击输入框</p>
<p>弹起键盘时，页面是上移的，导致顶部标题也上移动。</p>
<p>研究了许久</p>
<p>修改 softinpputMode 为 adjustResize。 也可在配置文件manifest文件中修改模式。具体查看文档。</p>
<p>plus.webview.currentWebview().setStyle({softinputMode: “adjustResize”});</p>
<p>但是发行修改为这个模式后打包仍有各种问题</p>
<p>最后解决方法，就是使用原生导航栏，原生导航栏会将顶部标题固定在顶部。</p>
<p>使用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTitle()&#123;</span><br><span class="line">        <span class="keyword">var</span> _self = plus.webview.currentWebview();</span><br><span class="line">        <span class="keyword">var</span> buttons = !<span class="keyword">this</span>.meta.scan?[]:[</span><br><span class="line">              <span class="comment">//使用阿里图标库示例,打包后才会生效</span></span><br><span class="line">            &#123;</span><br><span class="line">              fontSrc : <span class="string">"_www/static/font/iconfont.ttf"</span>,   </span><br><span class="line">              text:<span class="string">'\ue663'</span>,</span><br><span class="line">              float:<span class="string">'right'</span>,</span><br><span class="line">              onclick: <span class="keyword">this</span>.onScan</span><br><span class="line">            &#125;</span><br><span class="line">        ];</span><br><span class="line">        _self.setStyle(&#123;</span><br><span class="line">            titleNView:&#123;</span><br><span class="line">              titleOverflow: <span class="string">'titleOverflow'</span>, </span><br><span class="line">              height: <span class="string">'50px'</span>,</span><br><span class="line">              buttons,</span><br><span class="line">              autoBackButton : <span class="keyword">this</span>.meta.back,</span><br><span class="line">              titleText : <span class="keyword">this</span>.$store.getters.getTitle ,</span><br><span class="line">              backgroundColor: <span class="keyword">this</span>.meta.bg , </span><br><span class="line">              titleColor : <span class="keyword">this</span>.meta.color </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://www.html5plus.org/doc/zh_cn/webview.html#plus.webview.WebviewObject.setStyle" target="_blank" rel="noopener">原生导航栏文档</a></p>
<p>没记错的化文档说明中写 首页的 导航栏需要在配置文件中配置，没错的话 应该就是因为在代码中设置原生导航栏</p>
<p>用到了plus中的webview方法，可能plus的方法还没加载完，启动页已经关闭，导致页面没有顶部导航栏，所以首</p>
<p>页需要在manifest配置文件中配置</p>
<p>那么问题来了，我的项目是启动页完后未登录时进入的是登录页，已登录时是登录后的首页。我该如何配置？</p>
<p>而且我的项目是多语言的，配置中也只能是一种语言。因此我决定不配置首页，而是监听 plus的方法是否加载完成，加载完成时 再设置下，顶部标题。</p>
<p>这样做问题好像是解决了，但是要是性能很差的手机很慢才加载完成就会导致顶部导航栏的显示的很突然。所以</p>
<p>结合上面的关闭启动页的配置那里，把自动关闭启动页关闭，然后当plus的方法全部加载完成后 手动关闭启动页。因为是多语言，语言改变了的时候也要进行setTitle方法</p>
<p>注意： 有些页面是单独设置顶部标题内容的，一旦设置就得 返回键，扫码等  需要显示得图标全部设置，不会进行叠加，比如 本来有返回按钮，没有标题， 你再设置标题，  此时是不会有返回键的，因此需要全部一起再设置。</p>
<h4 id="第五个问题"><a href="#第五个问题" class="headerlink" title="第五个问题"></a>第五个问题</h4><p>web浏览器，当文件为网络连接时，创建一个窗口，打开链接，所以创建一个组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;link_box&quot; class=&quot;link-box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      wbview : null,</span><br><span class="line">      id : &apos;link_view&apos;,</span><br><span class="line">      url : &apos;&apos;,</span><br><span class="line">      styles : &#123;&#125;,</span><br><span class="line">      extras : &#123;&#125;,</span><br><span class="line">      loading : null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    show : function(url)&#123;</span><br><span class="line">      this.wbview = plus.webview.getWebviewById(this.id);</span><br><span class="line">      console.log(this.wbview);</span><br><span class="line">      if(this.wbview)&#123;</span><br><span class="line">        if(url.indexOf(&apos;http&apos;) == -1)&#123;</span><br><span class="line">          url = &quot;http://&quot;+url;</span><br><span class="line">        &#125;</span><br><span class="line">        this.wbview.loadURL(url);</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        this.wbview = plus.webview.create(url, this.id, this.styles, this.extras);</span><br><span class="line">      &#125;</span><br><span class="line">      plus.webview.show(this.id, &apos;slide-out-right&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted : function()&#123;</span><br><span class="line">    var _this = this;</span><br><span class="line">    this.styles = &#123;</span><br><span class="line">      titleNView:&#123;</span><br><span class="line">            titleOverflow: &apos;titleOverflow&apos;, </span><br><span class="line">            height: &apos;50px&apos;,</span><br><span class="line">            autoBackButton : true,</span><br><span class="line">            backgroundColor: &quot;#FFFFFF&quot;, </span><br><span class="line">            titleColor : &quot;#000000&quot; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>界面引用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		...</span><br><span class="line">		&lt;v-webview ref=&quot;webview&quot;&gt;&lt;/v-webview&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import webview from &apos;@/components/include/webview.vue&apos;;</span><br><span class="line">    export default&#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">			</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">         components:&#123;</span><br><span class="line">            &quot;v-webview&quot; : webview</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            goWebview(url)&#123;</span><br><span class="line">                this.$refs.webview.show(url);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>这样就可以实现链接跳转，但是这样的话会导致返回出问题，所以需要对返回重新设计</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = [<span class="literal">null</span>, <span class="literal">null</span>];    <span class="comment">//记录返回的两次间隔时间</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.plus) &#123;</span><br><span class="line">    plusReady();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'plusready'</span>, plusReady, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plusReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> webview = plus.webview.currentWebview();</span><br><span class="line">    plus.key.addEventListener(<span class="string">'backbutton'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        webview.canBack(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (e.canBack) &#123;</span><br><span class="line">                <span class="comment">//link_view  为自定义的id，可更换，保持与组建上的一致</span></span><br><span class="line">                <span class="keyword">var</span> wbview = plus.webview.getWebviewById(<span class="string">'link_view'</span>);</span><br><span class="line">                <span class="keyword">if</span>(wbview)&#123;</span><br><span class="line">                    <span class="comment">//判断新窗口是否可以返回，不可以返回的时候才清除窗口</span></span><br><span class="line">                   wbview.canBack(<span class="function"><span class="keyword">function</span>(<span class="params">wb</span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(wb.canBack)&#123;</span><br><span class="line">                            wbview.back();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            plus.webview.close(<span class="string">'link_view'</span>, <span class="string">'slide-iny-right'</span>);</span><br><span class="line">                            wbview.clear();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    time = [<span class="literal">null</span>,<span class="literal">null</span>];   <span class="comment">//路由变化重置 time。</span></span><br><span class="line">                    router.go(<span class="number">-1</span>); <span class="comment">//返回上一级</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                time.shift();</span><br><span class="line">                time.push(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line">                <span class="keyword">if</span> (time[<span class="number">1</span>] - time[<span class="number">0</span>] &gt; <span class="number">2000</span>) &#123;  <span class="comment">//事件间隔大于 2s 当作第一次 点击返回，做出提示</span></span><br><span class="line">           <span class="comment">//plus.nativeUI.toast  h5+API的提示窗口详细使用请看api，默认前面有应用名称：tips</span></span><br><span class="line">                    plus.nativeUI.toast(<span class="string">"再按一次返回退出应用！"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    plus.runtime.quit();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第六个问题</p>
<p>第一次登录时语言跟随系统，后面再次进来就不干了。</p>
<p>解析：第一次进来没有缓存语言，所以设置系统语言，以后进来有缓存语言，直接跟随缓存语言</p>
<p>plus.os.language  获取系统设置的语言，但是安卓和苹果获取到的字段是不一样的。所以得区分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安卓：en_US   zh_TW   zh_CN</span></span><br><span class="line">     <span class="comment">//ios：en-CN  zh-Hans-CN  zh-Hant-CN   zh-Hant-HK  zh-Hant-TW  zh-Hant-MO</span></span><br><span class="line">     <span class="keyword">var</span> systemLang = plus.os.language;</span><br><span class="line">     <span class="keyword">var</span> lang;</span><br><span class="line">     <span class="keyword">if</span>(systemLang.indexOf(<span class="string">'en'</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">         lang = <span class="string">'en_us'</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(systemLang.indexOf(<span class="string">'zh-Hans-CN'</span>) &gt; <span class="number">-1</span> || systemLang.indexOf(<span class="string">'zh_CN'</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">         lang = <span class="string">'zh_cn'</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(systemLang.indexOf(<span class="string">'zh-Hant'</span>) &gt; <span class="number">-1</span> || systemLang.indexOf(<span class="string">'zh_TW'</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">         lang = <span class="string">'zh_tw'</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         lang = <span class="string">'other'</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(!localStorage.getItem(<span class="string">'lang'</span>))&#123;</span><br><span class="line">         <span class="keyword">if</span>(lang != <span class="string">'other'</span>)&#123;</span><br><span class="line">             i18n.locale = lang;</span><br><span class="line">             store.commit(<span class="string">"setLang"</span>,lang);</span><br><span class="line">             localStorage.setItem(<span class="string">'lang'</span>,lang);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<h4 id="第七个问题"><a href="#第七个问题" class="headerlink" title="第七个问题"></a>第七个问题</h4><p>监听网络状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> GL_HAVE_NET = navigator.onLine;   <span class="comment">//设置是否有网络</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局获取网络状态方法</span></span><br><span class="line">Vue.prototype.getNet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GL_HAVE_NET;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网络变化时调用的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onNetChange</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> nt = plus.networkinfo.getCurrentType();</span><br><span class="line">	<span class="keyword">switch</span> (nt)&#123;</span><br><span class="line">		<span class="keyword">case</span> plus.networkinfo.CONNECTION_ETHERNET:</span><br><span class="line">		<span class="keyword">case</span> plus.networkinfo.CONNECTION_WIFI:</span><br><span class="line">        GL_HAVE_NET = <span class="literal">true</span>;</span><br><span class="line">		<span class="comment">// _this.GL_ALERT("当前为wifi网络"); </span></span><br><span class="line">		<span class="keyword">break</span>; </span><br><span class="line">		<span class="keyword">case</span> plus.networkinfo.CONNECTION_CELL2G:</span><br><span class="line">		<span class="keyword">case</span> plus.networkinfo.CONNECTION_CELL3G:</span><br><span class="line">		<span class="keyword">case</span> plus.networkinfo.CONNECTION_CELL4G:</span><br><span class="line">        GL_HAVE_NET = <span class="literal">true</span>;</span><br><span class="line">		<span class="comment">// _this.GL_ALERT("当前为移动数据网络");</span></span><br><span class="line">		<span class="keyword">break</span>; </span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">        GL_HAVE_NET = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// _this.GL_ALERT("当前没有网络");</span></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!GL_HAVE_NET)&#123;</span><br><span class="line">        <span class="comment">//如果有网路变到没有网路提示网路异常</span></span><br><span class="line">        weui.toast(<span class="string">"网络异常"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="comment">//如果没有网路变到有网路页面刷新</span></span><br><span class="line">        <span class="built_in">window</span>.location.reload();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//H5+plus的监听网络变化，并调用onNetChange方法</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"netchange"</span>, onNetChange, <span class="literal">false</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面为h5的监听网络变化的方法</span></span><br><span class="line"><span class="comment">//部分手机不兼容（安卓低端机有些不行）</span></span><br><span class="line"><span class="comment">// var el = document.body;  </span></span><br><span class="line"><span class="comment">// if (el.addEventListener) &#123;  </span></span><br><span class="line"><span class="comment">//    window.addEventListener("online", function () &#123;  </span></span><br><span class="line"><span class="comment">//      GL_HAVE_NET = true;</span></span><br><span class="line"><span class="comment">//     //  alert(GL_HAVE_NET);</span></span><br><span class="line"><span class="comment">//     &#125;, true);  </span></span><br><span class="line"><span class="comment">//    window.addEventListener("offline", function () &#123;  </span></span><br><span class="line"><span class="comment">//      GL_HAVE_NET = false;</span></span><br><span class="line"><span class="comment">//     //  alert(GL_HAVE_NET);</span></span><br><span class="line"><span class="comment">//     &#125;, true);  </span></span><br><span class="line"><span class="comment">// &#125;  else if (el.attachEvent) &#123;  </span></span><br><span class="line"><span class="comment">//    window.attachEvent("ononline", function () &#123;  </span></span><br><span class="line"><span class="comment">//         GL_HAVE_NET = true;</span></span><br><span class="line"><span class="comment">//         // alert(GL_HAVE_NET);</span></span><br><span class="line"><span class="comment">//     &#125;);  </span></span><br><span class="line"><span class="comment">//    window.attachEvent("onoffline", function () &#123;  </span></span><br><span class="line"><span class="comment">//         GL_HAVE_NET = false;</span></span><br><span class="line"><span class="comment">//         // alert(GL_HAVE_NET);</span></span><br><span class="line"><span class="comment">//     &#125;);  </span></span><br><span class="line"><span class="comment">// &#125;  else &#123;  </span></span><br><span class="line"><span class="comment">//    window.ononline = function () &#123;  </span></span><br><span class="line"><span class="comment">//         GL_HAVE_NET = true;</span></span><br><span class="line"><span class="comment">//         // alert(GL_HAVE_NET);</span></span><br><span class="line"><span class="comment">//     &#125;;  </span></span><br><span class="line"><span class="comment">//    window.onoffline = function () &#123;  </span></span><br><span class="line"><span class="comment">//         GL_HAVE_NET = false;</span></span><br><span class="line"><span class="comment">//         // alert(GL_HAVE_NET);</span></span><br><span class="line"><span class="comment">//     &#125;;  </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title>h5+开发汇总</title>
    <url>/2019/12/15/h5-%E5%BC%80%E5%8F%91%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h3 id="h5-开发汇总"><a href="#h5-开发汇总" class="headerlink" title="h5+开发汇总"></a>h5+开发汇总</h3><h4 id="基于h5-api的使用"><a href="#基于h5-api的使用" class="headerlink" title="基于h5+ api的使用"></a>基于h5+ api的使用</h4><p><a href="http://www.html5plus.org/doc/zh_cn/accelerometer.html" target="_blank" rel="noopener">h5+API文档</a></p>
<p>打包后遇到的第一个问题</p>
<p>步骤</p>
<p>打开app，点击页面跳转正常，但是使用物理按键返回时，直接就退出app</p>
<p>期望</p>
<p>使用物理按键返回时，正常的返回，无法返回时提示 再返回一次退出app</p>
<p>解决</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = [<span class="literal">null</span>, <span class="literal">null</span>];    <span class="comment">//记录返回的两次间隔时间</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.plus) &#123;</span><br><span class="line">    plusReady();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'plusready'</span>, plusReady, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plusReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> webview = plus.webview.currentWebview();</span><br><span class="line">    plus.key.addEventListener(<span class="string">'backbutton'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        webview.canBack(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (e.canBack) &#123;</span><br><span class="line">               time = [<span class="literal">null</span>,<span class="literal">null</span>];   <span class="comment">//路由变化重置 time。</span></span><br><span class="line">               router.go(<span class="number">-1</span>); <span class="comment">//返回上一级</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                time.shift();</span><br><span class="line">                time.push(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line">                <span class="keyword">if</span> (time[<span class="number">1</span>] - time[<span class="number">0</span>] &gt; <span class="number">2000</span>) &#123;  <span class="comment">//事件间隔大于 2s 当作第一次 点击返回，做出提示</span></span><br><span class="line">           <span class="comment">//plus.nativeUI.toast  h5+API的提示窗口详细使用请看api，默认前面有应用名称：tips</span></span><br><span class="line">                    plus.nativeUI.toast(<span class="string">"再按一次返回退出应用！"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    plus.runtime.quit();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二个问题</p>
<p>对于类似txt。word等文档文件，使用 h5+pai的 下载并展示下载进度，下载完成后自动使用手机的第三方工具查看</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.prototype.downloadFile = <span class="function"><span class="keyword">function</span>(<span class="params">url, orgName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> saveName = url.substring(url.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>, url.length);</span><br><span class="line">    <span class="keyword">if</span>(!orgName)&#123;</span><br><span class="line">        orgName = saveName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> fileType = util.getFileType(url);  <span class="comment">//获取文件类型，该项目下的自定义获取文件类型方法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'pic'</span> == fileType || <span class="string">'video'</span> == fileType || <span class="string">'audio'</span> == fileType || <span class="string">'link'</span> == fileType) &#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> file = &#123;</span><br><span class="line">        orgName: <span class="string">"_downloads/"</span> + orgName,</span><br><span class="line">        fileName: <span class="string">"_downloads/"</span> + saveName</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.plus)&#123;</span><br><span class="line">        plus.runtime.openFile(file.orgName,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> dtask = plus.downloader.createDownload(url,&#123;<span class="attr">filename</span>: file.orgName&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">item, status</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(item.state &amp;&amp; status == <span class="number">200</span>)&#123;</span><br><span class="line">                    plus.runtime.openFile(item.getFileName());</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $(<span class="string">'#dl_progress'</span>).hide();</span><br><span class="line">                    _this.GL_ALERT(<span class="string">"文件下载失败"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            dtask.addEventListener(<span class="string">"statechanged"</span>, dlProgress, <span class="literal">false</span>);</span><br><span class="line">            dtask.start();</span><br><span class="line">            $(<span class="string">'#dl_progress'</span>).show();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dlProgress = <span class="function"><span class="keyword">function</span>(<span class="params">download, status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!download) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(status == <span class="number">404</span>)&#123;</span><br><span class="line">        $(<span class="string">'#dl_progress'</span>).hide();</span><br><span class="line">        _this.GL_ALERT(<span class="string">"资源下载失败"</span>);</span><br><span class="line">        <span class="comment">//遇到报错停止下载</span></span><br><span class="line">        download.abort();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> rate = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(download.downloadedSize &amp;&amp; download.totalSize)&#123;</span><br><span class="line">        rate = (download.downloadedSize * <span class="number">100</span> / download.totalSize).toFixed(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">'#dl_progress span'</span>).text(rate);</span><br><span class="line">	<span class="keyword">if</span>(download.state == <span class="number">4</span> &amp;&amp; status == <span class="number">200</span>)&#123;</span><br><span class="line">        $(<span class="string">'#dl_progress'</span>).hide()</span><br><span class="line">		weui.toast(<span class="string">"下载成功"</span>,<span class="number">1000</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//app.vue   下载进度展示</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dl_progress"</span> <span class="attr">class</span>=<span class="string">"weui-loading_toast weui-animate-fade-in"</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-toast app"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"weui-loading weui-icon_toast"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"weui-toast__content"</span>&gt;</span>&#123;&#123;$t('l.main.downloadPro')&#125;&#125;<span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span>%<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述代码就是使用h5+API 下载文件并使用第三方工具打开的实现代码，直接从项目代码拿下来，如需使用可根据业务逻辑自行修改。有些全局代码，未展示，因此使用时需查看文档进行更改；</p>
<p>第三个问题，也是下载问题，此次是下载app升级包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//也是采用了上面的进度条</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.downloadWgt = <span class="function"><span class="keyword">function</span>(<span class="params">url,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dtask = plus.downloader.createDownload(url,&#123;<span class="attr">filename</span>: <span class="string">'_doc/update/'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">item, status</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(status == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">// plus.runtime.openFile(item.getFileName());</span></span><br><span class="line">            <span class="comment">//回调函数</span></span><br><span class="line">            callback(item.filename);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            _this.GL_ALERT(<span class="string">"升级包下载失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    dtask.addEventListener(<span class="string">"statechanged"</span>, dlProgress, <span class="literal">false</span>);</span><br><span class="line">    dtask.start();</span><br><span class="line">    $(<span class="string">'#dl_progress'</span>).show();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用界面</span></span><br><span class="line">    download(appPackAliName)&#123;                </span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span>(!appPackAliName)&#123;</span><br><span class="line">            <span class="keyword">return</span> _this.GL_ALERT(<span class="string">'请检查是否已上传升级包？'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.isClick)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">window</span>.plus)&#123;</span><br><span class="line">            _this.isClick = <span class="literal">true</span>;  </span><br><span class="line">            <span class="comment">//调用全局 下载文件方法，并使用回调函数 安装文件</span></span><br><span class="line">            _this.downloadWgt(appPackAliName,<span class="function"><span class="keyword">function</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line">                _this.installWgt(filename); <span class="comment">// 安装wgt包</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    installWgt (path) &#123;</span><br><span class="line">        <span class="comment">// plus.nativeUI.showWaiting('安装wgt文件...');</span></span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        _this.loading = weui.loading(_this.$t(<span class="string">'l.c.installing'</span>))</span><br><span class="line"></span><br><span class="line">        plus.runtime.install(path, &#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// plus.nativeUI.closeWaiting();</span></span><br><span class="line">            _this.loading.hide();</span><br><span class="line">            weui.toast(<span class="string">"安装成功"</span>,<span class="number">1000</span>);</span><br><span class="line">            plus.runtime.restart();</span><br><span class="line">            <span class="comment">// plus.nativeUI.alert('应用资源更新完成！', function () &#123;</span></span><br><span class="line">            <span class="comment">//     plus.runtime.restart();</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            _this.loading.hide();</span><br><span class="line">            _this.GL_ALERT(<span class="string">"安装失败["</span>+e.code+<span class="string">"]："</span>+e.message);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<h4 id="制作wgt升级包注意事项"><a href="#制作wgt升级包注意事项" class="headerlink" title="制作wgt升级包注意事项"></a>制作wgt升级包注意事项</h4><ol>
<li><p>在hbuilderX项目中右键  ——&gt; 发行 —&gt; 制作app资源升级包，</p>
</li>
<li><p>manifest.json文件里面的version字段的name和code一定要比现有的高，code且为整数</p>
</li>
<li><p>manifest.json模块配置，没有使用到的一定要去除掉，否则也会失败</p>
</li>
<li><p>代码中获取版本号信息的代码为如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前app的版本号（资源升级后照样获取的到升级后的版本号），其他方法获取版本号经测试不可用</span></span><br><span class="line"><span class="comment">//下面方法可行</span></span><br><span class="line">plus.runtime.getProperty( plus.runtime.appid, <span class="function"><span class="keyword">function</span> (<span class="params"> wgtinfo </span>) </span>&#123;</span><br><span class="line">        store.commit(<span class="string">"setCurrentVersion"</span>, wgtinfo.version);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果遇到明明升级包的版本号比当前版本号高，升级时却提示版本号错误等提示，可查看升级包的版本号是否升级成功</p>
<p>生成的wgt文件复制一份，并将文件后面加个.zip后缀，此时文件变成一个压缩文件，点击查看，可以查看到里面的有www的文件夹，查看manifest文件的版本号是否修改成功，如果每次制作升级包，版本号明明改了，但是制作完成后添加 .zip后缀查看版本号并没有变时 可 关掉打包软件重新打开再制作升级包。</p>
<p>这个是软件的bug，当你看到这篇文章时，这个bug应该已经被修复了。</p>
</li>
</ol>
<p>遇到的第三个问题</p>
<p>相机权限问题</p>
<p>使用二维码，或者拍照时就需要用到手机摄像头，就需要获取权限。</p>
<p>需求：当第一次访问时，请求相机权限，当拒绝时做出提示。</p>
<p>plus.navigator.checkPermission(type)   方法  可查看手机权限的状态，但是文档上有声明，android全部不支持</p>
<p>因此麻烦来了，安卓要如何判断是否有允许权限</p>
<p>解决代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查权限全局代码，第一个参数 相机权限还是相册权限，第二个参数 权限允许时回调函数 </span></span><br><span class="line"><span class="comment">//第三个参数 权限不允许时，点击弹框的确定回调函数</span></span><br><span class="line">Vue.prototype.checkPermission = <span class="function"><span class="keyword">function</span>(<span class="params">perType,callback,confirmCallback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> check = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// var perType = 'CAMERA';</span></span><br><span class="line">    <span class="keyword">var</span> type = &#123;</span><br><span class="line">        <span class="string">'CAMERA'</span>:<span class="string">'android.permission.CAMERA'</span>,</span><br><span class="line">        <span class="string">'GALLERY'</span>: <span class="string">'android.permission.READ_EXTERNAL_STORAGE'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">window</span>.plus)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkResult</span>(<span class="params">rusult,confirmCallback</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!rusult)&#123;</span><br><span class="line">            weui.dialog(&#123;</span><br><span class="line">                title: <span class="string">"提示"</span>,</span><br><span class="line">                content: i18n.messages[i18n.locale][<span class="string">'l'</span>][<span class="string">'permission'</span>][perType],</span><br><span class="line">                className: <span class="string">'custom-classname'</span>,</span><br><span class="line">                buttons: [&#123;</span><br><span class="line">                    label: <span class="string">"确定"</span>,</span><br><span class="line">                    type: <span class="string">'primary'</span>,</span><br><span class="line">                    onClick: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">                        confirmCallback&amp;&amp;confirmCallback();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ua = <span class="built_in">window</span>.navigator.userAgent.toLocaleLowerCase(); </span><br><span class="line">    <span class="keyword">var</span> isIOS = <span class="regexp">/iphone|ipad|ipod/</span>.test(ua);</span><br><span class="line">    <span class="keyword">if</span>(isIOS)&#123;</span><br><span class="line">        <span class="keyword">var</span> pp = plus.navigator.checkPermission(perType);</span><br><span class="line">        <span class="keyword">switch</span>(pp)&#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'authorized'</span>:</span><br><span class="line">            check = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'denied'</span>:</span><br><span class="line">            check = <span class="literal">false</span>;             </span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'undetermined'</span>:</span><br><span class="line">            check = <span class="literal">true</span>;             </span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'notdeny'</span>:</span><br><span class="line">              check = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'unknown'</span>:</span><br><span class="line">            check = <span class="literal">false</span>;             </span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            check = <span class="literal">false</span>;             </span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//上述代码可缩减，这里懒得缩减了，详细查看api</span></span><br><span class="line">        checkResult(check,confirmCallback);</span><br><span class="line">        callback &amp;&amp; callback(check);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  <span class="comment">//安卓的查看权限</span></span><br><span class="line">        <span class="comment">// 调试</span></span><br><span class="line">        <span class="comment">// check = true;</span></span><br><span class="line">        <span class="comment">// checkResult(check);</span></span><br><span class="line">        <span class="comment">// callback &amp;&amp; callback(check);</span></span><br><span class="line"></span><br><span class="line">        plus.android.requestPermissions([type[perType]], <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(e.deniedAlways.length&gt;<span class="number">0</span>)&#123;	<span class="comment">//权限被永久拒绝</span></span><br><span class="line">                <span class="comment">// 弹出提示框解释为何需要??权限，引导用户打开设置页面开启</span></span><br><span class="line">                check = <span class="literal">false</span>;     </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(e.deniedPresent.length&gt;<span class="number">0</span>)&#123;	<span class="comment">//权限被临时拒绝</span></span><br><span class="line">                <span class="comment">// 弹出提示框解释为何需要??权限，可再次调用plus.android.requestPermissions申请权限</span></span><br><span class="line">                check = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(e.granted.length&gt;<span class="number">0</span>)&#123;	<span class="comment">//权限被允许</span></span><br><span class="line">                <span class="comment">//调用依赖获取??权限的代码</span></span><br><span class="line">                check = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            checkResult(check,confirmCallback);</span><br><span class="line">            callback &amp;&amp; callback(check);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            check = <span class="literal">false</span>;</span><br><span class="line">            checkResult(check,confirmCallback);</span><br><span class="line">            callback &amp;&amp; callback(check);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>二维码界面代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"sacn-box"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[!check?'error-box':'']"</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"scan"</span> v-show=<span class="string">"isScan"</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">"bcid"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"error-msg"</span> v-show=<span class="string">"!check"</span>&gt;&#123;&#123;$t(<span class="string">'l.s.scan.openCamera'</span>)&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">let scan = null;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'scan',</span></span><br><span class="line"><span class="regexp">  data()&#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      loading : null,</span></span><br><span class="line"><span class="regexp">      view : null,</span></span><br><span class="line"><span class="regexp">      Bartab : null,</span></span><br><span class="line"><span class="regexp">      timeout : null,</span></span><br><span class="line"><span class="regexp">      timeout2 : null,</span></span><br><span class="line"><span class="regexp">      check : true,</span></span><br><span class="line"><span class="regexp">      rem12 : '12px',</span></span><br><span class="line"><span class="regexp">      rem14 : '14px',</span></span><br><span class="line"><span class="regexp">      size: 16,   /</span><span class="regexp">/顶部标题 字体大小  “二维码”</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods:&#123;</span></span><br><span class="line"><span class="regexp">    scanCard() &#123;</span></span><br><span class="line"><span class="regexp">        let _this = this;</span></span><br><span class="line"><span class="regexp">        let barcodeStyle = &#123;</span></span><br><span class="line"><span class="regexp">            frameColor : '#000000',</span></span><br><span class="line"><span class="regexp">            scanbarColor : '#000000',</span></span><br><span class="line"><span class="regexp">            background : 'rgba(255,255,255,0)',</span></span><br><span class="line"><span class="regexp">            position :'static'</span></span><br><span class="line"><span class="regexp">        &#125;               </span></span><br><span class="line"><span class="regexp">        if(_this.isScan)&#123;</span></span><br><span class="line"><span class="regexp">            return _this.closeScan();</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        _this.isScan = true; </span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/创建扫码</span></span><br><span class="line"><span class="regexp">        scan = plus.barcode.create('bcid',[plus.barcode.QR],barcodeStyle);     </span></span><br><span class="line"><span class="regexp">        plus.webview.currentWebview().append(scan);</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 打开扫码</span></span><br><span class="line"><span class="regexp">        _this.startScan();</span></span><br><span class="line"><span class="regexp">        scan.onmarked = _this.onmarked;</span></span><br><span class="line"><span class="regexp">        scan.onerror  = _this.onerror;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/开始扫描</span></span><br><span class="line"><span class="regexp">    startScan() &#123;</span></span><br><span class="line"><span class="regexp">      var _this = this;</span></span><br><span class="line"><span class="regexp">        if (!window.plus) return;</span></span><br><span class="line"><span class="regexp">        scan.start();</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/关闭条码识别控件</span></span><br><span class="line"><span class="regexp">    closeScan() &#123;</span></span><br><span class="line"><span class="regexp">        if (!window.plus) return;</span></span><br><span class="line"><span class="regexp">        scan.close();</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    goBack()&#123;</span></span><br><span class="line"><span class="regexp">      this.$router.go(-1);</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    onmarked(type, result, file) &#123;</span></span><br><span class="line"><span class="regexp">        var _this = this;</span></span><br><span class="line"><span class="regexp">        var scanType = false;</span></span><br><span class="line"><span class="regexp">        _this.loading = weui.loading(_this.$t('l.c.handling'));</span></span><br><span class="line"><span class="regexp">        switch (type) &#123;</span></span><br><span class="line"><span class="regexp">            case plus.barcode.QR:</span></span><br><span class="line"><span class="regexp">            type = 'QR';</span></span><br><span class="line"><span class="regexp">            break;</span></span><br><span class="line"><span class="regexp">            case plus.barcode.EAN13:</span></span><br><span class="line"><span class="regexp">            type = 'EAN13';</span></span><br><span class="line"><span class="regexp">            break;</span></span><br><span class="line"><span class="regexp">            case plus.barcode.EAN8:</span></span><br><span class="line"><span class="regexp">            type = 'EAN8';</span></span><br><span class="line"><span class="regexp">            break;</span></span><br><span class="line"><span class="regexp">            default:</span></span><br><span class="line"><span class="regexp">            type = '其它' + type;</span></span><br><span class="line"><span class="regexp">            break;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        result = result.replace(/</span>\n/g, <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">if</span>(result.indexOf(<span class="string">"#"</span>)&gt;<span class="number">-1</span>)&#123;     <span class="comment">//解决当 链接不带  #  时， result.split("#")[1]  不存在而报错  导致 扫码功能异常的问题。</span></span><br><span class="line">          result = result.split(<span class="string">"#"</span>)[<span class="number">1</span>];</span><br><span class="line">          <span class="comment">//允许扫码的路径</span></span><br><span class="line">          <span class="keyword">var</span>  paths = [<span class="string">'/app/scan/'</span>,<span class="string">'/app/scan/login'</span>,<span class="string">'/teacher/user/scan/login/'</span>,<span class="string">'/join/group/'</span>,<span class="string">'/join/class/'</span>,<span class="string">'/student/discuss/wall/'</span>,<span class="string">'/student/discuss/free/'</span>];</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>,len = paths.length; i&lt;len ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(result.indexOf(paths[i]) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">                scanType = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span> ;</span><br><span class="line">            &#125;     </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        _this.loading.hide();</span><br><span class="line">        <span class="keyword">if</span>(scanType)&#123;</span><br><span class="line">            <span class="keyword">return</span> _this.$router.replace(result);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            _this.closeScan();</span><br><span class="line">            weui.dialog(&#123;</span><br><span class="line">                title: _this.$t(<span class="string">'l.s.scan.errTips'</span>),</span><br><span class="line">                content: _this.$t(<span class="string">'l.s.scan.cardErr'</span>),</span><br><span class="line">                className: <span class="string">'custom-classname'</span>,</span><br><span class="line">                buttons: [&#123;</span><br><span class="line">                    label: _this.$t(<span class="string">'l.s.scan.confirm'</span>),</span><br><span class="line">                    type: <span class="string">'primary'</span>,</span><br><span class="line">                    onClick: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        _this.$router.go(<span class="number">-1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="keyword">return</span> _this.$router.replace(result);</span><br><span class="line">    &#125;,  </span><br><span class="line">    onerror(error)&#123;</span><br><span class="line">      _this.GL_ALERT(error);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">      <span class="keyword">var</span> size = $(<span class="string">'html'</span>)[<span class="number">0</span>].style.fontSize.replace(<span class="string">'px'</span>,<span class="string">''</span>);</span><br><span class="line">      <span class="keyword">this</span>.size = size * <span class="number">0.32</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  mounted : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.baseSize = $(<span class="string">'html'</span>).css(<span class="string">'font-size'</span>);</span><br><span class="line">    <span class="keyword">this</span>.baseNum = <span class="keyword">this</span>.baseSize.replace(<span class="string">'px'</span>, <span class="string">''</span>);</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/ipad/i</span>.test(ua))&#123;</span><br><span class="line">      <span class="keyword">this</span>.rem12 = <span class="string">'20px'</span>;</span><br><span class="line">      <span class="keyword">this</span>.rem14 = <span class="string">'24px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.plus)&#123;</span><br><span class="line">      _this.checkPermission(<span class="string">'CAMERA'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            _this.check = data;</span><br><span class="line">            <span class="keyword">if</span>(_this.check)&#123;</span><br><span class="line">                _this.scanCard();   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          _this.$router.go(<span class="number">-1</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _this.GL_ALERT(_this.$t(<span class="string">'l.s.scan.byPhone'</span>));</span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy()&#123;</span><br><span class="line">    <span class="keyword">this</span>.closeScan();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">#bcid &#123;</span></span><br><span class="line"><span class="regexp">      height : 100%;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.error-box&#123;</span></span><br><span class="line"><span class="regexp">  width:100%;</span></span><br><span class="line"><span class="regexp">  height:100vh;</span></span><br><span class="line"><span class="regexp">  display:flex;</span></span><br><span class="line"><span class="regexp">  justify-content: center;</span></span><br><span class="line"><span class="regexp">  align-items: center;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.error-msg&#123;</span></span><br><span class="line"><span class="regexp">  font-size:.4rem;</span></span><br><span class="line"><span class="regexp">  margin:auto;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>
<p>打开相机和相册界面代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//crop.js</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;crop-box&quot; v-show=&quot;isCrop&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;crop-area-bg&quot; v-show=&quot;!imgLoaded&quot; &gt;&#123;&#123;bgMsg&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div :id=&quot;&apos;crop_area&apos;+btnId&quot; class=&quot;crop-area&quot; :style=&quot;&#123;opacity:opacity&#125;&quot; &gt;&lt;/div&gt;</span><br><span class="line">        &lt;span class=&quot;btn-rotate-left&quot; @click=&quot;rotateLeft&quot;&gt;&lt;/span&gt;</span><br><span class="line">        &lt;div class=&quot;btn-box&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;btn-cancel&quot; @click=&quot;cancelCrop&quot;&gt;&#123;&#123;$t(&apos;l.i.crop.cancel&apos;)&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;btn-reset&quot; @click=&quot;rotateReset&quot;&gt;&#123;&#123;$t(&apos;l.i.crop.restore&apos;)&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;btn-commit&quot; @click=&quot;confirmCrop&quot;&gt;&#123;&#123;$t(&apos;l.i.crop.finish&apos;)&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import * as util from &apos;@static/js/util.js&apos;;</span><br><span class="line">	export default&#123;</span><br><span class="line">        props: [</span><br><span class="line">            &apos;btnId&apos;,</span><br><span class="line">            &apos;fileTypes&apos;</span><br><span class="line">		],</span><br><span class="line">		data()&#123;</span><br><span class="line">			return&#123;</span><br><span class="line">                seling: false,     //判断是否在拍照或者读取相册</span><br><span class="line">                client : null,</span><br><span class="line">                region: &apos;oss-cn-shenzhen&apos;,     //根据你买的那个区的做相应的更改</span><br><span class="line">                bucket: &apos;boyintest&apos;,</span><br><span class="line">                id: &apos;uploadImage&apos;,</span><br><span class="line">                percentage: 0,</span><br><span class="line">                opacity : 0,</span><br><span class="line">                url: &apos;&apos;,</span><br><span class="line">                bgMsg : &apos;&apos;,//$t(&apos;l.i.crop.pictureProcessing&apos;)</span><br><span class="line">                uploadFilesName: &apos;&apos;,</span><br><span class="line">                uploadfile: [],</span><br><span class="line">                imgLoaded : false,</span><br><span class="line">                maxLength: 1,</span><br><span class="line">                isCrop : false,</span><br><span class="line">                rotate : 0,</span><br><span class="line">                defaultFileTypes : &apos;jpg,png,jpeg,JPG,PNG,JPEG&apos;,</span><br><span class="line">                credentials : null,</span><br><span class="line">                fileUrlPre : null,</span><br><span class="line">                uploadUrl : null</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		methods:&#123;</span><br><span class="line">            rotateLeft : function()&#123;</span><br><span class="line">                this.crop.rotate(-90);</span><br><span class="line">            &#125;,</span><br><span class="line">            rotateRight : function()&#123;</span><br><span class="line">                this.crop.rotate(10);</span><br><span class="line">            &#125;,</span><br><span class="line">            rotateReset : function()&#123;</span><br><span class="line">                this.crop.reset();</span><br><span class="line">            &#125;,</span><br><span class="line">            getCredentials : function () &#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                _this.$axios.post(_this.apiUrl + &quot;/sts/get-credentials&quot;,_this.$qs.stringify(&#123;type : 20&#125;)).then(function (response) &#123;</span><br><span class="line">                    if (!response || !response.data.success) &#123;</span><br><span class="line">                        return _this.loading.hide();</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    _this.credentials = &#123;</span><br><span class="line">                        bucketName : response.data.bucket,</span><br><span class="line">                        fileBucketName : response.data.filePath,</span><br><span class="line">                        credentials : JSON.stringify(response.data.sts),</span><br><span class="line">                    &#125;;</span><br><span class="line">                    _this.fileUrlPre = response.data.fileUrlPre;</span><br><span class="line">                    _this.uploadUrl = response.data.uploadUrl;</span><br><span class="line">                  </span><br><span class="line">                    // 设置参数</span><br><span class="line">                    _this.uploader.setOption(&#123;</span><br><span class="line">                        url : _this.uploadUrl,</span><br><span class="line">                        multipart_params : _this.credentials</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                    _this.uploader.start();</span><br><span class="line">			    &#125;).catch(function (error) &#123;</span><br><span class="line">			        _this.loading.hide();</span><br><span class="line">                &#125;);	</span><br><span class="line">            &#125;,</span><br><span class="line">            cancelCrop : function()&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                _this.seling = false;</span><br><span class="line">                if(!_this.imgLoaded)&#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                _this.isCrop = false;</span><br><span class="line">                _this.crop.destroy();</span><br><span class="line">                _this.crop = null;</span><br><span class="line">                _this.uploader.disableBrowse(false);</span><br><span class="line">                _this.imgLoaded = false;</span><br><span class="line">                _this.opacity = 0;</span><br><span class="line"></span><br><span class="line">                _this.$emit(&quot;cancelCrop&quot;);</span><br><span class="line">                // _this.$bus.$emit(&apos;cropStatus&apos;, false);</span><br><span class="line">            &#125;,</span><br><span class="line">            confirmCrop : function()&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                _this.seling = false;</span><br><span class="line">                if(!_this.imgLoaded)&#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                if(_this.croping)&#123;</span><br><span class="line">                    return weui.toast(_this.$t(&apos;l.i.crop.uploading&apos;),1000);</span><br><span class="line">                &#125;</span><br><span class="line">                _this.croping = true;</span><br><span class="line">                _this.loading = weui.loading(_this.$t(&apos;l.i.crop.uploading&apos;), &#123;className: &apos;moka-loading&apos;&#125;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    var data = _this.crop.getCanvasData();</span><br><span class="line">                    var width,height;</span><br><span class="line">                    if(data.naturalWidth &gt; 1000)&#123;</span><br><span class="line">                        width = 1000;</span><br><span class="line">                        height = data.naturalHeight * 1000 / data.naturalWidth;</span><br><span class="line">                    &#125;</span><br><span class="line">                    var cas = _this.crop.getCroppedCanvas(&#123;</span><br><span class="line">                        width : width,</span><br><span class="line">                        height : height,</span><br><span class="line">                        // Limit max sizes</span><br><span class="line">                        maxWidth: 4096,</span><br><span class="line">                        maxHeight: 4096,</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    var fileName = _this.file.name;</span><br><span class="line">                    var saveName = new Date().getTime() + &apos;.&apos; + util.getSuffix(fileName);</span><br><span class="line"></span><br><span class="line">                    for(var index in _this.files)&#123;//清除所有文件</span><br><span class="line">                        var upFile = _this.files[index];</span><br><span class="line">                        _this.uploader.removeFile(upFile);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                  </span><br><span class="line">                    cas.toBlob(function (bolb) &#123;</span><br><span class="line">                        var file = new File([bolb], saveName, &#123;type: &apos;image/jpeg&apos;&#125;);</span><br><span class="line">                        _this.croping = false;</span><br><span class="line">                        _this.currFile = file;</span><br><span class="line">                        _this.uploader.addFile(file);</span><br><span class="line">                        _this.loading.hide();</span><br><span class="line">                    &#125;, &quot;image/jpeg&quot;, 0.95)</span><br><span class="line">                &#125; catch (error) &#123;</span><br><span class="line">                    _this.loading.hide();</span><br><span class="line">                    weui.toast(&apos;error&apos;);</span><br><span class="line">                    _this.cancelCrop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            uploaded : function(fileName, src)&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                weui.toast(_this.$t(&apos;l.i.crop.uploadSuccess&apos;),1000);</span><br><span class="line">                _this.$emit(&quot;fileUploadCallback&quot;, fileName, src);</span><br><span class="line">            &#125;,</span><br><span class="line">            initCrop : function(file)&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                // console.log(_this.isCrop);</span><br><span class="line">                if(_this.isCrop)&#123;//正在剪裁</span><br><span class="line">                    _this.isCrop = false;</span><br><span class="line">                    return _this.getCredentials();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                _this.file = file;</span><br><span class="line">                var fileName = _this.file.name;</span><br><span class="line">                </span><br><span class="line">                var fileTypes = _this.defaultFileTypes;</span><br><span class="line">                if(_this.fileTypes &amp;&amp; _this.fileTypes.length &gt; 0)&#123;</span><br><span class="line">                    fileTypes = _this.fileTypes;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var typeTpl = &apos;,&apos; + fileTypes.toLocaleLowerCase()  + &apos;,&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                var suffix = util.getSuffix(fileName).toLocaleLowerCase();</span><br><span class="line">                if(typeTpl.indexOf(suffix) &lt; 0)&#123;</span><br><span class="line">                    _this.uploader.removeFile(file);</span><br><span class="line">                    return _this.GL_ALERT(_this.$t(&apos;l.i.crop.notSupported&apos;));</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                if(suffix != &apos;jpg&apos; &amp;&amp; suffix != &apos;png&apos; &amp;&amp; suffix != &apos;jpeg&apos;)&#123;</span><br><span class="line">                    _this.loading = weui.loading(_this.$t(&apos;l.i.crop.uploading&apos;), &#123;className: &apos;moka-loading&apos;&#125;);</span><br><span class="line">                    _this.currFile = file;</span><br><span class="line">                    return _this.getCredentials();//_this.uploadFile(_this.file);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                _this.$emit(&quot;onCrop&quot;);</span><br><span class="line">                // _this.$bus.$emit(&apos;cropStatus&apos;, true);</span><br><span class="line">                </span><br><span class="line">                _this.isCrop = true;</span><br><span class="line">                _this.loading = weui.loading(_this.$t(&apos;l.i.crop.pictureProcessing&apos;));</span><br><span class="line">                var preloader = new moxie.image.Image();</span><br><span class="line">                preloader.onload = function () &#123;</span><br><span class="line">                    var imgsrc = preloader.type == &apos;image/jpeg&apos; ? preloader.getAsDataURL(&apos;image/jpeg&apos;, 80) : preloader.getAsDataURL(); //得到图片src,实质为一个base64编码的数据</span><br><span class="line">                    _this.file.imgsrc = imgsrc;</span><br><span class="line">                    preloader.destroy();</span><br><span class="line">                    preloader = null;</span><br><span class="line">                    $(&apos;#crop_area&apos;+_this.btnId).html(&apos;&lt;img src=&quot;&apos; + imgsrc + &apos;&quot;&gt;&apos;);</span><br><span class="line">                    if(!_this.crop)&#123;</span><br><span class="line">                        _this.crop  = new Cropper($(&apos;#crop_area&apos;+_this.btnId+&apos; &gt; img&apos;)[0], &#123;</span><br><span class="line">                            dragMode : &apos;move&apos;,</span><br><span class="line">                            background : false,</span><br><span class="line">                            autoCropArea : 1,</span><br><span class="line">                            crop(event) &#123;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            ready()&#123;</span><br><span class="line">                                _this.imgLoaded = true;</span><br><span class="line">                                _this.opacity = 1;</span><br><span class="line">                                _this.loading.hide();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                preloader.load(_this.file.getSource());</span><br><span class="line">                _this.$emit(&quot;finish&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            initUploader : function(options)&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line"></span><br><span class="line">                var fileTypes = _this.defaultFileTypes;</span><br><span class="line">                if(_this.fileTypes &amp;&amp; _this.fileTypes.length &gt; 0)&#123;</span><br><span class="line">                    fileTypes = _this.fileTypes;</span><br><span class="line">                &#125;</span><br><span class="line">                var filters = [];</span><br><span class="line">                if(!$(&apos;#app&apos;).hasClass(&apos;pc&apos;))&#123;</span><br><span class="line">                    filters = [];</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    filters =  [</span><br><span class="line">                        &#123;title: &quot;document&quot;, extensions: fileTypes&#125;//&quot;jpg,png,jpeg,JPG,PNG,JPEG&quot;</span><br><span class="line">                    ];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var typeTpl = &apos;,&apos; + fileTypes.toLocaleLowerCase()  + &apos;,&apos;;</span><br><span class="line"></span><br><span class="line">                var btnId = _this.btnId;</span><br><span class="line">                if(options &amp;&amp; options.btnId)&#123;</span><br><span class="line">                    btnId = options.btnId</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (window.plus) &#123;</span><br><span class="line">                    btnId = _this.btnId + &apos;_hide&apos;;</span><br><span class="line">                    $(&apos;body&apos;).append(&apos;&lt;span id=&quot;&apos; + btnId + &apos;&quot; style=&quot;position:absolute;z-index=-9;&quot;&gt;&lt;/span&gt;&apos;)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var uploader = new plupload.Uploader(&#123;</span><br><span class="line">                    runtimes : &apos;html5,flash&apos;,</span><br><span class="line">                    browse_button : btnId, //选择文件按钮ID </span><br><span class="line">                    max_file_size : &apos;100mb&apos;,  //文件上传最大值</span><br><span class="line">                    multipart : true,</span><br><span class="line">                    chunks : true,//不分块上传</span><br><span class="line">                    chunk_size : &apos;10mb&apos;,//分块大小，小于这个大小的不分块</span><br><span class="line">                    unique_names : true,  // 上传的文件名是否唯一,只有在未进行分块上传时文件名唯一才有效</span><br><span class="line">                    url: _this.uploadUrl, //提交到后台的url地址</span><br><span class="line">                    flash_swf_url: &apos;/js/lib/plupload/plupload.flash.swf&apos;,//plupload.flash.swf文件所在路径</span><br><span class="line">                    multi_selection : false,</span><br><span class="line">                    filters: filters,</span><br><span class="line">                    init : &#123;</span><br><span class="line">                        FileUploaded : function(up, file, info) &#123;//上传服务器方法，暂时未用到</span><br><span class="line">                            up.disableBrowse(false);</span><br><span class="line">                            var result = JSON.parse(info.response);</span><br><span class="line">                            _this.loading.hide();</span><br><span class="line">                            if(!result.success)&#123;</span><br><span class="line">                                return _this.GL_ALERT(_this.$t(&apos;l.i.crop.uploadFailure&apos;));</span><br><span class="line">                            &#125;</span><br><span class="line">                            if(!result || !result.saveName)&#123;</span><br><span class="line">                                return _this.GL_ALERT(_this.$t(&apos;l.i.crop.uploadFailure&apos;));</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                            weui.toast(_this.$t(&apos;l.i.crop.uploadSuccess&apos;), 1000);</span><br><span class="line">                            var attachFileName = _this.currFile.name;    //源文件的名字</span><br><span class="line">                            var saveName = _this.fileUrlPre.concat(&quot;/&quot;, result.saveName);</span><br><span class="line">                            var fileSize = _this.currFile.size;</span><br><span class="line">                            _this.$emit(&quot;imgUploadCallback&quot;, attachFileName, saveName, fileSize);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        FilesAdded : function(up, files)&#123;</span><br><span class="line">                            _this.files = files;</span><br><span class="line">                            _this.file = files[0];</span><br><span class="line">                            _this.initCrop(_this.file);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        BeforeUpload : function(up, file)&#123;</span><br><span class="line">                            _this.cancelCrop();//上传之前 销毁剪裁框</span><br><span class="line">                            up.disableBrowse(true);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        UploadProgress : function(up, file) &#123; </span><br><span class="line">                        	// console.log(&quot;eeeeeeeeeeeee&quot;);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        Error : function(up, err) &#123;</span><br><span class="line">                            // _this.loading.hide();</span><br><span class="line">                            up.disableBrowse(false);</span><br><span class="line">                            up.refresh(); // Reposition Flash/Silverlight</span><br><span class="line">                            _this.GL_ALERT(err.message);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                console.log(&apos;init&apos;);</span><br><span class="line">                uploader.init();</span><br><span class="line">                _this.uploader = uploader;</span><br><span class="line">            &#125;,</span><br><span class="line">            reset : function(btnId)&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                var uploader = _this.uploader;</span><br><span class="line">                uploader.destroy();</span><br><span class="line">                // _this.uploader = null;</span><br><span class="line">                setTimeout(function()&#123;</span><br><span class="line">                    _this.initUploader(&#123;btnId:btnId&#125;);</span><br><span class="line">                &#125;, 500);</span><br><span class="line"></span><br><span class="line">                if (window.plus) &#123;</span><br><span class="line">                    $(&apos;#&apos; + this.btnId).off(&apos;click&apos;);</span><br><span class="line">                    $(&apos;#&apos; + btnId).on(&apos;click&apos;, this.onSel)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            initAppCrop : function(file)&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                if(_this.isCrop)&#123;//正在剪裁</span><br><span class="line">                    _this.isCrop = false;</span><br><span class="line">                    return _this.getCredentials();</span><br><span class="line">                &#125;</span><br><span class="line">                _this.file = file;</span><br><span class="line">                _this.$emit(&quot;onCrop&quot;);</span><br><span class="line">                // _this.$bus.$emit(&apos;cropStatus&apos;, true);</span><br><span class="line">                </span><br><span class="line">                _this.isCrop = true;</span><br><span class="line">                $(&apos;#crop_area&apos;+_this.btnId).html(&apos;&lt;img src=&quot;&apos; + file.src + &apos;&quot;&gt;&apos;);</span><br><span class="line">                if(!_this.crop)&#123;</span><br><span class="line">                    // _this.loading = weui.loading(_this.$t(&apos;l.i.crop.pictureProcessing&apos;));</span><br><span class="line">                    _this.crop  = new Cropper($(&apos;#crop_area&apos;+_this.btnId+&apos; &gt; img&apos;)[0], &#123;</span><br><span class="line">                        dragMode : &apos;move&apos;,</span><br><span class="line">                        background : false,</span><br><span class="line">                        autoCropArea : 1,</span><br><span class="line">                        crop(event) &#123;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        ready()&#123;</span><br><span class="line">                            _this.imgLoaded = true;</span><br><span class="line">                            _this.opacity = 1;</span><br><span class="line">                            _this.loading.hide();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                _this.$emit(&quot;finish&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            getImage : function () &#123;</span><br><span class="line">                const ua = window.navigator.userAgent.toLocaleLowerCase();</span><br><span class="line">                var isIOS = /iphone|ipad|ipod/.test(ua);</span><br><span class="line">                var _this = this;</span><br><span class="line">                _this.checkPermission(&apos;CAMERA&apos;,function(data)&#123;</span><br><span class="line">                   if(data)&#123;</span><br><span class="line">                        var c = plus.camera.getCamera();   </span><br><span class="line">                        var area = 0;  //记录最大像素  </span><br><span class="line">                        var j = 0;  //记录最大像素的索引</span><br><span class="line">                        for(let i = 0; i &lt; c.supportedImageResolutions.length; i++)&#123;</span><br><span class="line">                            var arr = c.supportedImageResolutions[i].split(&quot;*&quot;);</span><br><span class="line">                            if(arr.length &lt; 2)&#123;</span><br><span class="line">                                continue;</span><br><span class="line">                            &#125;</span><br><span class="line">                            var currentArea = arr[0] * arr[1];</span><br><span class="line">                            if(currentArea &gt; area)&#123;</span><br><span class="line">                                area = currentArea;</span><br><span class="line">                                j = i;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        var filename = new Date().getTime() + &apos;.jpg&apos;;</span><br><span class="line">                        c.captureImage(function(filePath) &#123;</span><br><span class="line">                            </span><br><span class="line">                            // filePath  为拍完照保存在本地的路径   _doc/shijain...</span><br><span class="line">                            plus.io.resolveLocalFileSystemURL(filePath, function(entry) &#123;</span><br><span class="line">                                 _this.loading = weui.loading(_this.$t(&apos;l.i.crop.pictureProcessing&apos;));</span><br><span class="line">                                // 可通过entry对象操作 file 文件 </span><br><span class="line">                                entry.file( function ( file ) &#123;</span><br><span class="line">                                    var fileReader = new plus.io.FileReader();</span><br><span class="line">                                    fileReader.onloadend = function ( e ) &#123;</span><br><span class="line">                                        // Get data</span><br><span class="line">                                        // alert( e.target.result );</span><br><span class="line">                                        var imgPath = e.target.result;</span><br><span class="line">                                        var image = new Image();</span><br><span class="line">                                        image.src = imgPath;</span><br><span class="line">                                        image.name = entry.name;</span><br><span class="line">                                        image.onload = function() &#123;</span><br><span class="line">                                            _this.initAppCrop(image); /*上传图片*/</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;;</span><br><span class="line">                                    fileReader.readAsDataURL( file );</span><br><span class="line">                                &#125;, function ( file ) &#123;</span><br><span class="line">                                    alert( file.message );</span><br><span class="line">                                &#125; );</span><br><span class="line">                            &#125;, function(filePath) &#123;</span><br><span class="line">                                 _this.loading.hide();</span><br><span class="line">                                 _this.seling = false;</span><br><span class="line">                                console.log(&quot;读取拍照文件错误：&quot; + filePath.message);</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;, function(s) &#123;</span><br><span class="line">                            //防止选相机时 不拍照了</span><br><span class="line">                            _this.seling = false;</span><br><span class="line">                            console.log(&quot;拍照错误：&quot; + filePath.message);</span><br><span class="line">                        &#125;, &#123;</span><br><span class="line">                            filename: &quot;_doc/&quot; + filename,</span><br><span class="line">                            resolution: c.supportedImageResolutions[j],</span><br><span class="line">                        &#125;)</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            galleryImg : function () &#123;</span><br><span class="line">                const ua = window.navigator.userAgent.toLocaleLowerCase();</span><br><span class="line">                var isIOS = /iphone|ipad|ipod/.test(ua);</span><br><span class="line">                var _this = this;</span><br><span class="line">                _this.checkPermission(&apos;GALLERY&apos;,function(data)&#123;</span><br><span class="line">                    if(!data)&#123;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                    plus.gallery.pick(function(a) &#123;</span><br><span class="line">                        plus.io.resolveLocalFileSystemURL(a, function(entry) &#123;</span><br><span class="line">                             _this.loading = weui.loading(_this.$t(&apos;l.i.crop.pictureProcessing&apos;));</span><br><span class="line">                            // 可通过entry对象操作 file 文件 </span><br><span class="line">                            entry.file( function ( file ) &#123;</span><br><span class="line">                                var fileReader = new plus.io.FileReader();</span><br><span class="line">                                fileReader.onloadend = function ( e ) &#123;</span><br><span class="line">                                    // Get data</span><br><span class="line">                                    // alert( e.target.result );</span><br><span class="line">                                    var imgPath = e.target.result;</span><br><span class="line">                                    var image = new Image();</span><br><span class="line">                                    image.src = imgPath;</span><br><span class="line">                                    image.name = entry.name;</span><br><span class="line">                                    </span><br><span class="line">                                    image.onload = function() &#123;</span><br><span class="line">                                       </span><br><span class="line">                                        _this.initAppCrop(image); /*上传图片*/</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;;</span><br><span class="line">                                fileReader.readAsDataURL( file );</span><br><span class="line">                            &#125;, function ( file ) &#123;</span><br><span class="line">                                alert( file.message );</span><br><span class="line">                            &#125; );</span><br><span class="line">                            // var imgPath = isIOS?entry.toRemoteURL():entry.toLocalURL();</span><br><span class="line">                            // var image = new Image();</span><br><span class="line">                            // image.src = imgPath;</span><br><span class="line">                            // image.name = entry.name;</span><br><span class="line">                            // image.onload = function() &#123;</span><br><span class="line">                            //     _this.initAppCrop(image); /*上传图片*/</span><br><span class="line">                            // &#125;</span><br><span class="line">                        &#125;, function(e) &#123;</span><br><span class="line">                            _this.seling = false;</span><br><span class="line">                            _this.loading.hide();</span><br><span class="line">                            console.log(&quot;读取拍照文件错误：&quot; + e.message);</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;, function(a) &#123;</span><br><span class="line">                        //防止安卓机跳到相册后不选了</span><br><span class="line">                        _this.seling = false;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        filter: &quot;image&quot;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            onSel : function()&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                if(_this.seling)&#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                weui.actionSheet([</span><br><span class="line">                    &#123;</span><br><span class="line">                        label: _this.$t(&apos;l.i.crop.takePhoto&apos;),</span><br><span class="line">                        onClick: function () &#123;_this.seling = true;_this.getImage()&#125;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        label: _this.$t(&apos;l.i.crop.takeByphotos&apos;),</span><br><span class="line">                        onClick: function () &#123;_this.seling = true;_this.galleryImg();&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ], [</span><br><span class="line">                    &#123;</span><br><span class="line">                        label: _this.$t(&apos;l.i.crop.cancel&apos;),</span><br><span class="line">                        onClick: function () &#123;_this.seling = false;&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]);</span><br><span class="line">            &#125;,</span><br><span class="line">            initEvent: function()&#123;</span><br><span class="line">                console.log(&apos;initEvent&apos;);</span><br><span class="line">                $(&apos;#&apos; + this.btnId).off(&apos;click&apos;);</span><br><span class="line">                $(&apos;#&apos; + this.btnId).on(&apos;click&apos;, this.onSel)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">		mounted()&#123;</span><br><span class="line">            if (!HTMLCanvasElement.prototype.toBlob) &#123;</span><br><span class="line">                Object.defineProperty(HTMLCanvasElement.prototype, &apos;toBlob&apos;, &#123;</span><br><span class="line">                    value: function (callback, type, quality) &#123;</span><br><span class="line">                        var binStr = atob( this.toDataURL(type, quality).split(&apos;,&apos;)[1] ),</span><br><span class="line">                            len = binStr.length,</span><br><span class="line">                            arr = new Uint8Array(len);</span><br><span class="line">                        for (var i=0; i&lt;len; i++ ) &#123;</span><br><span class="line">                            arr[i] = binStr.charCodeAt(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                        callback( new Blob( [arr], &#123;type: type || &apos;image/png&apos;&#125; ) );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // var topHeight = $(&apos;html&apos;).css(&apos;font-size&apos;);</span><br><span class="line">            // var boxHeight = $(&apos;html&apos;).height() - topHeight.replace(&apos;px&apos;, &apos;&apos;);</span><br><span class="line">            // $(&apos;.crop-box&apos;).css(&apos;top&apos;, topHeight).css(&apos;height&apos;, boxHeight);</span><br><span class="line"></span><br><span class="line">            if (window.plus) &#123;</span><br><span class="line">                console.log(window.plus)</span><br><span class="line">                this.initEvent();</span><br><span class="line">            &#125;</span><br><span class="line">            this.initUploader();</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy : function()&#123;</span><br><span class="line">            this.seling = false;</span><br><span class="line">            if(this.loading)&#123;</span><br><span class="line">                this.loading.hide();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.crop-area img&#123;</span><br><span class="line">    max-width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.checkPermission(&apos;CAMERA&apos;,function(data)&#123;</span><br><span class="line">              if(data)&#123;</span><br><span class="line">                   var c = plus.camera.getCamera();   </span><br><span class="line">                   var area = 0;  //记录最大像素  </span><br><span class="line">                   var j = 0;  //记录最大像素的索引</span><br><span class="line">                   for(let i = 0; i &lt; c.supportedImageResolutions.length; i++)&#123;</span><br><span class="line">                       var arr = c.supportedImageResolutions[i].split(&quot;*&quot;);</span><br><span class="line">                       if(arr.length &lt; 2)&#123;</span><br><span class="line">                           continue;</span><br><span class="line">                       &#125;</span><br><span class="line">                       var currentArea = arr[0] * arr[1];</span><br><span class="line">                       if(currentArea &gt; area)&#123;</span><br><span class="line">                           area = currentArea;</span><br><span class="line">                           j = i;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   var filename = new Date().getTime() + &apos;.jpg&apos;;</span><br><span class="line">                   c.captureImage(function(filePath) &#123;</span><br><span class="line">                       </span><br><span class="line">                       // filePath  为拍完照保存在本地的路径   _doc/shijain...</span><br><span class="line">                       plus.io.resolveLocalFileSystemURL(filePath, function(entry) &#123;</span><br><span class="line">                            _this.loading = weui.loading(_this.$t(&apos;l.i.crop.pictureProcessing&apos;));</span><br><span class="line">                           // 可通过entry对象操作 file 文件 </span><br><span class="line">                           entry.file( function ( file ) &#123;</span><br><span class="line">                               var fileReader = new plus.io.FileReader();</span><br><span class="line">                               fileReader.onloadend = function ( e ) &#123;</span><br><span class="line">                                   // Get data</span><br><span class="line">                                   // alert( e.target.result );</span><br><span class="line">                                   var imgPath = e.target.result;</span><br><span class="line">                                   var image = new Image();</span><br><span class="line">                                   image.src = imgPath;</span><br><span class="line">                                   image.name = entry.name;</span><br><span class="line">                                   image.onload = function() &#123;</span><br><span class="line">                                       _this.initAppCrop(image); /*上传图片*/</span><br><span class="line">                                   &#125;</span><br><span class="line">                               &#125;;</span><br><span class="line">                               fileReader.readAsDataURL( file );</span><br><span class="line">                           &#125;, function ( file ) &#123;</span><br><span class="line">                               alert( file.message );</span><br><span class="line">                           &#125; );</span><br><span class="line">                       &#125;, function(filePath) &#123;</span><br><span class="line">                            _this.loading.hide();</span><br><span class="line">                            _this.seling = false;</span><br><span class="line">                           console.log(&quot;读取拍照文件错误：&quot; + filePath.message);</span><br><span class="line">                       &#125;);</span><br><span class="line">                   &#125;, function(s) &#123;</span><br><span class="line">                       //防止选相机时 不拍照了</span><br><span class="line">                       _this.seling = false;</span><br><span class="line">                       console.log(&quot;拍照错误：&quot; + filePath.message);</span><br><span class="line">                   &#125;, &#123;</span><br><span class="line">                       filename: &quot;_doc/&quot; + filename,</span><br><span class="line">                       resolution: c.supportedImageResolutions[j],</span><br><span class="line">                   &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">           _this.checkPermission(&apos;GALLERY&apos;,function(data)&#123;</span><br><span class="line">               if(!data)&#123;</span><br><span class="line">                   return;</span><br><span class="line">               &#125;</span><br><span class="line">               plus.gallery.pick(function(a) &#123;</span><br><span class="line">                   plus.io.resolveLocalFileSystemURL(a, function(entry) &#123;</span><br><span class="line">                        _this.loading = weui.loading(_this.$t(&apos;l.i.crop.pictureProcessing&apos;));</span><br><span class="line">                       // 可通过entry对象操作 file 文件 </span><br><span class="line">                       entry.file( function ( file ) &#123;</span><br><span class="line">                           var fileReader = new plus.io.FileReader();</span><br><span class="line">                           fileReader.onloadend = function ( e ) &#123;</span><br><span class="line">                               // Get data</span><br><span class="line">                               // alert( e.target.result );</span><br><span class="line">                               var imgPath = e.target.result;</span><br><span class="line">                               var image = new Image();</span><br><span class="line">                               image.src = imgPath;</span><br><span class="line">                               image.name = entry.name;</span><br><span class="line">                               </span><br><span class="line">                               image.onload = function() &#123;</span><br><span class="line">                                  </span><br><span class="line">                                   _this.initAppCrop(image); /*上传图片*/</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;;</span><br><span class="line">                           fileReader.readAsDataURL( file );</span><br><span class="line">                       &#125;, function ( file ) &#123;</span><br><span class="line">                           alert( file.message );</span><br><span class="line">                       &#125; );</span><br><span class="line">                       // var imgPath = isIOS?entry.toRemoteURL():entry.toLocalURL();</span><br><span class="line">                       // var image = new Image();</span><br><span class="line">                       // image.src = imgPath;</span><br><span class="line">                       // image.name = entry.name;</span><br><span class="line">                       // image.onload = function() &#123;</span><br><span class="line">                       //     _this.initAppCrop(image); /*上传图片*/</span><br><span class="line">                       // &#125;</span><br><span class="line">                   &#125;, function(e) &#123;</span><br><span class="line">                       _this.seling = false;</span><br><span class="line">                       _this.loading.hide();</span><br><span class="line">                       console.log(&quot;读取拍照文件错误：&quot; + e.message);</span><br><span class="line">                   &#125;);</span><br><span class="line">               &#125;, function(a) &#123;</span><br><span class="line">                   //防止安卓机跳到相册后不选了</span><br><span class="line">                   _this.seling = false;</span><br><span class="line">               &#125;, &#123;</span><br><span class="line">                   filter: &quot;image&quot;</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;)</span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">         //seling   防止重复点击    </span><br><span class="line">      onSel : function()&#123;</span><br><span class="line">           var _this = this;</span><br><span class="line">           if(_this.seling)&#123;</span><br><span class="line">               return;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           weui.actionSheet([</span><br><span class="line">               &#123;</span><br><span class="line">                   label: _this.$t(&apos;l.i.crop.takePhoto&apos;),</span><br><span class="line">                   onClick: function () &#123;_this.seling = true;_this.getImage()&#125;</span><br><span class="line">               &#125;, &#123;</span><br><span class="line">                   label: _this.$t(&apos;l.i.crop.takeByphotos&apos;),</span><br><span class="line">                   onClick: function () &#123;_this.seling = true;_this.galleryImg();&#125;</span><br><span class="line">               &#125;</span><br><span class="line">           ], [</span><br><span class="line">               &#123;</span><br><span class="line">                   label: _this.$t(&apos;l.i.crop.cancel&apos;),</span><br><span class="line">                   onClick: function () &#123;_this.seling = false;&#125;</span><br><span class="line">               &#125;</span><br><span class="line">           ]);</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure>
<p>代码都是节选，也没做修改，只是总结下 使用相机和相册还有二维码的调用方法，具体请查看api。</p>
<h5 id="第四个问题"><a href="#第四个问题" class="headerlink" title="第四个问题"></a>第四个问题</h5><p>顶部导航栏（标题问题）</p>
<p>问题： 安卓点击输入框时，整个页面是会减小的，因此顶部导航栏还是会固定再顶部，但是ios点击输入框</p>
<p>弹起键盘时，页面是上移的，导致顶部标题也上移动。</p>
<p>研究了许久</p>
<p>修改 softinpputMode 为 adjustResize。 也可在配置文件manifest文件中修改模式。具体查看文档。</p>
<p>plus.webview.currentWebview().setStyle({softinputMode: “adjustResize”});</p>
<p>但是发行修改为这个模式后打包仍有各种问题</p>
<p>最后解决方法，就是使用原生导航栏，原生导航栏会将顶部标题固定在顶部。</p>
<p>使用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTitle()&#123;</span><br><span class="line">        <span class="keyword">var</span> _self = plus.webview.currentWebview();</span><br><span class="line">        <span class="keyword">var</span> buttons = !<span class="keyword">this</span>.meta.scan?[]:[</span><br><span class="line">              <span class="comment">//使用阿里图标库示例,打包后才会生效</span></span><br><span class="line">            &#123;</span><br><span class="line">              fontSrc : <span class="string">"_www/static/font/iconfont.ttf"</span>,   </span><br><span class="line">              text:<span class="string">'\ue663'</span>,</span><br><span class="line">              float:<span class="string">'right'</span>,</span><br><span class="line">              onclick: <span class="keyword">this</span>.onScan</span><br><span class="line">            &#125;</span><br><span class="line">        ];</span><br><span class="line">        _self.setStyle(&#123;</span><br><span class="line">            titleNView:&#123;</span><br><span class="line">              titleOverflow: <span class="string">'titleOverflow'</span>, </span><br><span class="line">              height: <span class="string">'50px'</span>,</span><br><span class="line">              buttons,</span><br><span class="line">              autoBackButton : <span class="keyword">this</span>.meta.back,</span><br><span class="line">              titleText : <span class="keyword">this</span>.$store.getters.getTitle ,</span><br><span class="line">              backgroundColor: <span class="keyword">this</span>.meta.bg , </span><br><span class="line">              titleColor : <span class="keyword">this</span>.meta.color </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://www.html5plus.org/doc/zh_cn/webview.html#plus.webview.WebviewObject.setStyle" target="_blank" rel="noopener">原生导航栏文档</a></p>
<p>没记错的化文档说明中写 首页的 导航栏需要在配置文件中配置，没错的话 应该就是因为在代码中设置原生导航栏</p>
<p>用到了plus中的webview方法，可能plus的方法还没加载完，启动页已经关闭，导致页面没有顶部导航栏，所以首</p>
<p>页需要在manifest配置文件中配置</p>
<p>那么问题来了，我的项目是启动页完后未登录时进入的是登录页，已登录时是登录后的首页。我该如何配置？</p>
<p>而且我的项目是多语言的，配置中也只能是一种语言。因此我决定不配置首页，而是监听 plus的方法是否加载完成，加载完成时 再设置下，顶部标题。</p>
<p>这样做问题好像是解决了，但是要是性能很差的手机很慢才加载完成就会导致顶部导航栏的显示的很突然。所以</p>
<p>结合上面的关闭启动页的配置那里，把自动关闭启动页关闭，然后当plus的方法全部加载完成后 手动关闭启动页。因为是多语言，语言改变了的时候也要进行setTitle方法</p>
<p>注意： 有些页面是单独设置顶部标题内容的，一旦设置就得 返回键，扫码等  需要显示得图标全部设置，不会进行叠加，比如 本来有返回按钮，没有标题， 你再设置标题，  此时是不会有返回键的，因此需要全部一起再设置。</p>
<h4 id="第五个问题"><a href="#第五个问题" class="headerlink" title="第五个问题"></a>第五个问题</h4><p>web浏览器，当文件为网络连接时，创建一个窗口，打开链接，所以创建一个组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;link_box&quot; class=&quot;link-box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      wbview : null,</span><br><span class="line">      id : &apos;link_view&apos;,</span><br><span class="line">      url : &apos;&apos;,</span><br><span class="line">      styles : &#123;&#125;,</span><br><span class="line">      extras : &#123;&#125;,</span><br><span class="line">      loading : null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    show : function(url)&#123;</span><br><span class="line">      this.wbview = plus.webview.getWebviewById(this.id);</span><br><span class="line">      console.log(this.wbview);</span><br><span class="line">      if(this.wbview)&#123;</span><br><span class="line">        if(url.indexOf(&apos;http&apos;) == -1)&#123;</span><br><span class="line">          url = &quot;http://&quot;+url;</span><br><span class="line">        &#125;</span><br><span class="line">        this.wbview.loadURL(url);</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        this.wbview = plus.webview.create(url, this.id, this.styles, this.extras);</span><br><span class="line">      &#125;</span><br><span class="line">      plus.webview.show(this.id, &apos;slide-out-right&apos;);</span><br><span class="line">    &#125;，</span><br><span class="line">     onClose()&#123;</span><br><span class="line">        if(this.wbview)&#123;</span><br><span class="line">            this.wbview.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted : function()&#123;</span><br><span class="line">    var _this = this;</span><br><span class="line">    this.styles = &#123;</span><br><span class="line">      titleNView:&#123;</span><br><span class="line">            titleOverflow: &apos;titleOverflow&apos;, </span><br><span class="line">            height: &apos;50px&apos;,</span><br><span class="line">            autoBackButton : true,</span><br><span class="line">            backgroundColor: &quot;#FFFFFF&quot;, </span><br><span class="line">            titleColor : &quot;#000000&quot; ,</span><br><span class="line">          	buttons: [&#123;</span><br><span class="line">                /* 字体文件自己阿里图标库下载，下面是关闭按钮*/</span><br><span class="line">              fontSrc : &quot;_www/static/font/iconfont.ttf&quot;,   </span><br><span class="line">              text:&apos;\ue690&apos;,</span><br><span class="line">              float:&apos;right&apos;,</span><br><span class="line">              onclick: this.onClose</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>界面引用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		...</span><br><span class="line">		&lt;v-webview ref=&quot;webview&quot;&gt;&lt;/v-webview&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import webview from &apos;@/components/include/webview.vue&apos;;</span><br><span class="line">    export default&#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">			</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">         components:&#123;</span><br><span class="line">            &quot;v-webview&quot; : webview</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            goWebview(url)&#123;</span><br><span class="line">                this.$refs.webview.show(url);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>这样就可以实现链接跳转，但是这样的话会导致返回出问题，所以需要对返回重新设计</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = [<span class="literal">null</span>, <span class="literal">null</span>];    <span class="comment">//记录返回的两次间隔时间</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.plus) &#123;</span><br><span class="line">    plusReady();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'plusready'</span>, plusReady, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plusReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> webview = plus.webview.currentWebview();</span><br><span class="line">    plus.key.addEventListener(<span class="string">'backbutton'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        webview.canBack(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (e.canBack) &#123;</span><br><span class="line">                <span class="comment">//link_view  为自定义的id，可更换，保持与组建上的一致</span></span><br><span class="line">                <span class="keyword">var</span> wbview = plus.webview.getWebviewById(<span class="string">'link_view'</span>);</span><br><span class="line">                <span class="keyword">if</span>(wbview)&#123;</span><br><span class="line">                    <span class="comment">//判断新窗口是否可以返回，不可以返回的时候才清除窗口</span></span><br><span class="line">                   wbview.canBack(<span class="function"><span class="keyword">function</span>(<span class="params">wb</span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(wb.canBack)&#123;</span><br><span class="line">                            wbview.back();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            plus.webview.close(<span class="string">'link_view'</span>, <span class="string">'slide-iny-right'</span>);</span><br><span class="line">                            wbview.clear();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    time = [<span class="literal">null</span>,<span class="literal">null</span>];   <span class="comment">//路由变化重置 time。</span></span><br><span class="line">                    router.go(<span class="number">-1</span>); <span class="comment">//返回上一级</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                time.shift();</span><br><span class="line">                time.push(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line">                <span class="keyword">if</span> (time[<span class="number">1</span>] - time[<span class="number">0</span>] &gt; <span class="number">2000</span>) &#123;  <span class="comment">//事件间隔大于 2s 当作第一次 点击返回，做出提示</span></span><br><span class="line">           <span class="comment">//plus.nativeUI.toast  h5+API的提示窗口详细使用请看api，默认前面有应用名称：tips</span></span><br><span class="line">                    plus.nativeUI.toast(<span class="string">"再按一次返回退出应用！"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    plus.runtime.quit();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第六个问题</p>
<p>第一次登录时语言跟随系统，后面再次进来就不干了。</p>
<p>解析：第一次进来没有缓存语言，所以设置系统语言，以后进来有缓存语言，直接跟随缓存语言</p>
<p>plus.os.language  获取系统设置的语言，但是安卓和苹果获取到的字段是不一样的。所以得区分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安卓：en_US   zh_TW   zh_CN</span></span><br><span class="line">     <span class="comment">//ios：en-CN  zh-Hans-CN  zh-Hant-CN   zh-Hant-HK  zh-Hant-TW  zh-Hant-MO</span></span><br><span class="line">     <span class="keyword">var</span> systemLang = plus.os.language;</span><br><span class="line">     <span class="keyword">var</span> lang;</span><br><span class="line">     <span class="keyword">if</span>(systemLang.indexOf(<span class="string">'en'</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">         lang = <span class="string">'en_us'</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(systemLang.indexOf(<span class="string">'zh-Hans-CN'</span>) &gt; <span class="number">-1</span> || systemLang.indexOf(<span class="string">'zh_CN'</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">         lang = <span class="string">'zh_cn'</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(systemLang.indexOf(<span class="string">'zh-Hant'</span>) &gt; <span class="number">-1</span> || systemLang.indexOf(<span class="string">'zh_TW'</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">         lang = <span class="string">'zh_tw'</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         lang = <span class="string">'other'</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(!localStorage.getItem(<span class="string">'lang'</span>))&#123;</span><br><span class="line">         <span class="keyword">if</span>(lang != <span class="string">'other'</span>)&#123;</span><br><span class="line">             i18n.locale = lang;</span><br><span class="line">             store.commit(<span class="string">"setLang"</span>,lang);</span><br><span class="line">             localStorage.setItem(<span class="string">'lang'</span>,lang);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<h4 id="第七个问题"><a href="#第七个问题" class="headerlink" title="第七个问题"></a>第七个问题</h4><p>监听网络状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> GL_HAVE_NET = navigator.onLine;   <span class="comment">//设置是否有网络</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局获取网络状态方法</span></span><br><span class="line">Vue.prototype.getNet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GL_HAVE_NET;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网络变化时调用的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onNetChange</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> nt = plus.networkinfo.getCurrentType();</span><br><span class="line">	<span class="keyword">switch</span> (nt)&#123;</span><br><span class="line">		<span class="keyword">case</span> plus.networkinfo.CONNECTION_ETHERNET:</span><br><span class="line">		<span class="keyword">case</span> plus.networkinfo.CONNECTION_WIFI:</span><br><span class="line">        GL_HAVE_NET = <span class="literal">true</span>;</span><br><span class="line">		<span class="comment">// _this.GL_ALERT("当前为wifi网络"); </span></span><br><span class="line">		<span class="keyword">break</span>; </span><br><span class="line">		<span class="keyword">case</span> plus.networkinfo.CONNECTION_CELL2G:</span><br><span class="line">		<span class="keyword">case</span> plus.networkinfo.CONNECTION_CELL3G:</span><br><span class="line">		<span class="keyword">case</span> plus.networkinfo.CONNECTION_CELL4G:</span><br><span class="line">        GL_HAVE_NET = <span class="literal">true</span>;</span><br><span class="line">		<span class="comment">// _this.GL_ALERT("当前为移动数据网络");</span></span><br><span class="line">		<span class="keyword">break</span>; </span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">        GL_HAVE_NET = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// _this.GL_ALERT("当前没有网络");</span></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!GL_HAVE_NET)&#123;</span><br><span class="line">        <span class="comment">//如果有网路变到没有网路提示网路异常</span></span><br><span class="line">        weui.toast(<span class="string">"网络异常"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="comment">//如果没有网路变到有网路页面刷新</span></span><br><span class="line">        <span class="built_in">window</span>.location.reload();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//H5+plus的监听网络变化，并调用onNetChange方法</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"netchange"</span>, onNetChange, <span class="literal">false</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面为h5的监听网络变化的方法</span></span><br><span class="line"><span class="comment">//部分手机不兼容（安卓低端机有些不行）</span></span><br><span class="line"><span class="comment">// var el = document.body;  </span></span><br><span class="line"><span class="comment">// if (el.addEventListener) &#123;  </span></span><br><span class="line"><span class="comment">//    window.addEventListener("online", function () &#123;  </span></span><br><span class="line"><span class="comment">//      GL_HAVE_NET = true;</span></span><br><span class="line"><span class="comment">//     //  alert(GL_HAVE_NET);</span></span><br><span class="line"><span class="comment">//     &#125;, true);  </span></span><br><span class="line"><span class="comment">//    window.addEventListener("offline", function () &#123;  </span></span><br><span class="line"><span class="comment">//      GL_HAVE_NET = false;</span></span><br><span class="line"><span class="comment">//     //  alert(GL_HAVE_NET);</span></span><br><span class="line"><span class="comment">//     &#125;, true);  </span></span><br><span class="line"><span class="comment">// &#125;  else if (el.attachEvent) &#123;  </span></span><br><span class="line"><span class="comment">//    window.attachEvent("ononline", function () &#123;  </span></span><br><span class="line"><span class="comment">//         GL_HAVE_NET = true;</span></span><br><span class="line"><span class="comment">//         // alert(GL_HAVE_NET);</span></span><br><span class="line"><span class="comment">//     &#125;);  </span></span><br><span class="line"><span class="comment">//    window.attachEvent("onoffline", function () &#123;  </span></span><br><span class="line"><span class="comment">//         GL_HAVE_NET = false;</span></span><br><span class="line"><span class="comment">//         // alert(GL_HAVE_NET);</span></span><br><span class="line"><span class="comment">//     &#125;);  </span></span><br><span class="line"><span class="comment">// &#125;  else &#123;  </span></span><br><span class="line"><span class="comment">//    window.ononline = function () &#123;  </span></span><br><span class="line"><span class="comment">//         GL_HAVE_NET = true;</span></span><br><span class="line"><span class="comment">//         // alert(GL_HAVE_NET);</span></span><br><span class="line"><span class="comment">//     &#125;;  </span></span><br><span class="line"><span class="comment">//    window.onoffline = function () &#123;  </span></span><br><span class="line"><span class="comment">//         GL_HAVE_NET = false;</span></span><br><span class="line"><span class="comment">//         // alert(GL_HAVE_NET);</span></span><br><span class="line"><span class="comment">//     &#125;;  </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发app总结</title>
    <url>/2019/12/14/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91app%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="web前端基于vue利用H5-接口开发APP总结"><a href="#web前端基于vue利用H5-接口开发APP总结" class="headerlink" title="web前端基于vue利用H5+接口开发APP总结"></a>web前端基于vue利用H5+接口开发APP总结</h3><h5 id="下载HbuilderX，并利用HbuilderX将web项目打包成App"><a href="#下载HbuilderX，并利用HbuilderX将web项目打包成App" class="headerlink" title="下载HbuilderX，并利用HbuilderX将web项目打包成App"></a>下载HbuilderX，并利用HbuilderX将web项目打包成App</h5><p>1 打开hbuildx软件，新建一个H5+app的空项目为  xiaobutest ，</p>
<p><img src="/2019/12/14/前端开发app总结/1576299772847.png" alt="1576299772847"></p>
<p>2 xiaobutest项目就会生成如下文件</p>
<p><img src="/2019/12/14/前端开发app总结/1576300223480.png" alt="1576300223480"></p>
<p>3  将可删除和可替换的文件删除掉，然后将 vue打包后生成的dist文件夹下的文件放置到xiaobutest下。文件如下</p>
<p><img src="/2019/12/14/前端开发app总结/1576300381128.png" alt="1576300381128"></p>
<p>4 打开manifest.json文件对app进行配置</p>
<p><img src="/2019/12/14/前端开发app总结/1576300798774.png" alt="1576300798774"></p>
<p><img src="/2019/12/14/前端开发app总结/1576301012667.png" alt="1576301012667"></p>
<p>上面的图标问题讲错了，是只能选择png图标，但是不能有透明的地方，否则applestore审核不通过，打包也可能失败。</p>
<p><img src="/2019/12/14/前端开发app总结/1576301284946.png" alt="1576301284946"></p>
<p><img src="/2019/12/14/前端开发app总结/1576301836792.png" alt="1576301836792"></p>
<p><img src="/2019/12/14/前端开发app总结/1576301960583.png" alt="1576301960583"></p>
<p><img src="/2019/12/14/前端开发app总结/1576302098656.png" alt="1576302098656"></p>
<p><img src="/2019/12/14/前端开发app总结/1576302202716.png" alt="1576302202716"></p>
<p>源码配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"@platforms"</span> : [ <span class="string">"android"</span>, <span class="string">"iPhone"</span>, <span class="string">"iPad"</span> ],</span><br><span class="line">    <span class="attr">"id"</span> : <span class="string">"H553BC94C"</span>, <span class="comment">/*应用的标识，创建应用时自动生成，勿手动修改*/</span></span><br><span class="line">    <span class="attr">"name"</span> : <span class="string">"有课"</span>, <span class="comment">/*应用名称，程序桌面图标名称*/</span></span><br><span class="line">    <span class="attr">"version"</span> : &#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">"1.3.3"</span>, <span class="comment">/*应用版本名称*/</span></span><br><span class="line">        <span class="attr">"code"</span> : <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"description"</span> : <span class="string">""</span>, <span class="comment">/*应用描述信息*/</span></span><br><span class="line">    <span class="attr">"icons"</span> : &#123;</span><br><span class="line">        <span class="attr">"72"</span> : <span class="string">"icon.png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"launch_path"</span> : <span class="string">"index.html"</span>, <span class="comment">/*应用的入口页面，默认为根目录下的index.html；支持网络地址，必须以http://或https://开头*/</span></span><br><span class="line">    <span class="attr">"developer"</span> : &#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">""</span>, <span class="comment">/*开发者名称*/</span></span><br><span class="line">        <span class="attr">"email"</span> : <span class="string">""</span>, <span class="comment">/*开发者邮箱地址*/</span></span><br><span class="line">        <span class="attr">"url"</span> : <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"permissions"</span> : &#123;</span><br><span class="line">        <span class="attr">"Cache"</span> : &#123;</span><br><span class="line">            <span class="attr">"description"</span> : <span class="string">"管理应用缓存"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"Console"</span> : &#123;</span><br><span class="line">            <span class="attr">"description"</span> : <span class="string">"跟踪调试输出日志"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"Events"</span> : &#123;</span><br><span class="line">            <span class="attr">"description"</span> : <span class="string">"应用扩展事件"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"Push"</span> : &#123;&#125;,</span><br><span class="line">        <span class="attr">"VideoPlayer"</span> : &#123;&#125;,</span><br><span class="line">        <span class="attr">"Speech"</span> : &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"plus"</span> : &#123;</span><br><span class="line">		<span class="attr">"locales"</span>:&#123;</span><br><span class="line">			<span class="attr">"zh"</span>: &#123;<span class="comment">//中文（简体）  </span></span><br><span class="line">				<span class="attr">"name"</span>: <span class="string">"有课"</span>,  </span><br><span class="line">				<span class="attr">"ios"</span>: &#123;  </span><br><span class="line">					<span class="attr">"privacyDescription"</span> : &#123;</span><br><span class="line">					    <span class="attr">"NSPhotoLibraryUsageDescription"</span> : <span class="string">"允许应用访问相册,用来上传图片附件功能"</span>,</span><br><span class="line">					    <span class="attr">"NSCameraUsageDescription"</span> : <span class="string">"允许应用使用相机,用来扫描二维码以及拍照功能"</span>,</span><br><span class="line">					    <span class="attr">"NSPhotoLibraryAddUsageDescription"</span> : <span class="string">"允许应用保存图片至本机,用来上传图片附件功能"</span>,</span><br><span class="line">					    <span class="attr">"NSMicrophoneUsageDescription"</span> : <span class="string">"允许应用使用麦克风,用于老师点评作业使用"</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,  </span><br><span class="line">			<span class="attr">"zh-TW"</span>: &#123;<span class="comment">//中文繁体（台湾)</span></span><br><span class="line">				<span class="attr">"name"</span>: <span class="string">"有課"</span>,</span><br><span class="line">				<span class="attr">"ios"</span>: &#123;</span><br><span class="line">					<span class="attr">"privacyDescription"</span> : &#123;</span><br><span class="line">					    <span class="attr">"NSPhotoLibraryUsageDescription"</span> : <span class="string">"允許應用訪問相冊,用來上傳圖片附件功能"</span>,</span><br><span class="line">					    <span class="attr">"NSCameraUsageDescription"</span> : <span class="string">"允許應用使用相機,用來掃描二維碼以及拍照功能"</span>,</span><br><span class="line">					    <span class="attr">"NSPhotoLibraryAddUsageDescription"</span> : <span class="string">"允許應用保存圖片至本機,用來上傳圖片附件功能"</span>,</span><br><span class="line">					    <span class="attr">"NSMicrophoneUsageDescription"</span> : <span class="string">"允許應用使用麥克風,用於老師點評作業使用"</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,  </span><br><span class="line">			<span class="attr">"zh-HK"</span>: &#123;<span class="comment">//中文繁体（香港）  </span></span><br><span class="line">				<span class="attr">"name"</span>: <span class="string">"有課"</span>,</span><br><span class="line">				<span class="attr">"ios"</span>: &#123;</span><br><span class="line">					<span class="attr">"privacyDescription"</span> : &#123;</span><br><span class="line">					    <span class="attr">"NSPhotoLibraryUsageDescription"</span> : <span class="string">"允許應用訪問相冊,用來上傳圖片附件功能"</span>,</span><br><span class="line">					    <span class="attr">"NSCameraUsageDescription"</span> : <span class="string">"允許應用使用相機,用來掃描二維碼以及拍照功能"</span>,</span><br><span class="line">					    <span class="attr">"NSPhotoLibraryAddUsageDescription"</span> : <span class="string">"允許應用保存圖片至本機,用來上傳圖片附件功能"</span>,</span><br><span class="line">					    <span class="attr">"NSMicrophoneUsageDescription"</span> : <span class="string">"允許應用使用麥克風,用於老師點評作業使用"</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,  </span><br><span class="line">			<span class="attr">"en"</span>: &#123;  </span><br><span class="line">				<span class="attr">"name"</span>: <span class="string">"UClass"</span>,</span><br><span class="line">				<span class="attr">"ios"</span>: &#123;</span><br><span class="line">					<span class="attr">"privacyDescription"</span> : &#123;</span><br><span class="line">						<span class="attr">"NSPhotoLibraryUsageDescription"</span> : <span class="string">"Alllow UClass to access your album in Settings"</span>,</span><br><span class="line">						<span class="attr">"NSCameraUsageDescription"</span> : <span class="string">"Allow UClass to access your camera in Settings"</span>,</span><br><span class="line">						<span class="attr">"NSPhotoLibraryAddUsageDescription"</span> : <span class="string">"Alllow UClass to access your album in Settings"</span>,</span><br><span class="line">						<span class="attr">"NSMicrophoneUsageDescription"</span> : <span class="string">"Allow UClass to access your microphone in Settings"</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;  </span><br><span class="line">		&#125;,  </span><br><span class="line">		<span class="attr">"safearea"</span>:&#123;</span><br><span class="line">			<span class="attr">"background"</span>:<span class="string">"#ffffff"</span>,</span><br><span class="line">			<span class="attr">"bottom"</span>:&#123;</span><br><span class="line">				<span class="attr">"offset"</span>: <span class="string">"auto"</span>    <span class="comment">/*解决iphoneX系列底部横杠问题*/</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">        <span class="attr">"splashscreen"</span> : &#123;</span><br><span class="line">            <span class="attr">"autoclose"</span> : <span class="literal">true</span>, <span class="comment">/*是否自动关闭程序启动界面，true表示应用加载应用入口页面后自动关闭；false则需调plus.navigator.closeSplashscreen()关闭*/</span></span><br><span class="line">            <span class="attr">"waiting"</span> : <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"popGesture"</span> : <span class="string">"close"</span>, <span class="comment">/*设置应用默认侧滑返回关闭Webview窗口，"none"为无侧滑返回功能，"hide"为侧滑隐藏Webview窗口。参考http://ask.dcloud.net.cn/article/102*/</span></span><br><span class="line">        <span class="attr">"runmode"</span> : <span class="string">"normal"</span>, <span class="comment">/*应用的首次启动运行模式，可取liberate或normal，liberate模式在第一次启动时将解压应用资源（Android平台File API才可正常访问_www目录）*/</span></span><br><span class="line">        <span class="attr">"signature"</span> : <span class="string">"Sk9JTiBVUyBtYWlsdG86aHIyMDEzQGRjbG91ZC5pbw=="</span>, <span class="comment">/*可选，保留给应用签名，暂不使用*/</span></span><br><span class="line">        <span class="attr">"distribute"</span> : &#123;</span><br><span class="line">            <span class="attr">"plugins"</span> : &#123;</span><br><span class="line">                <span class="attr">"push"</span> : &#123;</span><br><span class="line">                    <span class="attr">"igexin"</span> : &#123;</span><br><span class="line">                        <span class="attr">"appid"</span> : <span class="string">"PLGJS93Osc9QhkjR2iiW41"</span>,</span><br><span class="line">                        <span class="attr">"appkey"</span> : <span class="string">"hkKagRaTFV6KhZuyKnEaF9"</span>,</span><br><span class="line">                        <span class="attr">"appsecret"</span> : <span class="string">"xG4dJznxZs6xD5M8yQBl39"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"speech"</span> : &#123;</span><br><span class="line">                    <span class="attr">"ifly"</span> : &#123;&#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"payment"</span> : &#123;&#125;,</span><br><span class="line">                <span class="attr">"oauth"</span> : &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"apple"</span> : &#123;</span><br><span class="line">                <span class="attr">"appid"</span> : <span class="string">""</span>, <span class="comment">/*iOS应用标识，苹果开发网站申请的appid，如io.dcloud.HelloH5*/</span></span><br><span class="line">                <span class="attr">"mobileprovision"</span> : <span class="string">""</span>, <span class="comment">/*iOS应用打包配置文件*/</span></span><br><span class="line">                <span class="attr">"password"</span> : <span class="string">""</span>, <span class="comment">/*iOS应用打包个人证书导入密码*/</span></span><br><span class="line">                <span class="attr">"p12"</span> : <span class="string">""</span>, <span class="comment">/*iOS应用打包个人证书，打包配置文件关联的个人证书*/</span></span><br><span class="line">                <span class="attr">"devices"</span> : <span class="string">"universal"</span>, <span class="comment">/*iOS应用支持的设备类型，可取值iphone/ipad/universal*/</span></span><br><span class="line">                <span class="attr">"frameworks"</span> : [],</span><br><span class="line">                <span class="attr">"privacyDescription"</span> : &#123;</span><br><span class="line">                    <span class="attr">"NSPhotoLibraryUsageDescription"</span> : <span class="string">"允许应用访问相册,用来上传图片附件功能"</span>,</span><br><span class="line">                    <span class="attr">"NSCameraUsageDescription"</span> : <span class="string">"允许应用使用相机,用来扫描二维码以及拍照功能"</span>,</span><br><span class="line">                    <span class="attr">"NSPhotoLibraryAddUsageDescription"</span> : <span class="string">"允许应用保存图片至本机，用来上传图片附件功能"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"google"</span> : &#123;</span><br><span class="line">                <span class="attr">"packagename"</span> : <span class="string">""</span>, <span class="comment">/*Android应用包名，如io.dcloud.HelloH5*/</span></span><br><span class="line">                <span class="attr">"keystore"</span> : <span class="string">""</span>, <span class="comment">/*Android应用打包使用的密库文件*/</span></span><br><span class="line">                <span class="attr">"password"</span> : <span class="string">""</span>, <span class="comment">/*Android应用打包使用密钥库中证书的密码*/</span></span><br><span class="line">                <span class="attr">"aliasname"</span> : <span class="string">""</span>, <span class="comment">/*Android应用打包使用密钥库中证书的别名*/</span></span><br><span class="line">                <span class="attr">"permissions"</span> : [</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/&gt;"</span>,</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\"/&gt;"</span>,</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.CALL_PHONE\"/&gt;"</span>,</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.CAMERA\"/&gt;"</span>,</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\"/&gt;"</span>,</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;"</span>,</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\"/&gt;"</span>,</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/&gt;"</span>,</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\"/&gt;"</span>,</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/&gt;"</span>,</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.RECORD_AUDIO\"/&gt;"</span>,</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/&gt;"</span>,</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.VIBRATE\"/&gt;"</span>,</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.WAKE_LOCK\"/&gt;"</span>,</span><br><span class="line">                    <span class="string">"&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt;"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"orientation"</span> : [ <span class="string">"portrait-primary"</span> ], <span class="comment">/*应用支持的方向，portrait-primary：竖屏正方向；portrait-secondary：竖屏反方向；landscape-primary：横屏正方向；landscape-secondary：横屏反方向*/</span></span><br><span class="line">            <span class="attr">"icons"</span> : &#123;</span><br><span class="line">                <span class="attr">"ios"</span> : &#123;</span><br><span class="line">                    <span class="attr">"prerendered"</span> : <span class="literal">true</span>, <span class="comment">/*应用图标是否已经高亮处理，在iOS6及以下设备上有效*/</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">/*应用图标，分辨率：512x512，用于自动生成各种尺寸程序图标*/</span></span><br><span class="line">                    <span class="attr">"iphone"</span> : &#123;</span><br><span class="line">                        <span class="attr">"normal"</span> : <span class="string">""</span>, <span class="comment">/*iPhone3/3GS程序图标，分辨率：57x57*/</span></span><br><span class="line">                        <span class="attr">"retina"</span> : <span class="string">""</span>, <span class="comment">/*iPhone4程序图标，分辨率：114x114*/</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">/*iPhone4S/5/6程序图标，分辨率：120x120*/</span><span class="comment">/*iPhone6 Plus程序图标，分辨率：180x180*/</span></span><br><span class="line">                        <span class="attr">"spotlight-normal"</span> : <span class="string">""</span>, <span class="comment">/*iPhone3/3GS Spotlight搜索程序图标，分辨率：29x29*/</span></span><br><span class="line">                        <span class="attr">"spotlight-retina"</span> : <span class="string">""</span>, <span class="comment">/*iPhone4 Spotlight搜索程序图标，分辨率：58x58*/</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">/*iPhone4S/5/6 Spotlight搜索程序图标，分辨率：80x80*/</span></span><br><span class="line">                        <span class="attr">"settings-normal"</span> : <span class="string">""</span>, <span class="comment">/*iPhone4设置页面程序图标，分辨率：29x29*/</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">/*iPhone4S/5/6设置页面程序图标，分辨率：58x58*/</span></span><br><span class="line">                        <span class="attr">"app@2x"</span> : <span class="string">"unpackage/res/icons/120x120.png"</span>,</span><br><span class="line">                        <span class="attr">"app@3x"</span> : <span class="string">"unpackage/res/icons/180x180.png"</span>,</span><br><span class="line">                        <span class="attr">"settings@3x"</span> : <span class="string">"unpackage/res/icons/87x87.png"</span>,</span><br><span class="line">                        <span class="attr">"settings@2x"</span> : <span class="string">"unpackage/res/icons/58x58.png"</span>,</span><br><span class="line">                        <span class="attr">"spotlight@2x"</span> : <span class="string">"unpackage/res/icons/80x80.png"</span>,</span><br><span class="line">                        <span class="attr">"spotlight@3x"</span> : <span class="string">"unpackage/res/icons/120x120.png"</span>,</span><br><span class="line">                        <span class="attr">"notification@3x"</span> : <span class="string">"unpackage/res/icons/60x60.png"</span>,</span><br><span class="line">                        <span class="attr">"notification@2x"</span> : <span class="string">"unpackage/res/icons/40x40.png"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"ipad"</span> : &#123;</span><br><span class="line">                        <span class="attr">"normal"</span> : <span class="string">""</span>, <span class="comment">/*iPad普通屏幕程序图标，分辨率：72x72*/</span></span><br><span class="line">                        <span class="attr">"retina"</span> : <span class="string">""</span>, <span class="comment">/*iPad高分屏程序图标，分辨率：144x144*/</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">/*iPad iOS7程序图标，分辨率：76x76*/</span><span class="comment">/*iPad iOS7高分屏程序图标，分辨率：152x152*/</span></span><br><span class="line">                        <span class="attr">"spotlight-normal"</span> : <span class="string">""</span>, <span class="comment">/*iPad Spotlight搜索程序图标，分辨率：50x50*/</span></span><br><span class="line">                        <span class="attr">"spotlight-retina"</span> : <span class="string">""</span>, <span class="comment">/*iPad高分屏Spotlight搜索程序图标，分辨率：100x100*/</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">/*iPad iOS7 Spotlight搜索程序图标，分辨率：40x40*/</span><span class="comment">/*iPad iOS7高分屏Spotlight搜索程序图标，分辨率：80x80*/</span><span class="comment">/*iPad设置页面程序图标，分辨率：29x29*/</span></span><br><span class="line">                        <span class="attr">"app"</span> : <span class="string">"unpackage/res/icons/76x76.png"</span>,</span><br><span class="line">                        <span class="attr">"app@2x"</span> : <span class="string">"unpackage/res/icons/152x152.png"</span>,</span><br><span class="line">                        <span class="attr">"settings"</span> : <span class="string">"unpackage/res/icons/29x29.png"</span>,</span><br><span class="line">                        <span class="attr">"proapp@2x"</span> : <span class="string">"unpackage/res/icons/167x167.png"</span>,</span><br><span class="line">                        <span class="attr">"spotlight"</span> : <span class="string">"unpackage/res/icons/40x40.png"</span>,</span><br><span class="line">                        <span class="attr">"settings@2x"</span> : <span class="string">"unpackage/res/icons/58x58.png"</span>,</span><br><span class="line">                        <span class="attr">"notification"</span> : <span class="string">"unpackage/res/icons/20x20.png"</span>,</span><br><span class="line">                        <span class="attr">"spotlight@2x"</span> : <span class="string">"unpackage/res/icons/80x80.png"</span>,</span><br><span class="line">                        <span class="attr">"notification@2x"</span> : <span class="string">"unpackage/res/icons/40x40.png"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"appstore"</span> : <span class="string">"unpackage/res/icons/1024x1024.png"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"android"</span> : &#123;</span><br><span class="line">                    <span class="attr">"mdpi"</span> : <span class="string">"unpackage/res/icons/48x48.png"</span>, <span class="comment">/*普通屏程序图标，分辨率：48x48*/</span></span><br><span class="line">                    <span class="attr">"ldpi"</span> : <span class="string">"unpackage/res/icons/48x48.png"</span>, <span class="comment">/*大屏程序图标，分辨率：48x48*/</span></span><br><span class="line">                    <span class="attr">"hdpi"</span> : <span class="string">"unpackage/res/icons/72x72.png"</span>, <span class="comment">/*高分屏程序图标，分辨率：72x72*/</span></span><br><span class="line">                    <span class="attr">"xhdpi"</span> : <span class="string">"unpackage/res/icons/96x96.png"</span>, <span class="comment">/*720P高分屏程序图标，分辨率：96x96*/</span></span><br><span class="line">                    <span class="attr">"xxhdpi"</span> : <span class="string">"unpackage/res/icons/144x144.png"</span>,</span><br><span class="line">                    <span class="attr">"xxxhdpi"</span> : <span class="string">"unpackage/res/icons/192x192.png"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"splashscreen"</span> : &#123;</span><br><span class="line">                <span class="attr">"ios"</span> : &#123;</span><br><span class="line">                    <span class="attr">"iphone"</span> : &#123;</span><br><span class="line">                        <span class="attr">"default"</span> : <span class="string">""</span>, <span class="comment">/*iPhone3启动图片选，分辨率：320x480*/</span></span><br><span class="line">                        <span class="attr">"retina35"</span> : <span class="string">"D:/work/uclass-xiaobu/sc-wxstu/static/images/app_config/Android720x1280.png"</span>, <span class="comment">/*3.5英寸设备(iPhone4)启动图片，分辨率：640x960*/</span></span><br><span class="line">                        <span class="attr">"retina40"</span> : <span class="string">"D:/work/uclass-xiaobu/sc-wxstu/static/images/app_config/Android720x1280.png"</span>, <span class="comment">/*4.0 英寸设备(iPhone5/iPhone5s)启动图片，分辨率：640x1136*/</span></span><br><span class="line">                        <span class="attr">"retina47"</span> : <span class="string">"D:/work/uclass-xiaobu/sc-wxstu/static/images/app_config/Android375x667.png"</span>, <span class="comment">/*4.7 英寸设备(iPhone6)启动图片，分辨率：750x1334*/</span></span><br><span class="line">                        <span class="attr">"retina55"</span> : <span class="string">"D:/work/uclass-xiaobu/sc-wxstu/static/images/app_config/iPhoneX1125x2436.png"</span>, <span class="comment">/*5.5 英寸设备(iPhone6 Plus)启动图片，分辨率：1242x2208*/</span></span><br><span class="line">                        <span class="attr">"retina55l"</span> : <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"iphonex"</span> : <span class="string">"D:/work/uclass-xiaobu/sc-wxstu/static/images/app_config/iPhoneX1125x2436.png"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"ipad"</span> : &#123;</span><br><span class="line">                        <span class="attr">"portrait"</span> : <span class="string">"D:/work/uclass-xiaobu/sc-wxstu/static/images/app_config/Android720x1280.png"</span>, <span class="comment">/*iPad竖屏启动图片，分辨率：768x1004*/</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">/*iPad高分屏竖屏图片，分辨率：1536x2008*/</span></span><br><span class="line">                        <span class="attr">"landscape"</span> : <span class="string">""</span>, <span class="comment">/*iPad横屏启动图片，分辨率：1024x748*/</span></span><br><span class="line">                        <span class="attr">"landscape-retina"</span> : <span class="string">""</span>, <span class="comment">/*iPad高分屏横屏启动图片，分辨率：2048x1496*/</span></span><br><span class="line">                        <span class="attr">"portrait7"</span> : <span class="string">"D:/work/uclass-xiaobu/sc-wxstu/static/images/app_config/Android720x1280.png"</span>, <span class="comment">/*iPad iOS7竖屏启动图片，分辨率：768x1024*/</span></span><br><span class="line">                        <span class="attr">"portrait-retina7"</span> : <span class="string">"D:/work/uclass-xiaobu/sc-wxstu/static/images/app_config/ipad 1536X2048.png"</span>, <span class="comment">/*iPad iOS7高分屏竖屏图片，分辨率：1536x2048*/</span></span><br><span class="line">                        <span class="attr">"landscape7"</span> : <span class="string">"D:/work/uclass-xiaobu/sc-wxstu/static/images/app_config/Android1080x1920.png"</span>, <span class="comment">/*iPad iOS7横屏启动图片，分辨率：1024x768*/</span></span><br><span class="line">                        <span class="attr">"landscape-retina7"</span> : <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"portrait-retina"</span> : <span class="string">"D:/work/uclass-xiaobu/sc-wxstu/static/images/app_config/ipad 1536X2048.png"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"android"</span> : &#123;</span><br><span class="line">                    <span class="attr">"mdpi"</span> : <span class="string">""</span>, <span class="comment">/*普通屏启动图片，分辨率：240x282*/</span></span><br><span class="line">                    <span class="attr">"ldpi"</span> : <span class="string">""</span>, <span class="comment">/*大屏启动图片，分辨率：320x442*/</span></span><br><span class="line">                    <span class="attr">"hdpi"</span> : <span class="string">"D:/work/uclass-xiaobu/sc-wxstu/static/images/app_config/Android375x667.png"</span>, <span class="comment">/*高分屏启动图片，分辨率：480x762*/</span></span><br><span class="line">                    <span class="attr">"xhdpi"</span> : <span class="string">"D:/work/uclass-xiaobu/sc-wxstu/static/images/app_config/Android720x1280.png"</span>, <span class="comment">/*720P高分屏启动图片，分辨率：720x1242*/</span></span><br><span class="line">                    <span class="attr">"xxhdpi"</span> : <span class="string">"D:/work/uclass-xiaobu/sc-wxstu/static/images/app_config/Android1080x1920.png"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"dependencies"</span> : &#123;</span><br><span class="line">        <span class="attr">"pages"</span> : &#123;</span><br><span class="line">            <span class="attr">"index.html"</span> : &#123;</span><br><span class="line">                <span class="attr">"href"</span> : <span class="string">"index.html"</span>,</span><br><span class="line">                <span class="attr">"resources"</span> : [ <span class="string">"static/svg/loading.svg"</span> ],</span><br><span class="line">                <span class="attr">"priority"</span> : <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"idle"</span> : &#123;</span><br><span class="line">            <span class="attr">"resources"</span> : [</span><br><span class="line">                <span class="string">"static/images/teacher/delete_img.png"</span>,</span><br><span class="line">                <span class="string">"static/js/26.2e209f7a31c67645cd17.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_btn_xz@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/sjz_qh@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/40.0d52cfa1c7d05d87380a.js"</span>,</span><br><span class="line">                <span class="string">"static/js/5.70e29c0a6329537db4b2.js"</span>,</span><br><span class="line">                <span class="string">"static/js/16.18e0ca2fb6b0fdb39904.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/course/3.png"</span>,</span><br><span class="line">                <span class="string">"static/images/sjz_g@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_xq_tz@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/76.a945c2b73d728c061af3.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/sjz_sh@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/good_big.png"</span>,</span><br><span class="line">                <span class="string">"static/js/record.js"</span>,</span><br><span class="line">                <span class="string">"static/js/33.f53b62dd3c0c6619122b.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/footer_msg.png"</span>,</span><br><span class="line">                <span class="string">"static/lang/zh-CN.js"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_kp_bg@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/course_bg_gray@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/14.68e1922ee459f196bf8b.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/hu.js"</span>,</span><br><span class="line">                <span class="string">"static/img/8-bg.07ae696.png"</span>,</span><br><span class="line">                <span class="string">"static/js/6.b2048bdcbb1f969aefdf.js"</span>,</span><br><span class="line">                <span class="string">"static/js/56.fc5005d969da42c68bc0.js"</span>,</span><br><span class="line">                <span class="string">"static/js/27.1326df69a26889652fd6.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/xitong.png"</span>,</span><br><span class="line">                <span class="string">"static/images/login/ico_fuwuqidizhi@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/css/teacher/courseware/detail.css"</span>,</span><br><span class="line">                <span class="string">"static/images/courseware/courseware_blue.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/url.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/ko.js"</span>,</span><br><span class="line">                <span class="string">"static/images/login/ico_mima.png"</span>,</span><br><span class="line">                <span class="string">"static/js/teacher/reg.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/ja.js"</span>,</span><br><span class="line">                <span class="string">"static/js/71.6905b7eca93d75949006.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/no_n.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/bg.js"</span>,</span><br><span class="line">                <span class="string">"static/js/10.b9083fe2d547cdc4b9c6.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/icon_kecheng@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/courseware/responder-ok.png"</span>,</span><br><span class="line">                <span class="string">"static/images/more@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/edit@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/39.2c7f53f140893d7d48d3.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/renwu.png"</span>,</span><br><span class="line">                <span class="string">"static/js/util.js"</span>,</span><br><span class="line">                <span class="string">"static/css/student/course/interaction.css"</span>,</span><br><span class="line">                <span class="string">"static/js/35.6cb97a5cf8e96c570a3b.js"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/url.png"</span>,</span><br><span class="line">                <span class="string">"static/js/40.0d52cfa1c7d05d87380a.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/course/icon_saoma.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/footer_course1.png"</span>,</span><br><span class="line">                <span class="string">"static/js/5.70e29c0a6329537db4b2.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_launch_s@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/app_config/start_icon2.png"</span>,</span><br><span class="line">                <span class="string">"static/js/42.b6dd165ebc6c1378bcf8.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_tx_bg@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_face_female.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/user.png"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/ppt.png"</span>,</span><br><span class="line">                <span class="string">"static/js/16.18e0ca2fb6b0fdb39904.js"</span>,</span><br><span class="line">                <span class="string">"static/js/27.1326df69a26889652fd6.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/ka.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseList_bg_red.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/blackpic@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseware_zi.png"</span>,</span><br><span class="line">                <span class="string">"static/images/login/ico_tishi@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/pdf.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/2-s.png"</span>,</span><br><span class="line">                <span class="string">"static/js/32.26a5a6fd92f00e0289c2.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/sv.js"</span>,</span><br><span class="line">                <span class="string">"static/images/course/2-bg.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/card-green.png"</span>,</span><br><span class="line">                <span class="string">"static/css/app.a147bb1114e3b5709cf48eb9c1574424.css"</span>,</span><br><span class="line">                <span class="string">"static/img/5.b8926d4.png"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/audio.png"</span>,</span><br><span class="line">                <span class="string">"static/js/19.85afabdaf045c2519b74.js"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/excel-s.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/plus.png"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_bg_c@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/login/banner@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/btn-group.png"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_cw_bg@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/65.821ff86b65ac72900f2f.js"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_g@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/css/student/task.css"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/course_bg_blue@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/24.77d4995a6babde8d114f.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/th_TH.js"</span>,</span><br><span class="line">                <span class="string">"static/css/courseDetailCommon.css"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/loading.gif"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/pt_BR.js"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_t@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/girl.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/voice-rec.png"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_launch_s@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/top@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/19.85afabdaf045c2519b74.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/de.js"</span>,</span><br><span class="line">                <span class="string">"static/css/teacher/missionDetail.css"</span>,</span><br><span class="line">                <span class="string">"static/js/56.fc5005d969da42c68bc0.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/74.078e4d992daa0653a8cc.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/video.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/msg.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_xz_g@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_xh_bg@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseList_bg_zi.png"</span>,</span><br><span class="line">                <span class="string">"static/img/6-bg.70615bc.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_xz_g@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/ku_IQ.js"</span>,</span><br><span class="line">                <span class="string">"static/js/68.733eacf4768630deb831.js.map"</span>,</span><br><span class="line">                <span class="string">"static/img/7-bg.2f62feb.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_nice_l@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/rednow@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/more_w@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/17.6abbaa99245e826047f5.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/37.65535faa1f357f16f702.js"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/video.png"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_g_1@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseware_orange.png"</span>,</span><br><span class="line">                <span class="string">"static/css/quiz.css"</span>,</span><br><span class="line">                <span class="string">"static/images/mustcard@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/quiz-wrong.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_mes_g@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/config/app-config.json"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/no3.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/shangla_more.png"</span>,</span><br><span class="line">                <span class="string">"static/images/boy@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/css/student/group/vote.css"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_btn_mr@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/9.005d3c492b7abd559677.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/da.js"</span>,</span><br><span class="line">                <span class="string">"static/images/pic@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/USB@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/check_box2.png"</span>,</span><br><span class="line">                <span class="string">"static/js/55.4ab8e60895318983eaf6.js"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_cy@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/footer_msg.png"</span>,</span><br><span class="line">                <span class="string">"static/css/student/group/index.css"</span>,</span><br><span class="line">                <span class="string">"static/css/course.css"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_right_g@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/page@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/btn_wd_tj@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/delete_img.png"</span>,</span><br><span class="line">                <span class="string">"static/images/up_rs@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_right_s_g@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/rar.png"</span>,</span><br><span class="line">                <span class="string">"static/font/icomoon.ttf"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/minx.png"</span>,</span><br><span class="line">                <span class="string">"static/css/teacher/course/detail.css"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/duoxuan_small.png"</span>,</span><br><span class="line">                <span class="string">"static/js/46.2aced9230cd815686141.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/course_bg_yellow@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/ppt.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/4.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/el.js"</span>,</span><br><span class="line">                <span class="string">"static/images/delete@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/photoswipe/default-skin/preloader.gif"</span>,</span><br><span class="line">                <span class="string">"static/js/class-quiz/index.js"</span>,</span><br><span class="line">                <span class="string">"static/img/4.b0801bb.png"</span>,</span><br><span class="line">                <span class="string">"static/images/launch@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_xh_r@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseList_bg_zi@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/card_yellow.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/shangla_more1.png"</span>,</span><br><span class="line">                <span class="string">"static/js/53.fcea8d2e276463b5f13e.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/dele_s@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_book_g@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseList_bg_pink.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/report-bg.png"</span>,</span><br><span class="line">                <span class="string">"static/images/login/ico_mima@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/28.5818d59dace26f3dbf8e.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/plupload.full.min.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/nl.js"</span>,</span><br><span class="line">                <span class="string">"static/js/68.733eacf4768630deb831.js"</span>,</span><br><span class="line">                <span class="string">"static/images/wechat/student.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_mes@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/list_delete.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseList_bg_green@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/close_tc@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/photoswipe/default-skin/default-skin.svg"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/moxie.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/moxie.min.js"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_mes@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/ppt_1.png"</span>,</span><br><span class="line">                <span class="string">"static/js/23.02b9f64c1831f5f6d17c.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_fin@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/54.019b9806e164eb68499e.js"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/url-s.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/danxuan_small.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/whiteplus.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/footer_msg_on.png"</span>,</span><br><span class="line">                <span class="string">"static/images/login/ico_xuehao.png"</span>,</span><br><span class="line">                <span class="string">"static/js/22.1372eba9688406e9a888.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/49.34a5ee6e610c7934bf29.js.map"</span>,</span><br><span class="line">                <span class="string">"static/css/common.css"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/green_now_1.png"</span>,</span><br><span class="line">                <span class="string">"static/js/photoswipe/photoswipe.min.js"</span>,</span><br><span class="line">                <span class="string">"static/js/63.d3510f4e0e4eefe64c6b.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/card_red.png"</span>,</span><br><span class="line">                <span class="string">"static/js/manifest.da10c0ea397152ee43b4.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_bg_z@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/whiteplus.png"</span>,</span><br><span class="line">                <span class="string">"static/images/sjz_g@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/close_tc@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/course/course-common.js"</span>,</span><br><span class="line">                <span class="string">"static/css/student/course/detail.css"</span>,</span><br><span class="line">                <span class="string">"static/img/8.111135d.png"</span>,</span><br><span class="line">                <span class="string">"static/images/sjz_qh@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/50.b0c4c66c0111e1e3635d.js"</span>,</span><br><span class="line">                <span class="string">"static/js/8.ea9c8e9d4b70d277e92b.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/13.22c2b93aa0508d520996.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/ru.js"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_xz_w@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/photoswipe/default-skin/default-skin.css"</span>,</span><br><span class="line">                <span class="string">"static/images/course/5-bg.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/daantongji.png"</span>,</span><br><span class="line">                <span class="string">"static/js/photoswipe/photoswipe.css"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_bg_sh@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/9.005d3c492b7abd559677.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseList_bg_green.png"</span>,</span><br><span class="line">                <span class="string">"static/js/63.d3510f4e0e4eefe64c6b.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/close@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/footer_mine_on.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_book@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/img/word.a91ffb8.png"</span>,</span><br><span class="line">                <span class="string">"static/images/pic-s@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/footer_course_on1.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/course_bg_zi@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/btn_r_b@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/48.0e1627cbf94504061dc7.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/courseware/courseware_orange.png"</span>,</span><br><span class="line">                <span class="string">"static/images/app_config/return.png"</span>,</span><br><span class="line">                <span class="string">"static/images/app_config/Android720x1280.png"</span>,</span><br><span class="line">                <span class="string">"static/images/personalCenter/jiantou_right@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_t@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/css/teacher/missionItem.css"</span>,</span><br><span class="line">                <span class="string">"static/js/0.5a0076969dd89e2068d6.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/up_rs@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/icon_saoma@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/1-bg.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/excel.png"</span>,</span><br><span class="line">                <span class="string">"static/css/student/group/vote-result.css"</span>,</span><br><span class="line">                <span class="string">"static/images/page@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/course_bg_green@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/logo-admin-login.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_right_s_g@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_xq_zs@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ketang.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/left_line.png"</span>,</span><br><span class="line">                <span class="string">"static/js/29.6eaeabde1c2d204e7fb2.js.map"</span>,</span><br><span class="line">                <span class="string">"static/css/student/course.css"</span>,</span><br><span class="line">                <span class="string">"static/js/60.2be964a16727732621bd.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/57.a0ab6885cde4b53cddf3.js.map"</span>,</span><br><span class="line">                <span class="string">"static/css/cropper.css"</span>,</span><br><span class="line">                <span class="string">"static/images/course/1.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/ico_now@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/7-bg.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/plupload.dev.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/right_line.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/duoxuan_samll1.png"</span>,</span><br><span class="line">                <span class="string">"static/js/62.df120f08dd6de7cb3ad5.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/xiala_more.png"</span>,</span><br><span class="line">                <span class="string">"static/images/sjz_sh@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/panduan_small.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/sk.js"</span>,</span><br><span class="line">                <span class="string">"static/js/38.07570ba8f93e5b1da25f.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/footer_course.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_f@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/73.bd7bcfbcb7596fe607ca.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/wenda1.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_r@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/2.479db8c5381e52b4094b.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/17.6abbaa99245e826047f5.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/list_edit.png"</span>,</span><br><span class="line">                <span class="string">"static/images/pic_delete@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_g_1@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_cw_bg@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/delete@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/75.f75b137dff93584306c2.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/dianxing.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/2.png"</span>,</span><br><span class="line">                <span class="string">"static/js/zepto.min.js"</span>,</span><br><span class="line">                <span class="string">"static/images/pic-s@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/css/teacher/group/stu-move.css"</span>,</span><br><span class="line">                <span class="string">"static/images/btn_r_w@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/close@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/54.019b9806e164eb68499e.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/me_g@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/74.078e4d992daa0653a8cc.js"</span>,</span><br><span class="line">                <span class="string">"static/css/teacher/course/groupDetail.css"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_bg_sh@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/37.65535faa1f357f16f702.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/word.png"</span>,</span><br><span class="line">                <span class="string">"static/images/word@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/add-stu.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/danxuan1.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/8-s.png"</span>,</span><br><span class="line">                <span class="string">"static/css/teacher/group/info.css"</span>,</span><br><span class="line">                <span class="string">"static/images/login/ico_tishi.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/duoxuan1.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/close.png"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/excel.png"</span>,</span><br><span class="line">                <span class="string">"static/js/33.f53b62dd3c0c6619122b.js"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/video_1.png"</span>,</span><br><span class="line">                <span class="string">"static/css/student/discuss/free.css"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/panduan_small1.png"</span>,</span><br><span class="line">                <span class="string">"static/js/36.e2314e7b3fdff24cc7c0.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/image.png"</span>,</span><br><span class="line">                <span class="string">"static/js/3.5776986484d75528975e.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/ppt-s.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/et.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/red_now.png"</span>,</span><br><span class="line">                <span class="string">"static/images/btn_r_w@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/55.4ab8e60895318983eaf6.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/45.651e51522305da41208a.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/25.e8357b9f3da064dc2104.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_btn_xz@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/courseware/responder-bg.png"</span>,</span><br><span class="line">                <span class="string">"static/fonts/MaterialIcons-Regular.570eb83.woff2"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_tx_zz@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/audio-1.png"</span>,</span><br><span class="line">                <span class="string">"static/js/72.b18f4d06e605b404b0c9.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/list_delete_course.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/fa.js"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/pdf_1.png"</span>,</span><br><span class="line">                <span class="string">"static/css/student/group/jump.css"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_right@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/38.07570ba8f93e5b1da25f.js"</span>,</span><br><span class="line">                <span class="string">"static/js/photoswipe/photoswipe-ui-default.js"</span>,</span><br><span class="line">                <span class="string">"static/js/61.f653095737f99f319a58.js"</span>,</span><br><span class="line">                <span class="string">"static/img/1.fc2374e.png"</span>,</span><br><span class="line">                <span class="string">"static/js/76.a945c2b73d728c061af3.js"</span>,</span><br><span class="line">                <span class="string">"static/js/30.492abee30cefd9a94f5e.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/0.5a0076969dd89e2068d6.js"</span>,</span><br><span class="line">                <span class="string">"static/js/29.6eaeabde1c2d204e7fb2.js"</span>,</span><br><span class="line">                <span class="string">"static/img/1-bg.f9622db.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseList_bg_blue.png"</span>,</span><br><span class="line">                <span class="string">"static/js/66.bc9e62a02f6b6dffba73.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/share.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_nice_s@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_xh_bg@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/3-s.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/dianzan.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_nice_l@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/btn_wd_tj@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/nice@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/53.fcea8d2e276463b5f13e.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseware_green_left.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/6-s.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/it.js"</span>,</span><br><span class="line">                <span class="string">"static/js/49.34a5ee6e610c7934bf29.js"</span>,</span><br><span class="line">                <span class="string">"static/images/course/8.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_cy@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/kc_banner_mzd@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/no1.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/audio-3.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/stu-no-bg.png"</span>,</span><br><span class="line">                <span class="string">"static/js/21.19cca0ccf09f52f1fe65.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/sr.js"</span>,</span><br><span class="line">                <span class="string">"static/css/student/user/validate-new-phone.css"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/footer_course_on.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/course_bg_orange@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/login/ico_xuehao@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/az.js"</span>,</span><br><span class="line">                <span class="string">"static/js/34.808020b1b786ff046f33.js"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_tx_zz@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/card_pink.png"</span>,</span><br><span class="line">                <span class="string">"static/images/personalCenter/headPhoto.jpg"</span>,</span><br><span class="line">                <span class="string">"static/js/22.1372eba9688406e9a888.js"</span>,</span><br><span class="line">                <span class="string">"static/img/3.ad6619e.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/icon_kecheng_xuanzhong@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/13.22c2b93aa0508d520996.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/edi_zm@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_kp_bg@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/73.bd7bcfbcb7596fe607ca.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/after.png"</span>,</span><br><span class="line">                <span class="string">"static/js/72.b18f4d06e605b404b0c9.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/manifest.da10c0ea397152ee43b4.js"</span>,</span><br><span class="line">                <span class="string">"static/images/blackpic@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/user/center.js"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/word_1.png"</span>,</span><br><span class="line">                <span class="string">"static/js/44.639a93c28f5a1788ca1e.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/reupload@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_tx_bg_s@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/male.png"</span>,</span><br><span class="line">                <span class="string">"static/js/47.9e4fea3527f8f8d33c0e.js"</span>,</span><br><span class="line">                <span class="string">"static/images/course/empty-schedule.png"</span>,</span><br><span class="line">                <span class="string">"static/js/25.e8357b9f3da064dc2104.js"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_book@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/video-s.png"</span>,</span><br><span class="line">                <span class="string">"static/font/MaterialIcons-Regular.woff2"</span>,</span><br><span class="line">                <span class="string">"static/js/31.b4efd46f891c4f68adef.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/Houses@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/css/student/class-quiz/index.css"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/bs.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/rednow@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/autoTextarea.js"</span>,</span><br><span class="line">                <span class="string">"static/js/60.2be964a16727732621bd.js"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_r@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/51.62a5a2b1be68b5cec8bd.js"</span>,</span><br><span class="line">                <span class="string">"static/js/43.a87a8c120bd2f9a9e5d4.js"</span>,</span><br><span class="line">                <span class="string">"static/js/41.b3fe7c5923d1a4f9b0f6.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/word@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_nice_s@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_kx_cg@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/nice@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/fr.js"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_xq_tm@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/audio-2.png"</span>,</span><br><span class="line">                <span class="string">"static/images/top@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/rotate.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/txt_1.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/more_right_arrow.png"</span>,</span><br><span class="line">                <span class="string">"static/images/app_config/start_icon.png"</span>,</span><br><span class="line">                <span class="string">"static/images/app_config/Android375x667.png"</span>,</span><br><span class="line">                <span class="string">"static/js/vendor.84d599022bb33b0b6aae.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/card_gray.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/group-stu-index.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/zhanweitu_wuxiaoxi.png"</span>,</span><br><span class="line">                <span class="string">"static/images/search@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/st_g@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_zq_bg@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/courseware/hm-commit-success.png"</span>,</span><br><span class="line">                <span class="string">"static/images/mustcard@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/hr.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/close_tc@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/css/student/group/board.css"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/wenda_small1.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/duoxuan_small1.png"</span>,</span><br><span class="line">                <span class="string">"static/js/43.a87a8c120bd2f9a9e5d4.js.map"</span>,</span><br><span class="line">                <span class="string">"static/font/cour.ttf"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/comment-more.png"</span>,</span><br><span class="line">                <span class="string">"static/js/4.44be454250d9e3649a40.js"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_right_g@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/btn_r_b@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/edit_green.png"</span>,</span><br><span class="line">                <span class="string">"static/js/46.2aced9230cd815686141.js.map"</span>,</span><br><span class="line">                <span class="string">"static/css/student/course/responder.css"</span>,</span><br><span class="line">                <span class="string">"static/js/28.5818d59dace26f3dbf8e.js"</span>,</span><br><span class="line">                <span class="string">"static/images/search@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/word-s.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/km.js"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_g_bg@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/boy@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/img/3-bg.903ec0a.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/fi.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/plupload.min.js"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_kjzy@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/img/pdf.bd8f8ab.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/image.png"</span>,</span><br><span class="line">                <span class="string">"static/images/nice_s_s@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/girl@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/orange_title.png"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_g@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/courseware/group-btn.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/shoucang_on.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/prev.png"</span>,</span><br><span class="line">                <span class="string">"static/css/student/course/board.css"</span>,</span><br><span class="line">                <span class="string">"static/img/2.ca5b2cc.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/wenda_small.png"</span>,</span><br><span class="line">                <span class="string">"static/js/47.9e4fea3527f8f8d33c0e.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/bg_dian@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/footer_msg_on.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/share.png"</span>,</span><br><span class="line">                <span class="string">"static/images/selectcard@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/mp3.png"</span>,</span><br><span class="line">                <span class="string">"static/images/courseware/courseware_green.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/people@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/1.51bbc5b102a31e3b4274.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/courseware/courseware-index.jpg"</span>,</span><br><span class="line">                <span class="string">"static/images/login/ico_qingchu@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/rar(1)@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/daifabu.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/footer_course_on.png"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/txt-s.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/right.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/panduan.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/panduan1.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_f@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/app_config/Android1080x1920.png"</span>,</span><br><span class="line">                <span class="string">"static/js/66.bc9e62a02f6b6dffba73.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/course_bg_qing@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/question_more.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/kk.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/good.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/delete@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/7-s.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/4-s.png"</span>,</span><br><span class="line">                <span class="string">"static/css/weui.css"</span>,</span><br><span class="line">                <span class="string">"static/css/app.a147bb1114e3b5709cf48eb9c1574424.css.map"</span>,</span><br><span class="line">                <span class="string">"static/js/7.a25eeb813f874473b08b.js"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/ico_right.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/7.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/no2.png"</span>,</span><br><span class="line">                <span class="string">"static/images/group@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/Moxie.xap"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_face_male.png"</span>,</span><br><span class="line">                <span class="string">"static/images/pic@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/img/banner.90232c3.png"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_bg_c@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/11.0b6b5a4434f53e174d27.js"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_kx_cg@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/footer_mine.png"</span>,</span><br><span class="line">                <span class="string">"static/js/61.f653095737f99f319a58.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/footer_mine_on.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_mes_g@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/doc.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/bangdingshoujichenggong@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/img/7.f02a1f0.png"</span>,</span><br><span class="line">                <span class="string">"static/js/15.deffd44a3ab386e462af.js"</span>,</span><br><span class="line">                <span class="string">"static/css/vueWeui.min.css"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/pdf.png"</span>,</span><br><span class="line">                <span class="string">"static/images/blackpic@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/user/reg.js"</span>,</span><br><span class="line">                <span class="string">"static/js/app.c5f16e22c4f6dc7904e3.js"</span>,</span><br><span class="line">                <span class="string">"static/js/8.ea9c8e9d4b70d277e92b.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/voice.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_book_g@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quanbu.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/voice-rec.jpg"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_tx_bg_s@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/img/4-bg.2d9170d.png"</span>,</span><br><span class="line">                <span class="string">"static/images/bg_dian@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/rem-px.js"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_kthd@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/css/student/group/screen.css"</span>,</span><br><span class="line">                <span class="string">"static/js/57.a0ab6885cde4b53cddf3.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/hy.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/danxuan_small1.png"</span>,</span><br><span class="line">                <span class="string">"static/css/teacher/course/chooseTeam.css"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/attach.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/lt.js"</span>,</span><br><span class="line">                <span class="string">"static/images/course/3-bg.png"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_bg_z@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/es.js"</span>,</span><br><span class="line">                <span class="string">"static/images/group@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/female.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/zh_TW.js"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/edit_green.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/red_now_1.png"</span>,</span><br><span class="line">                <span class="string">"static/img/5-bg.339e113.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/Bench 2@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/ico_right_g.png"</span>,</span><br><span class="line">                <span class="string">"static/js/1.51bbc5b102a31e3b4274.js"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/txt.png"</span>,</span><br><span class="line">                <span class="string">"static/images/edit@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/31.b4efd46f891c4f68adef.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseList_bg_gray.png"</span>,</span><br><span class="line">                <span class="string">"static/js/20.8e61d518fe12def5beeb.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/75.f75b137dff93584306c2.js"</span>,</span><br><span class="line">                <span class="string">"static/js/44.639a93c28f5a1788ca1e.js"</span>,</span><br><span class="line">                <span class="string">"static/images/st_g@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/like.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/no-attach.png"</span>,</span><br><span class="line">                <span class="string">"static/js/32.26a5a6fd92f00e0289c2.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/boy.png"</span>,</span><br><span class="line">                <span class="string">"static/js/59.27757db0ab06829db933.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/dele_s@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_xq_tz@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/5-s.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/left_arrow.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/he.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/no_2.png"</span>,</span><br><span class="line">                <span class="string">"static/js/23.02b9f64c1831f5f6d17c.js"</span>,</span><br><span class="line">                <span class="string">"static/images/checkUpdate/tanchuangtou.png"</span>,</span><br><span class="line">                <span class="string">"static/js/58.29d13a0cb0a209a2a890.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/leader.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/yiyue.png"</span>,</span><br><span class="line">                <span class="string">"static/css/cropper.min.css"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/wrong.png"</span>,</span><br><span class="line">                <span class="string">"static/images/more@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_me@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/1-s.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/edit.png"</span>,</span><br><span class="line">                <span class="string">"static/js/photoswipe/default-skin/default-skin.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/danxuan.png"</span>,</span><br><span class="line">                <span class="string">"static/images/time-out.png"</span>,</span><br><span class="line">                <span class="string">"static/js/64.a5373ce9d1f41c504a8f.js"</span>,</span><br><span class="line">                <span class="string">"static/images/rednow@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_tx_bg@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_right@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/6.b2048bdcbb1f969aefdf.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/quiz-right.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/6.png"</span>,</span><br><span class="line">                <span class="string">"config/app-config.json"</span>,</span><br><span class="line">                <span class="string">"static/js/18.6f3d829c90c19e7e3a1f.js"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_xq_zs@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/11.0b6b5a4434f53e174d27.js.map"</span>,</span><br><span class="line">                <span class="string">"static/css/teacherCommon.css"</span>,</span><br><span class="line">                <span class="string">"static/css/teacher/course/addGroup.css"</span>,</span><br><span class="line">                <span class="string">"static/css/student/group/list.css"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/duoxuan.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/excel_1.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/uk_UA.js"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/liked.png"</span>,</span><br><span class="line">                <span class="string">"static/images/upload@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/weui.js"</span>,</span><br><span class="line">                <span class="string">"static/svg/audio.svg"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/teacher_pagedown@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_g_bg@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/edi_zm@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseware_blue.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/green_now.png"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_btn_mr@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/discuss/wall.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/USB(1)@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/62.df120f08dd6de7cb3ad5.js"</span>,</span><br><span class="line">                <span class="string">"static/css/question.css"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/ar.js"</span>,</span><br><span class="line">                <span class="string">"static/js/app.c5f16e22c4f6dc7904e3.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/zh_CN.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/pt.js"</span>,</span><br><span class="line">                <span class="string">"static/js/7.a25eeb813f874473b08b.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/34.808020b1b786ff046f33.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/wrong.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/txt.png"</span>,</span><br><span class="line">                <span class="string">"static/img/2-bg.1dcd998.png"</span>,</span><br><span class="line">                <span class="string">"static/js/42.b6dd165ebc6c1378bcf8.js"</span>,</span><br><span class="line">                <span class="string">"static/images/checkUpdate/tanchuangtou@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/no_3.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/url_1.png"</span>,</span><br><span class="line">                <span class="string">"static/js/vendor.84d599022bb33b0b6aae.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/ro.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/pl.js"</span>,</span><br><span class="line">                <span class="string">"static/images/wechat/teacher.png"</span>,</span><br><span class="line">                <span class="string">"static/js/uploadVoice.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/ca.js"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_xz_me@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/wenda.png"</span>,</span><br><span class="line">                <span class="string">"static/js/4.44be454250d9e3649a40.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/courseware/responder-fail.png"</span>,</span><br><span class="line">                <span class="string">"static/js/51.62a5a2b1be68b5cec8bd.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/67.abb1c370ce4ae2c5b500.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/64.a5373ce9d1f41c504a8f.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/lv.js"</span>,</span><br><span class="line">                <span class="string">"static/js/35.6cb97a5cf8e96c570a3b.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/cy.js"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/excel_1.png.png"</span>,</span><br><span class="line">                <span class="string">"static/images/more_w@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/pos.png"</span>,</span><br><span class="line">                <span class="string">"static/js/20.8e61d518fe12def5beeb.js"</span>,</span><br><span class="line">                <span class="string">"static/images/loading.svg"</span>,</span><br><span class="line">                <span class="string">"static/js/58.29d13a0cb0a209a2a890.js"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/footer_course.png"</span>,</span><br><span class="line">                <span class="string">"static/img/kc_banner_mzd@2x.94bd27e.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/course_none.png"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/audio-s.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_fin@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseList_bg_yellow.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/caogao.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/move.png"</span>,</span><br><span class="line">                <span class="string">"static/images/login/banner.png"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/exe-s.png"</span>,</span><br><span class="line">                <span class="string">"static/js/2.479db8c5381e52b4094b.js"</span>,</span><br><span class="line">                <span class="string">"static/css/teacher/groupMission.css"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/shoucang_normal.png"</span>,</span><br><span class="line">                <span class="string">"static/js/3.5776986484d75528975e.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseware_green2.png"</span>,</span><br><span class="line">                <span class="string">"static/images/girl@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/app_config/return_.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/tr.js"</span>,</span><br><span class="line">                <span class="string">"static/css/student/course/screen.css"</span>,</span><br><span class="line">                <span class="string">"static/js/15.deffd44a3ab386e462af.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/ms.js"</span>,</span><br><span class="line">                <span class="string">"static/images/wd_zq_bg@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/more-down.png"</span>,</span><br><span class="line">                <span class="string">"static/images/app_config/Android1080x2160.png"</span>,</span><br><span class="line">                <span class="string">"static/images/nice_s@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/30.492abee30cefd9a94f5e.js"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/ico-search.png"</span>,</span><br><span class="line">                <span class="string">"static/js/weui.min.js"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_xh_r@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/24.77d4995a6babde8d114f.js"</span>,</span><br><span class="line">                <span class="string">"static/js/18.6f3d829c90c19e7e3a1f.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/en.js"</span>,</span><br><span class="line">                <span class="string">"static/js/65.821ff86b65ac72900f2f.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/more-up.png"</span>,</span><br><span class="line">                <span class="string">"static/js/cookieUtil.js"</span>,</span><br><span class="line">                <span class="string">"static/js/21.19cca0ccf09f52f1fe65.js.map"</span>,</span><br><span class="line">                <span class="string">"static/css/res-icon.css"</span>,</span><br><span class="line">                <span class="string">"static/css/swiper.min.css"</span>,</span><br><span class="line">                <span class="string">"static/css/student/user/center.css"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/hengxian.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/vi.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/cs.js"</span>,</span><br><span class="line">                <span class="string">"static/js/12.e0c233a7dc6aa64eacf4.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/flag.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/footer_mine.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/has_choose.png"</span>,</span><br><span class="line">                <span class="string">"static/js/52.8fe85e4ffdddb41dd7a2.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/course/5.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/list_more.png"</span>,</span><br><span class="line">                <span class="string">"static/css/attach-icon.css"</span>,</span><br><span class="line">                <span class="string">"static/css/student/group/face.css"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_xq_tm@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_xz_me@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/selectcard@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/10.b9083fe2d547cdc4b9c6.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/people_fill@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/1_1/course-index.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_kthd@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/courseware/courseware_zi.png"</span>,</span><br><span class="line">                <span class="string">"static/images/word_bg@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/teacher_more@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/photoswipe/photoswipe-ui-default.min.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/yiwancheng.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseware_green.png"</span>,</span><br><span class="line">                <span class="string">"static/js/67.abb1c370ce4ae2c5b500.js"</span>,</span><br><span class="line">                <span class="string">"static/img/report-bg.d7b637d.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/zhanweitu_wuxiaoxi@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/img/courseware-index.f60a962.jpg"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/jinxingzhong.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/no_1.png"</span>,</span><br><span class="line">                <span class="string">"static/images/copy@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/css/teacher/courseware/createEditCourse.css"</span>,</span><br><span class="line">                <span class="string">"static/images/course/8-bg.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/check_box1.png"</span>,</span><br><span class="line">                <span class="string">"static/img/6.bbadfb3.png"</span>,</span><br><span class="line">                <span class="string">"static/js/71.6905b7eca93d75949006.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/photoswipe/photoswipe.js"</span>,</span><br><span class="line">                <span class="string">"static/js/59.27757db0ab06829db933.js"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_t@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/css/common-unpack.css"</span>,</span><br><span class="line">                <span class="string">"static/images/course/6-bg.png"</span>,</span><br><span class="line">                <span class="string">"static/css/switch.css"</span>,</span><br><span class="line">                <span class="string">"static/js/cropper.min.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/right_answer.png"</span>,</span><br><span class="line">                <span class="string">"static/lang/en-US.js"</span>,</span><br><span class="line">                <span class="string">"static/js/52.8fe85e4ffdddb41dd7a2.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/sl.js"</span>,</span><br><span class="line">                <span class="string">"static/fonts/cour.5dbc191.ttf"</span>,</span><br><span class="line">                <span class="string">"static/js/39.2c7f53f140893d7d48d3.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/grayPlus.png"</span>,</span><br><span class="line">                <span class="string">"static/img/responder-bg.f54dcd3.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/card_blue.png"</span>,</span><br><span class="line">                <span class="string">"static/images/login/ico_fuwuqidizhi.png"</span>,</span><br><span class="line">                <span class="string">"static/js/cropper.js"</span>,</span><br><span class="line">                <span class="string">"static/js/41.b3fe7c5923d1a4f9b0f6.js"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/zh_CN.js"</span>,</span><br><span class="line">                <span class="string">"static/js/36.e2314e7b3fdff24cc7c0.js"</span>,</span><br><span class="line">                <span class="string">"static/images/app_config/huaweiM5.png"</span>,</span><br><span class="line">                <span class="string">"static/js/12.e0c233a7dc6aa64eacf4.js.map"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/yichehui.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/dahui.png"</span>,</span><br><span class="line">                <span class="string">"static/js/14.68e1922ee459f196bf8b.js"</span>,</span><br><span class="line">                <span class="string">"static/js/48.0e1627cbf94504061dc7.js"</span>,</span><br><span class="line">                <span class="string">"static/js/26.2e209f7a31c67645cd17.js"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_xz_w@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_me@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/personalCenter/jiantou_right.png"</span>,</span><br><span class="line">                <span class="string">"static/images/app_config/iPhoneX1125x2436.png"</span>,</span><br><span class="line">                <span class="string">"static/images/copy@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/course/4-bg.png"</span>,</span><br><span class="line">                <span class="string">"static/js/45.651e51522305da41208a.js"</span>,</span><br><span class="line">                <span class="string">"static/img/time-out.f1600cb.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/id.js"</span>,</span><br><span class="line">                <span class="string">"static/images/course/next.png"</span>,</span><br><span class="line">                <span class="string">"static/images/unlaunch@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/me_g@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/tag_t@3x.png"</span>,</span><br><span class="line">                <span class="string">"static/js/teacher/center.js"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseware_none.png"</span>,</span><br><span class="line">                <span class="string">"static/images/word_bg@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/deleteCourseware.png"</span>,</span><br><span class="line">                <span class="string">"static/images/launch@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/login/ico_qingchu.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/course_bg_red@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/quiz_icon/mp3_1.png"</span>,</span><br><span class="line">                <span class="string">"static/images/teacher/courseware_green_right.png"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/i18n/sq.js"</span>,</span><br><span class="line">                <span class="string">"static/images/file_icon/pdf-s.png"</span>,</span><br><span class="line">                <span class="string">"static/images/ico_kjzy@2x.png"</span>,</span><br><span class="line">                <span class="string">"static/images/courseware/courseware_green2.png"</span>,</span><br><span class="line">                <span class="string">"static/js/50.b0c4c66c0111e1e3635d.js.map"</span>,</span><br><span class="line">                <span class="string">"static/js/plupload/Moxie.swf"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://ask.dcloud.net.cn/article/94" target="_blank" rel="noopener">详细manifest配置请点我</a></p>
<p>5 就是在所在项目目录下 右键 ——&gt; 发行 ——&gt; 原生app 云打包</p>
<p><img src="/2019/12/14/前端开发app总结/1576302483507.png" alt="1576302483507"></p>
<p><img src="/2019/12/14/前端开发app总结/1576302815309.png" alt="1576302815309"></p>
<p><img src="/2019/12/14/前端开发app总结/1576302997871.png" alt="1576302997871"></p>
]]></content>
      <tags>
        <tag>Hbuilder</tag>
      </tags>
  </entry>
  <entry>
    <title>java零基础6</title>
    <url>/2019/12/10/java%E9%9B%B6%E5%9F%BA%E7%A1%806/</url>
    <content><![CDATA[<h3 id="API概述"><a href="#API概述" class="headerlink" title="API概述"></a>API概述</h3><p>API（Application Programming Interface）：应用程序编程接口</p>
<p>编写一个机器人程序去控制机器人踢足球，程序需要向机器人发出向前跑，向后跑，射门，抢球等各种命令。</p>
<p>机器人厂商一定会提供些用于控制机器人的接口类。这些类中定义好了操作机器人各种动作的方法，其实，这些</p>
<p>接口类就是机器人厂商提供给应用程序编程的接口，大家把这些类成为API；</p>
<p>java API:  指的就是JDK中提供的各种功能的java类</p>
<p>这些类将底层的实现封装了起来。我们不需要关心这些类是如何实现的，</p>
<p>只需要学习这些类如何使用即可。我们可以通过帮助文档来学习这些API的使用</p>
<p><img src="/2019/12/10/java零基础6/1575945068701.png" alt="1575945068701"></p>
<p><img src="/2019/12/10/java零基础6/1575945118102.png" alt="1575945118102"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    String构造方法</span></span><br><span class="line"><span class="comment">        public String();   创建一个空白字符串对象，不含任何内容</span></span><br><span class="line"><span class="comment">        public String(char[] chs); 根据字符数组的内容，来创建字符串对象</span></span><br><span class="line"><span class="comment">        public String(byte[] bys); 根据字节数组的内容，来创建字符串对象</span></span><br><span class="line"><span class="comment">        String s = "abc";   直接赋值的方式创建字符串对象，内容是abc   推荐这种方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        public String();    创建一个空白字符串对象，不含任何内容</span></span><br><span class="line">        String s1 = <span class="keyword">new</span> String();</span><br><span class="line">        System.out.println(<span class="string">"s1:"</span> + s1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public String(char[] chs);  根据字符数组得内容，来创建字符串对象</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(chs);</span><br><span class="line">        System.out.println(<span class="string">"s2:"</span> + s2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public String(byte[] bys); 根据字节数组的内容，来创建字符串内容</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;</span><br><span class="line">        String s3 = <span class="keyword">new</span> String(bys);</span><br><span class="line">        System.out.println(<span class="string">"s3:"</span> + s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String s = "abc";  直接赋值的方法创建字符串对象，内容时abc</span></span><br><span class="line">        String s4 = <span class="string">"abc"</span>;</span><br><span class="line">        System.out.println(<span class="string">"s4:"</span> + s4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果为</span></span><br><span class="line"><span class="comment">    s1:</span></span><br><span class="line"><span class="comment">    s2:abc</span></span><br><span class="line"><span class="comment">    s3:abc</span></span><br><span class="line"><span class="comment">    s4:abc</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/10/java零基础6/1575966459475.png" alt="1575966459475"></p>
<p><img src="/2019/12/10/java零基础6/1575966510795.png" alt="1575966510795"></p>
<p><img src="/2019/12/10/java零基础6/1575966583404.png" alt="1575966583404"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    String对象的特点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构造方法的方式得到对象</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(chs);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(chs);</span><br><span class="line">        System.out.println(s1 == s2);  <span class="comment">//false   解释：new 方式会重新开辟一个地址</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接赋值的方式得到对象</span></span><br><span class="line">        String s3 = <span class="string">"abc"</span>;</span><br><span class="line">        String s4 = <span class="string">"abc"</span>;</span><br><span class="line">        System.out.println(s3 == s4);  <span class="comment">//true    解释：s4和s3的在字符串池中维护，指向同一个字符串地址</span></span><br><span class="line">        <span class="comment">//比较字符串对象地址是否相同</span></span><br><span class="line">        System.out.println(s1 == s3);  <span class="comment">//false   解释：""的方式是在常量池开辟地址，new是新一个地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/10/java零基础6/1575968321579.png" alt="1575968321579"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    public boolean equals (object anObject);</span></span><br><span class="line"><span class="comment">    将次字符串与指定对象进行比较。由于我们比较的是字符串对象。所以参数直接传递一个字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构造方法的方式得到对象</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(chs);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(chs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接赋值的方式得到对象</span></span><br><span class="line">        String s3 = <span class="string">"abc"</span>;</span><br><span class="line">        String s4 = <span class="string">"abc"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较字符串对象地址是否相同</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">        System.out.println(s1 == s3);</span><br><span class="line">        System.out.println(s3 == s4);</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较字符串对象内容是否相同</span></span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">        System.out.println(s1.equals(s3));</span><br><span class="line">        System.out.println(s3.equals(s4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果为</span></span><br><span class="line"><span class="comment">    false</span></span><br><span class="line"><span class="comment">    false</span></span><br><span class="line"><span class="comment">    true</span></span><br><span class="line"><span class="comment">    ---------</span></span><br><span class="line"><span class="comment">    true</span></span><br><span class="line"><span class="comment">    true</span></span><br><span class="line"><span class="comment">    true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.runoob.com/java/java-string.html" target="_blank" rel="noopener">菜鸟教程jString类</a></p>
<p><img src="/2019/12/10/java零基础6/1575969039975.png" alt="1575969039975"></p>
<p><img src="/2019/12/10/java零基础6/1575969067424.png" alt="1575969067424"></p>
<p><img src="/2019/12/10/java零基础6/1575969090744.png" alt="1575969090744"></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java零基础5</title>
    <url>/2019/12/09/Java%E9%9B%B6%E5%9F%BA%E7%A1%805/</url>
    <content><![CDATA[<p><img src="/2019/12/09/Java零基础5/1575898828139.png" alt="1575898828139"></p>
<p><img src="/2019/12/09/Java零基础5/1575898846898.png" alt="1575898846898"></p>
<p><img src="/2019/12/09/Java零基础5/1575898896913.png" alt="1575898896913"></p>
<p><img src="/2019/12/09/Java零基础5/1575898977372.png" alt="1575898977372"></p>
<p><img src="/2019/12/09/Java零基础5/1575899002926.png" alt="1575899002926"></p>
<p><img src="/2019/12/09/Java零基础5/1575899028037.png" alt="1575899028037"></p>
<p><img src="/2019/12/09/Java零基础5/575899055239.png" alt="1575899055239"></p>
<p><img src="/2019/12/09/Java零基础5/1575899429768.png" alt="1575899429768"></p>
<p><img src="/2019/12/09/Java零基础5/1575899448910.png" alt="1575899448910"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同一个包下创建一个 Phone类</span></span><br><span class="line"><span class="keyword">package</span> bubu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String brand;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bubu;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    手机类</span></span><br><span class="line"><span class="comment">        类名：</span></span><br><span class="line"><span class="comment">        手机（Phone）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        成员变量：</span></span><br><span class="line"><span class="comment">        品牌（brand）</span></span><br><span class="line"><span class="comment">        价格（price）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        成员方法</span></span><br><span class="line"><span class="comment">        打电话（call）</span></span><br><span class="line"><span class="comment">        发短信（sendMessage）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用成员变量</span></span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line">		</span><br><span class="line">        p.brand = <span class="string">"小米"</span>;</span><br><span class="line">        p.price = <span class="number">2999</span>;</span><br><span class="line">  		p.call();</span><br><span class="line">        p.sendMessage();</span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	输出结果为</span></span><br><span class="line"><span class="comment">    null</span></span><br><span class="line"><span class="comment">    0</span></span><br><span class="line"><span class="comment">    打电话</span></span><br><span class="line"><span class="comment">    发短信</span></span><br><span class="line"><span class="comment">    小米</span></span><br><span class="line"><span class="comment">    2999</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在用户那直接可以修改成员变量的值 是不安全的，因此引入 <span class="keyword">private</span> 关键字</span><br><span class="line"><span class="keyword">private</span> 定义的成员变量，外部无法修改其值，只能通过该类的内部函数修改值</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/Java零基础5/1575900106365.png" alt="1575900106365"></p>
<p><img src="/2019/12/09/Java零基础5/1575900130929.png" alt="1575900130929"></p>
<p><img src="/2019/12/09/Java零基础5/1575900192023.png" alt="1575900192023"></p>
<p><img src="/2019/12/09/Java零基础5/1575900233940.png" alt="1575900233940"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bubu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String name;   <span class="comment">//未采用private修饰符，外部的学生类可以修改成员变量name的值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;  <span class="comment">//采用private修饰符，只能内部函数访问</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">120</span> || a &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"您输入的年龄有误"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">","</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bubu;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    student类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StudentDemo student = <span class="keyword">new</span> StudentDemo();</span><br><span class="line">        <span class="comment">//会报错的语句</span></span><br><span class="line">        <span class="comment">//System.out.println(student.age); //age使用private修饰，在这里是访问不到的，因此age在idea编辑器会显示红色</span></span><br><span class="line">        System.out.println(student.getAge());</span><br><span class="line">        System.out.println(student.name);</span><br><span class="line"></span><br><span class="line">        student.name = <span class="string">"小布"</span>;  <span class="comment">//name 因为没有private修饰 所以可以，但是是不安全的</span></span><br><span class="line">        <span class="comment">//student.age = 20;   //这里也一样//会报错的语句</span></span><br><span class="line">        student.setAge(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//      System.out.println(student.age);  会报错的语句</span></span><br><span class="line">        System.out.println(student.getAge());</span><br><span class="line">        System.out.println(student.name);</span><br><span class="line">        student.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果为</span></span><br><span class="line"><span class="comment">    0</span></span><br><span class="line"><span class="comment">    null</span></span><br><span class="line"><span class="comment">    您输入的年龄有误</span></span><br><span class="line"><span class="comment">    0</span></span><br><span class="line"><span class="comment">    小布</span></span><br><span class="line"><span class="comment">    小布,0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/Java零基础5/1575902338394.png" alt="1575902338394"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bubu;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name:"</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bubu;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    student类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StudentDemo student = <span class="keyword">new</span> StudentDemo();</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">        student.setName(<span class="string">"xiaobu"</span>); <span class="comment">//并改变不了学生类成员变量name的值，因为setName的参数与成员变量名字一样的问题；因此引入 this解决问题</span></span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">        student.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果为</span></span><br><span class="line"><span class="comment">    null</span></span><br><span class="line"><span class="comment">    null</span></span><br><span class="line"><span class="comment">    name:null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h4 id="使用this后的运行"><a href="#使用this后的运行" class="headerlink" title="使用this后的运行"></a>使用this后的运行</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bubu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name:"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用代码和上面的一样，输出结果如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//null</span></span><br><span class="line"><span class="comment">//xiaobu</span></span><br><span class="line"><span class="comment">//name:xiaobu</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/Java零基础5/1575903232837.png" alt="1575903232837"></p>
<p><img src="/2019/12/09/Java零基础5/1575903249604.png" alt="1575903249604"></p>
<p><img src="/2019/12/09/Java零基础5/1575903266811.png" alt="1575903266811"></p>
<p><img src="/2019/12/09/Java零基础5/1575903283626.png" alt="1575903283626"></p>
<p><img src="/2019/12/09/Java零基础5/1575903300671.png" alt="1575903300671"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bubu;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    student类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    构造方法</span></span><br><span class="line"><span class="comment">    作用： 创建对象</span></span><br><span class="line"><span class="comment">    功能： 完成对象数据的初始化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    格式</span></span><br><span class="line"><span class="comment">        修饰符 类名(参数) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        修饰符一般用 public</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"没有参数的构造函数，无参构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println( <span class="keyword">this</span>.name + <span class="string">","</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bubu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StudentDemo student = <span class="keyword">new</span> StudentDemo();</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">        student.setName(<span class="string">"xiaobu"</span>);</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">        student.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果为</span></span><br><span class="line"><span class="comment">    没有参数的构造函数，无参构造函数</span></span><br><span class="line"><span class="comment">    null</span></span><br><span class="line"><span class="comment">    xiaobu</span></span><br><span class="line"><span class="comment">    xiaobu,0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bubu;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    student类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    构造方法</span></span><br><span class="line"><span class="comment">    作用： 创建对象</span></span><br><span class="line"><span class="comment">    功能： 完成对象数据的初始化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    格式</span></span><br><span class="line"><span class="comment">        修饰符 类名(参数) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        修饰符一般用 public</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"没有参数的构造函数，无参构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentDemo</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">"设置age的构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentDemo</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">"设置name的构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentDemo</span><span class="params">(<span class="keyword">int</span> age,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">"设置name和age的构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentDemo</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">"设置age和name的构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println( <span class="keyword">this</span>.name + <span class="string">","</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bubu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StudentDemo student1 = <span class="keyword">new</span> StudentDemo();</span><br><span class="line">        student1.show();</span><br><span class="line"></span><br><span class="line">        StudentDemo student2 = <span class="keyword">new</span> StudentDemo(<span class="number">12</span>);</span><br><span class="line">        student2.show();</span><br><span class="line"></span><br><span class="line">        StudentDemo student3 = <span class="keyword">new</span> StudentDemo(<span class="string">"xiaobu"</span>);</span><br><span class="line">        student3.show();</span><br><span class="line"></span><br><span class="line">        StudentDemo student4 = <span class="keyword">new</span> StudentDemo(<span class="number">18</span>,<span class="string">"xiaoshen"</span>);</span><br><span class="line">        student4.show();</span><br><span class="line"></span><br><span class="line">        StudentDemo student5 = <span class="keyword">new</span> StudentDemo(<span class="string">"boom"</span>,<span class="number">15</span>);</span><br><span class="line">        student5.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    没有参数的构造函数，无参构造函数</span></span><br><span class="line"><span class="comment">    null,0</span></span><br><span class="line"><span class="comment">    设置age的构造函数</span></span><br><span class="line"><span class="comment">    null,12</span></span><br><span class="line"><span class="comment">    设置name的构造函数</span></span><br><span class="line"><span class="comment">    xiaobu,0</span></span><br><span class="line"><span class="comment">    设置name和age的构造函数</span></span><br><span class="line"><span class="comment">    xiaoshen,18</span></span><br><span class="line"><span class="comment">    设置age和name的构造函数</span></span><br><span class="line"><span class="comment">    boom,15</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/Java零基础5/1575903326182.png" alt="1575903326182"></p>
<p><img src="/2019/12/09/Java零基础5/1575903343682.png" alt="1575903343682"></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java零基础4</title>
    <url>/2019/12/09/java%E9%9B%B6%E5%9F%BA%E7%A1%804/</url>
    <content><![CDATA[<p><img src="/2019/12/09/java零基础4/1575887794699.png" alt="1575887794699"></p>
<p><img src="/2019/12/09/java零基础4/1575887820147.png" alt="1575887820147"></p>
<p><img src="/2019/12/09/java零基础4/1575887841999.png" alt="1575887841999"></p>
<p><img src="/2019/12/09/java零基础4/1575887905720.png" alt="1575887905720"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  数组：是一种用于推荐多个相同类型数据的存储模型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  定义格式：（推荐方式）</span></span><br><span class="line"><span class="comment">        数据类型[] 数组名;</span></span><br><span class="line"><span class="comment">        举例： int[] arr;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   数组初始化：</span></span><br><span class="line"><span class="comment">        a：所谓初始化，就是为数组中的元素分配内存空间，并未每个数组元素赋值</span></span><br><span class="line"><span class="comment">        b：数组初始化</span></span><br><span class="line"><span class="comment">               动态初始化</span></span><br><span class="line"><span class="comment">               静态初始化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   动态初始化：</span></span><br><span class="line"><span class="comment">        初始化时只指定数组长度，由系统为数组分配初始值</span></span><br><span class="line"><span class="comment">        格式  数据类型[] 数组名 = new 数据类型[数组长度];</span></span><br><span class="line"><span class="comment">        范例： int[] arr = new int[3];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            左边：</span></span><br><span class="line"><span class="comment">                int： 说明数组中的元素类型时int类型</span></span><br><span class="line"><span class="comment">                []: 说明这是一个数组</span></span><br><span class="line"><span class="comment">                arr： 这是数组名称</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            右边：</span></span><br><span class="line"><span class="comment">                new： 为数组申请内存空间</span></span><br><span class="line"><span class="comment">                int： 说明数组中的元素类型是int类型</span></span><br><span class="line"><span class="comment">                []: 说明这是一个数组</span></span><br><span class="line"><span class="comment">                3： 数组长度，其实就是数组中的元素个数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(arr);   <span class="comment">//输出结果为  [I@46f5f779   代表系统分配的内存地址</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态创建数组，数组元素会是系统默认值  整数 的默认值为 0</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);   <span class="comment">//0</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]); <span class="comment">//0</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]); <span class="comment">//0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础4/1575891866382.png" alt="1575891866382"></p>
<p><img src="/2019/12/09/java零基础4/1575891887168.png" alt="1575891887168"></p>
<p><img src="/2019/12/09/java零基础4/1575892140791.png" alt="1575892140791"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    单个数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];   <span class="comment">//定义一个长度为3的整形数组</span></span><br><span class="line">        System.out.println(arr);   <span class="comment">//[I@46f5f779</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);   <span class="comment">//0</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]); <span class="comment">//0</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);<span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line"></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line">        System.out.println(arr);    <span class="comment">//[I@46f5f779</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);<span class="comment">//10</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);<span class="comment">//20</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础4/1575892466242.png" alt="1575892466242"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    多个数组指向相同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];   <span class="comment">//定义一个长度为3的整形数组</span></span><br><span class="line">        System.out.println(arr);   <span class="comment">//[I@46f5f779</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);   <span class="comment">//0</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]); <span class="comment">//0</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);<span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr2 = arr;</span><br><span class="line">        arr2[<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line">        arr2[<span class="number">1</span>] = <span class="number">40</span>;</span><br><span class="line">        System.out.println(arr2 == arr);  <span class="comment">//true</span></span><br><span class="line">        System.out.println(arr2);    <span class="comment">//[I@46f5f779</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);<span class="comment">//20</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);<span class="comment">//40</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础4/1575892765165.png" alt="1575892765165"></p>
<p><img src="/2019/12/09/java零基础4/1575893614427.png" alt="1575893614427"></p>
<p><img src="/2019/12/09/java零基础4/1575893693145.png" alt="1575893693145"></p>
<p><img src="/2019/12/09/java零基础4/1575893717443.png" alt="1575893717443"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    静态初始化</span></span><br><span class="line"><span class="comment">         初始化时指定每个数组元素的初始值，由系统决定数组长度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         格式：数据类型[] 变量名 = new 数据类型[]&#123;数据1,数据2,数据3,...&#125;;</span></span><br><span class="line"><span class="comment">         范例：int[] arr = new int[]&#123;1,2,3,4&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         简化格式：数据类型[] 变量名 = &#123;数据1,数据2,数据3,...&#125;;</span></span><br><span class="line"><span class="comment">         范例：int[] arr = &#123;1,2,3,4&#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出数组名</span></span><br><span class="line">        System.out.println(arr);  <span class="comment">//[I@46f5f779</span></span><br><span class="line">        <span class="comment">//输出数组中的元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出长度之外的数</span></span><br><span class="line"><span class="comment">//        System.out.println(arr[3]);  //报错</span></span><br><span class="line">        arr = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(arr);   <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础4/1575894288651.png" alt="1575894288651"></p>
<p><img src="/2019/12/09/java零基础4/1575894309320.png" alt="1575894309320"></p>
<p><img src="/2019/12/09/java零基础4/1575894328025.png" alt="1575894328025"></p>
<p><img src="/2019/12/09/java零基础4/1575894385071.png" alt="1575894385071"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        xiaobu();  <span class="comment">//调用xiaobu方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">xiaobu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小布666"</span>);  <span class="comment">//被上面的main调用，所以输出  小布666</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础4/1575894578754.png" alt="1575894578754"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    带参数的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        xiaobu(<span class="string">"小布"</span>);  <span class="comment">//调用xiaobu方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">xiaobu</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">"666"</span>);  <span class="comment">//被上面的main调用，所以输出  小布666</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础4/1575894940065.png" alt="1575894940065"></p>
<p><img src="/2019/12/09/java零基础4/1575894976012.png" alt="1575894976012"></p>
<p><img src="/2019/12/09/java零基础4/1575894995817.png" alt="1575894995817"></p>
<p><img src="/2019/12/09/java零基础4/1575895026480.png" alt="1575895026480"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    带返回值的方法调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        Boolean result =  isEvenNumber(<span class="number">20</span>);  <span class="comment">//调用isEvenNumber方法，返回结果</span></span><br><span class="line">        System.out.println(result);   <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">isEvenNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础4/1575895325600.png" alt="1575895325600"></p>
<p><img src="/2019/12/09/java零基础4/1575895343196.png" alt="1575895343196"></p>
<p><img src="/2019/12/09/java零基础4/1575895370008.png" alt="1575895370008"></p>
<h5 id="两个明确"><a href="#两个明确" class="headerlink" title="两个明确"></a>两个明确</h5><p><img src="/2019/12/09/java零基础4/1575895484699.png" alt="1575895484699"></p>
<p><img src="/2019/12/09/java零基础4/1575895752797.png" alt="1575895752797"></p>
<p><img src="/2019/12/09/java零基础4/1575895776884.png" alt="1575895776884"></p>
<p><img src="/2019/12/09/java零基础4/1575895838647.png" alt="1575895838647"></p>
<p><img src="/2019/12/09/java零基础4/1575895953169.png" alt="1575895953169"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    方法重载练习</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Boolean result;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        result = compare(<span class="number">10</span>, <span class="number">20</span>);  <span class="comment">//调用isEvenNumber方法，返回结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        result = compare((<span class="keyword">byte</span>) <span class="number">10</span>, (<span class="keyword">byte</span>) <span class="number">20</span>);  <span class="comment">//调用isEvenNumber方法，返回结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        result = compare((<span class="keyword">short</span>) <span class="number">10</span>, (<span class="keyword">short</span>) <span class="number">20</span>);  <span class="comment">//调用isEvenNumber方法，返回结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        result = compare(<span class="number">10L</span>, <span class="number">20L</span>);  <span class="comment">//调用isEvenNumber方法，返回结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//int</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"int"</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//byte</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">compare</span><span class="params">(<span class="keyword">byte</span> a, <span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"byte"</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//short</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">compare</span><span class="params">(<span class="keyword">short</span> a, <span class="keyword">short</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"short"</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//long</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">compare</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"long"</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	输出结果为</span></span><br><span class="line"><span class="comment">	int</span></span><br><span class="line"><span class="comment">    false</span></span><br><span class="line"><span class="comment">    byte</span></span><br><span class="line"><span class="comment">    false</span></span><br><span class="line"><span class="comment">    short</span></span><br><span class="line"><span class="comment">    false</span></span><br><span class="line"><span class="comment">    long</span></span><br><span class="line"><span class="comment">    false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础4/1575896467356.png" alt="1575896467356"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    对于  基本类型  的 参数，形式参数的改变，不会影响实际参数的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">100</span>;</span><br><span class="line">        System.out.println(<span class="string">"调用change方法前的值："</span> + number);</span><br><span class="line">        change(number);</span><br><span class="line">        System.out.println(<span class="string">"调用change方法后的值："</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果为</span></span><br><span class="line"><span class="comment">调用change方法前的值：100</span></span><br><span class="line"><span class="comment">调用change方法后的值：100</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础4/1575896749181.png" alt="1575896749181"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    对于  引用类型  的 参数，形式参数的改变，影响实际参数的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"调用change方法前的值："</span> + arr[<span class="number">0</span>]);</span><br><span class="line">        change(arr);</span><br><span class="line">        System.out.println(<span class="string">"调用change方法后的值："</span> + arr[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果为</span></span><br><span class="line"><span class="comment">调用change方法前的值：100</span></span><br><span class="line"><span class="comment">调用change方法后的值：1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java零基础3</title>
    <url>/2019/12/09/java%E9%9B%B6%E5%9F%BA%E7%A1%803/</url>
    <content><![CDATA[<p><img src="/2019/12/09/java零基础3/1575875457598.png" alt="1575875457598"></p>
<p><img src="/2019/12/09/java零基础3/1575875487269.png" alt="1575875487269"></p>
<p><img src="/2019/12/09/java零基础3/1575875509431.png" alt="1575875509431"></p>
<p><img src="/2019/12/09/java零基础3/1575875537505.png" alt="1575875537505"></p>
<p><img src="/2019/12/09/java零基础3/1575875575525.png" alt="1575875575525"></p>
<p><img src="/2019/12/09/java零基础3/1575875603630.png" alt="1575875603630"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输出数据</span></span><br><span class="line"><span class="comment">  需求：</span></span><br><span class="line"><span class="comment">        在控制台输出 1-5 和 5-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">5</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础3/1575875852946.png" alt="1575875852946"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  输出数据</span></span><br><span class="line"><span class="comment">  需求：</span></span><br><span class="line"><span class="comment">        在控制台输出 5次HelloWorld</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//由于本人从事前端开发，因此经常有如下写法</span></span><br><span class="line">        <span class="comment">//while(j)&#123;&#125;  在java中这样是不行的，会报错，因为 j是int类型，while括号里面的值必须是布尔类型</span></span><br><span class="line">        <span class="comment">//js是弱类型语言，所以可以上面那样写</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            j--;</span><br><span class="line">            System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  珠穆朗玛峰</span></span><br><span class="line"><span class="comment">  需求：</span></span><br><span class="line"><span class="comment">        世界最高山峰是珠穆朗玛峰（8844.43米 = 8844430毫米），假如我有一张足够大的纸，</span></span><br><span class="line"><span class="comment">        它的厚度是 0.1毫米，请问，我折叠多少次，可以折成珠穆朗玛峰的高度？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个计数器，初始值为 0</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义纸张的厚度</span></span><br><span class="line">        <span class="keyword">double</span> paper = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义珠穆朗玛峰的高度</span></span><br><span class="line">        <span class="keyword">int</span> zf = <span class="number">8844430</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为要反复折叠，所以要使用循环，但是不知道循环多少次。这种情况下更适合用while循环</span></span><br><span class="line">        <span class="comment">//折叠过程中，当纸张厚度大于珠穆朗玛峰高度就停止，因此继续执行的要求是纸张厚度小于珠穆朗玛峰</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(paper &lt;= zf)&#123;</span><br><span class="line">            paper *= <span class="number">2</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础3/1575877244550.png" alt="1575877244550"></p>
<p><img src="/2019/12/09/java零基础3/1575877270794.png" alt="1575877270794"></p>
<p><img src="/2019/12/09/java零基础3/1575877294209.png" alt="1575877294209"></p>
<p><img src="/2019/12/09/java零基础3/1575877317727.png" alt="1575877317727"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Random</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    作用：用于产生一个随机数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    使用步骤：</span></span><br><span class="line"><span class="comment">        1： 导包</span></span><br><span class="line"><span class="comment">            import java.util.Random;</span></span><br><span class="line"><span class="comment">        2: 创建对象</span></span><br><span class="line"><span class="comment">            Random r = new Random();</span></span><br><span class="line"><span class="comment">        3:  获取随机数</span></span><br><span class="line"><span class="comment">            int number = r.nextInt(10);</span></span><br><span class="line"><span class="comment">            获取数据的范围：[0,10) 包括0.不包括 10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//需求：用循环生成五个随机数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> number = r.nextInt(<span class="number">10</span>);</span><br><span class="line">            System.out.println(number);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求： 获取一个 1-100之间的随机数</span></span><br><span class="line">        <span class="keyword">int</span> x = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   需求：猜数字</span></span><br><span class="line"><span class="comment">   随机生成一个正确数字(0，100]，输入 一个1-100的数字,猜错提示过大还是过小。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//随机生成一个正确答案</span></span><br><span class="line">        <span class="keyword">int</span> answer = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//由于只有答对的时候才结束，所以使用一个while(true)的死循环 然后 答对时 break 跳出循环</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入您要猜的数值："</span>);</span><br><span class="line">            <span class="keyword">int</span> guessNum = sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用猜的数值与随机数比较，并给出提示</span></span><br><span class="line">            <span class="keyword">if</span>(guessNum &gt; answer)&#123;</span><br><span class="line">                System.out.println(<span class="string">"您猜的数值过大"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(guessNum == answer)&#123;</span><br><span class="line">                System.out.println(<span class="string">"恭喜您猜对了"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"您猜的数值过小"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础3/1575878675709.png" alt="1575878675709"></p>
<p><img src="/2019/12/09/java零基础3/1575879123777.png" alt="1575879123777"></p>
<p><img src="/2019/12/09/java零基础3/1575879143549.png" alt="1575879143549"></p>
<p><img src="/2019/12/09/java零基础3/1575879220564.png" alt="1575879220564"></p>
<p><img src="/2019/12/09/java零基础3/1575879239897.png" alt="1575879239897"></p>
<p><img src="/2019/12/09/java零基础3/1575879265196.png" alt="1575879265196"></p>
<h4 id="新增模块，删除模块，导入模块"><a href="#新增模块，删除模块，导入模块" class="headerlink" title="新增模块，删除模块，导入模块"></a>新增模块，删除模块，导入模块</h4><p>删除模块并不会删除本地文件，如需删除 需要到本地文件夹删除文件</p>
<p>本地文件的模块是可以被导入进来的。</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java零基础2</title>
    <url>/2019/12/09/java%E9%9B%B6%E5%9F%BA%E7%A1%802/</url>
    <content><![CDATA[<h4 id="java零基础-2"><a href="#java零基础-2" class="headerlink" title="java零基础 2"></a>java零基础 2</h4><h5 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h5><h6 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h6><p>运算符： 对常量或者变量进行操作的   符号</p>
<p>表达式：用运算符把常量或者变量连接起来 符合java语法的式子 就可以称为表达式</p>
<p>​                不用运算符连接的表达式体现的是不同类型的表达式</p>
<p>举例说明：</p>
<p>​                    int a = 10;<br>​                    int b = 30;</p>
<p>​                    int c = a + b;</p>
<p>​                    +: 是运算符，并且是算术运算符</p>
<p>​                    a+b：是表达式，由于 + 是算术运算符，所以这个表达式叫算术表达式</p>
<p><img src="/2019/12/09/java零基础2/1575857873701.png" alt="1575857873701"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    算术运算符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义两个变量</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">int</span> c;</span><br><span class="line">        c = a + b;</span><br><span class="line">        System.out.println(<span class="string">"a + b = "</span> + c); <span class="comment">//输出结果: a + b = 18</span></span><br><span class="line"></span><br><span class="line">        c = a - b;</span><br><span class="line">        System.out.println(<span class="string">"a - b = "</span> + c); <span class="comment">//输出结果: a - b = 2</span></span><br><span class="line"></span><br><span class="line">        c = a * b;</span><br><span class="line">        System.out.println(<span class="string">"a * b = "</span> + c);<span class="comment">//输出结果: a * b = 80</span></span><br><span class="line"></span><br><span class="line">        c = a / b;</span><br><span class="line">        System.out.println(<span class="string">"a / b = "</span> + c);<span class="comment">//输出结果: a / b = 1</span></span><br><span class="line">        <span class="comment">// 注意：整数相除只能得到整数，要想得到小数，必须有浮点数参与</span></span><br><span class="line"></span><br><span class="line">        c = a % b;</span><br><span class="line">        System.out.println(<span class="string">"a % b = "</span> + c);<span class="comment">//输出结果: a % b = 2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//除法得到的是商，取余得到的是余数</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="number">10.0</span> / <span class="number">8</span>); <span class="comment">//输出结果:  1.25   使用c = 10.0 / 8  会报错，因为c定义为 int类型</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="字符-的-“-”-操作"><a href="#字符-的-“-”-操作" class="headerlink" title="字符 的 “+” 操作"></a>字符 的 “+” 操作</h4><p>拿字符在计算机底层对应的数值来进行计算的</p>
<p>‘A’    ————————》 65     A-Z 是连续的   ‘Z’——————》90</p>
<p>‘a’   ————————》 97     a-z是连续的    ‘z’——————》122</p>
<p>‘0’   ————————》 48     0-9是连续的    ‘9’——————》57</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    字符 的'+'操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(A);  //没用单引号包起来表示 变量，但是变量A未定义，所以报错，注释掉</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">'A'</span>);   <span class="comment">//使用单引号包起来，表示未字符, 因此输出结果为  字符  A</span></span><br><span class="line">        System.out.println(<span class="string">"A"</span>);    <span class="comment">//双引号表示是字符串，输出结果为 A</span></span><br><span class="line"> 		System.out.println(<span class="string">"A"</span> + <span class="number">0</span>); <span class="comment">//输出结果为  A0</span></span><br><span class="line">        <span class="comment">//如果使用字符 进行 '+' 操作</span></span><br><span class="line">        System.out.println(<span class="string">'A'</span> + <span class="number">0</span>);   <span class="comment">//输出结果为  字符对应的  ANSI码的值 与 数字 和  所以结果为  65</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果使用字符 进行 '+' 操作</span></span><br><span class="line">        System.out.println(<span class="string">'Z'</span> + <span class="number">0</span>);   <span class="comment">//输出结果为  字符对应的  ANSI码的值 与 数字 和  所以结果为  90</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果使用字符 进行 '+' 操作</span></span><br><span class="line">        System.out.println(<span class="string">'a'</span> + <span class="number">0</span>);   <span class="comment">//输出结果为  字符对应的  ANSI码的值 与 数字 和  所以结果为  97</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果使用字符 进行 '+' 操作</span></span><br><span class="line">        System.out.println(<span class="string">'z'</span> + <span class="number">0</span>);   <span class="comment">//输出结果为  字符对应的  ANSI码的值 与 数字 和  所以结果为  122</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结： 算术表达式中包含多个基本数据类型的值的时候，整个算术表达式的类型就会自动进行提升。</p>
<p>提升规则： </p>
<p>​            byte类型，short类型和char 类型的将被提升为 int类型</p>
<p>​            整个表达式的类型自动提升到表达式中最高级操作数同样的类型</p>
<p>​            等级顺序：byte，short，char   ——》 int  ——》long ——》float——》double</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    字符 的'+'操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义两个变量</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">'A'</span>;      <span class="comment">// 'A'的值是 65</span></span><br><span class="line">        c = <span class="string">'a'</span>;     <span class="comment">//'a'的值是97</span></span><br><span class="line">        c = <span class="string">'0'</span>;    <span class="comment">//'0'的值是48</span></span><br><span class="line">        System.out.println(i + c);    <span class="comment">//输出结果  58</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//char ch = i + c;   //错误表达式，i + c 的结果 为整形 ch为char类型，因此不行</span></span><br><span class="line">        <span class="comment">//char类型会自动提升为int类型</span></span><br><span class="line">        <span class="keyword">int</span> j = i + c;</span><br><span class="line">        System.out.println(j);   <span class="comment">//输出结果  58</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int k = 10 + 13.14;  //错误表达式， 10 + 13.14的结果为浮点型，k为int类型 因此不行</span></span><br><span class="line">        <span class="keyword">double</span> k = <span class="number">10</span> + <span class="number">13.14</span>;</span><br><span class="line">        System.out.println(k);  <span class="comment">//输出结果  23.14</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="字符串的-操作"><a href="#字符串的-操作" class="headerlink" title="字符串的+操作"></a>字符串的+操作</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    字符串 的'+'操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"shen"</span> + <span class="string">"xiaobu"</span>);  <span class="comment">//shenxiaobu</span></span><br><span class="line">        System.out.println(<span class="string">"xiaobu"</span> + <span class="number">666</span>);   <span class="comment">//xiaobu666</span></span><br><span class="line">        System.out.println(<span class="number">666</span> + <span class="string">"xiaobu"</span>); <span class="comment">//666xiaobu</span></span><br><span class="line">        System.out.println(<span class="string">"xiaobu"</span> + <span class="number">6</span> + <span class="number">66</span>);  <span class="comment">//xiaobu666</span></span><br><span class="line">        System.out.println(<span class="number">6</span> + <span class="number">66</span> + <span class="string">"xiaobu"</span>);  <span class="comment">// 72xiaobu</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础2/1575869502691.png" alt="1575869502691"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    赋值运算符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//把10赋值给int类型的变量i</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"i:"</span> + i);  <span class="comment">//输出结果为 i:10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// += 把左边和右边的数据做加法操作，结果赋值给左边</span></span><br><span class="line">        i += <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// 上面的赋值方法 相当于 i = i + 20;  有时候两者是一样的，但是并不完全一样</span></span><br><span class="line">        System.out.println(<span class="string">"i:"</span> + i);  <span class="comment">//输出结果为 i:30</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意：扩展的赋值运算符底层隐含了强制的类型转换</span></span><br><span class="line">        <span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// s = s + 20;    //编译报错：不兼容的类型: 从int转换到short可能会有损失，因为s为 short类型, s + 20为int类型</span></span><br><span class="line"></span><br><span class="line">        s += <span class="number">20</span>;</span><br><span class="line">        <span class="comment">//上面的赋值方法 相当于  s = (short)(s + 20);    隐含了强制的类型转换</span></span><br><span class="line">        System.out.println(<span class="string">"s:"</span> + s);  <span class="comment">//输出结果为 s:30</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//总结： 如果有累加操作时 建议采用  +=  的运算符</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="自增或自减运算符"><a href="#自增或自减运算符" class="headerlink" title="自增或自减运算符"></a>自增或自减运算符</h5><p><img src="/2019/12/09/java零基础2/1575870319491.png" alt="1575870319491"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    自增或自减运算符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义变量</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"i:"</span> + i); <span class="comment">//输出结果为 i:10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//单独使用</span></span><br><span class="line">        i++;   <span class="comment">//此时  i的结果 为 11</span></span><br><span class="line">        ++i;    <span class="comment">//此时 i的结果 为 12</span></span><br><span class="line">        System.out.println(<span class="string">"i:"</span> + i); <span class="comment">//输出结果为 i:12</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//参与操作使用</span></span><br><span class="line">        <span class="keyword">int</span> j = i++;   <span class="comment">//先执行  j = i;  再执行  i++;   所以 j的值为 12，i的值为 13</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"i:"</span> + i); <span class="comment">//输出结果为 i:13</span></span><br><span class="line">        System.out.println(<span class="string">"j:"</span> + j);   <span class="comment">//输出结果为 j:12</span></span><br><span class="line"></span><br><span class="line">        j = ++i;      <span class="comment">//先执行 ++i;  再执行 j = i; 所以此时 i的值为 14，j的值也为 14</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"i:"</span> + i); <span class="comment">//输出结果为 i:14</span></span><br><span class="line">        System.out.println(<span class="string">"j:"</span> + j);   <span class="comment">//输出结果为 j:14</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础2/1575870837584.png" alt="1575870837584"></p>
<p><img src="/2019/12/09/java零基础2/1575870862560.png" alt="1575870862560"></p>
<p><img src="/2019/12/09/java零基础2/1575870886394.png" alt="1575870886394"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    短路运算符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义变量</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">20</span>;</span><br><span class="line">        System.out.println((i++ &gt; <span class="number">100</span>) &amp; (j++ &gt; <span class="number">100</span>));  <span class="comment">//输出结果为false</span></span><br><span class="line">        System.out.println(<span class="string">"i:"</span> + i);  <span class="comment">//输出结果为 i:11</span></span><br><span class="line">        System.out.println(<span class="string">"j:"</span> + j);    <span class="comment">//输出结果为 j:21</span></span><br><span class="line">        <span class="comment">// 因为 运算符 &amp;  左边为false 右边也得执行 即 j++ 执行</span></span><br><span class="line"></span><br><span class="line">        System.out.println((i++ &gt; <span class="number">100</span>) &amp;&amp; (j++ &gt; <span class="number">100</span>)); <span class="comment">//输出结果为false</span></span><br><span class="line">        System.out.println(<span class="string">"i:"</span> + i);   <span class="comment">//输出结果为 i:12</span></span><br><span class="line">        System.out.println(<span class="string">"j:"</span> + j);    <span class="comment">//输出结果为 j:21</span></span><br><span class="line">        <span class="comment">// 因为 短路运算符 &amp;&amp;  左边为false 右边不执行 即 j++ 未执行</span></span><br><span class="line"></span><br><span class="line">        System.out.println((i++ &gt; <span class="number">10</span>) | (j++ &gt; <span class="number">100</span>));  <span class="comment">//输出结果为true</span></span><br><span class="line">        System.out.println(<span class="string">"i:"</span> + i);   <span class="comment">//输出结果为 i:13</span></span><br><span class="line">        System.out.println(<span class="string">"j:"</span> + j);    <span class="comment">//输出结果为 j:22</span></span><br><span class="line">        <span class="comment">// 因为 运算符 |  左边为true 右边也得执行 即 j++ 执行</span></span><br><span class="line"></span><br><span class="line">        System.out.println((i++ &gt; <span class="number">10</span>) || (j++ &gt; <span class="number">100</span>));  <span class="comment">//输出结果为true</span></span><br><span class="line">        System.out.println(<span class="string">"i:"</span> + i);   <span class="comment">//输出结果为 i:14</span></span><br><span class="line">        System.out.println(<span class="string">"j:"</span> + j);    <span class="comment">//输出结果为 j:22</span></span><br><span class="line">        <span class="comment">// 因为 短路运算符 ||  左边为true 右边不执行 即 j++ 未执行</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/09/java零基础2/1575871481003.png" alt="1575871481003"></p>
<p><img src="/2019/12/09/java零基础2/1575871569203.png" alt="1575871569203"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    数据输入</span></span><br><span class="line"><span class="comment">    1.导包  import Java.util.Scanner;   导包的动作必须出现在类定义的上边（在idea编辑器中，会自动导包）</span></span><br><span class="line"><span class="comment">    2.创建对象 Scanner sc = new Scanner(System.in);   只有sc是变量名可以变，其他都不可以改变</span></span><br><span class="line"><span class="comment">    3.接收数据  int i = sc.nextInt();  只有i是变量名可以变，sc跟随上面变，其他的不可以改变</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> i = sc.nextInt();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//在控制台上输入 一个 int类型数值  回车   会输出 i的值  输入非int类型的值 会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    数据输入</span></span><br><span class="line"><span class="comment">    1.导包  import Java.util.Scanner;   导包的动作必须出现在类定义的上边（在idea编辑器中，会自动导包）</span></span><br><span class="line"><span class="comment">    2.创建对象 Scanner sc = new Scanner(System.in);   只有sc是变量名可以变，其他都不可以改变</span></span><br><span class="line"><span class="comment">    3.接收数据  int i = sc.nextInt();  只有i是变量名可以变，sc跟随上面变，其他的不可以改变</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    下面制作一个三个和尚的最高身高</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> height1,height2,height3;</span><br><span class="line">        System.out.println(<span class="string">"请输入第一个和尚的身高"</span>);</span><br><span class="line"></span><br><span class="line">        height1 = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"请输入第二个和尚的身高"</span>);</span><br><span class="line">        height2 = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"请输入第三个和尚的身高"</span>);</span><br><span class="line">        height3 = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用三元运算符获取前两个和尚较高身高值，并用临时身高变量存储起来</span></span><br><span class="line">        <span class="keyword">int</span> tempHeight = height1 &gt; height2 ? height1 : height2;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用三元运算符获取临时身高值与第三个和尚身高的比较，并用最大身高变量保存</span></span><br><span class="line">        <span class="keyword">int</span> maxHeight = tempHeight &gt; height3 ? tempHeight : height3;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"第一个和尚的身高为"</span> + height1);</span><br><span class="line">        System.out.println(<span class="string">"第二个和尚的身高为"</span> + height2);</span><br><span class="line">        System.out.println(<span class="string">"第三个和尚的身高为"</span> + height3);</span><br><span class="line">        System.out.println(<span class="string">"最高的身高为"</span> + max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">        运行结果如下</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            请输入第一个和尚的身高</span></span><br><span class="line"><span class="comment">            172</span></span><br><span class="line"><span class="comment">            请输入第二个和尚的身高</span></span><br><span class="line"><span class="comment">            112</span></span><br><span class="line"><span class="comment">            请输入第三个和尚的身高</span></span><br><span class="line"><span class="comment">            185</span></span><br><span class="line"><span class="comment">            第一个和尚的身高为172</span></span><br><span class="line"><span class="comment">            第二个和尚的身高为112</span></span><br><span class="line"><span class="comment">            第三个和尚的身高为185</span></span><br><span class="line"><span class="comment">            最高的身高为185</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java零基础</title>
    <url>/2019/12/08/java%E9%9B%B6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="java零基础"><a href="#java零基础" class="headerlink" title="java零基础"></a>java零基础</h3><h4 id="java语言发展史"><a href="#java语言发展史" class="headerlink" title="java语言发展史"></a>java语言发展史</h4><p><img src="/2019/12/08/java零基础/1575786454571.png" alt="1575786454571"></p>
<p>1996年到2002年 版本变动不大，版本号就是后面 +1</p>
<p>2004年由于版本变动较大，所以直接将版本改为 java5.0</p>
<p>2009年sun公司被Oracle公司收购</p>
<p><img src="/2019/12/08/java零基础/1575786932615.png" alt="1575786932615"></p>
<p>java程序通过jvm编译，从而使各平台都支持java语言</p>
<p><img src="/2019/12/08/java零基础/1575787013785.png" alt="1575787013785"></p>
<p>JRE是java程序运训时环境，包含JVM和运行时所需的核心类库</p>
<p><img src="/2019/12/08/java零基础/1575787129534.png" alt="1575787129534"></p>
<p><img src="/2019/12/08/java零基础/1575787164497.png" alt="1575787164497"></p>
<p><img src="/2019/12/08/java零基础/1575787200550.png" alt="1575787200550"></p>
<p><img src="/2019/12/08/java零基础/1575787225989.png" alt="1575787225989"></p>
<p><img src="/2019/12/08/java零基础/1575787251015.png" alt="1575787251015"></p>
<p><img src="/2019/12/08/java零基础/1575787274428.png" alt="1575787274428"></p>
<p><img src="/2019/12/08/java零基础/1575787298291.png" alt="1575787298291"></p>
<p><img src="/2019/12/08/java零基础/1575787322218.png" alt="1575787322218"></p>
<p><img src="/2019/12/08/java零基础/1575787340784.png" alt="1575787340784"></p>
<p><img src="/2019/12/08/java零基础/1575787360422.png" alt="1575787360422"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="HelloWorld案例的编译和运行"><a href="#HelloWorld案例的编译和运行" class="headerlink" title="HelloWorld案例的编译和运行"></a>HelloWorld案例的编译和运行</h5><p>打开命令提示符窗口，进入到HelloWorld.java所在的目录，输入指定命令编译和执行。</p>
<p>编译：javac 文件名.java   （执行这个命令会生成一个  文件名.class   文件）</p>
<p>范例：javac HelloWorld.java</p>
<p>执行：java类名               （只有类名，千万不要有后缀，否则报错）</p>
<p>范例： java HelloWorld      </p>
<p><img src="/2019/12/08/java零基础/1575787706736.png" alt="1575787706736"></p>
<h4 id="java代码注释"><a href="#java代码注释" class="headerlink" title="java代码注释"></a>java代码注释</h4><blockquote>
<p>注释分类</p>
<blockquote>
<p>单行注释</p>
<p>​        格式： // 注释信息</p>
<p>多行注释</p>
<p>​        格式  /<em>  注释信息  </em>/</p>
<p>文档注释</p>
<pre><code>格式   /**  注释信息 */
</code></pre></blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	java程序中最基本的组成单位是类，</span></span><br><span class="line"><span class="comment">	类的定义格式：</span></span><br><span class="line"><span class="comment">		public class 类名 &#123;</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	下面是我定义的HelloWorld类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	这是main方法</span></span><br><span class="line"><span class="comment">    	main方法是程序的入口方法，代码的执行都是从main开始的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这是输出语句，“”里面的内容为输出内容，是可以改变的</span></span><br><span class="line">        System.out.printLn(<span class="string">"shenxiaobu"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><h5 id="关键字的特点"><a href="#关键字的特点" class="headerlink" title="关键字的特点"></a>关键字的特点</h5><p>关键字的字母全是小写字母</p>
<p>常用的编辑器，针对关键字有特殊的颜色标记，非常直观</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面例子中  public class static 就是关键字</p>
<h4 id="常量概述"><a href="#常量概述" class="headerlink" title="常量概述"></a>常量概述</h4><p>常量：在程序运行过程中，其值不可以发生改变的量。</p>
<p><img src="/2019/12/08/java零基础/1575788453085.png" alt="1575788453085"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	常量分类</span></span><br><span class="line"><span class="comment">    	字符串常量：	用双引号括起来的内容，”shenxiaobu“，”爆米花“</span></span><br><span class="line"><span class="comment">		整数常量： 	 不带小数的数字， 1，2，3，5，-5，0</span></span><br><span class="line"><span class="comment">		小数常量：  	带小数的数字  13.12  -5.254</span></span><br><span class="line"><span class="comment">		字符常量： 	用单引号括起来的内容  ‘A' ’0’  ‘打’</span></span><br><span class="line"><span class="comment">		布尔常量： 	布尔值，表示真假   true   false</span></span><br><span class="line"><span class="comment">		空常量： 	一个特殊的值  空值  null	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConstantDemo &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//字符串常量</span></span><br><span class="line">        System.out.println(<span class="string">"字符串常量"</span>);</span><br><span class="line">        System.out.println(<span class="string">"shenxiaobu"</span>);</span><br><span class="line">        System.out.println(<span class="string">"爆米花"</span>);</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//整数常量</span></span><br><span class="line">        System.out.println(<span class="string">"整数常量"</span>);</span><br><span class="line">        System.out.println(<span class="number">666</span>);</span><br><span class="line">        System.out.println(-<span class="number">44545</span>);</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小数常量</span></span><br><span class="line">        System.out.println(<span class="string">"小数常量"</span>);</span><br><span class="line">        System.out.println(<span class="number">1.2</span>);</span><br><span class="line">        System.out.println(-<span class="number">5.04</span>);</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符常量</span></span><br><span class="line">        System.out.println(<span class="string">"字符常量"</span>);</span><br><span class="line">        System.out.println(<span class="string">'a'</span>);</span><br><span class="line">        System.out.println(<span class="string">'发'</span>);</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//布尔常量</span></span><br><span class="line">        System.out.println(<span class="string">"布尔常量"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="keyword">false</span>);</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//空常量  空常量是不让输出的，所以 注释掉</span></span><br><span class="line"><span class="comment">//        System.out.println(null);</span></span><br><span class="line"><span class="comment">//        System.out.println('');</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="/2019/12/08/java零基础/1575789298315.png" alt="1575789298315"></p>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p><img src="/2019/12/08/java零基础/1575789346816.png" alt="1575789346816"></p>
<p><img src="/2019/12/08/java零基础/1575789376173.png" alt="1575789376173"></p>
<p>取值范围解释</p>
<p>byte 内存占用一个字节，一个字节有8位二进制数，即  最小值为 00000000  最大值为 11111111</p>
<p>第一位数值  0代表  负数   1代表  正数， 其余七位表示数值大小   即最小值为  -1111111 最大值为  +1111111</p>
<p>即  最小值 为   -（2的7次方 -1）  最大值为  2的7次方 -1  所以byte能表示的值的范围为  -128 - +127       </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 变量定义格式</span></span><br><span class="line"><span class="comment"> *      数据类型 变量名 = 变量值;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 基本数据类型</span></span><br><span class="line"><span class="comment"> *      byte，short，int，long，float，double，char，boolean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 变量的使用</span></span><br><span class="line"><span class="comment"> *      取值格式： 变量名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      修改值格式： 变量名 =  变量值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义变量</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出变量</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改变量</span></span><br><span class="line">        a = <span class="number">520</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<p>10</p>
<p>520</p>
<h5 id="变量使用的注意事项"><a href="#变量使用的注意事项" class="headerlink" title="变量使用的注意事项"></a>变量使用的注意事项</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接定义 long类型数值为如下数值的时候，运行会报错，提示数值过大，因此注释，不采用如下方式</span></span><br><span class="line"><span class="comment">//long i = 100000000000000;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//需要这么定义 long类型数值  数值后面加一个 L</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> i = <span class="number">100000000000000L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接定义 float 类型为如下数值时 会报错， 提示  Error:(29, 19) java: 不兼容的类型: 从double转换</span></span><br><span class="line"><span class="comment">//到float可能会有损失   因此注释，不采用如下方式定义 float类型数值</span></span><br><span class="line"><span class="comment">//float i = 1000000.00;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//需要这么定义</span></span><br><span class="line"><span class="keyword">float</span> i = <span class="number">1000000.00F</span></span><br></pre></td></tr></table></figure>
<h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>标识符定义规则</p>
<p>由数字、字母、下划线(_)和美元符($)组成</p>
<p>不能以数字开头</p>
<p>不能是关键字</p>
<p>区分大小写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//判断下面那些变量名  不符合规则</span><br><span class="line">bj ： true   b2 ： true   2b   : false,以数字开头</span><br><span class="line">class  ： false  是关键字    _2b  : true          #shenxiaobu   : false   #不是标识符的组成部分</span><br><span class="line">ak47  : true     Class : true  区分大小写，不是关键字，所以可以是标识符   helloworld  ： true</span><br></pre></td></tr></table></figure>
<h6 id="常见命名约定"><a href="#常见命名约定" class="headerlink" title="常见命名约定"></a>常见命名约定</h6><blockquote>
<p>小驼峰命名法：建议用在     方法  或  变量</p>
<blockquote>
<p>约定1：标识符是一个单词的时候，首字母小写</p>
<p>范例1：name</p>
<p>约定2：标识符由多个单词组成的时候，第一个单词首字母小写，其他单词首字母大写</p>
<p>范例2：firstName </p>
</blockquote>
</blockquote>
<blockquote>
<p>大驼峰命名法：建议用在 类  上</p>
<blockquote>
<p>约定1：标识符是一个单词的时候，首字母大写</p>
<p>范例1：Student</p>
<p>约定2：标识符由多个单词组成的时候，每个单词的首字母大写</p>
<p>范例2：GoodStudent</p>
</blockquote>
</blockquote>
<h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><p><img src="/2019/12/08/java零基础/1575791458206.png" alt="1575791458206"></p>
<p><img src="/2019/12/08/java零基础/1575791487443.png" alt="1575791487443"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动类型转换</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">double</span> b = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">float</span> c = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"int:"</span> + a);</span><br><span class="line">        System.out.println(<span class="string">"double:"</span> + b);</span><br><span class="line">        System.out.println(<span class="string">"float:"</span> + c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//强制类型转换</span></span><br><span class="line">        <span class="keyword">int</span> A = (<span class="keyword">int</span>)<span class="number">10.000</span>;</span><br><span class="line">        System.out.println(<span class="string">"(int)A:"</span> + A);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出结果为</span></span><br><span class="line"><span class="comment">//int:10</span></span><br><span class="line"><span class="comment">//double:10.0</span></span><br><span class="line"><span class="comment">//float:10.0</span></span><br><span class="line"><span class="comment">//(int)A:10</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读vue文档有感</title>
    <url>/2019/11/30/%E9%98%85%E8%AF%BBvue%E6%96%87%E6%A1%A3%E6%9C%89%E6%84%9F/</url>
    <content><![CDATA[<h3 id="vue文档官网笔记"><a href="#vue文档官网笔记" class="headerlink" title="vue文档官网笔记"></a>vue文档官网笔记</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">不要在选项属性或回调上使用箭头函数，比如 created: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.a) 或 vm.$watch(<span class="string">'a'</span>, newValue =&gt; <span class="keyword">this</span>.myMethod())。因为箭头函数并没有 <span class="keyword">this</span>，<span class="keyword">this</span> 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 Uncaught <span class="built_in">TypeError</span>: Cannot read property <span class="keyword">of</span> <span class="literal">undefined</span> 或 Uncaught <span class="built_in">TypeError</span>: <span class="keyword">this</span>.myMethod is not a <span class="function"><span class="keyword">function</span> 之类的错误。</span></span><br></pre></td></tr></table></figure>
<h6 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h6><ol>
<li>new vue()  新建vue实例</li>
<li>初始化  事件&amp;生命周期</li>
<li>beforeCreate </li>
<li>初始化 注入&amp;校验</li>
<li>created </li>
<li>是否指定el元素   否的话调用  vm.$mount(el)  </li>
<li>是否指定template模板选项</li>
<li>是的话 将 template 编译到 render函数中   否的话将 el外部的 HTML 作为 template 编译</li>
<li>beforeMount</li>
<li>创建 vm.$el 并替换 “el”</li>
<li>mounted</li>
<li>挂载完毕    当data被修改时   ——》 beforeUpdate 虚拟DOM 重新渲染并应用更新  update</li>
<li>当调用vm.$destroy()函数时</li>
<li>beforeDestroy</li>
<li>解除绑定 销毁子组件以及 事件监听器</li>
<li>销毁完毕</li>
<li>destroyed</li>
</ol>
<h5 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这是语句，不是表达式 --&gt;</span><br><span class="line">&#123;&#123; <span class="keyword">var</span> a = <span class="number">1</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span><br><span class="line">&#123;&#123; <span class="keyword">if</span> (ok) &#123; <span class="keyword">return</span> message &#125; &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量。</span></span><br></pre></td></tr></table></figure>
<p>从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">注意，参数表达式的写法存在一些约束，如之后的“对动态参数表达式的约束”章节所述。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>这里的 <code>attributeName</code> 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果你的 Vue 实例有一个 <code>data</code> 属性 <code>attributeName</code>，其值为 <code>&quot;href&quot;</code>，那么这个绑定将等价于 <code>v-bind:href</code>。</p>
<p>同样地，你可以使用动态参数为一个动态的事件名绑定处理函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a v-on:[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>在这个示例中，当 <code>eventName</code> 的值为 <code>&quot;focus&quot;</code> 时，<code>v-on:[eventName]</code> 将等价于 <code>v-on:focus</code>。</p>
<h4 id="对动态参数的值的约束"><a href="#对动态参数的值的约束" class="headerlink" title="对动态参数的值的约束"></a>对动态参数的值的约束</h4><p>动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>
<h4 id="对动态参数表达式的约束"><a href="#对动态参数表达式的约束" class="headerlink" title="对动态参数表达式的约束"></a>对动态参数表达式的约束</h4><p>动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这会触发一个编译警告 --&gt;</span><br><span class="line">&lt;a v-bind:[&apos;foo&apos; + bar]=&quot;value&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>变通的办法是使用没有空格或引号的表达式，或用计算属性替代这种复杂表达式。</p>
<p>在 DOM 中使用模板时 (直接在一个 HTML 文件里撰写模板)，还需要避免使用大写字符来命名键名，因为浏览器会把 attribute 名全部强制转为小写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">在 DOM 中使用模板时这段代码会被转换为 `v-bind:[someattr]`。</span><br><span class="line">除非在实例中有一个名为“someattr”的 property，否则代码不会工作。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;a v-bind:[someAttr]=&quot;value&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>
<h2 id="绑定-HTML-Class"><a href="#绑定-HTML-Class" class="headerlink" title="绑定 HTML Class"></a><a href="https://cn.vuejs.org/v2/guide/class-and-style.html#绑定-HTML-Class" target="_blank" rel="noopener">绑定 HTML Class</a></h2><h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a><a href="https://cn.vuejs.org/v2/guide/class-and-style.html#对象语法" target="_blank" rel="noopener">对象语法</a></h3><p>我们可以传给 <code>v-bind:class</code> 一个对象，以动态地切换 class：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a><a href="https://cn.vuejs.org/v2/guide/class-and-style.html#数组语法" target="_blank" rel="noopener">数组语法</a></h3><p>我们可以把一个数组传给 <code>v-bind:class</code>，以应用一个 class 列表：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"[activeClass, errorClass]"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/数据</span></span><br><span class="line"><span class="regexp">data: &#123;</span></span><br><span class="line"><span class="regexp">    activeClass: 'active',</span></span><br><span class="line"><span class="regexp">    errorClass: 'text-danger'</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>渲染为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>数组对象结合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-bind:class=&quot;[activeClass, errorClass,&#123; active: isActive &#125;]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h2 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a><a href="https://cn.vuejs.org/v2/guide/conditional.html#v-if-vs-v-show" target="_blank" rel="noopener"><code>v-if</code> vs <code>v-show</code></a></h2><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p>
<p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>
<p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p>
<h2 id="v-if-与-v-for-一起使用"><a href="#v-if-与-v-for-一起使用" class="headerlink" title="v-if 与 v-for 一起使用"></a><a href="https://cn.vuejs.org/v2/guide/conditional.html#v-if-与-v-for-一起使用" target="_blank" rel="noopener"><code>v-if</code> 与 <code>v-for</code> 一起使用</a></h2><p><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code>。请查阅<a href="https://cn.vuejs.org/v2/style-guide/#避免-v-if-和-v-for-用在一起-必要" target="_blank" rel="noopener">风格指南</a>以获取更多信息。</p>
<p>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。请查阅<a href="https://cn.vuejs.org/v2/guide/list.html#v-for-with-v-if" target="_blank" rel="noopener">列表渲染指南</a> 以获取详细信息。</p>
<h2 id="显示过滤-排序后的结果"><a href="#显示过滤-排序后的结果" class="headerlink" title="显示过滤/排序后的结果"></a><a href="https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序后的结果" target="_blank" rel="noopener">显示过滤/排序后的结果</a></h2><p>有时，我们想要显示一个数组经过过滤或排序后的版本，而不实际改变或重置原始数据。在这种情况下，可以创建一个计算属性，来返回过滤或排序后的数组。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;n in evenNumbers&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">  numbers: [ 1, 2, 3, 4, 5 ]</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  evenNumbers: function () &#123;</span><br><span class="line">    return this.numbers.filter(function (number) &#123;</span><br><span class="line">      return number % 2 === 0</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在计算属性不适用的情况下 (例如，在嵌套 <code>v-for</code> 循环中) 你可以使用一个方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;n in even(numbers)&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">  numbers: [ 1, 2, 3, 4, 5 ]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  even: function (numbers) &#123;</span><br><span class="line">    return numbers.filter(function (number) &#123;</span><br><span class="line">      return number % 2 === 0</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。</p>
<blockquote>
<p>2.3.0 新增</p>
</blockquote>
<p>Vue 还对应 <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters" target="_blank" rel="noopener"><code>addEventListener</code> 中的 <code>passive</code> 选项</a>提供了 <code>.passive</code> 修饰符。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:scroll.passive</span>=<span class="string">"onScroll"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个 <code>.passive</code> 修饰符尤其能够提升移动端的性能。</p>
<p>不要把 <code>.passive</code> 和 <code>.prevent</code> 一起使用，因为 <code>.prevent</code> 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，<code>.passive</code> 会告诉浏览器你<em>不</em>想阻止事件的默认行为。</p>
<h3 id="在组件上使用-v-model"><a href="#在组件上使用-v-model" class="headerlink" title="在组件上使用 v-model"></a><a href="https://cn.vuejs.org/v2/guide/components.html#在组件上使用-v-model" target="_blank" rel="noopener">在组件上使用 <code>v-model</code></a></h3><p>自定义事件也可以用于创建支持 <code>v-model</code> 的自定义输入组件。记住：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>等价于：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:value</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:input</span>=<span class="string">"searchText = $event.target.value"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure>
<p>当用在组件上时，<code>v-model</code> 则会这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:value</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:input</span>=<span class="string">"searchText = $event"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>为了让它正常工作，这个组件内的 <code>&lt;input&gt;</code> 必须：</p>
<ul>
<li>将其 <code>value</code> 特性绑定到一个名叫 <code>value</code> 的 prop 上</li>
<li>在其 <code>input</code> 事件被触发时，将新的值通过自定义的 <code>input</code> 事件抛出</li>
</ul>
<p>写成代码之后是这样的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'custom-input'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'value'</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      v-bind:value="value"</span></span><br><span class="line"><span class="string">      v-on:input="$emit('input', $event.target.value)"</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>现在 <code>v-model</code> 就应该可以在这个组件上完美地工作起来了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>到目前为止，关于组件自定义事件你需要了解的大概就这些了，如果你阅读完本页内容并掌握了它的内容，我们会推荐你再回来把<a href="https://cn.vuejs.org/v2/guide/components-custom-events.html" target="_blank" rel="noopener">自定义事件</a>读完。</p>
<h2 id="自定义组件的-v-model"><a href="#自定义组件的-v-model" class="headerlink" title="自定义组件的 v-model"></a><a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#自定义组件的-v-model" target="_blank" rel="noopener">自定义组件的 <code>v-model</code></a></h2><blockquote>
<p>2.2.0+ 新增</p>
</blockquote>
<p>一个组件上的 <code>v-model</code> 默认会利用名为 <code>value</code> 的 prop 和名为 <code>input</code> 的事件，但是像单选框、复选框等类型的输入控件可能会将 <code>value</code> 特性用于<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Value" target="_blank" rel="noopener">不同的目的</a>。<code>model</code> 选项可以用来避免这样的冲突：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&apos;base-checkbox&apos;, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &apos;checked&apos;,</span><br><span class="line">    event: &apos;change&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    checked: Boolean</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;input</span><br><span class="line">      type=&quot;checkbox&quot;</span><br><span class="line">      v-bind:checked=&quot;checked&quot;</span><br><span class="line">      v-on:change=&quot;$emit(&apos;change&apos;, $event.target.checked)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>现在在这个组件上使用 <code>v-model</code> 的时候：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;base-checkbox v-model=&quot;lovingVue&quot;&gt;&lt;/base-checkbox&gt;</span><br></pre></td></tr></table></figure>
<p>这里的 <code>lovingVue</code> 的值将会传入这个名为 <code>checked</code> 的 prop。同时当 <code>&lt;base-checkbox&gt;</code> 触发一个 <code>change</code> 事件并附带一个新的值的时候，这个 <code>lovingVue</code> 的属性将会被更新。</p>
<p>注意你仍然需要在组件的 <code>props</code> 选项里声明 <code>checked</code> 这个 prop。</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue下拉刷新组件</title>
    <url>/2019/11/29/vue%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="下拉刷新组件"><a href="#下拉刷新组件" class="headerlink" title="下拉刷新组件"></a>下拉刷新组件</h4><h6 id="需求：实现下拉一小部分提示-下拉可刷新，下拉高度足够提示释放即可刷新，释放加载刷新动画；"><a href="#需求：实现下拉一小部分提示-下拉可刷新，下拉高度足够提示释放即可刷新，释放加载刷新动画；" class="headerlink" title="需求：实现下拉一小部分提示 下拉可刷新，下拉高度足够提示释放即可刷新，释放加载刷新动画；"></a>需求：实现下拉一小部分提示 下拉可刷新，下拉高度足够提示释放即可刷新，释放加载刷新动画；</h6><p>分析：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1 当页面没滚动时才判断对应手势  即scrollTop = 0 才继续判断</span><br><span class="line">2 当手势向下滑动时，将整个div向下拉动   css3的transform 属性</span><br><span class="line">3 头部添加 “下拉可刷新” “释放即可刷新” ”刷新中“ 的提示</span><br><span class="line">4 应对上面的三种状态  设定三种状态值 moveState   0下拉即可刷新 1释放即可刷新 2加载中</span><br></pre></td></tr></table></figure>
<p>代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;weui-pull-refresh&quot;</span><br><span class="line">    ref=&quot;scrollBox&quot;</span><br><span class="line">    :style=&quot;style&quot;</span><br><span class="line">    @touchstart=&quot;touchStart&quot;</span><br><span class="line">    @touchmove=&quot;touchMove&quot;</span><br><span class="line">    @touchend=&quot;touchEnd&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;weui-pull-refreshing-box&quot;&gt;</span><br><span class="line">      &lt;div v-if=&quot;moveState &lt; 2&quot;&gt;&#123;&#123; moveState === 0 ? &quot;下拉即可刷新&quot; : &quot;释放即可刷新&quot; &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;!--  下面用到了weui 的 加载icon，如需引用需要加载weui  --&gt;</span><br><span class="line">      &lt;div v-else&gt;&lt;i class=&quot;weui-loading&quot;/&gt;刷新中...&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;weui-pull-present-box&quot;&gt;</span><br><span class="line">      &lt;slot/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default (&#123;</span><br><span class="line">  name: &apos;pull-refresh&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      height: 0,</span><br><span class="line">      startY: &apos;&apos;,    //保存touch时的Y坐标</span><br><span class="line">      moveDistance: 0,    //保存向下滑动的距离</span><br><span class="line">      moveState: 0,        //开始滑动到结束后状态的变化 0:下拉即可刷新 1:释放即可刷新 2:加载中</span><br><span class="line">      duration: 0        //动画持续时间，0就是没有动画</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    style () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        transition: `$&#123;this.duration&#125;ms`,</span><br><span class="line">        transform: `translate3d(0,$&#123;this.moveDistance&#125;px, 0)`</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    touchStart (e) &#123;</span><br><span class="line">      this.duration = 0 // 关闭动画</span><br><span class="line">      this.moveDistance = 0 // 滑动距离归0</span><br><span class="line">      this.startY = e.targetTouches[0].clientY  // 获得开始Y坐标</span><br><span class="line">    &#125;,</span><br><span class="line">    touchMove (e) &#123;    //这里是整个下拉刷新的核心</span><br><span class="line">    //   let scrollTop = document.documentElement.scrollTop || document.body.scrollTop</span><br><span class="line">        //上面的注释掉，是因为上面针对的容器是document，根据自己需要下拉的容器判断</span><br><span class="line">         let scrollTop = $(&quot;.pull-container&quot;).scrollTop();</span><br><span class="line">        if(!scrollTop &amp;&amp; scrollTop != 0)&#123;</span><br><span class="line">          return console.log(&quot;该页面没有pull-container容器：&quot; + scrollTop)</span><br><span class="line">        &#125;</span><br><span class="line">        //首先判断我们有没有滚动条，如果有，我们下拉刷新就不能启用。就是说页面不在最顶部，下拉是进行页面正常滚动的</span><br><span class="line">      if (scrollTop &gt; 0) return</span><br><span class="line"> </span><br><span class="line">      let move = e.targetTouches[0].clientY - this.startY</span><br><span class="line">        //判断手指滑动的距离，只有为正数才代表用户下拉了。</span><br><span class="line">      if (move &gt; 0) &#123;</span><br><span class="line">        //阻止默认事件，在微信浏览器中尤为有用，至于为什么，你去试就知道了。</span><br><span class="line">        e.preventDefault()</span><br><span class="line">        //增加滑动阻力的感觉</span><br><span class="line">        this.moveDistance = Math.pow(move, 0.8)</span><br><span class="line">        if (this.moveDistance &gt; this.height) &#123;</span><br><span class="line">          //如果滑动距离大于50 那我就告诉你，释放即可刷新</span><br><span class="line">          if (this.moveState === 1) return</span><br><span class="line">          this.moveState = 1</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          //否则 恢复原样</span><br><span class="line">          if (this.moveState === 0) return</span><br><span class="line">          this.moveState = 0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    touchEnd (e) &#123;</span><br><span class="line">      // 只要手指拿开，我都需要加上结束时的动画，这里为300ms</span><br><span class="line">      this.duration = 300</span><br><span class="line">      if (this.moveDistance &gt; this.height) &#123;</span><br><span class="line">        //这里逻辑跟touchMove一样，但是需要真的加载数据了，那moveState变为2 所以加载动画在这出现</span><br><span class="line">        this.moveState = 2</span><br><span class="line">        //因为还没加载完，我得让加载动画显示着，所以这里移动距离为50</span><br><span class="line">        this.moveDistance = this.height</span><br><span class="line">        this.$emit(&apos;refresh&apos;, () =&gt; &#123;</span><br><span class="line">            //这里就是成功后的回调了，如果该函数被调用，那就以为着加载数据完成，所以状态要回到0，当然需要在父组件调用。</span><br><span class="line">          this.moveState = 0</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        //否则 给我老老实实恢复原样</span><br><span class="line">        this.moveDistance = 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    //这里是给用户操作返回的核心</span><br><span class="line">    moveState (state) &#123;</span><br><span class="line">      //我们监听moveState的状态，</span><br><span class="line">      //0意味着开始也意味着结束，这里是结束，并且只有动画生效我们才能 moveDistance 设为0，</span><br><span class="line">      //为什么动画生效才行，因为动画生效意味着手指离开了屏幕，如果不懂去看touchEnd方法，这时</span><br><span class="line">      //我们让距离变为0才会有动画效果。</span><br><span class="line">      if (state === 0 &amp;&amp; this.duration === 300) &#123;</span><br><span class="line">        this.moveDistance = 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    this.height = $(&quot;.weui-pull-refreshing-box&quot;).height();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- css根据自己需求更改样式 --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .weui-pull-refresh &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        /* height: calc(100vh - 50px - 1rem); */</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        margin-top: -1rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .weui-pull-refresh .weui-pull-refreshing-box &#123;</span><br><span class="line">        line-height: 1rem;</span><br><span class="line">        height: 1rem;</span><br><span class="line">        font-size: 0.28rem;</span><br><span class="line">        color: rgba(69,90,100,.6);</span><br><span class="line">        text-align: center;</span><br><span class="line">        /* margin-bottom:20px; */</span><br><span class="line">    &#125;</span><br><span class="line">    .weui-pull-refresh .weui-pull-present-box &#123;</span><br><span class="line">        background-color: lighten(#fff, 10%);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;pull-container&quot;&gt;</span><br><span class="line">        &lt;wv-pull-refresh @refresh=&quot;refresh&quot;&gt;</span><br><span class="line"> 		&lt;/wv-pull-refresh&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">	&lt;!-- 或下面这种，分不清 --&gt;</span><br><span class="line">	&lt;!-- &lt;wv-pull-refresh @refresh=&quot;refresh&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;pull-container&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/wv-pull-refresh&gt; --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //引入组件</span><br><span class="line">	import wvPullRefresh from &apos;@/路径/pullfresh.vue&apos;;</span><br><span class="line">    export default&#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">        	&quot;wvPullRefresh&quot;: wvPullRefresh,</span><br><span class="line">    	&#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            refresh(done)&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    done()    //关闭刷新回调函数</span><br><span class="line">                   //doSomethings 这里执行该刷新的事</span><br><span class="line">                &#125;, 300)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    /* 如果是特殊样式，需要改变样式，可以采用深度选择器覆盖子组件默认样式*/</span><br><span class="line">    /deep/.weui-pull-refresh .weui-pull-refreshing-box div&#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>以上即可实现下拉刷新功能</p>
<p>不足就是  下拉刷新的刷新中 是固定时间，自己定时器控制，done() 那个方法无法放在别的地方用。</p>
<p>分析：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 刷新状态是子组件控制的，而停止刷新需要父组件告诉子组件。</span><br><span class="line">2 父组件给子组件传值，让子组件改变状态</span><br><span class="line">3 子组件再告诉父组件，状态值已经改好了</span><br></pre></td></tr></table></figure>
<p>父组件创建一个 parentMoveState 值默认为 1 传递给子组件，子组件接收这个属性；子组件监听这个值，如果发生变化变为 0，说明父组件想让子组件 停止刷新（即改变状态值为 0），改完之后告诉父组件改完了，让父组件改变状态值为初始值，以免下次刷新不了。</p>
<p>于是 下拉刷新组件的代码更新如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="comment">//这里是给用户操作返回的核心</span></span><br><span class="line">  moveState (state) &#123;</span><br><span class="line">    <span class="comment">//我们监听moveState的状态，</span></span><br><span class="line">    <span class="comment">//0意味着开始也意味着结束，这里是结束，并且只有动画生效我们才能 moveDistance 设为0，</span></span><br><span class="line">    <span class="comment">//为什么动画生效才行，因为动画生效意味着手指离开了屏幕，如果不懂去看touchEnd方法，这时</span></span><br><span class="line">    <span class="comment">//我们让距离变为0才会有动画效果。</span></span><br><span class="line">    <span class="keyword">if</span> (state === <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.duration === <span class="number">300</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.moveDistance = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  parentMoveState(val)&#123;</span><br><span class="line">      <span class="comment">// 监听父组件 要求子组件 的状态值，执行相应方法</span></span><br><span class="line">      <span class="built_in">console</span>.log(val);</span><br><span class="line">      <span class="keyword">if</span>(val == <span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">this</span>.changeState();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    changeState()&#123;</span><br><span class="line">        <span class="comment">//关闭刷新状态，并告诉父组件，已经关了</span></span><br><span class="line">        <span class="keyword">this</span>.moveState = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">"freshFinish"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后父组件使用方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;wv-pull-refresh @freshFinish=&quot;freshFinish&quot; :parentMoveState=&quot;parentMoveState&quot; @refresh=&quot;refresh&quot;&gt;  </span><br><span class="line">&lt;/wv-pull-refresh&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default&#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                parentMoveState: 1,   //设置为 0 意思为关闭刷新状态</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            freshFinish()&#123;</span><br><span class="line">                //重置状态</span><br><span class="line">                this.parentMoveState = 1;</span><br><span class="line">            &#125;,</span><br><span class="line">            refresh(done)&#123;</span><br><span class="line">                var _this = this;</span><br><span class="line">                _this.loadData(false);</span><br><span class="line">            &#125;,</span><br><span class="line">            loadData(isFirst)&#123;</span><br><span class="line">                if(isFirst)&#123;</span><br><span class="line">                    _this.loading = weui.loading(&quot;正在加载中...&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                _this.axios(&apos;......&apos;).then(function()&#123;</span><br><span class="line">                    _this.parentMoveState = 0;</span><br><span class="line">                    if(isFirst)&#123;</span><br><span class="line">                        _this.loading.hide();</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;).catch(function()&#123;</span><br><span class="line">                    _this.parentMoveState = 0;</span><br><span class="line">                    if(isFirst)&#123;</span><br><span class="line">                        _this.loading.hide();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created()&#123;</span><br><span class="line">            this.isFirstEnter = true;</span><br><span class="line">        &#125;,</span><br><span class="line">        activated() &#123;</span><br><span class="line">            if(!this.$route.meta.isBack || this.isFirstEnter)&#123;</span><br><span class="line">                // 如果isBack是false，表明需要获取新数据，否则就不再请求，直接使用缓存的数据</span><br><span class="line">                // 如果isFirstEnter是true，表明是第一次进入此页面或用户刷新了页面，需获取新数据</span><br><span class="line">                // 把数据清空，可以稍微避免让用户看到之前缓存的数据</span><br><span class="line">                this.loadData(true);</span><br><span class="line">            &#125;</span><br><span class="line">            // 恢复成默认的false，避免isBack一直是true，导致下次无法获取数据</span><br><span class="line">            this.$route.meta.isBack=false;</span><br><span class="line">            // 恢复成默认的false，避免isFirstEnter一直是true，导致每次都获取新数据</span><br><span class="line">            this.isFirstEnter=false;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeRouteEnter(to, from, next) &#123;</span><br><span class="line">            console.log(&apos;courseList routerEnter&apos;);</span><br><span class="line">            if(from.name &amp;&amp; from.name == &apos;courseDetail&apos; || from.name == &apos;stu-center&apos; || from.name == &apos;msgList&apos; || from.name == &apos;schedule&apos;) &#123; </span><br><span class="line">                //判断是从哪个路由过来的，若是不需要刷新的 直接用之前缓存的数据即可，</span><br><span class="line">                to.meta.isBack = true;</span><br><span class="line">            &#125;</span><br><span class="line">            next();</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeRouteLeave(to, from, next) &#123;</span><br><span class="line">            console.log(&apos;courseList routerLeave&apos;);</span><br><span class="line">            var selector = &apos;.list-panel&apos;;  //滚动的选择器</span><br><span class="line">            var savedPosition = $(selector).scrollTop();</span><br><span class="line">            from.meta.selector = selector;</span><br><span class="line">            from.meta.savedPosition = savedPosition;</span><br><span class="line">            if(to.name &amp;&amp; to.name == &apos;jump&apos;)&#123;  //判断哪个页面回来需要缓存，按需改变</span><br><span class="line">                from.meta.isBack = true;</span><br><span class="line">            &#125;</span><br><span class="line">            next();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>上面还加了 keepalive的用法,scrollBehavior就是记住滚动位置的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">'hash'</span>,</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/'</span>,</span><br><span class="line">            redirect: <span class="string">'/login'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'push'</span>,</span><br><span class="line">            path: <span class="string">'/push'</span>,</span><br><span class="line">            component: push,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    scrollBehavior (to) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'scrollBehavior -&gt; '</span> + to.meta.savedPosition);</span><br><span class="line">		<span class="keyword">if</span>(to.meta.savedPosition)&#123;</span><br><span class="line">			$(to.meta.selector).scrollTop(to.meta.savedPosition);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(to.meta.selector).scrollTop(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>言归正传，一开始以为 流程是这样的  </p>
<p>父组件 parentMoveState的值为 1，子组件接收父组件为 1的值，然后父组件第一次加载数据成功以后 parentMoveState的值变为 0， 子组件接收的值也变为，然后执行侦听事件，将状态都设为初始状态，告诉父组件将值 重置为 1； 觉得流程一切没问题</p>
<p>然而发现真实执行的时候，父组件的 parentMoveState 的值变为 0，子组件也没有执行侦听事件（因为数值没改变），因此没有让父组件的值重置为 1；</p>
<p>经过多次测试，发现 子组件都是在父组件加载完成后 才执行子组件的加载，将网络调成最低网速，还是父组件的数据加载完成后，才执行子组件的 created方法；因此 子组件一开始接收的值就是 0；导致刷新后无法停止；</p>
<p>解决，在刷新组件 的created方法 重置父组件的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"pullfreshCreated"</span> + <span class="keyword">this</span>.parentMoveState);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.parentMoveState == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.changeState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>至此完美解决，不过由于现在是根据真实响应时间来关闭刷新加载动画，由于网速过快，一眨眼的时间就已经刷新完了导致页面闪动，因此加个定时器，延迟执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">refresh(done)&#123;</span><br><span class="line">               <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">               <span class="comment">//设置延迟，防止关闭太块，界面会有闪动</span></span><br><span class="line">               setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                   <span class="comment">// done()    //关闭刷新回调函数，不过目前请求往再关闭刷新 this.parentMoveState = 0;</span></span><br><span class="line">                   _this.loadScheule();</span><br><span class="line">                   _this.$refs.foot.loadUnReadMsg();</span><br><span class="line">               &#125;, <span class="number">300</span>)</span><br><span class="line">           &#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈针对Vue相同路由不同参数的刷新问题</title>
    <url>/2019/11/22/%E6%B5%85%E8%B0%88%E9%92%88%E5%AF%B9Vue%E7%9B%B8%E5%90%8C%E8%B7%AF%E7%94%B1%E4%B8%8D%E5%90%8C%E5%8F%82%E6%95%B0%E7%9A%84%E5%88%B7%E6%96%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在使用vue和vue-router开发spa应用时，我们会遇到这样一种问题。</p>
<p>当页面跳转时，组件本身并没有发生改变：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 路由映射关系&apos;/form/:type&apos;// 当前页面路由/form/shop1this.$router.push(&#123; name: &apos;form&apos;, params: &#123; type: &apos;shop2&apos; &#125;)</span><br></pre></td></tr></table></figure>
<p>这时我们进行路由跳转后会发现组件并没有刷新，在前一个路由组件的数据都保留了下来，这并不是我们想要的效果。</p>
<p>对于简单的数据更新，我们可以直接监听路由参数并重新获取路由的初始化数据即可，<br>但是对于有很多子组件需要初始化或者reset的情况，我们还是有必要重新执行组件的生命周期。</p>
<p><strong>针对这种情况可以使用三种方式解决：</strong></p>
<p>1.为相同路由页面的跳转进行中间路由替换，在router上注册beforeEach全局守卫进行拦截，跳转到一个中间路由（例如empty），再从中间过渡路由跳转至要去的路由。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局导航守卫router.beforeEach((to, from, next) =&gt; &#123; </span></span><br><span class="line"><span class="keyword">if</span> (to.name === <span class="keyword">from</span>.name &amp;&amp; to.params.type !== <span class="keyword">from</span>.params.type) &#123; </span><br><span class="line">next(&#123; <span class="attr">name</span>: <span class="string">'empty'</span>, <span class="attr">query</span>: &#123; <span class="attr">toPath</span>: to.fullPath &#125; &#125;) </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">next() </span><br><span class="line">&#125;</span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">// 中间过渡路由let toPath = this.$route.query.toPathif (this.toPath) &#123; this.$router.push(&#123; path: this.toPath &#125;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>知识体系已整理好，欢迎免费领取。还有面试视频分享可以免费获取。关注我，可以获得没有的架构经验哦！！<br>2.使用v-if重新渲染当前页面组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html部分</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">	&lt;router-view v-<span class="keyword">if</span>=<span class="string">"showRouterView"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt; </span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/ script部分</span></span><br><span class="line"><span class="regexp">	export default &#123;</span></span><br><span class="line"><span class="regexp">    	data () &#123;</span></span><br><span class="line"><span class="regexp">    		return &#123;  </span></span><br><span class="line"><span class="regexp">    			isRouterAlive: true  </span></span><br><span class="line"><span class="regexp">    		&#125; </span></span><br><span class="line"><span class="regexp">    	&#125;, </span></span><br><span class="line"><span class="regexp">    	methods: &#123;  </span></span><br><span class="line"><span class="regexp">    	reload () &#123;  </span></span><br><span class="line"><span class="regexp">        	this.showRouterView = false </span></span><br><span class="line"><span class="regexp">        	this.$nextTick(() =&gt; (this.showRouterView = true)) </span></span><br><span class="line"><span class="regexp">        &#125; </span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br></pre></td></tr></table></figure>
<p>这样把方法注册到跟组件上，对于想刷新的组件直接调用reload方法即可。</p>
<p>3.使用vue文档组件绑定的key值来进行强制刷新</p>
<p>vue文档说明了当你需要</p>
<ul>
<li>完整地触发组件的生命周期钩子</li>
<li>触发过渡</li>
</ul>
<p>的时候可以利用更新组件绑定的key值来完成<a href="https://cn.vuejs.org/v2/api/#key" target="_blank" rel="noopener">更详细的说明</a></p>
<p>这样直接为组件绑定与路由参数关联的值即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyComponent :key=&quot;routeParams&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>综合来看，第三种方式最简单，推荐使用。</p>
]]></content>
      <tags>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>vue利用keepalive实现前进刷新后退缓存的效果</title>
    <url>/2019/10/30/vue%E5%88%A9%E7%94%A8keepalive%E5%AE%9E%E7%8E%B0%E5%89%8D%E8%BF%9B%E5%88%B7%E6%96%B0%E5%90%8E%E9%80%80%E7%BC%93%E5%AD%98%E7%9A%84%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<h3 id="vue单页应用前进刷新后退不刷新方案探讨"><a href="#vue单页应用前进刷新后退不刷新方案探讨" class="headerlink" title="vue单页应用前进刷新后退不刷新方案探讨"></a>vue单页应用前进刷新后退不刷新方案探讨</h3><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>前端webapp应用为了追求类似于native模式的细致体验，总是在不断的在向native的体验靠拢；比如本文即将要说到的功能，native由于是多页应用，新页面可以启用一个的新的webview来打开，后退其实是关闭当前webview，其上一个webview就自然显示出来；但是在单页的webapp应用中，所有内容其实是在一个页面中展示的，不存在多页的情况，这时就需要前端开发来想办法实现相应的体验效果。</p>
<p>首先需要说明一下，本文所说的前进刷新后退不刷新是指组件是否重新渲染，比如列表A页面，点击其中的每一项进入详情B页面，然后从B页面后退到列表A页面时，A页面没有重新渲染，也没有重新发送ajax请求。下面，我们就来说说在vue的单页应用中，实现前进刷新后退不刷新的一些实现方案，其他的方案大家可以一起补充。</p>
<h2 id="keep-alive方案"><a href="#keep-alive方案" class="headerlink" title="keep-alive方案"></a>keep-alive方案</h2><p><a href="https://cn.vuejs.org/v2/api/#keep-alive" target="_blank" rel="noopener">keep-alive</a>是vue官方提供的一种缓存组件实例的方法，vue官网对其用法的介绍：</p>
<blockquote>
<p><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。</p>
</blockquote>
<p>正如vue官网的介绍，我们在开发中就可以使用他这一点来缓存后退不用刷新的路由组件。具体的实现思路如下。</p>
<h3 id="1、模板中使用keep-alive来缓存对应的路由组件"><a href="#1、模板中使用keep-alive来缓存对应的路由组件" class="headerlink" title="1、模板中使用keep-alive来缓存对应的路由组件"></a>1、模板中使用keep-alive来缓存对应的路由组件</h3><p>在app.vue模板中改写<code>&lt;router-view&gt;</code>，具体可以这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">    &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;&gt;</span><br><span class="line">        &lt;!-- 这里是会被缓存的视图组件，比如列表A页面 --&gt;</span><br><span class="line">    &lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;</span><br><span class="line">    &lt;!-- 这里是不被缓存的视图组件，比如详情B页面--&gt;</span><br><span class="line">&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>
<p>这种方式需要通过vue<a href="https://router.vuejs.org/zh/guide/advanced/meta.html" target="_blank" rel="noopener">路由元信息</a>的配合，当然也可以像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;A&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;</span><br><span class="line">        &lt;!-- 只有路径匹配到的视图组件，如上面的列表A页面会被缓存！ --&gt;</span><br><span class="line">    &lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>
<p>这种方式缺点是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要事先知道路由组件的**name**值，这在大型项目中不是一个特别好的选择。</span><br></pre></td></tr></table></figure>
<h3 id="2、在路由配置文件中配置路由元信息"><a href="#2、在路由配置文件中配置路由元信息" class="headerlink" title="2、在路由配置文件中配置路由元信息"></a>2、在路由配置文件中配置路由元信息</h3><p>下面以第一种模板方式来展开介绍。对应上面模板文件中的路由元数据配置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">routes: [&#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        name: <span class="string">'home'</span>,</span><br><span class="line">        component: Home,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            keepAlive: <span class="literal">false</span> <span class="comment">//此组件不需要被缓存</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/list'</span>,</span><br><span class="line">        name: <span class="string">'list'</span>,</span><br><span class="line">        component: List,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            keepAlive: <span class="literal">true</span> <span class="comment">//此组件需要被缓存</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/detail'</span>,</span><br><span class="line">        name: <span class="string">'detail'</span>,</span><br><span class="line">        component: Detail,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            keepAlive: <span class="literal">true</span> <span class="comment">// 此组件需要被缓存</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="3、在keep-alive组件提供activated钩子函数实现数据更新逻辑"><a href="#3、在keep-alive组件提供activated钩子函数实现数据更新逻辑" class="headerlink" title="3、在keep-alive组件提供activated钩子函数实现数据更新逻辑"></a>3、在keep-alive组件提供<code>activated</code>钩子函数实现数据更新逻辑</h3><p>需要强调的是keep-alive组件（这里是指keep-alive包裹的路由组件，下同）与一个vue组件是有区别的，vue的具体生命周期函数可以参考<a href="https://cn.vuejs.org/v2/guide/instance.html#实例生命周期钩子" target="_blank" rel="noopener">这里</a>；而<code>keep-alive</code>组件，除了正常vue组件提供的生命周期之外，其额外新增了2个跟<code>keep-alive</code>相关的钩子函数：</p>
<ul>
<li><strong>activated</strong>： 缓存的组件再次进入时会触发</li>
<li><strong>deactivated</strong>： 缓存的组件离开时会触发</li>
</ul>
<p>既然keep-alive组件提供了这么多生命周期函数钩子，那么这些钩子函数具体的执行顺序是怎样的呢？</p>
<p>第一次进入keep-alive组件时，其生命周期执行顺序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter --&gt; created --&gt; mounted --&gt; activated --&gt; deactivated</span><br></pre></td></tr></table></figure>
<p>非首次进入时，其生命周期执行顺序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter --&gt;activated --&gt; deactivated</span><br></pre></td></tr></table></figure>
<p>可以看到，非首次进入keep-alive组件时，正常的vue组件生命周期函数是不会在执行，而会执行keep-alive新增的两个周期钩子函数。同时也可以看出离开keep-alive组件时其destroy周期函数并没有执行，从侧面证明缓存组件并没有销毁。根据介绍，我们可以：</p>
<blockquote>
<p>通过利用keep-alive提供<code>activated</code>钩子函数来决定是否进行ajax请求来更新组件，以及<code>deactivated</code>钩子函数来重置页面相关状态。</p>
</blockquote>
<p>keep-alive实现后推不刷新的方案，有一些地方需要特别注意：</p>
<ul>
<li><strong>keep-alive组件的更新时机要有清晰的认知</strong></li>
</ul>
<p>意思就是在开发过程中需要知道后退不刷新组件虽然不重新渲染，但是要知道组件数据在什么情况下需要重新发送ajax请求来获取数据，从而更新组件。</p>
<p>就拿上面的A、B页面来说，我们需要知道列表A页面对应的keep-alive组件在什么时候进行更新，因为进入A页面的入口可以是从B页面后退而来，也可能从其他页面前进而来；当然需要对这两种不同情况需要加以区分，否则A页面的数据就一直是第一次缓存过的数据。</p>
<p>这里给出了一种解决方案：</p>
<p>首先，在每个路由元信息meta中添加一个isBack字段，用来解决beforeRouterEnter不能直接访问vue实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">    path: &apos;/list&apos;,</span><br><span class="line">    name: &apos;list&apos;,</span><br><span class="line">    component: List,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        keepAlive: true, //此组件需要被缓存</span><br><span class="line">        isBack: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>然后，借助<code>beforeRouteEnter</code>钩子函数来判断页面来源：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">from</span>.name === <span class="string">'detail'</span>) &#123; <span class="comment">//判断是从哪个路由过来的，若是detail页面不需要刷新获取新数据，直接用之前缓存的数据即可</span></span><br><span class="line">      to.meta.isBack = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>最后，需要借助keep-alive提供钩子函数<code>activated</code>来完成是否更新：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">activated() &#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.$route.meta.isBack) &#123;</span><br><span class="line">    <span class="comment">// 如果isBack是false，表明需要获取新数据，否则就不再请求，直接使用缓存的数据</span></span><br><span class="line">    <span class="keyword">this</span>.getData(); <span class="comment">// ajax获取数据方法</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 恢复成默认的false，避免isBack一直是true，导致下次无法获取数据</span></span><br><span class="line">  <span class="keyword">this</span>.$route.meta.isBack = <span class="literal">false</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li>在<strong>keep-alive组件前进的页面刷新导致keep-alive组件状态丢失</strong></li>
</ul>
<p>继续以上面的A、B页面为例，在进入详情B页面后，然后刷新，这时列表A页面的缓存的数据都丢失了，由于上面的判断规则也会导致不会重新获取数据。所以对于这种问题，还需要额外加一些判断条件。由于keep-alive第一次进入时会执行<strong>created</strong>方法，所以利用这点加一个标识来加以判断：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//第一次进入keep-alive路由组件时</span><br><span class="line"> created() &#123;</span><br><span class="line">   this.isFirstEnter = true;</span><br><span class="line">  // 只有第一次进入或者刷新页面后才会执行此钩子函数，使用keep-alive后（2+次）进入不会再执行此钩子函数</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>activated钩子函数也需要增加对应的判断：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">activated() &#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="keyword">this</span>.$route.meta.isBack || <span class="keyword">this</span>.isFirstEnter)&#123;</span><br><span class="line">       <span class="comment">// 如果isBack是false，表明需要获取新数据，否则就不再请求，直接使用缓存的数据</span></span><br><span class="line">       <span class="comment">// 如果isFirstEnter是true，表明是第一次进入此页面或用户刷新了页面，需获取新数据</span></span><br><span class="line">       <span class="keyword">this</span>.data = <span class="string">''</span><span class="comment">// 把数据清空，可以稍微避免让用户看到之前缓存的数据</span></span><br><span class="line">       <span class="keyword">this</span>.getData();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 恢复成默认的false，避免isBack一直是true，导致下次无法获取数据</span></span><br><span class="line">   <span class="keyword">this</span>.$route.meta.isBack=<span class="literal">false</span></span><br><span class="line">   <span class="comment">// 恢复成默认的false，避免isFirstEnter一直是true，导致每次都获取新数据</span></span><br><span class="line">   <span class="keyword">this</span>.isFirstEnter=<span class="literal">false</span>;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>缓存过多keep-alive组件，因常驻内存会导致内存占用过多</strong></li>
</ul>
<p>这是一个特别需要注意的问题，尤其是当整个系统或者系统大部分页面都使用keep-alive来缓存组件时，由于其是缓存在内存中的，若不加处理，内存堆积越来越大，导致系统卡顿。正确的解决方案是：<strong>需要及时销毁掉内存缓存的组件</strong>。</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置及使用forever后台运行nodejs</title>
    <url>/2019/10/21/nginx%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8forever%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8Cnodejs/</url>
    <content><![CDATA[<h4 id="nginx配置及使用forever后台运行nodejs"><a href="#nginx配置及使用forever后台运行nodejs" class="headerlink" title="nginx配置及使用forever后台运行nodejs"></a>nginx配置及使用forever后台运行nodejs</h4><p>打开nginx目录下的conf配置目录，打开 nginx.conf</p>
<p>一个域名其实就是一个ip，尽管阿里云配置了不同的子域名，但是指向的是同个ip，所以配置项</p>
<p>上的 server_name  尽管写着不同的域名，但其实没差别。除非再购买一个服务器，解析到别的ip地址</p>
<p>https的一个证书只支持一个域名。</p>
<p>关键配置项    upstream wx{</p>
<p>​                        server 127.0.0.1:8080;</p>
<p>}</p>
<p>location{</p>
<p>​                proxy_pass <a href="https://wx" target="_blank" rel="noopener">https://wx</a>;</p>
<p>}</p>
<h5 id="使用node命令开启node服务后，xshell无法执行别的命令，一关闭xshell，服务也跟着关闭"><a href="#使用node命令开启node服务后，xshell无法执行别的命令，一关闭xshell，服务也跟着关闭" class="headerlink" title="使用node命令开启node服务后，xshell无法执行别的命令，一关闭xshell，服务也跟着关闭"></a>使用node命令开启node服务后，xshell无法执行别的命令，一关闭xshell，服务也跟着关闭</h5><p>​    解决方式：全局 安装  forever，使用forever打开服务即可</p>
<p>安装 forever： sudo npm install forever -g</p>
<p>安装后会在 /root/node-v9.3.0-linux-x64/bin  下面生成一个  forever命令</p>
<p>执行 软连接操作  cd /usr/bin</p>
<p>再执行   ln -s /root/node-v9.3.0-linux-x64/bin/forever forever</p>
<p>完成上述不步骤即可使用  forever命令；</p>
<p>跳到要开启服务的界面，采用  forever start app.js  开启服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">forever start app.js</span><br></pre></td></tr></table></figure>
<p>启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">forever list</span><br></pre></td></tr></table></figure>
<p>查看当前forever启动服务目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">forever stop [pid]</span><br></pre></td></tr></table></figure>
<p>停止pid下的服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">forever stopall</span><br></pre></td></tr></table></figure>
<p>停止所有服务</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>centOS安装nodejs，并实现https协议请求</title>
    <url>/2019/10/21/centOS%E5%AE%89%E8%A3%85nodejs%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0https%E5%8D%8F%E8%AE%AE%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h3 id="centOS安装nodejs，并实现https协议请求"><a href="#centOS安装nodejs，并实现https协议请求" class="headerlink" title="centOS安装nodejs，并实现https协议请求"></a>centOS安装nodejs，并实现https协议请求</h3><p>1.首先安装wget</p>
<p>yum install -y wget</p>
<p>如果已经安装了可以跳过该步</p>
<p>2.下载nodejs最新的bin包</p>
<p>可以在下载页面<a href="https://nodejs.org/en/download/中找到下载地址。然后执行指令" target="_blank" rel="noopener">https://nodejs.org/en/download/中找到下载地址。然后执行指令</a></p>
<p>wget <a href="https://nodejs.org/dist/v9.3.0/node-v9.3.0-linux-x64.tar.xz" target="_blank" rel="noopener">https://nodejs.org/dist/v9.3.0/node-v9.3.0-linux-x64.tar.xz</a></p>
<p>然后就是等着下载完毕。</p>
<p>另外你也可以在你喜欢的任意系统上下载最新的bin包，然后通过FTP上传到CentOS上。</p>
<p>3.解压包</p>
<p>依次执行</p>
<p>xz -d node-v9.3.0-linux-x64.tar.xz<br>tar -xf node-v9.3.0-linux-x64.tar</p>
<ol>
<li>部署bin文件</li>
</ol>
<p>先确认你nodejs的路径，我这里的路径为~/node-v9.3.0-linux-x64/bin。确认后依次执行</p>
<p>ln -s ~/node-v9.3.0-linux-x64/bin/node /usr/bin/node<br>ln -s ~/node-v9.3.0-linux-x64/bin/npm /usr/bin/npm</p>
<p>注意ln指令用于创建关联（类似与Windows的快捷方式）必须给全路径，否则可能关联错误。</p>
<p>5.测试</p>
<p>node -v<br>npm</p>
<p>如果正确输出版本号，则部署OK</p>
<p>这种安装的方法好处是比较干净，安装也比较快速。个人认为比较适合新手。但是如果遇到nodejs插件全局安装时，需要自行去创建关联，参考第4步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意： 一定要在 root 用户下，否则没权限。</span><br></pre></td></tr></table></figure>
<p>在本地电脑创建一个server.js的文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送 HTTP 头部 </span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送响应数据 "Hello World"</span></span><br><span class="line">    response.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终端打印如下信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>);</span><br></pre></td></tr></table></figure>
<p>然后在linux上使用rz命令将本地文件上传到centOS。未安装rz指令的话是无法上传的，此时需要安装</p>
<h4 id="安装rzsz指令"><a href="#安装rzsz指令" class="headerlink" title="安装rzsz指令"></a>安装rzsz指令</h4><p>yum安装<br>root 账号登陆后执行以下命令：<br>yum install -y lrzsz<br>2.使用说明<br>sz命令发送文件到本地：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sz filename</span><br></pre></td></tr></table></figure>
<p>rz命令本地上传文件到服务器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure>
<p>执行该命令后，在弹出框中选择要上传的文件即可</p>
<p>在 /usr/local 目录下创建一个  test 目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local     //更改文件目录到 local</span><br><span class="line">mkdir test        //创建一个test目录</span><br><span class="line">cd test          //走进test目录</span><br><span class="line">rz        //选择刚刚在本地电脑创建的 server.js</span><br><span class="line">node server.js    //运行 server.js 服务</span><br></pre></td></tr></table></figure>
<p>此时打开  浏览器访问 127.0.0.1:8888 就会 有  hello world  的界面；</p>
<p>如果是访问阿里云服务器的，还得在阿里云服务器上添加安全组 增加 8888端口号。</p>
<p>要启用https协议得话，server.js的文件进行如下更改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  key: fs.readFileSync(<span class="string">'./2702757_www.xiaobusoft.com.key'</span>),</span><br><span class="line">  cert: fs.readFileSync(<span class="string">'./2702757_www.xiaobusoft.com.pem'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">https.createServer( options, (request, response) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送 HTTP 头部 </span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送响应数据 "Hello World"</span></span><br><span class="line">    response.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终端打印如下信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>);</span><br></pre></td></tr></table></figure>
<p>并把 key和pem文件上传 到test目录。</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo拓展补充</title>
    <url>/2019/08/03/hexo%E6%8B%93%E5%B1%95%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<h3 id="git分支进行多终端工作"><a href="#git分支进行多终端工作" class="headerlink" title="git分支进行多终端工作"></a>git分支进行多终端工作</h3><p>问题来了，如果你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者实验室的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？</p>
<p>在这里我们就可以利用git的分支系统进行多终端工作了，这样每次打开不一样的电脑，只需要进行简单的配置和在github上把文件同步下来，就可以无缝操作了。</p>
<p>机制<br>机制是这样的，由于hexo d上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。</p>
<p>也就是上传的是在本地目录里自动生成的.deploy_git里面。</p>
<p>其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github</p>
<p>所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。</p>
<p>上传分支<br>首先，先在github上新建一个hexo分支，如图：</p>
<p>然后在这个仓库的settings中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）。</p>
<p>然后在本地的任意目录下，打开git bash，</p>
<p>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:ZJUFangzh/ZJUFangzh.github.io.git<br>1<br>将其克隆到本地，因为默认分支已经设成了hexo，所以clone时只clone了hexo。</p>
<p>接下来在克隆到本地的ZJUFangzh.github.io中，把除了.git 文件夹外的所有文件都删掉</p>
<p>把之前我们写的博客源文件全部复制过来，除了.deploy_git。这里应该说一句，复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p>
<p>.DS_Store<br>Thumbs.db<br>db.json<br><em>.log<br>node_modules/<br>public/<br>.deploy</em>/<br><img src="/2019/08/03/hexo拓展补充/1564792983665.png" alt="1564792983665"><br>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</p>
<p>而后</p>
<p>git add .<br>git commit –m “add branch”<br>git push </p>
<p>这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中node_modules、public、db.json已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p>
<p>这样就上传完了。</p>
<p>更换电脑操作<br>一样的，跟之前的环境搭建一样，</p>
<p>安装git<br>sudo apt-get install git</p>
<p>设置git全局邮箱和用户名<br>git config –global user.name “yourgithubname”<br>git config –global user.email “yourgithubemail”</p>
<p>设置ssh key<br>ssh-keygen -t rsa -C “youremail”</p>
<h5 id="生成后填到github和coding上（有coding平台的话）"><a href="#生成后填到github和coding上（有coding平台的话）" class="headerlink" title="生成后填到github和coding上（有coding平台的话）"></a>生成后填到github和coding上（有coding平台的话）</h5><p>#验证是否成功<br>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br>ssh -T <a href="mailto:git@git.coding.net" target="_blank" rel="noopener">git@git.coding.net</a> #(有coding平台的话)</p>
<p>安装nodejs<br>sudo apt-get install nodejs<br>sudo apt-get install npm</p>
<p>安装hexo<br>sudo npm install hexo-cli -g<br>1<br>但是已经不需要初始化了，</p>
<p>直接在任意文件夹下，</p>
<p>git clone git@………………<br>1<br>然后进入克隆到的文件夹：</p>
<p>cd xxx.github.io<br>npm install<br>npm install hexo-deployer-git –save</p>
<p>生成，部署：</p>
<p>hexo g<br>hexo d</p>
<p>然后就可以开始写你的新博客了</p>
<p>hexo new newpage</p>
<p>Tips:</p>
<p>不要忘了，每次写完最好都把源文件上传一下<br>git add .<br>git commit –m “xxxx”<br>git push<br>1<br>2<br>3<br>如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行了<br>git pull</p>
<p><img src="/2019/08/03/hexo拓展补充/1564793115523.png" alt="1564793115523"></p>
<p><img src="/2019/08/03/hexo拓展补充/1564793161213.png" alt="1564793161213"></p>
<p><img src="/2019/08/03/hexo拓展补充/1564793197592.png" alt="1564793197592"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序生命周期</title>
    <url>/2019/08/03/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h3 id="小程序生命周期"><a href="#小程序生命周期" class="headerlink" title="小程序生命周期"></a>小程序生命周期</h3><p>小程序页面切换生命周期</p>
<ol>
<li>小程序初始化：默认页面入栈，一次触发默认页面  onLoad，onShow，onReady方法。</li>
<li>打开新页面：新页面入栈，依次触发新页面 onLoad，onShow，onReady方法。</li>
<li>页面重定向：当前页面出栈并卸载，触发当前页面onUnload方法，新页面入栈，触发新页面 onLoad，onShow，onReady方法。</li>
<li>页面返回：页面不断出栈并卸载，触发当前弹出页面onUnload方法，直到返回目标页面，新页面入栈，触发新页面onShow方法。</li>
<li>Tab切换：当前页面不断出栈但不卸载，仅触发onHide方法，新页面入栈，如果当前页面是锌价载的，触发onLoad，onShow，onReady方法，如果当前页面已经加载过，仅触发onShow方法。</li>
<li>程序从前台切换到后台： 触发当前页面onHide方法，触发App onHide方法。</li>
<li>程序从后台到前台：触发小程序onShow方法，触发页面onShow方法。</li>
</ol>
<p>微信小程序 API   以wx.on开头的API，如 wx.onSockectOpen,wx.onBackgroundAudioPlay(),wx.onCOmpassChange()等均代表监听某个时间发生的API接口，这类接口一般来说参数均为一个callback回调函数，当事件发生时，会回调callback函数</p>
<p>其他不以wx.on开头的API，如 wx.request,wx.uploadFIle,wx.chooseImage,这类接口如果没有特殊规定，通常接受一个Object对象作为参数，在Object中可能指定 success，fail，complete来接收接口调用结果。</p>
]]></content>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>css实现div中图片高度与父级div宽宽度一致</title>
    <url>/2019/08/03/css%E5%AE%9E%E7%8E%B0div%E4%B8%AD%E5%9B%BE%E7%89%87%E9%AB%98%E5%BA%A6%E4%B8%8E%E7%88%B6%E7%BA%A7div%E5%AE%BD%E5%AE%BD%E5%BA%A6%E4%B8%80%E8%87%B4/</url>
    <content><![CDATA[<h1 id="css实现div中图片高度与父级div宽度一致"><a href="#css实现div中图片高度与父级div宽度一致" class="headerlink" title="css实现div中图片高度与父级div宽度一致"></a>css实现div中图片高度与父级div宽度一致</h1><p>需求：1.父级div不设置高度</p>
<p>　　　2.图片高度自适应，并且显示为正方形；</p>
<p>以前遇到列表中图片高度必须和父级宽度相同，并且需要为正方形的时</p>
<p><strong>1.html</strong></p>
<p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bli"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"imgbox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"upimg/comm.png"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>喵喵喵喵喵喵111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bli"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"imgbox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"upimg/comm1.png"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>喵喵喵喵喵喵222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bli"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"imgbox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"upimg/comm2.png"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>喵喵喵喵喵喵333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bli</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">49%</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">2%</span> <span class="number">2%</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bli</span><span class="selector-pseudo">:nth-child(even)</span>&#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imgbox</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">100%</span>;<span class="comment">/*重要属性,如果要设置 16：9  那就是  100*9/16=56%*/</span></span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imgbox</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：装图片的盒子imgbox，设置的padding-bottom，当该值为百分比属性时，是基于父元素宽度的百分比，所以这里设置100%的时候，就相当于形成了一个正方形。</p>
<p>　　　当然，也可以设置padding-top。这时img就需要设置top:0;了。记得img要设置100%宽度哦。</p>
<p>　　　这个方式和js的先获取父级div宽度再设置图片高度相比方便太多太多了。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>vue.router.beforeEach</title>
    <url>/2019/08/03/vue-router-beforeEach/</url>
    <content><![CDATA[<h1 id="vue-router-beforeEach-，详解"><a href="#vue-router-beforeEach-，详解" class="headerlink" title="vue router.beforeEach()，详解"></a>vue router.beforeEach()，详解</h1><p>router.beforeEach（）一般用来做一些进入页面的限制。比如没有登录，就不能进入某些页面，只有登录了之后才有权限查看某些页面。。。说白了就是路由拦截。</p>
<h2 id="第一步-规定进入路由需不需要权限"><a href="#第一步-规定进入路由需不需要权限" class="headerlink" title="第一步 规定进入路由需不需要权限"></a>第一步 规定进入路由需不需要权限</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> @/router/index.js</span><br><span class="line"> <span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">'@/components/a'</span></span><br><span class="line">&#123;</span><br><span class="line">     path: <span class="string">'/a'</span>,</span><br><span class="line">     name: <span class="string">'a'</span>,</span><br><span class="line">     component:	A,</span><br><span class="line">     meta : &#123;                      <span class="comment">//加一个自定义obj</span></span><br><span class="line">   			requireAuth:<span class="literal">true</span>      <span class="comment">//这个参数 true 代表需要登录才能进入A</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>
<h2 id="第二步-使用vuex整一个userId"><a href="#第二步-使用vuex整一个userId" class="headerlink" title="第二步 使用vuex整一个userId"></a>第二步 使用vuex整一个userId</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@/assets/store.js</span><br><span class="line"><span class="comment">//使用vuex三步走</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="comment">//这个理论来说</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">	state:&#123;</span><br><span class="line">		userId : <span class="string">''</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
<h2 id="第三步-使用router-beforeEach"><a href="#第三步-使用router-beforeEach" class="headerlink" title="第三步 使用router.beforeEach()"></a>第三步 使用router.beforeEach()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@/main.js</span><br><span class="line">思路：【</span><br><span class="line">	如果（即将进入的这个路由需要权限才能进入）&#123;</span><br><span class="line">	</span><br><span class="line">		如果(能获取到这个老哥的userID)&#123;</span><br><span class="line">			就让这个老哥进入这个路由</span><br><span class="line">		&#125;否则&#123;</span><br><span class="line">			就让这个老哥进入b这个页面</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125; 即将进入的路由不需要权限就能进入 &#123;</span><br><span class="line">	</span><br><span class="line">		就让这个老哥进入这个路由</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">】</span><br><span class="line">对应代码：</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/assets/store'</span>   <span class="comment">//把这个userId获取过来</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(to.meta.requireAuth)&#123;</span><br><span class="line">		<span class="keyword">if</span>(store.state.userId)&#123;</span><br><span class="line">			next()</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			next(&#123;<span class="attr">path</span>:<span class="string">'/b'</span>&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		next()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>第三步这个/b路由其实就是登陆页面，<br>当进入A页面之前，需要请求接口，获取一下是否有登陆过，然后把这个userId存在vuex的state里。<br>当没有userId时，则在登陆之后，存一个userId到state里。然后就敲完收工</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>创建一个vue项目</title>
    <url>/2019/08/03/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAvue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h4 id="下载安装node"><a href="#下载安装node" class="headerlink" title="下载安装node"></a>下载安装node</h4><h5 id="node官网-注-建议下载长期支持版"><a href="#node官网-注-建议下载长期支持版" class="headerlink" title="node官网 注: 建议下载长期支持版"></a><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">node官网</a> 注: <code>建议下载长期支持版</code></h5><h5 id="查看node及npm版本"><a href="#查看node及npm版本" class="headerlink" title="查看node及npm版本"></a>查看node及npm版本</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<h5 id="安装-vue-cli-init"><a href="#安装-vue-cli-init" class="headerlink" title="安装 @vue/cli-init"></a>安装 <code>@vue/cli-init</code></h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br><span class="line">npm i -g @vue/cli-init</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<h5 id="vue初始化基于webpack的my-project项目-项目名不能用大写字母"><a href="#vue初始化基于webpack的my-project项目-项目名不能用大写字母" class="headerlink" title="vue初始化基于webpack的my-project项目(项目名不能用大写字母)"></a>vue初始化基于webpack的my-project项目(项目名不能用大写字母)</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">vue init webpack my-project</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">? Project name my-project</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author uplyw &lt;xxx@xxx.com&gt;</span><br><span class="line">? Vue build standalone</span><br><span class="line">? Install vue-router? Yes</span><br><span class="line">? Use ESLint to lint your code? No</span><br><span class="line">? Set up unit tests No</span><br><span class="line">? Setup e2e tests with Nightwatch? No</span><br><span class="line">? Should we run `npm install` <span class="keyword">for</span> you after the project has been created? (recommended) npm</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20181130163615407.png" alt="安装选项"></p>
<p>1.项目名称，如果不需要就直接回车。注：<code>此处项目名不能使用大写</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Project <span class="title">name</span> <span class="params">(my-project)</span>: </span></span><br><span class="line"><span class="function">1</span></span><br></pre></td></tr></table></figure>
<p>2.项目描述，如果不需要就直接回车。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Project <span class="title">description</span> <span class="params">(A Vue.js project)</span>:</span></span><br><span class="line"><span class="function">1</span></span><br></pre></td></tr></table></figure>
<p>3.项目作者，默认计算机用户名</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Author (xxx)：</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>4.构建方式（暂且这么解释）</p>
<blockquote>
<p>两个选择（上下箭头选择，回车即为选定）建议选择 : <code>Runtime + Compiler:recommended for most users</code><br><strong>这里推荐使用1选项，适合大多数用户的</strong></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">vue <span class="title">build</span> <span class="params">(Use arrow keys)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 1. (译：运行+编译：被推荐给大多数用户)</span></span></span><br><span class="line">&gt; Runtime + Compiler:recommended for most users</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.(译：只运行大约6KB比较轻量的压缩文件，但只允许模板（或任何VUE特定HTML）。</span></span><br><span class="line"><span class="comment">//	VUE文件需要在其他地方呈现函数。翻译不精准，意思大概是选择该构建方式对文件大小有要求)</span></span><br><span class="line">&gt; Runtime-only:about <span class="number">6</span>KB lighter min+gzip,<span class="function">but <span class="title">templates</span> <span class="params">(<span class="keyword">or</span> any Vue-specific HTML)</span> are ONLY </span></span><br><span class="line">allowed in .vue files-render functions are required elsewhere</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure>
<p>5.安装vue的路由插件，需要就选y，否则就n</p>
<blockquote>
<p>建议 : <code>Y</code></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">install vue-router?</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>6.是否使用ESLint检测你的代码？</p>
<blockquote>
<p><code>ESLint</code> 是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。<br>建议选择 ‘<code>N</code>’ 因为选择 ‘<code>Y</code>’ 在做调试项目时,控制台会有很多 黄色警告 提示格式不规范,但其实并不影响项目</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Use ESLint to lint your code?</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>7.是否安装单元测试(暂不详细介绍)</p>
<blockquote>
<p>建议 : <code>N</code></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Setup unit tests? </span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>8.是否安装E2E测试框架NightWatch（E2E，也就是End To End，就是所谓的“用户真实场景”。）</p>
<blockquote>
<p>建议 : <code>N</code></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Setup e2e tests with Nightwatch(Y/n)?</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>9.项目创建后是否要为你运行“npm install”?这里选择包管理工具</p>
<blockquote>
<p>选项有三个（上下箭头选择，回车即为选定）建议 : <code>yes use npm</code></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Should we run 'npm install' for you after the project has been created?</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用npm</span></span><br><span class="line">yes,use npm</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用yarn</span></span><br><span class="line">yes,use yarn</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自己操作</span></span><br><span class="line">no,I will handle that myself</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用操作</title>
    <url>/2019/08/03/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="将本地资源上传到远程库"><a href="#将本地资源上传到远程库" class="headerlink" title="将本地资源上传到远程库"></a>将本地资源上传到远程库</h4><ol>
<li><p>在git上创建一个库，复制库的 链接</p>
</li>
<li><p>在本地目录上执行 git init  在该目录创建一个本地仓库  .git</p>
</li>
<li><p>执行 touch .gitignore 创建一个 .gitignore文件，用来去除一些不想上传的文件</p>
</li>
<li><p>点击.gitignore文件，编辑内容，内容大致如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules</span><br><span class="line">.git</span><br><span class="line">.vscode</span><br><span class="line">.idea</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行git remote add origin(远程库名) +刚刚复制的链接   用来创建一个连接远程库</p>
</li>
<li><p>执行 git remote -v  可查看连接的远程库</p>
</li>
<li><p>执行 git add .     将本地文件上传  本地电脑与 本地库的中间层  add 后面有个空格</p>
</li>
<li><p>执行 git status 可查看文件的状态</p>
</li>
<li><p>执行 git commit -m “备注信息” 可将中间层的文件上传到本地库</p>
</li>
<li><p>执行 git push -u origin master  可将本地仓库提交到远程仓库，一般这时候会报错。</p>
</li>
<li><p>因为远程仓库是新建的，会有两个readme的md文件，本地仓库没有，所以需要合并</p>
</li>
<li><p>执行 git pull –rebase origin master  将远程库的资源拉取到本地仓库</p>
</li>
<li><p>执行 git push -u origin master 成功将本地资源上传到远程仓库</p>
</li>
</ol>
<h4 id="将远程仓库的文件拉取到本地电脑"><a href="#将远程仓库的文件拉取到本地电脑" class="headerlink" title="将远程仓库的文件拉取到本地电脑"></a>将远程仓库的文件拉取到本地电脑</h4><ol>
<li>在一个文件目录下右键打开git  命令窗口  执行 git clone  远程仓库链接</li>
<li>会弹出一个输入用户名和密码的界面，输入用户名和密码即可</li>
<li>账号密码成功之后本地电脑就会有远程仓库的所有文件。</li>
</ol>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>H5键盘兼容性小结</title>
    <url>/2019/07/11/H5%E9%94%AE%E7%9B%98%E5%85%BC%E5%AE%B9%E6%80%A7%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h1 id="H5-键盘兼容性小结"><a href="#H5-键盘兼容性小结" class="headerlink" title="H5 键盘兼容性小结"></a>H5 键盘兼容性小结</h1><p>在 H5 项目中，我们会经常遇到页面中存在单个甚至多个 input/textarea 输入框与底部固定元素的布局情况。在 input/textarea 输入框获取焦点时，会自动触发键盘弹起，而键盘弹出在 ios 与 android 的 webview 中表现并非一致，同时当我们主动触发键盘收起时也同样存在差异化。而无论如何，我们希望功能流畅的同时，尽量保持用户体验的一致性，因此有了下面一系列兼容性问题的研究。</p>
<h2 id="1-键盘弹出的不同表现"><a href="#1-键盘弹出的不同表现" class="headerlink" title="1. 键盘弹出的不同表现"></a>1. 键盘弹出的不同表现</h2><ul>
<li>IOS：IOS 的键盘处在窗口的最上层，当键盘弹起时，webview 的高度 height 并没有改变，只是 scrollTop 发生变化，页面可以滚动。且页面可以滚动的最大限度为弹出的键盘的高度，而只有键盘弹出时页面恰好也滚动到最底部时，scrollTop 的变化值为键盘的高度，其他情况下则无法获取。这就导致在 IOS 情况下难以获取键盘的真实高度。</li>
<li>Android: webview 中留出空间，该空间小于等于的键盘空间，变化的高度差会随着布局而不同，有的认为 <code>键盘高度 + 页面高度 = 原页面高度；</code> 是错误的误导，只有在某种很巧合的布局情况下才可套用此公式。</li>
</ul>
<h2 id="2-键盘收起的不同表现"><a href="#2-键盘收起的不同表现" class="headerlink" title="2. 键盘收起的不同表现"></a>2. 键盘收起的不同表现</h2><ul>
<li>IOS：触发键盘上的按钮收起键盘或者输入框以外的页面区域时，输入框会失去焦点，因此会触发输入框的 blur 事件。</li>
<li>Android: 触发键盘上的按钮收起键盘时，输入框并不会失去焦点，因此不会触发页面的 blur 事件；触发输入框以外的区域时，输入框会失去焦点，触发输入框的 blur 事件。</li>
</ul>
<h2 id="3-监听键盘的弹出与收起"><a href="#3-监听键盘的弹出与收起" class="headerlink" title="3. 监听键盘的弹出与收起"></a>3. 监听键盘的弹出与收起</h2><p>在 h5 中目前没有接口可以直接监听键盘事件，但我们可以通过分析键盘弹出、收起的触发过程及表现形式，来判断键盘是弹出还是收起的状态。</p>
<ul>
<li>键盘弹出：输入框获取焦点时会自动触发键盘的弹起动作，因此，我们可以监听输入框的 focus 事件，在里面实现键盘弹出后所需的页面逻辑。这在 ios 及 android 中表现一致。</li>
<li>键盘收起：从第 2 部分可知，触发键盘收起的不同形式会存在差异化表现，当触发其他页面区域收起键盘时，我们可以监听输入框的 blur 事件，在里面实现键盘收起后所需的页面逻辑。而在通过键盘按钮收起键盘时在 ios 与 android 端存在差异化表现，下面具体分析：<ul>
<li>IOS：触发了输入框 blur 事件，仍然通过该办法监听。</li>
<li>Android：没有触发输入框的 blur 事件。但通过第 1、2 部分我们可以知道，在 android 中，键盘的状态切换（弹出、收起）不仅和输入框关联，同时还会影响到 webview 高度的变化，那我们不妨通过监听 webview height 的变化来判断键盘是否收起。</li>
</ul>
</li>
</ul>
<p>下面举例说明，其中页面中含有一个输入框：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"txd"</span>&gt;</span> </span><br><span class="line">	Welcome to TXD!  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"tel"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ios &amp; android 键盘弹出：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $input = <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>);</span><br><span class="line">$input.addEventListener(<span class="string">'focus'</span>, () =&gt; &#123;</span><br><span class="line">	<span class="comment">// 处理键盘弹出后所需的页面逻辑</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>ios 键盘收起：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $input = <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>);</span><br><span class="line">$input.addEventListener(<span class="string">'blur'</span>, () =&gt; &#123;</span><br><span class="line">	<span class="comment">// 处理键盘收起后所需的页面逻辑</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>android 键盘弹出与收起：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*键盘弹起后页面高度变小*/</span></span><br><span class="line"><span class="keyword">const</span> originHeight = <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, () =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> resizeHeight = <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">	<span class="keyword">if</span> (resizeHeight &lt; originHeight) &#123;</span><br><span class="line">		<span class="comment">// 键盘弹起所后所需的页面逻辑</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 键盘弹起所后所需的页面逻辑</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>在实践中通过判断 userAgent 来决定使用哪种方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ua = <span class="built_in">window</span>.navigator.userAgent.toLocaleLowerCase();</span><br><span class="line"><span class="keyword">const</span> isIOS = <span class="regexp">/iphone|ipad|ipod/</span>.test(ua);</span><br><span class="line"><span class="keyword">const</span> isAndroid = <span class="regexp">/android/</span>.test(ua);</span><br></pre></td></tr></table></figure>
<h2 id="4-使用案例"><a href="#4-使用案例" class="headerlink" title="4. 使用案例"></a>4. 使用案例</h2><p>​    就拿简单的登录界面来说，有三个输入框,输入框有内容的时候，尾部有个清空内容的按钮</p>
<p>点击清空后，该输入框，获取焦点。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input_bg"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input_box url_boxs"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">s</span> <span class="attr">class</span>=<span class="string">"left_icon url_icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"host"</span> @<span class="attr">keyup</span>=<span class="string">"validate"</span>  @<span class="attr">focus</span>=<span class="string">"handleFocus"</span>   @<span class="attr">blur</span>=<span class="string">"handleBlur"</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">placeholder</span>=<span class="string">"请输入有课服务器地址"</span>&gt;</span><span class="tag">&lt;<span class="name">s</span> <span class="attr">v-show</span>=<span class="string">"host.length&gt;0"</span> <span class="attr">class</span>=<span class="string">"delete"</span> @<span class="attr">click</span>=<span class="string">"clearContent(0)"</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input_box stuNO_box"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">s</span> <span class="attr">class</span>=<span class="string">"left_icon stuNO_icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">v-model</span>=<span class="string">"staffNumber"</span> @<span class="attr">keyup</span>=<span class="string">"validate"</span>  @<span class="attr">focus</span>=<span class="string">"handleFocus"</span>   @<span class="attr">blur</span>=<span class="string">"handleBlur"</span> <span class="attr">name</span>=<span class="string">"staffNumber"</span> <span class="attr">placeholder</span>=<span class="string">"请输入学号"</span>&gt;</span><span class="tag">&lt;<span class="name">s</span> <span class="attr">v-show</span>=<span class="string">"staffNumber.length&gt;0"</span> <span class="attr">class</span>=<span class="string">"delete"</span> @<span class="attr">click</span>=<span class="string">"clearContent(1)"</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input_box password_box"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">s</span> <span class="attr">class</span>=<span class="string">"left_icon password_icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>  <span class="attr">v-model</span>=<span class="string">"password"</span> @<span class="attr">keyup</span>=<span class="string">"validate"</span>  @<span class="attr">focus</span>=<span class="string">"handleFocus"</span>   @<span class="attr">blur</span>=<span class="string">"handleBlur"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span><span class="tag">&lt;<span class="name">s</span> <span class="attr">v-show</span>=<span class="string">"password.length&gt;0"</span> <span class="attr">class</span>=<span class="string">"delete"</span> @<span class="attr">click</span>=<span class="string">"clearContent(2)"</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​    遇到问题：当只有输入框的时候，输入框显示位置正常，就是ios系统弹起键盘再收起键盘的时候，</p>
<p>界面不会回到最初的样子。</p>
<p>​    解决办法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleBlur: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">                _this.isFocus = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.isAndroid) <span class="keyword">return</span>;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!_this.isFocus)&#123;</span><br><span class="line">                        <span class="keyword">let</span> top = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">				        <span class="built_in">window</span>.scroll(<span class="number">0</span>, top);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,<span class="number">200</span>)</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure>
<p>只有当是ios系统的时候才执行该方法。 因使用定时器。</p>
<p>​    实现加入点击清空按钮使输入框获取焦点后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">遇到问题： 安卓一切正常，ios会导致点击清空按钮 输入框获取焦点，弹起软键盘，</span><br><span class="line">但是输入框会被键盘覆盖。</span><br><span class="line"></span><br><span class="line">解决方法：</span><br><span class="line">clearContent: <span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">               <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">               <span class="keyword">if</span>(type == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.host = <span class="string">''</span>;</span><br><span class="line">               &#125; </span><br><span class="line">               <span class="keyword">if</span>(type == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.staffNumber = <span class="string">''</span>;</span><br><span class="line">               &#125;</span><br><span class="line">                <span class="keyword">if</span>(type == <span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.password = <span class="string">''</span>;</span><br><span class="line">               &#125;</span><br><span class="line">                <span class="keyword">var</span> targets = <span class="built_in">document</span>.querySelectorAll(<span class="string">"input"</span>);</span><br><span class="line">                <span class="keyword">var</span> input = targets[type];</span><br><span class="line">                input.focus();</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.isAndroid) <span class="keyword">return</span>;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                    input.scrollIntoView(&#123;</span><br><span class="line">                         block: <span class="string">'start'</span>,</span><br><span class="line">                         behavior: <span class="string">'smooth'</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;,<span class="number">300</span>)</span><br><span class="line">                _this.validate();</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>采用 scrollIntoView 方法。</p>
<h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><ol>
<li>在 ios 中，无论何种布局，为了使输入框展示在可视区域中，键盘弹出时，页面会向上滚动，该过程与 Element.scrollIntoViewIfNeeded() 方法（将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域）产生的效果一致；且高度始终不变，页面可滚动。</li>
<li>在 android 中，键盘唤起后，页面可滚动与否由其处在正常文档流中的元素决定：如果正常文档流中的元素可全量展示，页面不可滚动，否则页面支持滚动；</li>
<li>在 android 中，键盘唤起后，fixed 元素的基准会发生变化：根据 bottom 定位的元素，其基线变为键盘上部；根据 top 定位的元素，仍然根据页面顶部，因此为照顾正常文档流及 fixed 元素的用户体验，有的元素可根据顶部定位，有的可以根据底部定位。</li>
</ol>
<p>在了解清楚 h5 中键盘的弹出收起的性质后，在处理兼容性问题会容易很多。同时也可使用Element.scrollIntoViewIfNeeded() 方法辅助解决问题（比如在切换不同的输入法时，可能导致有用信息被遮挡的情况）优化体验。</p>
<h3 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h3><p>安卓：当输入框获取焦点时，弹起键盘前会查看当前输入框是否会被键盘盖住，<br>    如果会，屏幕会向上滚动键盘高度的值，（前提是界面没有采用fixed定位）<br>    否则页面不动；</p>
<p>ios： 当输入框获取焦点时，会弹起键盘，然后输入框位置固定显示在键盘上方某个固定距离的位置，然后页面高度不变，不过可以滚动。</p>
<p>ios问题： 当输入框失去焦点时，由于获得焦点时滚动了一定距离，失去焦点后界面键盘收起，页面没滚回来，所以当失去焦点时要将页面滚动回来</p>
<p>建议: 有输入框的界面不要采用 fixed定位（除了固定在顶部的输入框），因为如果不是顶部的会导致键盘盖住输入框，用户体验差</p>
<p>关键技术 ：  scrollIntoView，</p>
<p>判断是安卓还是ios<br> const ua = window.navigator.userAgent.toLocaleLowerCase();<br>            this.isIOS = /iphone|ipad|ipod/.test(ua);<br>            this.isAndroid = /android/.test(ua);</p>
<p>ios系统当 是非手动直接触摸输入框聚焦时，比如点击某个按钮触发输入框聚焦，这时候会出现键盘弹起，但是输入框可能没有出现在<br>键盘上方的情况，所以就用到了 scrollIontoView。</p>
]]></content>
      <tags>
        <tag>ios</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>css经典实战</title>
    <url>/2019/05/20/css%E7%BB%8F%E5%85%B8%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h4 id="css经典实战"><a href="#css经典实战" class="headerlink" title="css经典实战"></a>css经典实战</h4><h5 id="能用html-css解决的问题就不要用js"><a href="#能用html-css解决的问题就不要用js" class="headerlink" title="能用html/css解决的问题就不要用js"></a>能用html/css解决的问题就不要用js</h5><h6 id="导航高亮"><a href="#导航高亮" class="headerlink" title="导航高亮"></a>导航高亮</h6><p>导航高亮是一种很常见的需求，包括当前页面的导航在菜单里高亮和hover时高亮。</p>
<p>你可以用js控制，但其实用一点css技巧就可以达到这个目的，而不需要使用js。</p>
<p>例如下代码清单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- home.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- buy.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>所有的li也用class标识，为了有一个意义对应的关系，如下代码清单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后就可以设置当前页面的样式，覆盖默认的样式，如下代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.home</span> <span class="selector-tag">nav</span> <span class="selector-tag">li</span><span class="selector-class">.home</span>,</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.buy</span> <span class="selector-tag">nav</span> <span class="selector-tag">li</span><span class="selector-class">.buy</span>&#123;</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，如果当前页面是home，则body.home nav li.home 这条规则生效，home导航</p>
<p>高亮；如果你是用js控制，那么在脚本加载好之前，当前页面是不会高亮的，而脚本加</p>
<p>载好之后会突然高亮。所以这种情况下用js吃力不讨好。</p>
<p>​    同时，hover时的高亮也可以用css的：hover选择器实现，如下代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加上：hover选择器后的优先级将会高于原本的优先级，鼠标hover的时候将会覆盖默认</p>
<p>样式，即高亮生效。</p>
<p>​    你也可以是用js的mouse事件实现此功能，但js会在mouseover的时候添加一个类，mouseleave的时候会移除这个类，这样就变复杂了，而用css甚至可以兼容不支持</p>
<p>js的浏览器，所以推荐使用css。一个纯展示的静态页面，为啥要写js呢，是吧。</p>
<p>​    注意这个hover选择器特别的好用，几乎是用与所有需要鼠标悬浮时显示的场景</p>
<h6 id="鼠标悬浮时显示"><a href="#鼠标悬浮时显示" class="headerlink" title="鼠标悬浮时显示"></a>鼠标悬浮时显示</h6><p>​    鼠标悬浮的场景十分常见，例如导航菜单， 当鼠标hover到某个菜单时，它的子菜单就显示出来。</p>
<p>​    还有像在地图里面，鼠标悬浮在某个图标的位置时，就显示该图标的具体信息。</p>
<p>​    这类场景的实现，一般要把隐藏的对象，如子菜单、信息框作为hover目标的子元素或者相邻元素，才方便css控制，例如上面的菜单是把menu当作导航的一个相邻元素</p>
<p>html结构如下所示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"user"</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>账户设置<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>登出<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​    menu在正常态下是隐藏的，如下代码所示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.menu</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    当导航hover时结合相邻选择器，把它显示出来，如下代码所示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.user</span><span class="selector-pseudo">:hover</span> + <span class="selector-class">.menu</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: list-item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    注意这里使用了一个相邻选择器，这也是上面说的为什么要写成相邻的元素。而</p>
<p>menu的位置可以使用absolute定位。</p>
<p>​    同时，menu本身hover的时候也要显示，否则鼠标一离开导航的时候，菜单就消失了，如下代码所示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.menu</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: list-item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    这里会出现一个小问题，即menu和导航需要挨在一起，如果中间有空隙，上面的</p>
<p>添加的hover就不能发挥作用了，但是实际情况下，从美观的角度，两者是要有点距离的。这个其实也好解决，只要在menu上面画一个透明的区域就好了。代码清单如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.menu</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    这样鼠标往下移的时候就会马上hove到menu上，而不会因为中间的缝隙导致</p>
<p>menu不会出来。</p>
<p>​    如果即写了css的hover，又监听了mouse事件，用mouse控制显示隐藏，双重</p>
<p>效果会发生什么情况？如果按正常思路，在mouse事件里面hover的时候，添加了一个</p>
<p>display:block的style，会覆盖css的设置。也就是说，只要hover一次，css的代码就不</p>
<p>管用了，因为内联样式的优先级高于外联。但是实际情况下会有意外发生，那就是在移</p>
<p>动端Safari上面，触摸会触发css的hover，并且这个触发会很高概率的先于touchstart事件，此时会先判断当前是显示还是隐藏的状态，由于css的hover发挥了作用，所以判断为显示，然后又把它隐藏了。也就是说，点一次不出来，要点两次。所以最好别同时</p>
<p>两个一起写。</p>
<p>​    第二种方法，使用子元素，这个更简单。把hover的目标和隐藏的对象当作同一个</p>
<p>父容器的子元素，然后hover写在这个父容器上面就可以了，不用像上面那样，隐藏的</p>
<p>元素本身也要写个 hover。如下代码所示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.marker-container</span> <span class="selector-class">.detail-info</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.marker-container</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.detail-info</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="自定义radio-checkbox的样式"><a href="#自定义radio-checkbox的样式" class="headerlink" title="自定义radio/checkbox的样式"></a>自定义radio/checkbox的样式</h6><p>​    我们知道，使用原生的radio/checkbox是不可以改变他的样式的，得自己</p>
<p>div/span去画，然后再去监听单击事件。但是这样需要自己去写逻辑控制，例如实现</p>
<p>radio按钮单选的功能，另外没办法使用原生radio的change事件，没有用原生来的方便</p>
<p>​    但实际上可以用一点css3的技巧实现自定义的目的。借助css3提供的一个伪类</p>
<p>:checked,只要radio/checkbox是选中状态，这个伪类就会生效，因此可以利用选中和</p>
<p>非选中这两个状态，去切换不同的样式。下面的代码清单是把一个checkbox和一个用来</p>
<p>自定义样式的span写在一个label里面，同时checkbox始终隐藏</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span>&#123;</span></span><br><span class="line">        display: none;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="comment">/*未选中的checkbox的样式*/</span></span></span><br><span class="line"><span class="css">	<span class="selector-class">.checkbox</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*实现略*/</span></span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​    写在label里面是为了能够在单击span的时候改变checkbox的状态。最后，再改一</p>
<p>下选中态的样式即可，如下代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span> + <span class="selector-class">.checkbox</span>&#123;</span><br><span class="line">	<span class="comment">/**实现略/</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
<p>​    注意，这一步很关键，添加一个打勾的背景图也可以，使用图标字体也可以。</p>
<p>：checked兼容性还是比较好的，只要你不需要兼容IE8就可以使用，换句话说只要你能</p>
<p>用 nth-of-type，就可以使用 ：checked。</p>
<h6 id="需要根据个数显示不同样式（向前选择器-nth-last-child）"><a href="#需要根据个数显示不同样式（向前选择器-nth-last-child）" class="headerlink" title="需要根据个数显示不同样式（向前选择器 :nth-last-child）"></a>需要根据个数显示不同样式（向前选择器 :nth-last-child）</h6><p>​    例如有1~3个item显示在同一行，但item的个数不一定，如果只有一个，那这个</p>
<p>item占宽100%，有2个时每一个占50%，3个时每一个占 33.3%，这个你也可以用js计</p>
<p>算一下，但是这样做比较繁琐，用css3就可以轻松解决这个问题，如下代码所示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">	li&#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:nth-last-child(2)</span>,</span></span><br><span class="line"><span class="css">	<span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:nth-last-child(2)</span> ~ <span class="selector-tag">li</span>&#123;</span></span><br><span class="line">        width: 50%;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:nth-last-child(3)</span>,</span></span><br><span class="line"><span class="css">	<span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:nth-last-child(3)</span> ~ <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span>: 33<span class="selector-class">.3</span>%;</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/05/20/css经典实战/1558367246133.png" alt="1558367246133"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-class">.terms-box</span> + <span class="selector-class">.terms-box</span>&#123; <span class="attribute">display</span>: none&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"terms-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"terms-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​    这个时候你会想，如果有一个反过来的选择器就好了，但是css没有一个向前选择</p>
<p>器，无法直接隐藏第一个，这个时候用nth-last-type就可以实现，如下所示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.terms-box</span><span class="selector-pseudo">:nth-of-type(1)</span><span class="selector-pseudo">:nth-last-of-type(2)</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    当它是第一个元素，并且它是倒数第二个的时候就隐藏。这样就可以实现了有两个</p>
<p>terms的时候隐藏第一个，只有一个的时候不隐藏的目的了。</p>
<p>#####需要根据个数显示不同样式（使用flex）</p>
<p>​    上面是使用:first-child:nth-last-child(n)  来使根据不同个数显示不同样式，但是</p>
<p>如果显示个数很多的时候，显然使用上面的方法不适用于很多种情况的时候，比如十个</p>
<p>子元素的时候或者甚至一百个子元素的时候，所以这里来介绍下，使用flex，平分父元素。代码清单如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.parent-box</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 50px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/* Safari */</span></span></span><br><span class="line">    display: -webkit-flex;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: flex-start;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.parent-box</span> <span class="selector-class">.child</span> &#123;</span></span><br><span class="line">    flex: 1;</span><br><span class="line">    text-align: center;</span><br><span class="line">    height: 50px;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.parent-box</span> <span class="selector-class">.child</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">	content: '';</span><br><span class="line">    width: 80px;</span><br><span class="line">    height: 4px;</span><br><span class="line">    background: red;</span><br><span class="line">    position: absolute;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 50%;</span><br><span class="line">    margin-left: -40px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/05/20/css经典实战/1558448583785.png" alt="1558448583785"></p>
<p>​    当然如果是三个元素，也会平分，一百个元素也会平分，利用的是flex布局的flex</p>
<p>属性。</p>
<p>​    经常会遇到一个父盒子下面有两个子元素，左边文本宽度不固定，右边要占满</p>
<p>整个父元素。如图所示的样式</p>
<p><img src="/2019/05/20/css经典实战/1558449205761.png" alt="1558449205761"></p>
<p>​    其实右边的红线就是使用flex属性来书写的，详细代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    jusitify-content: flex-start;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.line</span>&#123;</span></span><br><span class="line">    height: 10px;</span><br><span class="line">    background: red;</span><br><span class="line">    flex: 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好吗<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​    当然，如果对flex不是很熟悉的话，点击查看flex详细解答 <a href="https://shenxiaobu.github.io/2019/04/01/flex%E8%AF%A6%E8%A7%A3/">flex详解</a></p>
<h6 id="用css画一个三角形"><a href="#用css画一个三角形" class="headerlink" title="用css画一个三角形"></a>用css画一个三角形</h6><p>​    三角形的场景很常见，打开一个页面可以看到各种各样的三角形。</p>
<p>​    由于div一般是四边形，要画一个三角形并不是那么直观。你可以贴一张png，但是</p>
<p>着各种办法有点low；也可以使用svg 的形式，但是太麻烦。三角形其实是可以用css来</p>
<p>画的。css画三角形可以分为两种：一种是纯色的三角形，第二种是有边框色的三角形</p>
<p>​    三角形可以用border画出来，首先一个有四个border的div应该是这样的，如下图</p>
<p>所示</p>
<p><img src="/2019/05/20/css经典实战/1558450156666.png" alt="1558450156666"></p>
<p>代码清单如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.triangle</span>&#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">border-right</span>: 50<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">border-left</span>: 50<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">border-top</span>: 50<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#666</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">border-bottom</span>: 50<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#999</span>;</span></span><br><span class="line">	width: 100px;</span><br><span class="line">	height: 100px;</span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后把他的宽度和高度都设置为0，剩下四个border，就变成如下所示了</p>
<p><img src="/2019/05/20/css经典实战/1558450399453.png" alt="1558450399453"></p>
<p>​    再把border-top去掉，这样就把上面的区域给裁掉了，如下图所示</p>
<p><img src="/2019/05/20/css经典实战/1558450473471.png" alt="1558450473471"></p>
<p>​    接下来就是让左右两边的border透明，background的背景色去掉</p>
<p>就得到一个三角形，如下图所示</p>
<p><img src="/2019/05/20/css经典实战/1558450619174.png" alt="1558450619174"></p>
<p>代码清单如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.triangle</span>&#123;</span></span><br><span class="line">	border-right: 50px solid transparent;</span><br><span class="line">	border-left: 50px solid transparent;	</span><br><span class="line"><span class="css">	<span class="selector-tag">border-bottom</span>: 50<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#999</span>;</span></span><br><span class="line">	width: 0px;</span><br><span class="line">	height: 0px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​    这里是了底部的border作为三角形，如果要取左边的border，同理只需让上下的</p>
<p>两个border颜色设置为transparent，同时不要右边的border即可。</p>
<h6 id="控制三角形的角度"><a href="#控制三角形的角度" class="headerlink" title="控制三角形的角度"></a>控制三角形的角度</h6><p>​    上面画的三角形是一个直角三角形，而用的比较多的应该是等边三角形或者接近于</p>
<p>等边三角形，那怎么画一个等边三角形呢？</p>
<p>​    首先，保持border-left和border-right的大小不变，让border-bottom不断变大，</p>
<p>观察一下形态是怎么变的，如下所示</p>
<p><img src="/2019/05/20/css经典实战/1558451649475.png" alt="1558451649475"></p>
<p>​    经过上图的解释，应该明白了角度是如何调整的，需要用到三角形的数学公式，</p>
<p>如果要制作等边三角形，那么应该 左右两边的边框一样宽度，底部边框的高度应为</p>
<p>左（右）边框的根号3倍；如40px的根号3倍约为 69.28px；如下图所示，就为等边</p>
<p>三角形</p>
<p><img src="/2019/05/20/css经典实战/1558452072475.png" alt="1558452072475"></p>
<h6 id="画一个有边缘的三角形"><a href="#画一个有边缘的三角形" class="headerlink" title="画一个有边缘的三角形"></a>画一个有边缘的三角形</h6><p>​    这种三角形很常见，特别是tip的提示框、聊天消息框等。</p>
<p>​    这种画法的实现其实很简单，只是不容易想到——就是先画一个深色的三角形，然</p>
<p>后再画一个同样大小白色的三角形盖在上面，两个三角形错位两个像素，这样深色的边</p>
<p>缘就刚好露出一个像素。</p>
<p>代码清单如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.chat-msg</span>&#123;</span></span><br><span class="line">	width: 300px;</span><br><span class="line">	height: 80px;</span><br><span class="line"><span class="css">	<span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">	position: relative;</span><br><span class="line">	border-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.chat-msg</span><span class="selector-pseudo">:before</span>&#123;</span></span><br><span class="line">	content: '';</span><br><span class="line">	position: absolute;</span><br><span class="line">	left: -10px;</span><br><span class="line">	top: 34px;</span><br><span class="line">	border-top: 6px solid transparent;</span><br><span class="line">	border-bottom: 6px solid transparent;</span><br><span class="line"><span class="css">	<span class="selector-tag">border-right</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat-msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下</p>
<p><img src="/2019/05/20/css经典实战/1558454119744.png" alt="1558454119744"></p>
<p>​    然后再画一个白色的三角形盖上去，错位两个像素，代码清单如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.chat-msg</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: -<span class="number">8px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">34px</span>;</span><br><span class="line">	<span class="attribute">border-top</span>: <span class="number">6px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-bottom</span>: <span class="number">6px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-right</span>: <span class="number">10px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下</p>
<p><img src="/2019/05/20/css经典实战/1558454445127.png" alt="1558454445127"></p>
<p>​    上面用的属性都是css2最基本的属性，所以没有兼容性问题</p>
<h6 id="添加阴影"><a href="#添加阴影" class="headerlink" title="添加阴影"></a>添加阴影</h6><p>​    如果三角形要有阴影怎么办？可以用filter添加阴影效果，如下代码所示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.chat-msg</span>&#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> #<span class="number">999</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下</p>
<p><img src="/2019/05/20/css经典实战/1558454738928.png" alt="1558454738928"></p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序模拟调用本地json接口数据</title>
    <url>/2019/05/01/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A8%A1%E6%8B%9F%E8%B0%83%E7%94%A8%E6%9C%AC%E5%9C%B0json%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h4 id="小程序模拟调用本地json接口数据"><a href="#小程序模拟调用本地json接口数据" class="headerlink" title="小程序模拟调用本地json接口数据"></a>小程序模拟调用本地json接口数据</h4><p>把准备好的json数据渲染到前端界面，模拟在这里加载本地json数据。效果如下，能看到界面渲染的数据。</p>
<p><img src="/2019/05/01/小程序模拟调用本地json接口数据/1556687765777.png" alt="1556687765777"></p>
<p>1：新建一个data文件夹，在文件夹底下新建一个js文件，写好准备的json格式的数据：并且定义数据出口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  dataList: json</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/05/01/小程序模拟调用本地json接口数据/1556687840646.png" alt="1556687840646"></p>
<p>1.json:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本地模拟json数据</span></span><br><span class="line"><span class="keyword">var</span> json = [&#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="number">2</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="number">3</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数据出口</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  dataList: json</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2：wxml</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--列表渲染  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;dataList&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'item-container'</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--序列号  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3：wxss</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-container</span>&#123;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">110</span>rpx;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">110</span>rpx;</span><br><span class="line">  <span class="attribute">margin-bottom</span>:<span class="number">4</span>rpx;</span><br><span class="line">  <span class="attribute">text-align</span>: center; </span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f6c8fb</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4：js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入本地json数据，这里引入的就是第一步定义的json数据</span></span><br><span class="line"><span class="keyword">var</span> jsonData = <span class="built_in">require</span>(<span class="string">'../data/json.js'</span>);</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//我们在这里加载本地json数据</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      <span class="comment">//jsonData.dataList获取json.js里定义的json数据，并赋值给dataList</span></span><br><span class="line">      dataList: jsonData.dataList</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.data.dataList)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>显示效果上面已经说了，打印的数据如下</p>
<p><img src="/2019/05/01/小程序模拟调用本地json接口数据/1556688123842.png" alt="1556688123842"></p>
]]></content>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>如何获取textarea文本框选中的内容，如何获取光标位置</title>
    <url>/2019/04/30/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96textarea%E6%96%87%E6%9C%AC%E6%A1%86%E9%80%89%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%8C%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%85%89%E6%A0%87%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="如何获取textarea文本框选中的内容，如何获取光标位置"><a href="#如何获取textarea文本框选中的内容，如何获取光标位置" class="headerlink" title="如何获取textarea文本框选中的内容，如何获取光标位置"></a>如何获取textarea文本框选中的内容，如何获取光标位置</h4><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p>在一次项目中，需要制作一个回复二级评论时，前面增加一个@某某某的前缀，然后键盘输入</p>
<p>删除键的时候可以删除该前缀。</p>
<p>很明显，当是回复二级评论的时候，获取回复的人的名称，并在输入框同级处加一个div，内容</p>
<p>为“@某某某”，使用绝对定位将位置定在输入框的左上角，重点是当输入框的光标在 0 的时候，</p>
<p>点击删除键 需要删除该div。</p>
<p>因此需要获取光标位置</p>
<h5 id="获取光标位置"><a href="#获取光标位置" class="headerlink" title="获取光标位置"></a>获取光标位置</h5><p>通过对象的selectionStart（选中范围的起点）和selectionEnd（选中范围的末点），然后通过截取字符串substring来获取选中范围的.</p>
<p>几个TextRange（顾名思义，TextRange就可以理解为文本的选择范围）的常用属性及方法：</p>
<p>属性</p>
<p>boundingWidth 获取绑定TextRange对象的矩形的宽度</p>
<p>boundingHeight 获取绑定TextRange对象的矩形的高度</p>
<p>boundingLeft 获取绑定TextRange对象的矩形左边缘和包含TextRange对象的左侧之间的距离</p>
<p>boundingTop Retrieves the distance between the top edge of the rectangle that bounds the TextRange object and the top side of the object that contains the TextRange.</p>
<p>offsetLeft 获取对象相对于版面或由offsetParent属性指定的父坐标的计算左侧位置</p>
<p>offsetTop 获取对象相对于版面或由offsetParent属性指定的父坐标的计算顶端位置</p>
<p>htmltext 选中范围内包含的html片段</p>
<p>text 设置或获取范围内包含的纯文本</p>
<p>方法</p>
<p>moveStart 设置文本范围的开始位置</p>
<p>moveEnd 设置文本范围的结束位置</p>
<p>collapse 将插入点移动到当前范围的开始或结尾</p>
<p>select 将当前选择区置为当前对象，也就是从moveStart设置的位置开始到moveEnd设置的位置结束的范围</p>
<p>代码实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	 &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">	&lt;title&gt;获取光标&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;textarea id=<span class="string">"textarea"</span>&gt;爆米花小布，你是最棒的&lt;<span class="regexp">/textarea&gt;</span></span><br><span class="line"><span class="regexp">	&lt;button id="getSelectedText" value="dianji"&gt;点击&lt;/</span>button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   </span><br><span class="line"> <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> textarea = <span class="built_in">document</span>.getElementById(<span class="string">'textarea'</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">var</span> getPosi = <span class="built_in">document</span>.getElementById(<span class="string">'getSelectedText'</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  getPosi.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      </span><br><span class="line">  	<span class="built_in">console</span>.log(getSelectedObj(textarea))</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSelectedObj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">     </span><br><span class="line">  	 <span class="keyword">var</span> selectedObj = &#123; &#125;;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">       	 <span class="comment">// 获取选区的开始位置</span></span><br><span class="line">         </span><br><span class="line">	 selectedObj.startPos = obj.selectionStart || <span class="string">""</span>,</span><br><span class="line">            </span><br><span class="line">       	 <span class="comment">// 获取选区的结束位置</span></span><br><span class="line">            </span><br><span class="line">  	selectedObj.endPos = obj.selectionEnd || <span class="string">""</span>;</span><br><span class="line">         </span><br><span class="line">	<span class="comment">//获取文本内容</span></span><br><span class="line">	selectedObj.content = obj.value;</span><br><span class="line">	<span class="comment">//获取选中文本</span></span><br><span class="line">	selectedObj.selectedContent = 	           obj.value.substring(obj.selectionStart,obj.selectionEnd) || <span class="string">""</span>;</span><br><span class="line"> 	<span class="keyword">return</span> selectedObj;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/04/30/如何获取textarea文本框选中的内容，如何获取光标位置/1.jpg" alt="1556519056708"></p>
<p>自己封装一个方法，获取文本内容，选中内容，光标的始末位置</p>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>如何制作单行和多行文本溢出时显示...省略号</title>
    <url>/2019/04/30/%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E5%8D%95%E8%A1%8C%E5%92%8C%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%97%B6%E6%98%BE%E7%A4%BA-%E7%9C%81%E7%95%A5%E5%8F%B7/</url>
    <content><![CDATA[<h4 id="如何制作单行和多行文本溢出时显示…省略号"><a href="#如何制作单行和多行文本溢出时显示…省略号" class="headerlink" title="如何制作单行和多行文本溢出时显示…省略号"></a>如何制作单行和多行文本溢出时显示…省略号</h4><h5 id="单行文本溢出显示…省略号"><a href="#单行文本溢出显示…省略号" class="headerlink" title="单行文本溢出显示…省略号"></a>单行文本溢出显示…省略号</h5><p>虽然单行溢出简单，也稍微做下介绍</p>
<p>CSS代码如下：</p>
<p>width: 某某宽度。</p>
<p>overflow: hidden;溢出隐藏</p>
<p>white-space: nowrap;文字不能转行</p>
<p>text-overflow:ellipsis;隐藏的部分用…表示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.text</span>&#123;	</span></span><br><span class="line">	   width: 300px;	</span><br><span class="line">	   height: 30px;</span><br><span class="line"><span class="css">	   <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;  <span class="comment">/*为了更好的看出效果*/</span></span></span><br><span class="line">	   overflow: hidden;</span><br><span class="line">	   text-overflow: ellipsis;</span><br><span class="line">	   white-space: nowrap;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>我是福建省漳州市芗城区县前直街36号闽南师范大学计算机学院17届普通校友<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/04/30/如何制作单行和多行文本溢出时显示-省略号/01.jpg" alt="1556520105423"></p>
<p>附加技能：js如何判断单行文本是否溢出，哈哈，可能有铁男头比较铁说：单行文本有没有</p>
<p>溢出，肉眼看下不就知道了吗？哈哈，铁男。</p>
<ol>
<li>使用js获取该对象</li>
<li>获取该对象的 clientWidth 和 scrollWidth</li>
<li>当这两个的值不相等的时候说明文本是溢出的，否则没有</li>
</ol>
<p>使用场景： 当需要文本溢出的时候鼠标悬浮显示全文的时候，就需要判断文本是否有溢出了</p>
<p>因为文本没溢出的时候不需要显示全文</p>
<h5 id="多行文本溢出操作"><a href="#多行文本溢出操作" class="headerlink" title="多行文本溢出操作"></a>多行文本溢出操作</h5><ol>
<li>适用于webkit内核浏览器或者移动端的</li>
<li>适用于各个终端的</li>
</ol>
<p>首先介绍第一种： 有一定的局限性。代码如下：</p>
<p>overflow: hidden;首先是溢出隐藏，不可或缺</p>
<p>display: -webkit-box;弹性盒模型显示</p>
<p>-webkit-box-orient: vertical;盒模型元素的排列方式</p>
<p>-webkit-line-clamp: 3;显示行数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.text</span>&#123;	</span></span><br><span class="line">	padding: 0 10px;</span><br><span class="line">	width: 150px;</span><br><span class="line">	height: 90px;</span><br><span class="line">	line-height: 30px;</span><br><span class="line"><span class="css">	<span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">	display: -webkit-box;</span><br><span class="line">	-webkit-box-orient: vertical;</span><br><span class="line">	-webkit-line-clamp: 3;</span><br><span class="line">	overflow: hidden;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>我是福建省漳州市芗城区县前直街36号闽南师范大学计算机学院17届普通校友<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/04/30/如何制作单行和多行文本溢出时显示-省略号/02.jpg" alt="1556520936622"></p>
<p>当然，这种方式在其他不是webkit内核的浏览器是不管用的</p>
<h5 id="来个全部都能使用的多行文本溢出解决"><a href="#来个全部都能使用的多行文本溢出解决" class="headerlink" title="来个全部都能使用的多行文本溢出解决"></a>来个全部都能使用的多行文本溢出解决</h5><p>仔细思考下如何才能在尾部添加一个…呢，有的人会说，截取文本长度，然后尾部添加三个点，</p>
<p>但是那个操作是不可取的，因为不确定能够容纳多少个文字，即使你算出来了能够容纳多少个</p>
<p>文字，然后截取那些文字后再添加三个点，但是内容不一定就是文本，有可能是英文甚至日语</p>
<p>等其他语言，占得空间是不一样的，所以是不可取的。</p>
<p>正确的做法是如下思路，假如超过三行显示…</p>
<ol>
<li>获取内容盒子和内容的高度</li>
<li>如果内容的高度大于盒子的高度说明文本是溢出的</li>
<li>当文本溢出的时候，在盒子尾部添加一个内容为三个点的标签把文本盖住</li>
<li>当然也可以使用伪元素</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.text</span>&#123;	</span></span><br><span class="line">	margin-top: 50px;</span><br><span class="line">	width: 150px;</span><br><span class="line">	height: 90px;</span><br><span class="line">	line-height: 30px;</span><br><span class="line">	overflow: hidden;</span><br><span class="line">	padding: 0 10px;</span><br><span class="line"><span class="css">	<span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.ellipsis</span>&#123;</span></span><br><span class="line">	position: relative;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.ellipsis</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line">	content: '...';</span><br><span class="line">	width: 20px;</span><br><span class="line">	height: 30px;</span><br><span class="line">	line-height: 30px;</span><br><span class="line"><span class="css">	<span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">	position: absolute;	</span><br><span class="line">	bottom: 0;</span><br><span class="line">	right: 0;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text ellipsis"</span>&gt;</span>我是福建省漳州市芗城区县前直街36号闽南师范大学计算机学院17届普通校友<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/04/30/如何制作单行和多行文本溢出时显示-省略号/03.jpg" alt="1556523896940"></p>
<p>注意事项： </p>
<ol>
<li>文本框的高度一定要是文字line-height 的整数倍（要超过几行溢出，就是几倍）,因为不那样的话会使最后一行的文字只显示文字上半部分</li>
<li>由于ie6-7不显示content内容，所以要添加标签兼容ie6-7（如：<span>…<span>）；兼容ie8需要将::after替换成:after。</span></span></li>
<li>伪元素的背景要和文本框盒子的背景颜色一样</li>
</ol>
<h6 id="是不是这样就足够了呢？"><a href="#是不是这样就足够了呢？" class="headerlink" title="是不是这样就足够了呢？"></a>是不是这样就足够了呢？</h6><p>不是的，看看上面的效果图，最后面的“学”字的右边是不是显示不完整呢？</p>
<p>所以我们要将伪元素的背景添加渐变。</p>
<p>将上面的css样式更改为如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.text</span>&#123;	</span></span><br><span class="line">	margin-top: 50px;</span><br><span class="line">	width: 150px;</span><br><span class="line">	height: 90px;</span><br><span class="line">	line-height: 30px;</span><br><span class="line">	overflow: hidden;</span><br><span class="line">	padding: 0 10px;</span><br><span class="line"><span class="css">	<span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.ellipsis</span>&#123;</span></span><br><span class="line">	position: relative;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.ellipsis</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line">	content: '...';</span><br><span class="line">	width: 20px;</span><br><span class="line">	height: 30px;</span><br><span class="line">	line-height: 30px;</span><br><span class="line"><span class="css">	<span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">left</span>, <span class="selector-tag">transparent</span>,<span class="selector-id">#fff</span> 50%);</span></span><br><span class="line"><span class="css">  	<span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">right</span>, <span class="selector-tag">transparent</span>, <span class="selector-id">#fff</span> 50%);</span></span><br><span class="line"><span class="css">  	<span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">right</span>, <span class="selector-tag">transparent</span>, <span class="selector-id">#fff</span> 50%);</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>, <span class="selector-tag">transparent</span>, <span class="selector-id">#fff</span> 50%);</span></span><br><span class="line">	position: absolute;	</span><br><span class="line">	bottom: 0;</span><br><span class="line">	right: 0;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text ellipsis"</span>&gt;</span>我是福建省漳州市芗城区县前直街36号闽南师范大学计算机学院17届普通校友<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果如下：</p>
<p><img src="/2019/04/30/如何制作单行和多行文本溢出时显示-省略号/04.jpg" alt="1556524713838"></p>
<p>刚刚的思路就说了，当文本有溢出的时候才添加这个 ellipsis 的类。</p>
<p>所以使用js获取元素，然后判断 该元素的 clientHeight的值与scrollHeight的值是否一样</p>
<p>如果不一样代表文本溢出，给div添加一个 ellipsis的类。</p>
<p>应用场景，还有很多很多。</p>
<p>比如说文本溢出后，后面还要有个全文两个字的按钮</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>伪类和伪元素的区别与使用</title>
    <url>/2019/04/21/%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="伪类和伪元素的区别与使用"><a href="#伪类和伪元素的区别与使用" class="headerlink" title="伪类和伪元素的区别与使用"></a>伪类和伪元素的区别与使用</h4><p>区别： 先来个例子，到后面再解释</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">em</span>&gt;</span>This<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">em</span>&gt;</span>is a test<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示如下</p>
<p><img src="/2019/04/21/伪类和伪元素的区别与使用/1555829472785.png" alt="1555829472785"></p>
<p>如果我们想要第一个em标签的字体颜色变红怎么做呢？</p>
<p>使用我们熟悉的伪类就可以解决</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">em</span><span class="selector-pseudo">:first-child</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/04/21/伪类和伪元素的区别与使用/1555829658654.png" alt="1555829658654"></p>
<p>但是如果不存在伪类的话，我们要怎么实现呢？</p>
<p>这时我们就要为第一个em标签添加类</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"first-child"</span>&gt;</span>This<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">em</span>&gt;</span>is a test<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">em</span><span class="selector-class">.first-child</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是就可以达到一样的效果；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">em</span>&gt;</span>This<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">em</span>&gt;</span>is a test<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>还是这个例子</p>
<p>那如果我想让这个段落的第一个字母变红，要怎么做呢？</p>
<p>这回我们需要使用伪元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/04/21/伪类和伪元素的区别与使用/1555829946362.png" alt="1555829946362"></p>
<p>同样假设伪元素不存在的情况下，我们该如何实现呢？</p>
<p>这时，我们只能嵌套span标签来实现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>T<span class="tag">&lt;/<span class="name">span</span>&gt;</span>his<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">em</span>&gt;</span>is a test<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到这里，相信大家已经清楚了为什么一个叫做伪类一个叫做伪元素</p>
<p><strong>伪类的效果可以通过添加实际的类来实现</strong></p>
<p><strong>伪元素的效果可以通过添加实际的元素来实现</strong></p>
<p>他们本质区别就是<strong>是否抽象创造了新元素</strong></p>
<h4 id="伪类的应用"><a href="#伪类的应用" class="headerlink" title="伪类的应用"></a>伪类的应用</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: <span class="number">#FF0000</span>&#125;		<span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: <span class="number">#00FF00</span>&#125;	<span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>: <span class="number">#FF00FF</span>&#125;	<span class="comment">/* 鼠标移动到链接上 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: <span class="number">#0000FF</span>&#125;	<span class="comment">/* 选定的链接 */</span></span><br></pre></td></tr></table></figure>
<p>如a标签的伪类</p>
<p><strong>注意：</strong> 一定要注意前后顺序，要遵循“爱恨原则”，就是 LVHA 原则</p>
<p>link visited hover active  否则会出现各种状态时候样式不对的问题</p>
<p><strong>提示：</strong>在 CSS 定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。</p>
<p><strong>提示：</strong>在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。</p>
<p><strong>提示：</strong>伪类名称对大小写不敏感。</p>
<h2 id="所有CSS伪类-元素"><a href="#所有CSS伪类-元素" class="headerlink" title="所有CSS伪类/元素"></a>所有CSS伪类/元素</h2><table>
<thead>
<tr>
<th>选择器</th>
<th>示例</th>
<th>示例说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-checked.html" target="_blank" rel="noopener">:checked</a></td>
<td>input:checked</td>
<td>选择所有选中的表单元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/css/cssref/sel-disabled.html" target="_blank" rel="noopener">:disabled</a></td>
<td>input:disabled</td>
<td>选择所有禁用的表单元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-empty.html" target="_blank" rel="noopener">:empty</a></td>
<td>p:empty</td>
<td>选择所有没有子元素的p元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-enable.html" target="_blank" rel="noopener">:enabled</a></td>
<td>input:enabled</td>
<td>选择所有启用的表单元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-first-of-type.html" target="_blank" rel="noopener">:first-of-type</a></td>
<td>p:first-of-type</td>
<td>选择的每个 p 元素是其父元素的第一个 p 元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-in-range.html" target="_blank" rel="noopener">:in-range</a></td>
<td>input:in-range</td>
<td>选择元素指定范围内的值</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-invalid.html" target="_blank" rel="noopener">:invalid</a></td>
<td>input:invalid</td>
<td>选择所有无效的元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-last-child.html" target="_blank" rel="noopener">:last-child</a></td>
<td>p:last-child</td>
<td>选择所有p元素的最后一个子元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-last-of-type.html" target="_blank" rel="noopener">:last-of-type</a></td>
<td>p:last-of-type</td>
<td>选择每个p元素是其母元素的最后一个p元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-not.html" target="_blank" rel="noopener">:not(selector)</a></td>
<td>:not(p)</td>
<td>选择所有p以外的元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-nth-child.html" target="_blank" rel="noopener">:nth-child(n)</a></td>
<td>p:nth-child(2)</td>
<td>选择所有 p 元素的父元素的第二个子元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-nth-last-child.html" target="_blank" rel="noopener">:nth-last-child(n)</a></td>
<td>p:nth-last-child(2)</td>
<td>选择所有p元素倒数的第二个子元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-nth-last-of-type.html" target="_blank" rel="noopener">:nth-last-of-type(n)</a></td>
<td>p:nth-last-of-type(2)</td>
<td>选择所有p元素倒数的第二个为p的子元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-nth-of-type.html" target="_blank" rel="noopener">:nth-of-type(n)</a></td>
<td>p:nth-of-type(2)</td>
<td>选择所有p元素第二个为p的子元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-only-of-type.html" target="_blank" rel="noopener">:only-of-type</a></td>
<td>p:only-of-type</td>
<td>选择所有仅有一个子元素为p的元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-only-child.html" target="_blank" rel="noopener">:only-child</a></td>
<td>p:only-child</td>
<td>选择所有仅有一个子元素的p元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-optional.html" target="_blank" rel="noopener">:optional</a></td>
<td>input:optional</td>
<td>选择没有”required”的元素属性</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-out-of-range.html" target="_blank" rel="noopener">:out-of-range</a></td>
<td>input:out-of-range</td>
<td>选择指定范围以外的值的元素属性</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-read-only.html" target="_blank" rel="noopener">:read-only</a></td>
<td>input:read-only</td>
<td>选择只读属性的元素属性</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-read-write.html" target="_blank" rel="noopener">:read-write</a></td>
<td>input:read-write</td>
<td>选择没有只读属性的元素属性</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-required.html" target="_blank" rel="noopener">:required</a></td>
<td>input:required</td>
<td>选择有”required”属性指定的元素属性</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-root.html" target="_blank" rel="noopener">:root</a></td>
<td>root</td>
<td>选择文档的根元素</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-target.html" target="_blank" rel="noopener">:target</a></td>
<td>#news:target</td>
<td>选择当前活动#news元素(点击URL包含锚的名字)</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-valid.html" target="_blank" rel="noopener">:valid</a></td>
<td>input:valid</td>
<td>选择所有有效值的属性</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-link.html" target="_blank" rel="noopener">:link</a></td>
<td>a:link</td>
<td>选择所有未访问链接</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-visited.html" target="_blank" rel="noopener">:visited</a></td>
<td>a:visited</td>
<td>选择所有访问过的链接</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-active.html" target="_blank" rel="noopener">:active</a></td>
<td>a:active</td>
<td>选择正在活动链接</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-hover.html" target="_blank" rel="noopener">:hover</a></td>
<td>a:hover</td>
<td>把鼠标放在链接上的状态</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-focus.html" target="_blank" rel="noopener">:focus</a></td>
<td>input:focus</td>
<td>选择元素输入后具有焦点</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-firstletter.html" target="_blank" rel="noopener">:first-letter</a></td>
<td>p:first-letter</td>
<td>选择每个<p> 元素的第一个字母</p></td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-firstline.html" target="_blank" rel="noopener">:first-line</a></td>
<td>p:first-line</td>
<td>选择每个<p> 元素的第一行</p></td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-firstchild.html" target="_blank" rel="noopener">:first-child</a></td>
<td>p:first-child</td>
<td>选择器匹配属于任意元素的第一个子元素的 <p> 元素</p></td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-before.html" target="_blank" rel="noopener">:before</a></td>
<td>p:before</td>
<td>在每个<p>元素之前插入内容</p></td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-after.html" target="_blank" rel="noopener">:after</a></td>
<td>p:after</td>
<td>在每个<p>元素之后插入内容</p></td>
</tr>
<tr>
<td><a href="http://www.runoob.com/cssref/sel-lang.html" target="_blank" rel="noopener">:lang(<em>language</em>)</a></td>
<td>p:lang(it)</td>
<td>为<p>元素的lang属性选择一个开始值</p></td>
</tr>
</tbody>
</table>
<h4 id="伪元素的应用"><a href="#伪元素的应用" class="headerlink" title="伪元素的应用"></a>伪元素的应用</h4><p>  伪元素就是创造一个标签，最经典的应用就是清除浮动的应用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    <span class="comment">/*兼容IE*/</span></span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>给需要清除浮动的元素一个 clearfix类既可以清除浮动</p>
<p>还有的应用就是当一个div中有小图标时，或者边框并不是盒子边框时，就可以使用</p>
<p>伪元素来设计。</p>
<p>1.父元素设置 position: relative,或者 absolute；</p>
<p>2.伪元素一定要设置 content，没有content的时候也要设置content: “”;</p>
<p>3.伪元素设置position: absolute,宽高，display等</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.xiaobu</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.xiaobu</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"xiaobu"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/04/21/伪类和伪元素的区别与使用/1555831637037.png" alt="1555831637037"></p>
<p>如手机端的应用就很多出现又箭头的图标，就可以使用伪元素制作了。</p>
<p>还有对于手机端 1px问题，使用伪元素 制作边框也可以解决移动端边框问题</p>
<p>伪类和伪元素就讲到这了</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>清除浮动的原理与时机</title>
    <url>/2019/04/21/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%97%B6%E6%9C%BA/</url>
    <content><![CDATA[<h4 id="清除浮动的原理与时机"><a href="#清除浮动的原理与时机" class="headerlink" title="清除浮动的原理与时机"></a>清除浮动的原理与时机</h4><p>当父元素没有设置高度，子元素又设置了浮动的时候，这时父元素的高度就会是0；</p>
<p>而不是子元素的高度，就会导致和父元素同级的元素占在本属于自己的位置，效果</p>
<p>如图所示：</p>
<p><img src="/2019/04/21/清除浮动的原理与时机/clear.png" alt="1555826123975"></p>
<p>如何让父元素拥有子元素的高度，解决这种事情的发生呢？就需要清除浮动。</p>
<p><img src="/2019/04/21/清除浮动的原理与时机/1555826197851.png" alt="1555826197851"></p>
<p>第一种方法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--没加下面这行之前，由于设置了浮动，所以content元素的高度为0--&gt;</span>		   <span class="comment">&lt;!--设置了之后。浮动就清除了--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第一种方法就是清除浮动最原始的方法，但是因为添加了一个div，所以作为一个专业</p>
<p>的前端工程师，我们要展现出我们的逼格，不用添加一个div就可以解决浮动问题，</p>
<p>所以这种方法，不提倡</p>
<p>第二中方法：</p>
<p>给父元素设置 overflow: hidden</p>
<p>效果如下</p>
<p><img src="/2019/04/21/清除浮动的原理与时机/1555826674871.png" alt="1555826674871"></p>
<p>很明显，父元素高度就有了；</p>
<p>但是由于 overflow:hidden   还有隐藏溢出文本的功能，所以这里也不提倡使用这个</p>
<p>方法来去除浮动</p>
<p>第三种方法：</p>
<p>​    使用伪元素，不懂伪元素的可以先去了解下 伪元素和伪类</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'0'</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    <span class="comment">/* 兼容IE */</span></span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方法：在需要清除浮动的元素添加 clearfix类即可，如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content clearfix"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解父元素与子元素的width关系</title>
    <url>/2019/04/21/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%88%B6%E5%85%83%E7%B4%A0%E4%B8%8E%E5%AD%90%E5%85%83%E7%B4%A0%E7%9A%84width%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h3 id="深入理解父元素与子元素的width关系"><a href="#深入理解父元素与子元素的width关系" class="headerlink" title="深入理解父元素与子元素的width关系"></a>深入理解父元素与子元素的width关系</h3><p>　　对于这一部分内容，如果理解准确，可以更容易控制布局，节省不必要的代码，这里将简单研究。</p>
<p>####第一部分：父子元素都是内联元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>fortest<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*第一种情况：父元素与子元素均为内联元素时*/</span></span></span><br><span class="line">        span&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>; <span class="comment">/*失效，因为内联元素不可设置width和height*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        a&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span>: 100%; <span class="comment">/*失效，内联元素设置100%也是毫无意义的*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>父子元素width关系<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这时，我们在审查元素时可以发现，span和a的width（和height）的宽度是auto，即宽度是由其内容撑起来的，故为auto。</p>
<p>####第二部分：父子元素都是块级元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>fortest<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.parent</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 300px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.son</span>&#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: green;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>　这时，子元素设置为了父元素width的100%，那么子元素的宽度也是500px；</p>
<p>　　但是如果我们把子元素的width去掉之后，就会发现子元素还是等于父元素的width。<strong>也就是说，对于块级元素，子元素的宽度默认为父元素的100%</strong></p>
<p><strong>补充：这里解释的不够清楚。实际上，当我们给子元素添加padding和margin时，可以发现宽度width是父元素的宽度减去子元素的margin值和padding值，下面的例子亦是如此。</strong></p>
<p>　　<strong>毫无疑问，如果去掉子元素的height，就会发先子元素的高度为0，故height是不会为100%的，</strong>一般我们都是通过添加内容（子元素）将父元素撑起来。</p>
<h2 id="第三部分：父元素是块级元素、子元素是内联元素"><a href="#第三部分：父元素是块级元素、子元素是内联元素" class="headerlink" title="第三部分：父元素是块级元素、子元素是内联元素"></a>第三部分：父元素是块级元素、子元素是内联元素</h2><p><strong>第一种情况</strong>：内联元素是一般的类型（img、input除外）</p>
<p>　　　　　毫无疑问，这种情况下，同样子元素是没有办法设置宽度的，也就谈不上100%的问题了。 即内联元素必须依靠其内部的内容才能撑开。</p>
<p><strong>第二种情况：内联元素是input和img这样的可以设置width和height的类型</strong></p>
<p>对于这种情况可能稍显复杂，首先应当明白：为什么img是内联元素还可以设置它的宽和高呢？因为除了我们常常理解的块级元素和内联元素的分类方法，还有一种替换元素和不可替换元素的分类方法，可以将之分为替换元素和不可替换元素。</p>
<h4 id="a-替换元素：替换元素就是浏览器根据元素的标签和属性，来决定元素的具体显示内容的元素。"><a href="#a-替换元素：替换元素就是浏览器根据元素的标签和属性，来决定元素的具体显示内容的元素。" class="headerlink" title="a) 替换元素：替换元素就是浏览器根据元素的标签和属性，来决定元素的具体显示内容的元素。"></a>a) 替换元素：替换元素就是浏览器根据元素的标签和属性，来决定元素的具体显示内容的元素。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　　　　例如浏览器会根据&lt;img&gt;标签的src属性的值来读取图片信息并显示出来，而如果查看(X)HTML代码，则看不到图片的实际内容；又例如根据&lt;input&gt;标签的type属性来决定是显示输入框，还是单选按钮等。(X)HTML中的　　　　&lt;img&gt;&lt;input&gt;&lt;textarea&gt;&lt;select&gt;&lt;object&gt;都是替换元素。这些元素往往没有实际的内容，即是一个空元素，例如：&lt;img src=&quot;cat.jpg&quot; /&gt;  &lt;input type=&quot;submit&quot; name=&quot;Submit&quot; value=&quot;提交&quot; /&gt;  浏览器会根据元素的标签类型和属性来显示这些元素。可替换元素也在其显示中生成了框</span><br></pre></td></tr></table></figure>
<h4 id="b-不可替换元素-X-HTML-的大多数元素是不可替换元素，即其内容直接表现给用户端（例如浏览器）。"><a href="#b-不可替换元素-X-HTML-的大多数元素是不可替换元素，即其内容直接表现给用户端（例如浏览器）。" class="headerlink" title="　　　　b) 不可替换元素(X)HTML 的大多数元素是不可替换元素，即其内容直接表现给用户端（例如浏览器）。"></a>　　　　b) 不可替换元素(X)HTML 的大多数元素是不可替换元素，即其内容直接表现给用户端（例如浏览器）。</h4><p>　　　　</p><p>这是一个段落</p>，这个段落p就是一个不可替换元素，那么其中这是一个段落会被全部显示。<p></p>
<p>　　　　<strong>当时img这种元素时，不管我们怎么设置父元素的宽度和高度，而不设置img的宽和高时，img总是表现为其原始的宽和高。</strong></p>
<p>　　      而如果我们只设置了其高度，不设置宽度看看其表现时怎么样的吧，如下所示（原始图片的大小为1920X1080的图片）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>fortest<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.parent</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 300px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        img&#123;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: green;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"son"</span> <span class="attr">src</span>=<span class="string">"http://img2.3lian.com/2014/c7/12/d/77.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下所示：</p>
<p><img src="/2019/04/21/深入理解父元素与子元素的width关系/1555824684554.png" alt="1555824684554"></p>
<p>　由此我们可以发现，虽然没有设置宽度，但是表现在浏览器上为160px，<strong>它并没有继承父元素的100%得到500px，而是根据既定的高度来等比例缩小宽度。  同样， 如果只设置width，那么height也会等比例改变。</strong>   <strong>如果我们把img的width设置为100%，就可以发现其宽度这时就和父元素的宽度一致了，如下所示：</strong></p>
<p><img src="/2019/04/21/深入理解父元素与子元素的width关系/1555824723162.png" alt="1555824723162"></p>
<p>　<strong>而我们一般的做法时，首先确定img的父元素的宽度和高度，然后再将img的宽度和高度设置位100%，这样，图片就能铺满父元素了。</strong></p>
<p>####第四部分：同为块级元素的父元素与脱离文档流的子元素</p>
<p><strong>第一种情况：float:left和float:right</strong></p>
<p>　　　　<strong>如果将子元素设置为float:left或float：right，这时它就脱离了文档流，代码如下：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>fortest<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.parent</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 300px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.son</span>&#123;</span></span><br><span class="line">            float: right;            </span><br><span class="line">            height: 100px;</span><br><span class="line">            background: red;　　</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这时，我们就只能看到父元素，而通过审查元素可知，子元素为0X100，浮动在父元素的最右边。</p>
<p>　<strong>第二种情况：position:absolute或position:fixed</strong></p>
<p>　　　　<strong>同样，这种情况也是脱离正常文档流，导致width为0。</strong></p>
<p>　　<strong>第三种情况:positon:relative</strong></p>
<p>　　　　<strong>这种情况下，子元素并没有脱离文档流，所以此时width就成了默认的100%,宽度为500px。</strong></p>
<p>####第五部分：同为块级元素的子元素和脱离文档流的父元素</p>
<p>　第一种情况：position:absolute或position:fixed</p>
<p>　　　　代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>fortest<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.grand</span>&#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 1000px;</span><br><span class="line">            height: 600px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:pink</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.parent</span>&#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line">            left: 50px;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 300px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.son</span>&#123;</span></span><br><span class="line">            right: 10px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grand"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="/2019/04/21/深入理解父元素与子元素的width关系/1555824850324.png" alt="1555824850324"></p>
<p>也就是说，这时，子元素同样是默认的100%相对与父元素，fixed时情况相同。</p>
<p><strong>第二种情况:float:right或float:left</strong></p>
<p>　　同上一种情况。</p>
<p><strong>第三种情况:position:relative</strong></p>
<p>　　同上面两种情况。</p>
<p> <strong>也就是说，父元素脱离文档流对子元素没有影响。</strong></p>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>制作滑动门菜单（背景图片自适应）</title>
    <url>/2019/04/21/%E5%88%B6%E4%BD%9C%E6%BB%91%E5%8A%A8%E9%97%A8%E8%8F%9C%E5%8D%95%EF%BC%88%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E8%87%AA%E9%80%82%E5%BA%94%EF%BC%89/</url>
    <content><![CDATA[<p>###制作滑动门菜单（背景图片自适应）</p>
<p>滑动门菜单： 滑动门菜单就是菜单的背景图片是不规则图形的时候，背景图片要跟随</p>
<p>内容的宽度来确定背景图片的显示。</p>
<p><img src="/2019/04/21/制作滑动门菜单（背景图片自适应）/图层 0.png" alt></p>
<p>要实现背景图片类似如上图所示的菜单按钮，首先将图片分为两张</p>
<p><img src="/2019/04/21/制作滑动门菜单（背景图片自适应）/a.png" alt></p>
<p><img src="/2019/04/21/制作滑动门菜单（背景图片自适应）/b.png" alt></p>
<p>然后内容结构为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span>&gt;</span>我是菜单1打酱油的<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>设置样式为</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.nav</span>&#123;</span><br><span class="line">     <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">83px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(./a.png) no-repeat;</span><br><span class="line">    <span class="attribute">display</span>: block; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">a</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">min-width</span>: <span class="number">180px</span>;</span><br><span class="line">        <span class="attribute">max-width</span>: <span class="number">354px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">83px</span>;</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">85px</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'./b.png'</span>) right no-repeat;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">83px</span>;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;  </span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">83px</span>;</span><br><span class="line">        <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/04/21/制作滑动门菜单（背景图片自适应）/1555819253182.png" alt="1555819253182"></p>
<p>由于对a标签设置了block属性，所以宽度是继承父元素的100%；</p>
<p>那么怎样使a标签的宽度设置为内容大小宽度呢？</p>
<p>方法1：</p>
<p>​    给a标签添加个float:left,就可以将block的块级元素变为行年块级元素。</p>
<p>宽度显示如下</p>
<p><img src="/2019/04/21/制作滑动门菜单（背景图片自适应）/1555819486236.png" alt="1555819486236"></p>
<p>方法2：</p>
<p>​    直接将block属性改为 inline-block</p>
<p>宽度显示如下</p>
<p><img src="/2019/04/21/制作滑动门菜单（背景图片自适应）/1555819622528.png" alt="1555819622528"></p>
<p>这样滑动门效果就出来了</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>html块级元素与行内（内联）元素还会有行内块级（内联块级）元素的特点</title>
    <url>/2019/04/21/html%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E4%B8%8E%E8%A1%8C%E5%86%85%EF%BC%88%E5%86%85%E8%81%94%EF%BC%89%E5%85%83%E7%B4%A0%E8%BF%98%E4%BC%9A%E6%9C%89%E8%A1%8C%E5%86%85%E5%9D%97%E7%BA%A7%EF%BC%88%E5%86%85%E8%81%94%E5%9D%97%E7%BA%A7%EF%BC%89%E5%85%83%E7%B4%A0%E7%9A%84%E7%89%B9%E7%82%B9/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/keyi/p/5817968.html" target="_blank" rel="noopener">html元素类型 块级元素、内联元素(又叫行内元素)和内联块级元素。</a></p>
<p>html中的标签元素大体被分为三种不同的类型：块级元素、内联元素(又叫行内元素)和内联块级元素。</p>
<p><strong>块级元素特点：</strong></p>
<p>1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（霸道，一个块级元素独占一行）</p>
<p>2、元素的高度、宽度、行高以及顶和底边距都可设置。</p>
<p>3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致）</p>
<p>常用的块状元素有：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>,<span class="tag">&lt;<span class="name">p</span>&gt;</span>,<span class="tag">&lt;<span class="name">h1</span>&gt;</span>...<span class="tag">&lt;<span class="name">h6</span>&gt;</span>,<span class="tag">&lt;<span class="name">ol</span>&gt;</span>,<span class="tag">&lt;<span class="name">ul</span>&gt;</span>,<span class="tag">&lt;<span class="name">dl</span>&gt;</span>,<span class="tag">&lt;<span class="name">table</span>&gt;</span>,<span class="tag">&lt;<span class="name">address</span>&gt;</span>,<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>,<span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>设置display:block；可以将元素转换块级元素。</p>
<p><strong>内联元素特点：</strong></p>
<p>1、和其他元素都在一行上；</p>
<p>2、元素的高度、宽度及顶部和底部边距不可设置；</p>
<p>3、元素的宽度就是它包含的文字或图片的宽度，不可改变。</p>
<p>常用的内联元素有：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>,<span class="tag">&lt;<span class="name">span</span>&gt;</span>,<span class="tag">&lt;<span class="name">br</span>&gt;</span>,<span class="tag">&lt;<span class="name">i</span>&gt;</span>,<span class="tag">&lt;<span class="name">em</span>&gt;</span>,<span class="tag">&lt;<span class="name">strong</span>&gt;</span>,<span class="tag">&lt;<span class="name">label</span>&gt;</span>,<span class="tag">&lt;<span class="name">q</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>设置display:inline;可以将块状元素转换为内联元素</p>
<p><strong>内联块级元素特点：</strong>（同时具备内联元素、块级元素的特点）</p>
<p>1、和其他元素都在一行上；</p>
<p>2、元素的高度、宽度、行高以及顶和底边距都可设置！</p>
<p>常用的内联块状元素有：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>,<span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>display:inline-block；float:left / right；position：absolute/fixed;可以将元素设置为内联块级元素。</p>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>express操作mysql实现get和post接口并解决跨域问题封装原生ajax</title>
    <url>/2019/04/06/express%E6%93%8D%E4%BD%9Cmysql%E5%AE%9E%E7%8E%B0get%E5%92%8Cpost%E6%8E%A5%E5%8F%A3%E5%B9%B6%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%B0%81%E8%A3%85%E5%8E%9F%E7%94%9Fajax/</url>
    <content><![CDATA[<h3 id="实现一个post接口"><a href="#实现一个post接口" class="headerlink" title="实现一个post接口"></a>实现一个post接口</h3><p>打开Navicat Premium 设计一个新闻评论表</p>
<p><img src="/2019/04/06/express操作mysql实现get和post接口并解决跨域问题封装原生ajax/1554526464133.png" alt="1554526464133"></p>
<p><a href="https://shenxiaobu.github.io/2019/03/29/%E4%BD%BF%E7%94%A8promise%E5%B0%81%E8%A3%85mysql%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1/">使用promise封装mysql实现第一个接口设计</a></p>
<p>在这的基础上，在router.js上添加代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//评论新闻列表</span></span><br><span class="line">router.post(<span class="string">'/postnewscomments'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	req.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">		data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">		<span class="built_in">console</span>.log(data)</span><br><span class="line">		<span class="keyword">var</span> params = [data.username,data.add_time,data.content,data.newsid]</span><br><span class="line">		<span class="keyword">var</span> sql = <span class="string">"insert into newscomments (username,add_time,content,newsid) values(?,?,?,?)"</span></span><br><span class="line">		Mysql.query(sql,params,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> resData = &#123;&#125;</span><br><span class="line">			<span class="keyword">if</span>(err)&#123;</span><br><span class="line">				resData.status = <span class="number">1</span></span><br><span class="line">				resData.message = err</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				resData.status = <span class="number">0</span></span><br><span class="line">				resData.message = results</span><br><span class="line">			&#125;</span><br><span class="line">			res.send(resData)</span><br><span class="line">		&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>由于没有采用表单进行post提交，所以无法通过 req.body 获取表单提交的数据，应该使用 req.on(‘data’,function(data){}  获取ajax里面 send 的数据。</p>
<p>为了解决跨域，还得在router.js文件前面添加代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.all(<span class="string">'*'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res,next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Origin, X-Requested-With, Content-Type, Accept"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>index.html界面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/jquery/dist/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./common.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> data = &#123;&#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//获取content</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(a)</span></span><br><span class="line"><span class="javascript">                    a.addEventListener(<span class="string">"change"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line">                        data.content = e.target.value;</span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">//点击提交   </span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> inputs = <span class="built_in">document</span>.querySelectorAll(<span class="string">"input"</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(inputs)</span></span><br><span class="line">                    </span><br><span class="line"><span class="javascript">                    inputs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                        item.name ? data[item.name] = item.value : <span class="string">''</span>;</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    data.add_time = getTime() ;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// postAjax("http://127.0.0.1:3000/postnewscomments",data,function(data)&#123;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     if((JSON.parse(data).status) == 0)&#123;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//         console.log("提交成功")</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     &#125;else&#123;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//         console.log(JSON.parse(data).message)</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// &#125;)</span></span></span><br><span class="line"></span><br><span class="line">                    Ajax(&#123;</span><br><span class="line"><span class="javascript">                        type: <span class="string">"post"</span>,</span></span><br><span class="line"><span class="javascript">                        url: <span class="string">"http://127.0.0.1:3000/postnewscomments"</span>,</span></span><br><span class="line">                        data: data,</span><br><span class="line"><span class="javascript">                        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span>((<span class="built_in">JSON</span>.parse(data).status) == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                                <span class="built_in">console</span>.log(<span class="string">"提交成功"</span>)</span></span><br><span class="line"><span class="javascript">                            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                                <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(data).message)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">//请求数据</span></span></span><br><span class="line">                Ajax(&#123;</span><br><span class="line"><span class="javascript">                    type: <span class="string">"get"</span>,</span></span><br><span class="line"><span class="javascript">                    url: <span class="string">"http://127.0.0.1:3000/api/getnewsList"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// data: &#123;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     newsid: 1,</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     pageIndex: 1</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">                    data: <span class="string">"newsid=1&amp;pageIndex=1"</span>,</span></span><br><span class="line"><span class="javascript">                    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(data)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line"><span class="javascript">                <span class="keyword">var</span>  getData = &#123;</span></span><br><span class="line">                        newsid: 1,</span><br><span class="line">                        pageIndex: 1</span><br><span class="line">                    &#125;;</span><br><span class="line"><span class="javascript">                getAjax(<span class="string">"http://127.0.0.1:3000/api/getnewsList"</span>,getData,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(data)</span></span><br><span class="line">                &#125;)</span><br><span class="line"><span class="javascript">                getAjax(<span class="string">"http://127.0.0.1:3000/api/getnewsList"</span>,<span class="string">"newsid=1&amp;pageIndex=2"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(data)</span></span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">                 <span class="comment">//请求数据</span></span></span><br><span class="line">                 Ajax(&#123;</span><br><span class="line"><span class="javascript">                    type: <span class="string">"get"</span>,</span></span><br><span class="line"><span class="javascript">                    url: <span class="string">"http://127.0.0.1:3000/api/getimgcategory"</span>,</span></span><br><span class="line"><span class="javascript">                    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(data)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">                getAjax(<span class="string">"http://127.0.0.1:3000/api/getimgcategory"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(data)</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-box"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"content"</span>&gt;</span>评论内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-box"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"newsid"</span> &gt;</span>ID<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"newsid"</span> <span class="attr">id</span>=<span class="string">"newsid"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-box"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span> &gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"小布"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-box"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"提交评论"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>common.js</p>
<p>原生js里面的ajax的post请求里面的send(string)必须是string，是字符串类型</p>
<p><img src="/2019/04/06/express操作mysql实现get和post接口并解决跨域问题封装原生ajax/1554527403079.png" alt="1554527403079"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ 使用get方式获取请求数据</span></span><br><span class="line"><span class="comment"> * 第一个参数为  url 请求的地址</span></span><br><span class="line"><span class="comment"> * 第二个参数为 data 请求的地址的参数（为空可省略）</span></span><br><span class="line"><span class="comment"> * 第三个参数为 回调函数  第二个参数为空的情况下，就是第二个参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAjax</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length)</span><br><span class="line">    <span class="keyword">var</span> arg = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">var</span> xmlhttp;</span><br><span class="line">    <span class="comment">//拼接数据</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span>(arg[<span class="number">1</span>])==<span class="string">'string'</span>)&#123;</span><br><span class="line">            arg[<span class="number">0</span>] += <span class="string">"?"</span>;</span><br><span class="line">            arg[<span class="number">0</span>] += arg[<span class="number">1</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果是对象，转化为字符串，"?id=1&amp;name=xiaobu"</span></span><br><span class="line">            <span class="keyword">var</span> str=<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> arg[<span class="number">1</span>])&#123;</span><br><span class="line">               i++;</span><br><span class="line">               str +=  i == <span class="number">1</span> ? <span class="string">"?"</span>+key+<span class="string">"="</span>+arg[<span class="number">1</span>][key] : <span class="string">"&amp;"</span>+key+<span class="string">"="</span>+arg[<span class="number">1</span>][key];</span><br><span class="line">            &#125;;</span><br><span class="line">            arg[<span class="number">0</span>] += str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(arg[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建异步对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">        <span class="comment">// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">        xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">        xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//请求头（get方式可以省略）</span></span><br><span class="line">    <span class="comment">//请求行</span></span><br><span class="line">    xmlhttp.open(<span class="string">"get"</span>,arg[<span class="number">0</span>],<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//回调函数</span></span><br><span class="line">    xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)&#123;</span><br><span class="line">            arg.length == <span class="number">2</span> ? arg[<span class="number">1</span>](xmlhttp.responseText):arg[<span class="number">2</span>](xmlhttp.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//发送请求主体（get方式 send里面是null）</span></span><br><span class="line">    xmlhttp.send();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * post 上传数据</span></span><br><span class="line"><span class="comment"> * 第一个参数为  url 请求的地址</span></span><br><span class="line"><span class="comment"> * 第二个参数为 data 请求的地址的参数（为空可省略）</span></span><br><span class="line"><span class="comment"> * 第三个参数为 回调函数  第二个参数为空的情况下，就是第二个参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postAjax</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xmlhttp;</span><br><span class="line">    <span class="keyword">var</span> arg = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="comment">//创建异步对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">        <span class="comment">// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">        xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">        xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//请求行</span></span><br><span class="line">    xmlhttp.open(<span class="string">"post"</span>,arg[<span class="number">0</span>],<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//请求头</span></span><br><span class="line">    <span class="comment">//有数据才要设置</span></span><br><span class="line">    <span class="keyword">if</span>(arg[<span class="number">1</span>])&#123;</span><br><span class="line">        xmlhttp.setRequestHeader(<span class="string">'Content-type'</span>,<span class="string">'application/www-x-form-urlencoded'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回调函数</span></span><br><span class="line">    xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)&#123;</span><br><span class="line">            arg.length == <span class="number">2</span> ? arg[<span class="number">1</span>](xmlhttp.responseText) : arg[<span class="number">2</span>](xmlhttp.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(data = arg.length == 2 ? "":arg[1]);</span></span><br><span class="line">    <span class="comment">//发送请求主体（必须转化为字符串）</span></span><br><span class="line">    xmlhttp.send(data = arg.length == <span class="number">2</span> ? <span class="string">""</span>:<span class="built_in">JSON</span>.stringify(arg[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Ajax请求</span></span><br><span class="line"><span class="comment"> * 参数是一个对象</span></span><br><span class="line"><span class="comment"> * 对象内有 请求方式，请求地址，请求携带的数据，回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Ajax</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xmlhttp;</span><br><span class="line">        <span class="comment">//创建异步对象</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">            <span class="comment">// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">            xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">            xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(options.type == <span class="string">'get'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span>(options.data)==<span class="string">'string'</span>)&#123;</span><br><span class="line">                options.url += <span class="string">"?"</span>;</span><br><span class="line">                options.url += options.data;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> str=<span class="string">""</span>;</span><br><span class="line">                <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> options.data)&#123;</span><br><span class="line">                   i++;</span><br><span class="line">                   str +=  i == <span class="number">1</span> ? <span class="string">"?"</span>+key+<span class="string">"="</span>+options.data[key] : <span class="string">"&amp;"</span>+key+<span class="string">"="</span>+options.data[key];</span><br><span class="line">                &#125;;</span><br><span class="line">                options.url += str;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(options.url)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建请求行</span></span><br><span class="line">        xmlhttp.open(options.type,options.url,<span class="literal">true</span>);</span><br><span class="line">         <span class="comment">//创建请求头</span></span><br><span class="line">        <span class="keyword">if</span>(options.type == <span class="string">'post'</span>&amp;&amp;options.data)&#123;</span><br><span class="line">            xmlhttp.setRequestHeader(<span class="string">'Content-type'</span>,<span class="string">'application/www-x-form-urlencoded'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//回调函数</span></span><br><span class="line">        xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)&#123;</span><br><span class="line">                options.success(xmlhttp.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//发送主体</span></span><br><span class="line">        xmlhttp.send(options.type == <span class="string">'get'</span>? <span class="string">''</span>: <span class="built_in">JSON</span>.stringify(options.data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  获取当前时间戳</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getTime</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> mydate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> year = mydate.getFullYear();</span><br><span class="line">        <span class="keyword">var</span> month = <span class="built_in">JSON</span>.stringify(mydate.getMonth() + <span class="number">1</span>).padStart(<span class="number">2</span>,<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">var</span> day =  <span class="built_in">JSON</span>.stringify(mydate.getDate()).padStart(<span class="number">2</span>,<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">var</span> hour =  <span class="built_in">JSON</span>.stringify(mydate.getHours()).padStart(<span class="number">2</span>,<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">var</span> min =  <span class="built_in">JSON</span>.stringify(mydate.getMinutes()).padStart(<span class="number">2</span>,<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">var</span> second = <span class="built_in">JSON</span>.stringify(mydate.getSeconds()).padStart(<span class="number">2</span>,<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">return</span> year+<span class="string">"-"</span>+month+<span class="string">"-"</span>+day+<span class="string">" "</span>+hour+<span class="string">":"</span>+min+<span class="string">":"</span>+second;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>router.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> router = express.Router()</span><br><span class="line"><span class="keyword">var</span> Mysql = <span class="built_in">require</span>(<span class="string">'./mysqlFun'</span>) </span><br><span class="line"></span><br><span class="line">router.all(<span class="string">'*'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res,next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Origin, X-Requested-With, Content-Type, Accept"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取轮播图</span></span><br><span class="line">router.get(<span class="string">"/api/getlunbo"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">	<span class="keyword">var</span> sql = <span class="string">'select * from banner'</span></span><br><span class="line">	<span class="comment">// Mysql.query(sql)</span></span><br><span class="line">	<span class="comment">// .then(function(options)&#123;</span></span><br><span class="line">	<span class="comment">// 	data.status = 0;</span></span><br><span class="line">	<span class="comment">// 	data.message = options.results;</span></span><br><span class="line">	<span class="comment">// 	console.log(options.fields);</span></span><br><span class="line">	<span class="comment">// 	res.send(data)</span></span><br><span class="line">	<span class="comment">// &#125;,function(err)&#123;</span></span><br><span class="line">	<span class="comment">// 	data.status = 1;</span></span><br><span class="line">	<span class="comment">// 	data.message = err;</span></span><br><span class="line">	<span class="comment">// 	res.send(data)</span></span><br><span class="line">	<span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">	Mysql.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err) &#123;</span><br><span class="line">			data.status = <span class="number">1</span>;</span><br><span class="line">			data.message = err;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			data.status = <span class="number">0</span>;</span><br><span class="line">			data.message = results;</span><br><span class="line">		&#125;</span><br><span class="line">		res.send(data)</span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取菜单列表</span></span><br><span class="line">router.get(<span class="string">"/api/getmenu"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line">		<span class="keyword">var</span> sql = <span class="string">"select * from menu"</span></span><br><span class="line">	Mysql.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err) &#123;</span><br><span class="line">			data.status = <span class="number">1</span>;</span><br><span class="line">			data.message = err;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			data.status = <span class="number">0</span>;</span><br><span class="line">			data.message = results;</span><br><span class="line">		&#125;</span><br><span class="line">		res.send(data)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取图片分类</span></span><br><span class="line">router.get(<span class="string">"/api/getimgcategory"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line">	<span class="keyword">var</span> sql = <span class="string">"select * from imgcategory"</span></span><br><span class="line">	Mysql.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err) &#123;</span><br><span class="line">			data.status = <span class="number">1</span>;</span><br><span class="line">			data.message = err;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			data.status = <span class="number">0</span>;</span><br><span class="line">			data.message = results;</span><br><span class="line">		&#125;</span><br><span class="line">		res.send(data)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取图片列表</span></span><br><span class="line">router.get(<span class="string">"/api/getimgList/:id"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line">	<span class="keyword">var</span> id = req.params.id</span><br><span class="line">	<span class="keyword">var</span> sql = id == <span class="number">0</span> ? <span class="string">"select * from img_list"</span>:<span class="string">`select * from img_list where category_id = <span class="subst">$&#123;id&#125;</span>`</span> </span><br><span class="line">	</span><br><span class="line">	Mysql.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err) &#123;</span><br><span class="line">			data.status = <span class="number">1</span>;</span><br><span class="line">			data.message = err;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			data.status = <span class="number">0</span>;</span><br><span class="line">			data.message = results;</span><br><span class="line">		&#125;</span><br><span class="line">		res.send(data)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取新闻列表</span></span><br><span class="line">router.get(<span class="string">"/api/getnewsList/:pageIndex"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line">	<span class="keyword">var</span> pagesize = <span class="number">10</span></span><br><span class="line">	<span class="keyword">var</span> startrow = (req.params.pageIndex - <span class="number">1</span>) * pagesize </span><br><span class="line">	<span class="keyword">var</span> sql = <span class="string">`select * from newslist limit <span class="subst">$&#123;startrow&#125;</span>,<span class="subst">$&#123;pagesize&#125;</span>`</span> </span><br><span class="line">	</span><br><span class="line">	Mysql.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err) &#123;</span><br><span class="line">			data.status = <span class="number">1</span>;</span><br><span class="line">			data.message = err;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			data.status = <span class="number">0</span>;</span><br><span class="line">			data.message = results;</span><br><span class="line">		&#125;</span><br><span class="line">		res.send(data)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取新闻列表</span></span><br><span class="line">router.get(<span class="string">"/api/getnewsList"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line">	<span class="keyword">var</span> pagesize = <span class="number">10</span></span><br><span class="line">	<span class="keyword">var</span> startrow = (req.query.pageIndex - <span class="number">1</span>) * pagesize </span><br><span class="line">	<span class="keyword">var</span> sql = <span class="string">`select * from newslist limit <span class="subst">$&#123;startrow&#125;</span>,<span class="subst">$&#123;pagesize&#125;</span>`</span> </span><br><span class="line">	</span><br><span class="line">	Mysql.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err) &#123;</span><br><span class="line">			data.status = <span class="number">1</span>;</span><br><span class="line">			data.message = err;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			data.status = <span class="number">0</span>;</span><br><span class="line">			data.message = results;</span><br><span class="line">		&#125;</span><br><span class="line">		res.send(data)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取新闻评论列表</span></span><br><span class="line">router.get(<span class="string">"/api/getnewscomments/:newsid/:pageIndex"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line">	<span class="keyword">var</span> pagesize = <span class="number">10</span></span><br><span class="line">	<span class="keyword">var</span> id = req.params.newsid</span><br><span class="line">	<span class="keyword">var</span> startrow = (req.params.pageIndex - <span class="number">1</span>) * pagesize </span><br><span class="line">	<span class="keyword">var</span> sql = <span class="string">`select * from newscomments where newsid = <span class="subst">$&#123;id&#125;</span> limit <span class="subst">$&#123;startrow&#125;</span>,<span class="subst">$&#123;pagesize&#125;</span>`</span> </span><br><span class="line">	</span><br><span class="line">	Mysql.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err) &#123;</span><br><span class="line">			data.status = <span class="number">1</span>;</span><br><span class="line">			data.message = err;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			data.status = <span class="number">0</span>;</span><br><span class="line">			data.message = results;</span><br><span class="line">		&#125;</span><br><span class="line">		res.send(data)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//评论新闻列表</span></span><br><span class="line">router.post(<span class="string">'/postnewscomments'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	req.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">		data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">		<span class="built_in">console</span>.log(data)</span><br><span class="line">		<span class="keyword">var</span> params = [data.username,data.add_time,data.content,data.newsid]</span><br><span class="line">		<span class="keyword">var</span> sql = <span class="string">"insert into newscomments (username,add_time,content,newsid) values(?,?,?,?)"</span></span><br><span class="line">		Mysql.query(sql,params,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> resData = &#123;&#125;</span><br><span class="line">			<span class="keyword">if</span>(err)&#123;</span><br><span class="line">				resData.status = <span class="number">1</span></span><br><span class="line">				resData.message = err</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				resData.status = <span class="number">0</span></span><br><span class="line">				resData.message = results</span><br><span class="line">			&#125;</span><br><span class="line">			res.send(resData)</span><br><span class="line">		&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<p>app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="comment">//parser application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"><span class="comment">//parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line">app.use(router)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server is running at 127.0.0.1:3000"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>mysql.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    host : <span class="string">'localhost'</span>,</span><br><span class="line">    port : <span class="number">3306</span>,<span class="comment">//端口号</span></span><br><span class="line">    database : <span class="string">'vueproject1'</span>,<span class="comment">//数据库名</span></span><br><span class="line">    user : <span class="string">'root'</span>,<span class="comment">//数据库用户名</span></span><br><span class="line">    password : <span class="string">'root'</span><span class="comment">//数据库密码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>mysqlFun.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mysqlConfig = <span class="built_in">require</span>(<span class="string">'./mysql.Config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	<span class="comment">// query: function(sql,params)&#123;</span></span><br><span class="line">	<span class="comment">// 	return new Promise(function(resolve , reject)&#123;</span></span><br><span class="line">	<span class="comment">// 		var connection = mysql.createConnection(mysqlConfig);</span></span><br><span class="line">	<span class="comment">// 		connection.connect(function(err)&#123;</span></span><br><span class="line">	<span class="comment">// 			if(err)&#123;</span></span><br><span class="line">	<span class="comment">// 				console.log(err)</span></span><br><span class="line">	<span class="comment">// 				return reject(err)</span></span><br><span class="line">	<span class="comment">// 			&#125;</span></span><br><span class="line">	<span class="comment">// 			connection.query(sql,params,function(err,results,fields)&#123;</span></span><br><span class="line">	<span class="comment">// 				if(err)&#123;</span></span><br><span class="line">	<span class="comment">// 					console.log(err)</span></span><br><span class="line">	<span class="comment">// 					return reject(err)</span></span><br><span class="line">	<span class="comment">// 				&#125;</span></span><br><span class="line">	<span class="comment">// 				var options = &#123;&#125;;</span></span><br><span class="line">	<span class="comment">// 				options.results = results;</span></span><br><span class="line">	<span class="comment">// 				options.fields = fields;</span></span><br><span class="line">	<span class="comment">// 				resolve(options)</span></span><br><span class="line">	<span class="comment">// 			&#125;)</span></span><br><span class="line">	<span class="comment">// 			connection.end(function(err)&#123;</span></span><br><span class="line">	<span class="comment">// 				if(err)&#123;</span></span><br><span class="line">	<span class="comment">// 					console.log(err)</span></span><br><span class="line">	<span class="comment">// 					return reject(err)</span></span><br><span class="line">	<span class="comment">// 				&#125;</span></span><br><span class="line">	<span class="comment">// 			&#125;)</span></span><br><span class="line">	<span class="comment">// 		&#125;)</span></span><br><span class="line">	<span class="comment">// 	&#125;)</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="comment">// query: function(sql,params,callback)&#123;</span></span><br><span class="line">	<span class="comment">// 	var connection = mysql.createConnection(mysqlConfig);</span></span><br><span class="line">	<span class="comment">// 	connection.connect(function(err)&#123;</span></span><br><span class="line">	<span class="comment">// 		if(err) return callback(err)</span></span><br><span class="line">	<span class="comment">// 		connection.query(sql,params,function(err,results,fields)&#123;</span></span><br><span class="line">	<span class="comment">// 			if(err) return callback(err)</span></span><br><span class="line">	<span class="comment">// 			callback(null,results,fields)</span></span><br><span class="line">	<span class="comment">// 		&#125;)</span></span><br><span class="line">	<span class="comment">// 		connection.end(function(err)&#123;</span></span><br><span class="line">	<span class="comment">// 			if(err) return callback(err)</span></span><br><span class="line">	<span class="comment">// 		&#125;)</span></span><br><span class="line">	<span class="comment">// 	&#125;)</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	query: <span class="function"><span class="keyword">function</span>(<span class="params">sql,params,callback</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> connection = mysql.createConnection(mysqlConfig);</span><br><span class="line">			connection.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(err)&#123;</span><br><span class="line">					callback &amp;&amp; callback(err)</span><br><span class="line">					reject(err)</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				connection.query(sql,params,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(err)&#123;</span><br><span class="line">						callback &amp;&amp; callback(err)</span><br><span class="line">						reject(err)</span><br><span class="line">						<span class="keyword">return</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">var</span> options = &#123;&#125;</span><br><span class="line">					options.results = results;</span><br><span class="line">					options.fields = fields;</span><br><span class="line">					resolve(options)</span><br><span class="line">					callback &amp;&amp; callback(<span class="literal">null</span>,results,fields)</span><br><span class="line">				&#125;)</span><br><span class="line">				connection.end(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(err)&#123;</span><br><span class="line">						callback &amp;&amp; callback(err)</span><br><span class="line">						reject(err)</span><br><span class="line">						<span class="keyword">return</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>node</tag>
        <tag>mysql</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript</title>
    <url>/2019/04/01/ECMAScript/</url>
    <content><![CDATA[<h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span>; <span class="comment">// 整数123</span></span><br><span class="line"><span class="number">0.456</span>; <span class="comment">// 浮点数0.456</span></span><br><span class="line"><span class="number">1.2345e3</span>; <span class="comment">// 科学计数法表示1.2345x1000，等同于1234.5</span></span><br><span class="line"><span class="number">-99</span>; <span class="comment">// 负数</span></span><br><span class="line"><span class="literal">NaN</span>; <span class="comment">// NaN表示Not a Number，当无法计算结果时用NaN表示</span></span><br><span class="line"><span class="literal">Infinity</span>; <span class="comment">// Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</span></span><br></pre></td></tr></table></figure>
<p>Number可以直接做四则运算，规则和数学一致：嗯哼</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span>; <span class="comment">// 3</span></span><br><span class="line">(<span class="number">1</span> + <span class="number">2</span>) * <span class="number">5</span> / <span class="number">2</span>; <span class="comment">// 7.5</span></span><br><span class="line"><span class="number">2</span> / <span class="number">0</span>; <span class="comment">// Infinity</span></span><br><span class="line"><span class="number">0</span> / <span class="number">0</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="number">10</span> % <span class="number">3</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="number">10.5</span> % <span class="number">3</span>; <span class="comment">// 1.5</span></span><br></pre></td></tr></table></figure>
<p>注意<code>%</code>是求余运算。</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串是以单引号’或双引号”括起来的任意文本，比如<code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code>等等。请注意，<code>&#39;&#39;</code>或<code>&quot;&quot;</code>本身只是一种表示方式，不是字符串的一部分，因此，字符串<code>&#39;abc&#39;</code>只有<code>a</code>，<code>b</code>，<code>c</code>这3个字符。</p>
<h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span>; <span class="comment">// 这是一个true值</span></span><br><span class="line"><span class="literal">false</span>; <span class="comment">// 这是一个false值</span></span><br><span class="line"><span class="number">2</span> &gt; <span class="number">1</span>; <span class="comment">// 这是一个true值</span></span><br><span class="line"><span class="number">2</span> &gt;= <span class="number">3</span>; <span class="comment">// 这是一个false值</span></span><br></pre></td></tr></table></figure>
<p><code>&amp;&amp;</code>运算是与运算，只有所有都为<code>true</code>，<code>&amp;&amp;</code>运算结果才是<code>true</code>：</p>
<p><code>!</code>运算是非运算，它是一个单目运算符，把<code>true</code>变成<code>false</code>，<code>false</code>变成<code>true</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">! <span class="literal">true</span>; <span class="comment">// 结果为false</span></span><br><span class="line">! <span class="literal">false</span>; <span class="comment">// 结果为true</span></span><br><span class="line">! (<span class="number">2</span> &gt; <span class="number">5</span>); <span class="comment">// 结果为true</span></span><br></pre></td></tr></table></figure>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>当我们对Number做比较时，可以通过比较运算符得到一个布尔值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> &gt; <span class="number">5</span>; <span class="comment">// false</span></span><br><span class="line"><span class="number">5</span> &gt;= <span class="number">2</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">7</span> == <span class="number">7</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>实际上，JavaScript允许对任意数据类型做比较：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span> == <span class="number">0</span>; <span class="comment">// true</span></span><br><span class="line"><span class="literal">false</span> === <span class="number">0</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>要特别注意相等运算符<code>==</code>。JavaScript在设计时，有两种比较运算符：</p>
<p>第一种是<code>==</code>比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</p>
<p>第二种是<code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回<code>false</code>，如果一致，再比较。</p>
<p>由于JavaScript这个设计缺陷，<em>不要</em>使用<code>==</code>比较，始终坚持使用<code>===</code>比较。</p>
<p>另一个例外是<code>NaN</code>这个特殊的Number与所有其他值都不相等，包括它自己：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>最后要注意浮点数的相等比较：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> / <span class="number">3</span> === (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span> / <span class="number">3</span> - (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>)) &lt; <span class="number">0.0000001</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h4 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h4><p><code>null</code>表示一个“空”的值，它和<code>0</code>以及空字符串<code>&#39;&#39;</code>不同，<code>0</code>是一个数值，<code>&#39;&#39;</code>表示长度为0的字符串，而<code>null</code>表示“空”。</p>
<p>在其他语言中，也有类似JavaScript的<code>null</code>的表示，例如Java也用<code>null</code>，Swift用<code>nil</code>，Python用<code>None</code>表示。但是，在JavaScript中，还有一个和<code>null</code>类似的<code>undefined</code>，它表示“未定义”。</p>
<p>JavaScript的设计者希望用<code>null</code>表示一个空的值，而<code>undefined</code>表示值未定义。事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用<code>null</code>。<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用。</p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 2, 3.14, &apos;Hello&apos;, null, true];</span><br></pre></td></tr></table></figure>
<p>上述数组包含6个元素。数组用<code>[]</code>表示，元素之间用<code>,</code>分隔。</p>
<p>另一种创建数组的方法是通过<code>Array()</code>函数实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Array(1, 2, 3); // 创建了数组[1, 2, 3]</span><br></pre></td></tr></table></figure>
<p>然而，出于代码的可读性考虑，强烈建议直接使用<code>[]</code>。</p>
<p>数组的元素可以通过索引来访问。请注意，索引的起始值为<code>0</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>, <span class="string">'Hello'</span>, <span class="literal">null</span>, <span class="literal">true</span>];</span><br><span class="line">arr[<span class="number">0</span>]; <span class="comment">// 返回索引为0的元素，即1</span></span><br><span class="line">arr[<span class="number">5</span>]; <span class="comment">// 返回索引为5的元素，即true</span></span><br><span class="line">arr[<span class="number">6</span>]; <span class="comment">// 索引超出了范围，返回undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组可以对其进行赋值</span></span><br><span class="line">arr[<span class="number">9</span>] = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">9</span>])    <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">8</span>])  <span class="comment">//返回undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">7</span>])  <span class="comment">//返回undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">6</span>])  <span class="comment">//返回undefined</span></span><br><span class="line"><span class="comment">//向一个数组添加元素，通常使用如下方法</span></span><br><span class="line">arr[arr.length] = 想要的值;</span><br></pre></td></tr></table></figure>
<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>JavaScript的对象是一组由键-值组成的无序集合，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'Bob'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    tags: [<span class="string">'js'</span>, <span class="string">'web'</span>, <span class="string">'mobile'</span>],</span><br><span class="line">    city: <span class="string">'Beijing'</span>,</span><br><span class="line">    hasCar: <span class="literal">true</span>,</span><br><span class="line">    zipcode: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>JavaScript对象的键都是字符串类型，值可以是任意数据类型。上述<code>person</code>对象一共定义了6个键值对，其中每个键又称为对象的属性，例如，<code>person</code>的<code>name</code>属性为<code>&#39;Bob&#39;</code>，<code>zipcode</code>属性为<code>null</code>。</p>
<p>要获取一个对象的属性，我们用<code>对象变量.属性名</code>的方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person.name; <span class="comment">// 'Bob'</span></span><br><span class="line">person.zipcode; <span class="comment">// null</span></span><br></pre></td></tr></table></figure>
<h4 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h4><hr>
<p>JavaScript的字符串就是用<code>&#39;&#39;</code>或<code>&quot;&quot;</code>括起来的字符表示。</p>
<p>如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，空格，<code>O</code>，<code>K</code>这6个字符。</p>
<p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？可以用转义字符<code>\</code>来标识，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'I\'m \"OK\"!'</span>;</span><br></pre></td></tr></table></figure>
<p>表示的字符串内容是：<code>I&#39;m &quot;OK&quot;!</code></p>
<p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code>。</p>
<p>ASCII字符可以以<code>\x##</code>形式的十六进制表示，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'\x41'</span>; <span class="comment">// 完全等同于 'A'</span></span><br></pre></td></tr></table></figure>
<p>还可以用<code>\u####</code>表示一个Unicode字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;\u4e2d\u6587&apos;; // 完全等同于 &apos;中文&apos;</span><br></pre></td></tr></table></figure>
<h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><p>由于多行字符串用<code>\n</code>写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 <em>`</em> … <em>`</em> 表示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`这是一个</span></span><br><span class="line"><span class="string">多行</span></span><br><span class="line"><span class="string">字符串`</span>;</span><br></pre></td></tr></table></figure>
<p><em>注意</em>：反引号在键盘的ESC下方，数字键1的左边</p>
<h4 id="字符串-2"><a href="#字符串-2" class="headerlink" title="字符串"></a>字符串</h4><p>阅读: 262705</p>
<hr>
<p>JavaScript的字符串就是用<code>&#39;&#39;</code>或<code>&quot;&quot;</code>括起来的字符表示。</p>
<p>如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，空格，<code>O</code>，<code>K</code>这6个字符。</p>
<p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？可以用转义字符<code>\</code>来标识，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;I\&apos;m \&quot;OK\&quot;!&apos;;</span><br></pre></td></tr></table></figure>
<p>表示的字符串内容是：<code>I&#39;m &quot;OK&quot;!</code></p>
<p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code>。</p>
<p>ASCII字符可以以<code>\x##</code>形式的十六进制表示，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;\x41&apos;; // 完全等同于 &apos;A&apos;</span><br></pre></td></tr></table></figure>
<p>还可以用<code>\u####</code>表示一个Unicode字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;\u4e2d\u6587&apos;; // 完全等同于 &apos;中文&apos;</span><br></pre></td></tr></table></figure>
<h3 id="多行字符串-1"><a href="#多行字符串-1" class="headerlink" title="多行字符串"></a>多行字符串</h3><p>由于多行字符串用<code>\n</code>写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 <em>`</em> … <em>`</em> 表示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`这是一个</span><br><span class="line">多行</span><br><span class="line">字符串`;</span><br></pre></td></tr></table></figure>
<p><em>注意</em>：反引号在键盘的ESC下方，数字键1的左边：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌─────┐ ┌─────┬─────┬─────┬─────┐</span><br><span class="line">│ ESC │ │ F1  │ F2  │ F3  │ F4  │</span><br><span class="line">│     │ │     │     │     │     │</span><br><span class="line">└─────┘ └─────┴─────┴─────┴─────┘</span><br><span class="line">┌─────┬─────┬─────┬─────┬─────┐</span><br><span class="line">│  ~  │  !  │  @  │  #  │  $  │</span><br><span class="line">│  `  │  1  │  2  │  3  │  4  │</span><br><span class="line">├─────┴──┬──┴──┬──┴──┬──┴──┬──┘</span><br><span class="line">│        │     │     │     │</span><br><span class="line">│  tab   │  Q  │  W  │  E  │</span><br><span class="line">├────────┴──┬──┴──┬──┴──┬──┘</span><br><span class="line">│           │     │     │</span><br><span class="line">│ caps lock │  A  │  S  │</span><br><span class="line">└───────────┴─────┴─────┘</span><br></pre></td></tr></table></figure>
<p>练习：测试你的浏览器是否支持ES6标准，如果不支持，请把多行字符串用<code>\n</code>重新表示出来：</p>
<p><code>// 如果浏览器不支持ES6，将报SyntaxError错误:</code> Run</p>
<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>要把多个字符串连接起来，可以用<code>+</code>号连接：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'小明'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">'你好, '</span> + name + <span class="string">', 你今年'</span> + age + <span class="string">'岁了!'</span>;</span><br><span class="line">alert(message);</span><br></pre></td></tr></table></figure>
<p>如果有很多变量需要连接，用<code>+</code>号就比较麻烦。ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'小明'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">`你好, <span class="subst">$&#123;name&#125;</span>, 你今年<span class="subst">$&#123;age&#125;</span>岁了!`</span>;</span><br><span class="line">alert(message);</span><br></pre></td></tr></table></figure>
<p>练习：测试你的浏览器是否支持ES6模板字符串，如果不支持，请把模板字符串改为<code>+</code>连接的普通字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;  <span class="comment">// 如果浏览器支持模板字符串，将会替换字符串内部的变量: var name = '小明'; var age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`你好, <span class="subst">$&#123;name&#125;</span>, 你今年<span class="subst">$&#123;age&#125;</span>岁了!`</span>);</span><br></pre></td></tr></table></figure>
<h4 id="字符串-3"><a href="#字符串-3" class="headerlink" title="字符串"></a>字符串</h4><p>阅读: 262705</p>
<hr>
<p>JavaScript的字符串就是用<code>&#39;&#39;</code>或<code>&quot;&quot;</code>括起来的字符表示。</p>
<p>如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，空格，<code>O</code>，<code>K</code>这6个字符。</p>
<p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？可以用转义字符<code>\</code>来标识，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;I\&apos;m \&quot;OK\&quot;!&apos;;</span><br></pre></td></tr></table></figure>
<p>表示的字符串内容是：<code>I&#39;m &quot;OK&quot;!</code></p>
<p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code>。</p>
<p>ASCII字符可以以<code>\x##</code>形式的十六进制表示，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;\x41&apos;; // 完全等同于 &apos;A&apos;</span><br></pre></td></tr></table></figure>
<p>还可以用<code>\u####</code>表示一个Unicode字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;\u4e2d\u6587&apos;; // 完全等同于 &apos;中文&apos;</span><br></pre></td></tr></table></figure>
<h3 id="多行字符串-2"><a href="#多行字符串-2" class="headerlink" title="多行字符串"></a>多行字符串</h3><p>由于多行字符串用<code>\n</code>写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 <em>`</em> … <em>`</em> 表示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`这是一个</span><br><span class="line">多行</span><br><span class="line">字符串`;</span><br></pre></td></tr></table></figure>
<p><em>注意</em>：反引号在键盘的ESC下方，数字键1的左边：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌─────┐ ┌─────┬─────┬─────┬─────┐</span><br><span class="line">│ ESC │ │ F1  │ F2  │ F3  │ F4  │</span><br><span class="line">│     │ │     │     │     │     │</span><br><span class="line">└─────┘ └─────┴─────┴─────┴─────┘</span><br><span class="line">┌─────┬─────┬─────┬─────┬─────┐</span><br><span class="line">│  ~  │  !  │  @  │  #  │  $  │</span><br><span class="line">│  `  │  1  │  2  │  3  │  4  │</span><br><span class="line">├─────┴──┬──┴──┬──┴──┬──┴──┬──┘</span><br><span class="line">│        │     │     │     │</span><br><span class="line">│  tab   │  Q  │  W  │  E  │</span><br><span class="line">├────────┴──┬──┴──┬──┴──┬──┘</span><br><span class="line">│           │     │     │</span><br><span class="line">│ caps lock │  A  │  S  │</span><br><span class="line">└───────────┴─────┴─────┘</span><br></pre></td></tr></table></figure>
<p>练习：测试你的浏览器是否支持ES6标准，如果不支持，请把多行字符串用<code>\n</code>重新表示出来：</p>
<p><code>// 如果浏览器不支持ES6，将报SyntaxError错误:</code> Run</p>
<h3 id="模板字符串-1"><a href="#模板字符串-1" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>要把多个字符串连接起来，可以用<code>+</code>号连接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var name = &apos;小明&apos;;</span><br><span class="line">var age = 20;</span><br><span class="line">var message = &apos;你好, &apos; + name + &apos;, 你今年&apos; + age + &apos;岁了!&apos;;</span><br><span class="line">alert(message);</span><br></pre></td></tr></table></figure>
<p>如果有很多变量需要连接，用<code>+</code>号就比较麻烦。ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var name = &apos;小明&apos;;</span><br><span class="line">var age = 20;</span><br><span class="line">var message = `你好, $&#123;name&#125;, 你今年$&#123;age&#125;岁了!`;</span><br><span class="line">alert(message);</span><br></pre></td></tr></table></figure>
<p>练习：测试你的浏览器是否支持ES6模板字符串，如果不支持，请把模板字符串改为<code>+</code>连接的普通字符串：</p>
<p><code>&#39;use strict&#39;;  // 如果浏览器支持模板字符串，将会替换字符串内部的变量: var name = &#39;小明&#39;; var age = 20;</code> Run</p>
<h3 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h3><p>字符串常见的操作如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello, world!'</span>;</span><br><span class="line">s.length; <span class="comment">// 13</span></span><br></pre></td></tr></table></figure>
<p>要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello, world!'</span>;</span><br><span class="line"></span><br><span class="line">s[<span class="number">0</span>]; <span class="comment">// 'H'</span></span><br><span class="line">s[<span class="number">6</span>]; <span class="comment">// ' '</span></span><br><span class="line">s[<span class="number">7</span>]; <span class="comment">// 'w'</span></span><br><span class="line">s[<span class="number">12</span>]; <span class="comment">// '!'</span></span><br><span class="line">s[<span class="number">13</span>]; <span class="comment">// undefined 超出范围的索引不会报错，但一律返回undefined</span></span><br></pre></td></tr></table></figure>
<p>#####需要特别注意的是*，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Test'</span>;</span><br><span class="line">s[<span class="number">0</span>] = <span class="string">'X'</span>;</span><br><span class="line">alert(s); <span class="comment">// s仍然为'Test'</span></span><br></pre></td></tr></table></figure>
<p>JavaScript为字符串提供了一些常用方法，注意，调用这些方法本身不会改变原有字符串的内容，而是返回一个新字符串：</p>
<h3 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase"></a>toUpperCase</h3><p><code>toUpperCase()</code>把一个字符串全部变为大写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello'</span>;</span><br><span class="line">s.toUpperCase(); <span class="comment">// 返回'HELLO'</span></span><br></pre></td></tr></table></figure>
<h3 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase"></a>toLowerCase</h3><p><code>toLowerCase()</code>把一个字符串全部变为小写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello'</span>;</span><br><span class="line"><span class="keyword">var</span> lower = s.toLowerCase(); <span class="comment">// 返回'hello'并赋值给变量lower</span></span><br><span class="line">lower; <span class="comment">// 'hello'</span></span><br></pre></td></tr></table></figure>
<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p><code>indexOf()</code>会搜索指定字符串出现的位置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'hello, world'</span>;</span><br><span class="line">s.indexOf(<span class="string">'world'</span>); <span class="comment">// 返回7</span></span><br><span class="line">s.indexOf(<span class="string">'World'</span>); <span class="comment">// 没有找到指定的子串，返回-1</span></span><br></pre></td></tr></table></figure>
<h3 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h3><p><code>substring()</code>返回指定索引区间的子串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'hello, world'</span></span><br><span class="line">s.substring(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// 从索引0开始到5（不包括5），返回'hello'</span></span><br><span class="line">s.substring(<span class="number">7</span>); <span class="comment">// 从索引7开始到结束，返回'world'</span></span><br></pre></td></tr></table></figure>
<h4 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h4><p>阅读: 281796</p>
<hr>
<p>JavaScript的<code>Array</code>可以包含任意数据类型，并通过索引来访问每个元素。</p>
<p>要取得<code>Array</code>的长度，直接访问<code>length</code>属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>, <span class="string">'Hello'</span>, <span class="literal">null</span>, <span class="literal">true</span>];</span><br><span class="line">arr.length; <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
<p><em>请注意</em>，直接给<code>Array</code>的<code>length</code>赋一个新的值会导致<code>Array</code>大小的变化：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.length; <span class="comment">// 3</span></span><br><span class="line">arr.length = <span class="number">6</span>;</span><br><span class="line">arr; <span class="comment">// arr变为[1, 2, 3, undefined, undefined, undefined]</span></span><br><span class="line">arr.length = <span class="number">2</span>;</span><br><span class="line">arr; <span class="comment">// arr变为[1, 2]</span></span><br></pre></td></tr></table></figure>
<p><code>Array</code>可以通过索引把对应的元素修改为新的值，因此，对<code>Array</code>的索引进行赋值会直接修改这个<code>Array</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">arr; <span class="comment">// arr现在变为['A', 99, 'C']</span></span><br></pre></td></tr></table></figure>
<p><em>请注意</em>，如果通过索引赋值时，索引超过了范围，同样会引起<code>Array</code>大小的变化：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">'x'</span>;</span><br><span class="line">arr; <span class="comment">// arr变为[1, 2, 3, undefined, undefined, 'x']</span></span><br></pre></td></tr></table></figure>
<p>大多数其他编程语言不允许直接改变数组的大小，越界访问索引会报错。然而，JavaScript的<code>Array</code>却不会有任何错误。在编写代码时，不建议直接修改<code>Array</code>的大小，访问索引时要确保索引不会越界。</p>
<h3 id="indexOf-1"><a href="#indexOf-1" class="headerlink" title="indexOf"></a>indexOf</h3><p>与String类似，<code>Array</code>也可以通过<code>indexOf()</code>来搜索一个指定的元素的位置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="string">'30'</span>, <span class="string">'xyz'</span>];</span><br><span class="line">arr.indexOf(<span class="number">10</span>); <span class="comment">// 元素10的索引为0</span></span><br><span class="line">arr.indexOf(<span class="number">20</span>); <span class="comment">// 元素20的索引为1</span></span><br><span class="line">arr.indexOf(<span class="number">30</span>); <span class="comment">// 元素30没有找到，返回-1</span></span><br><span class="line">arr.indexOf(<span class="string">'30'</span>); <span class="comment">// 元素'30'的索引为2</span></span><br></pre></td></tr></table></figure>
<p>注意了，数字<code>30</code>和字符串<code>&#39;30&#39;</code>是不同的元素。</p>
<h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p><code>slice()</code>就是对应String的<code>substring()</code>版本，它截取<code>Array</code>的部分元素，然后返回一个新的<code>Array</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>];</span><br><span class="line">arr.slice(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']</span></span><br><span class="line">arr.slice(<span class="number">3</span>); <span class="comment">// 从索引3开始到结束: ['D', 'E', 'F', 'G']</span></span><br></pre></td></tr></table></figure>
<p>注意到<code>slice()</code>的起止参数包括开始索引，不包括结束索引。</p>
<p>如果不给<code>slice()</code>传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个<code>Array</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>];</span><br><span class="line"><span class="keyword">var</span> aCopy = arr.slice();</span><br><span class="line">aCopy; <span class="comment">// ['A', 'B', 'C', 'D', 'E', 'F', 'G']</span></span><br><span class="line">aCopy === arr; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h3 id="push和pop"><a href="#push和pop" class="headerlink" title="push和pop"></a>push和pop</h3><p><code>push()</code>向<code>Array</code>的末尾添加若干元素，<code>pop()</code>则把<code>Array</code>的最后一个元素删除掉：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.push(<span class="string">'A'</span>, <span class="string">'B'</span>); <span class="comment">// 返回Array新的长度: 4</span></span><br><span class="line">arr; <span class="comment">// [1, 2, 'A', 'B']</span></span><br><span class="line">arr.pop(); <span class="comment">// pop()返回'B'</span></span><br><span class="line">arr; <span class="comment">// [1, 2, 'A']</span></span><br><span class="line">arr.pop(); arr.pop(); arr.pop(); <span class="comment">// 连续pop 3次</span></span><br><span class="line">arr; <span class="comment">// []</span></span><br><span class="line">arr.pop(); <span class="comment">// 空数组继续pop不会报错，而是返回undefined</span></span><br><span class="line">arr; <span class="comment">// []</span></span><br></pre></td></tr></table></figure>
<h3 id="unshift和shift"><a href="#unshift和shift" class="headerlink" title="unshift和shift"></a>unshift和shift</h3><p>如果要往<code>Array</code>的头部添加若干元素，使用<code>unshift()</code>方法，<code>shift()</code>方法则把<code>Array</code>的第一个元素删掉：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.unshift(<span class="string">'A'</span>, <span class="string">'B'</span>); <span class="comment">// 返回Array新的长度: 4</span></span><br><span class="line">arr; <span class="comment">// ['A', 'B', 1, 2]</span></span><br><span class="line">arr.shift(); <span class="comment">// 'A'</span></span><br><span class="line">arr; <span class="comment">// ['B', 1, 2]</span></span><br><span class="line">arr.shift(); arr.shift(); arr.shift(); <span class="comment">// 连续shift 3次</span></span><br><span class="line">arr; <span class="comment">// []</span></span><br><span class="line">arr.shift(); <span class="comment">// 空数组继续shift不会报错，而是返回undefined</span></span><br><span class="line">arr; <span class="comment">// []</span></span><br></pre></td></tr></table></figure>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p><code>sort()</code>可以对当前<code>Array</code>进行排序，它会直接修改当前<code>Array</code>的元素位置，直接调用时，按照默认顺序排序：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>];</span><br><span class="line">arr.sort();</span><br><span class="line">arr; <span class="comment">// ['A', 'B', 'C']</span></span><br></pre></td></tr></table></figure>
<p>能否按照我们自己指定的顺序排序呢？完全可以，我们将在后面的函数中讲到。</p>
<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p><code>reverse()</code>把整个<code>Array</code>的元素给掉个个，也就是反转：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>];</span><br><span class="line">arr.reverse(); </span><br><span class="line">arr; <span class="comment">// ['three', 'two', 'one']</span></span><br></pre></td></tr></table></figure>
<h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p><code>splice()</code>方法是修改<code>Array</code>的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'Microsoft'</span>, <span class="string">'Apple'</span>, <span class="string">'Yahoo'</span>, <span class="string">'AOL'</span>, <span class="string">'Excite'</span>, <span class="string">'Oracle'</span>];</span><br><span class="line"><span class="comment">// 从索引2开始删除3个元素,然后再添加两个元素:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="comment">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span></span><br><span class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></span><br><span class="line"><span class="comment">// 只删除,不添加:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// ['Google', 'Facebook']</span></span><br><span class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Oracle']</span></span><br><span class="line"><span class="comment">// 只添加,不删除:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="comment">// 返回[],因为没有删除任何元素</span></span><br><span class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></span><br></pre></td></tr></table></figure>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p><code>concat()</code>方法把当前的<code>Array</code>和另一个<code>Array</code>连接起来，并返回一个新的<code>Array</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line"><span class="keyword">var</span> added = arr.concat([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">added; <span class="comment">// ['A', 'B', 'C', 1, 2, 3]</span></span><br><span class="line">arr; <span class="comment">// ['A', 'B', 'C']</span></span><br></pre></td></tr></table></figure>
<p><em>请注意</em>，<code>concat()</code>方法并没有修改当前<code>Array</code>，而是返回了一个新的<code>Array</code>。</p>
<p>实际上，<code>concat()</code>方法可以接收任意个元素和<code>Array</code>，并且自动把<code>Array</code>拆开，然后全部添加到新的<code>Array</code>里：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line">arr.concat(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// ['A', 'B', 'C', 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p><code>join()</code>方法是一个非常实用的方法，它把当前<code>Array</code>的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.join(<span class="string">'-'</span>); <span class="comment">// 'A-B-C-1-2-3'</span></span><br></pre></td></tr></table></figure>
<p>如果<code>Array</code>的元素不是字符串，将自动转换为字符串后再连接。</p>
<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>如果数组的某个元素又是一个<code>Array</code>，则可以形成多维数组，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>], <span class="string">'-'</span>];</span><br></pre></td></tr></table></figure>
<p>上述<code>Array</code>包含3个元素，其中头两个元素本身也是<code>Array</code>。</p>
<h4 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h4><hr>
<p>JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。</p>
<p>JavaScript的对象用于描述现实世界中的某个对象。例如，为了描述“小明”这个淘气的小朋友，我们可以用若干键值对来描述他：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    birth: <span class="number">1990</span>,</span><br><span class="line">    school: <span class="string">'No.1 Middle School'</span>,</span><br><span class="line">    height: <span class="number">1.70</span>,</span><br><span class="line">    weight: <span class="number">65</span>,</span><br><span class="line">    score: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>JavaScript用一个<code>{...}</code>表示一个对象，键值对以<code>xxx: xxx</code>形式申明，用<code>,</code>隔开。注意，最后一个键值对不需要在末尾加<code>,</code>，如果加了，有的浏览器（如低版本的IE）将报错。</p>
<p>上述对象申明了一个<code>name</code>属性，值是<code>&#39;小明&#39;</code>，<code>birth</code>属性，值是<code>1990</code>，以及其他一些属性。最后，把这个对象赋值给变量<code>xiaoming</code>后，就可以通过变量<code>xiaoming</code>来获取小明的属性了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xiaoming.name; <span class="comment">// '小明'</span></span><br><span class="line">xiaoming.birth; <span class="comment">// 1990</span></span><br></pre></td></tr></table></figure>
<p>访问属性是通过<code>.</code>操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用<code>&#39;&#39;</code>括起来：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaohong = &#123;</span><br><span class="line">    name: <span class="string">'小红'</span>,</span><br><span class="line">    <span class="string">'middle-school'</span>: <span class="string">'No.1 Middle School'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>xiaohong</code>的属性名<code>middle-school</code>不是一个有效的变量，就需要用<code>&#39;&#39;</code>括起来。访问这个属性也无法使用<code>.</code>操作符，必须用<code>[&#39;xxx&#39;]</code>来访问：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xiaohong[<span class="string">'middle-school'</span>]; <span class="comment">// 'No.1 Middle School'</span></span><br><span class="line">xiaohong[<span class="string">'name'</span>]; <span class="comment">// '小红'</span></span><br><span class="line">xiaohong.name; <span class="comment">// '小红'</span></span><br></pre></td></tr></table></figure>
<p>也可以用<code>xiaohong[&#39;name&#39;]</code>来访问<code>xiaohong</code>的<code>name</code>属性，不过<code>xiaohong.name</code>的写法更简洁。我们在编写JavaScript代码的时候，属性名尽量使用标准的变量名，这样就可以直接通过<code>object.prop</code>的形式访问一个属性了。</p>
<p>实际上JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。</p>
<p>如果访问一个不存在的属性会返回什么呢？JavaScript规定，访问不存在的属性不报错，而是返回<code>undefined</code>：</p>
<p><code>&#39;use strict&#39;;  var xiaoming = {     name: &#39;小明&#39; };</code> Run</p>
<p>由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span></span><br><span class="line">&#125;;</span><br><span class="line">xiaoming.age; <span class="comment">// undefined</span></span><br><span class="line">xiaoming.age = <span class="number">18</span>; <span class="comment">// 新增一个age属性</span></span><br><span class="line">xiaoming.age; <span class="comment">// 18</span></span><br><span class="line"><span class="keyword">delete</span> xiaoming.age; <span class="comment">// 删除age属性</span></span><br><span class="line">xiaoming.age; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">delete</span> xiaoming[<span class="string">'name'</span>]; <span class="comment">// 删除name属性</span></span><br><span class="line">xiaoming.name; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">delete</span> xiaoming.school; <span class="comment">// 删除一个不存在的school属性也不会报错</span></span><br></pre></td></tr></table></figure>
<p>如果我们要检测<code>xiaoming</code>是否拥有某一属性，可以用<code>in</code>操作符：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    birth: <span class="number">1990</span>,</span><br><span class="line">    school: <span class="string">'No.1 Middle School'</span>,</span><br><span class="line">    height: <span class="number">1.70</span>,</span><br><span class="line">    weight: <span class="number">65</span>,</span><br><span class="line">    score: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="string">'name'</span> <span class="keyword">in</span> xiaoming; <span class="comment">// true</span></span><br><span class="line"><span class="string">'grade'</span> <span class="keyword">in</span> xiaoming; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>不过要小心，如果<code>in</code>判断一个属性存在，这个属性不一定是<code>xiaoming</code>的，它可能是<code>xiaoming</code>继承得到的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'toString'</span> <span class="keyword">in</span> xiaoming; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>因为<code>toString</code>定义在<code>object</code>对象中，而所有对象最终都会在原型链上指向<code>object</code>，所以<code>xiaoming</code>也拥有<code>toString</code>属性。</p>
<p>要判断一个属性是否是<code>xiaoming</code>自身拥有的，而不是继承得到的，可以用<code>hasOwnProperty()</code>方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span></span><br><span class="line">&#125;;</span><br><span class="line">xiaoming.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></span><br><span class="line">xiaoming.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>flex详解</title>
    <url>/2019/04/01/flex%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="Flex-布局语法教程"><a href="#Flex-布局语法教程" class="headerlink" title="Flex 布局语法教程"></a>Flex 布局语法教程</h2><h3 id="分类-编程技术"><a href="#分类-编程技术" class="headerlink" title="分类 编程技术"></a><em>分类</em> <a href="http://www.runoob.com/w3cnote_genre/code" target="_blank" rel="noopener">编程技术</a></h3><p>网页布局（layout）是CSS的一个重点应用。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/7bf8bed24a17fbebd3e171f9630dbccb.gif" alt="img"></p>
<p>布局的传统解决方案，基于<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box_model" target="_blank" rel="noopener">盒状模型</a>，依赖 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display" target="_blank" rel="noopener">display</a>属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position" target="_blank" rel="noopener">position</a>属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float" target="_blank" rel="noopener">float</a>属性。它对于那些特殊布局非常不方便，比如，<a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="noopener">垂直居中</a>就不容易实现。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/5a7d00514af1e464221c677c15e8e990.png" alt="img"></p>
<p>2009年，W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/8712d713c7d0b884a5cb9770efc422b4.jpg" alt="img"></p>
<p>Flex布局将成为未来布局的首选方案。本文介绍Flex布局的语法。</p>
<p>以下内容主要参考了下面两篇文章：<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">A Complete Guide to Flexbox</a> 和 <a href="https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties" target="_blank" rel="noopener">A Visual Guide to CSS3 Flexbox Properties</a>。</p>
<h2 id="一、Flex布局是什么？"><a href="#一、Flex布局是什么？" class="headerlink" title="一、Flex布局是什么？"></a>一、Flex布局是什么？</h2><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>
<p>任何一个容器都可以指定为Flex布局。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>行内元素也可以使用Flex布局。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  display: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Webkit内核的浏览器，必须加上-webkit前缀。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  display: -webkit-flex; /* Safari */</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</p>
<h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/3791e575c48b3698be6a94ae1dbff79d.png" alt="img"></p>
<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</p>
<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p>
<h2 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h2><p>以下6个属性设置在容器上。</p>
<blockquote>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ul>
</blockquote>
<h3 id="3-1-flex-direction属性"><a href="#3-1-flex-direction属性" class="headerlink" title="3.1 flex-direction属性"></a>3.1 flex-direction属性</h3><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  flex-direction: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/0cbe5f8268121114e87d0546e53cda6e.png" alt="img"></p>
<p>它可能有4个值。</p>
<blockquote>
<ul>
<li>row（默认值）：主轴为水平方向，起点在左端。</li>
<li>row-reverse：主轴为水平方向，起点在右端。</li>
<li>column：主轴为垂直方向，起点在上沿。</li>
<li>column-reverse：主轴为垂直方向，起点在下沿。</li>
</ul>
</blockquote>
<h3 id="3-2-flex-wrap属性"><a href="#3-2-flex-wrap属性" class="headerlink" title="3.2 flex-wrap属性"></a>3.2 flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/903d5b7df55779c03f2687a7d4d6bcea.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它可能取三个值。</p>
<p>（1）nowrap（默认）：不换行。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/9da1f23965756568b4c6ea7124db7b9a.png" alt="img"></p>
<p>（2）wrap：换行，第一行在上方。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/3c6b3c8b8fe5e26bca6fb57538cf72d9.jpg" alt="img"></p>
<p>（3）wrap-reverse：换行，第一行在下方。</p>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/fb4cf2bab8b6b744b64f6d7a99cd577c.jpg" alt="img"></p>
<h3 id="3-3-flex-flow"><a href="#3-3-flex-flow" class="headerlink" title="3.3 flex-flow"></a>3.3 flex-flow</h3><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  flex-flow: &lt;flex-direction&gt; &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-justify-content属性"><a href="#3-4-justify-content属性" class="headerlink" title="3.4 justify-content属性"></a>3.4 justify-content属性</h3><p>justify-content属性定义了项目在主轴上的对齐方式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  justify-content: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/c55dfe8e3422458b50e985552ef13ba5.png" alt="img"></p>
<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>
<blockquote>
<ul>
<li>flex-start（默认值）：左对齐</li>
<li>flex-end：右对齐</li>
<li>center： 居中</li>
<li>space-between：两端对齐，项目之间的间隔都相等。</li>
<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
</blockquote>
<h3 id="3-5-align-items属性"><a href="#3-5-align-items属性" class="headerlink" title="3.5 align-items属性"></a>3.5 align-items属性</h3><p>align-items属性定义项目在交叉轴上如何对齐。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  align-items: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/2b0c39c7e7a80d5a784c8c2ca63cde17.png" alt="img"></p>
<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<blockquote>
<ul>
<li>flex-start：交叉轴的起点对齐。</li>
<li>flex-end：交叉轴的终点对齐。</li>
<li>center：交叉轴的中点对齐。</li>
<li>baseline: 项目的第一行文字的基线对齐。</li>
<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
</blockquote>
<h3 id="3-6-align-content属性"><a href="#3-6-align-content属性" class="headerlink" title="3.6 align-content属性"></a>3.6 align-content属性</h3><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  align-content: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/f10918ccb8a13247c9d47715a2bd2c33.png" alt="img"></p>
<p>该属性可能取6个值。</p>
<blockquote>
<ul>
<li>flex-start：与交叉轴的起点对齐。</li>
<li>flex-end：与交叉轴的终点对齐。</li>
<li>center：与交叉轴的中点对齐。</li>
<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li>stretch（默认值）：轴线占满整个交叉轴。</li>
</ul>
</blockquote>
<h3 id="四、项目的属性"><a href="#四、项目的属性" class="headerlink" title="四、项目的属性"></a>四、项目的属性</h3><p>以下6个属性设置在项目上。</p>
<blockquote>
<ul>
<li>order</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
<li>flex</li>
<li>align-self</li>
</ul>
</blockquote>
<h3 id="4-1-order属性"><a href="#4-1-order属性" class="headerlink" title="4.1 order属性"></a>4.1 order属性</h3><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  order: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/59e399c72daafcfcc20ede36bf32f266.png" alt="img"></p>
<h3 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h3><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-grow: &lt;number&gt;; /* default 0 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/f41c08bb35962ed79e7686f735d6cd78.png" alt="img"></p>
<p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<h3 id="4-3-flex-shrink属性"><a href="#4-3-flex-shrink属性" class="headerlink" title="4.3 flex-shrink属性"></a>4.3 flex-shrink属性</h3><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-shrink: &lt;number&gt;; /* default 1 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/240d3e960043a729bb3ff5e34987904f.jpg" alt="img"></p>
<p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<p>负值对该属性无效。</p>
<h3 id="4-4-flex-basis属性"><a href="#4-4-flex-basis属性" class="headerlink" title="4.4 flex-basis属性"></a>4.4 flex-basis属性</h3><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-basis: &lt;length&gt; | auto; /* default auto */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p>
<h3 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性"></a>4.5 flex属性</h3><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h3 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h3><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://www.runoob.com/wp-content/uploads/2015/07/55b19171b8b6b9487d717bf2ecbba6de.png" alt="img"></p>
<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
]]></content>
      <tags>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>使用promise封装mysql实现第一个接口设计</title>
    <url>/2019/03/29/%E4%BD%BF%E7%94%A8promise%E5%B0%81%E8%A3%85mysql%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h3 id="使用express操作数据库，实现第一个接口"><a href="#使用express操作数据库，实现第一个接口" class="headerlink" title="使用express操作数据库，实现第一个接口"></a>使用express操作数据库，实现第一个接口</h3><ol>
<li>打开<code>Navicat Premium</code> 创建一个数据库</li>
<li>设计一个banner表，包含id，img，url，并插入数据</li>
<li>创建一个目录作为项目根目录</li>
<li>在根目录下 执行命令 <code>npm init -y</code> </li>
<li>创建一个文件 app.js 作为项目入口文件</li>
<li>下载 express，mysql，执行命令 <code>npm i express mysql</code></li>
</ol>
<p>项目目录结构如下</p>
<blockquote>
<p>/node_modules</p>
<p>app.js    //入口文件</p>
<p>router.js    //路由文件</p>
<p>mysql.config.js    //mysql配置文件</p>
<p>mysqlFun.js    //封装mysql方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"></span><br><span class="line">app.use(router)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server is running at 127.0.0.1:3000"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mysql.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    host : <span class="string">'localhost'</span>,</span><br><span class="line">    port : <span class="number">3306</span>,<span class="comment">//端口号</span></span><br><span class="line">    database : <span class="string">'vueproject1'</span>,<span class="comment">//数据库名</span></span><br><span class="line">    user : <span class="string">'root'</span>,<span class="comment">//数据库用户名</span></span><br><span class="line">    password : <span class="string">'root'</span><span class="comment">//数据库密码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="注意：promise的resolve和reject只能接受一个参数"><a href="#注意：promise的resolve和reject只能接受一个参数" class="headerlink" title="注意：promise的resolve和reject只能接受一个参数"></a>注意：promise的resolve和reject只能接受一个参数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mysqlFun.js</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"><span class="keyword">var</span> mysqlConfig = <span class="built_in">require</span>(<span class="string">'./mysql.Config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	query: <span class="function"><span class="keyword">function</span>(<span class="params">sql,params</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve , reject</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> connection = mysql.createConnection(mysqlConfig);</span><br><span class="line">			connection.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(err)&#123;</span><br><span class="line">					<span class="built_in">console</span>.log(err)</span><br><span class="line">					<span class="keyword">return</span> reject(err)</span><br><span class="line">				&#125;</span><br><span class="line">				connection.query(sql,params,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(err)&#123;</span><br><span class="line">						<span class="built_in">console</span>.log(err)</span><br><span class="line">						<span class="keyword">return</span> reject(err)</span><br><span class="line">					&#125;</span><br><span class="line">         <span class="comment">//注意：promise的resolve和reject只能接受一个参数</span></span><br><span class="line">					<span class="keyword">var</span> options = &#123;&#125;;</span><br><span class="line">					options.results = results;</span><br><span class="line">					options.fields = fields;</span><br><span class="line">					resolve(options)</span><br><span class="line">				&#125;)</span><br><span class="line">				connection.end(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(err)&#123;</span><br><span class="line">						<span class="built_in">console</span>.log(err)</span><br><span class="line">						<span class="keyword">return</span> reject(err)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> router = express.Router()</span><br><span class="line"><span class="keyword">var</span> Mysql = <span class="built_in">require</span>(<span class="string">'./mysqlFun'</span>) </span><br><span class="line"></span><br><span class="line">router.get(<span class="string">"/api/getlunbo"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">	<span class="keyword">var</span> sql = <span class="string">'select * from banner'</span></span><br><span class="line">	Mysql.query(sql)</span><br><span class="line">	.then(<span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">		data.status = <span class="number">0</span>;</span><br><span class="line">		data.message = options.results;</span><br><span class="line">		<span class="built_in">console</span>.log(options.fields);</span><br><span class="line">		res.send(data)</span><br><span class="line">	&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">		data.status = <span class="number">1</span>;</span><br><span class="line">		data.message = err;</span><br><span class="line">		res.send(data)</span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<p>执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>显示如下</p>
<p><img src="/2019/03/29/使用promise封装mysql实现第一个接口设计/1553873628324.png" alt="1553873628324"></p>
<h5 id="使用回调函数封装mysql方法"><a href="#使用回调函数封装mysql方法" class="headerlink" title="使用回调函数封装mysql方法"></a>使用回调函数封装mysql方法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mysqlFun.js</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mysqlConfig = <span class="built_in">require</span>(<span class="string">'./mysql.Config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	query: <span class="function"><span class="keyword">function</span>(<span class="params">sql,params,callback</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> connection = mysql.createConnection(mysqlConfig);</span><br><span class="line">		connection.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(err) <span class="keyword">return</span> callback(err)</span><br><span class="line">			connection.query(sql,params,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(err) <span class="keyword">return</span> callback(err)</span><br><span class="line">				<span class="comment">//callback(results,fields)</span></span><br><span class="line">                <span class="comment">//加个null好理解些，没有null时测试也成功</span></span><br><span class="line">                callback(<span class="literal">null</span>,results,fields) </span><br><span class="line">			&#125;)</span><br><span class="line">			connection.end(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(err) <span class="keyword">return</span> callback(err)</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> router = express.Router()</span><br><span class="line"><span class="keyword">var</span> Mysql = <span class="built_in">require</span>(<span class="string">'./mysqlFun'</span>) </span><br><span class="line"></span><br><span class="line">router.get(<span class="string">"/api/getlunbo"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">	<span class="keyword">var</span> sql = <span class="string">'select * from banner'</span></span><br><span class="line">	Mysql.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err) &#123;</span><br><span class="line">			data.status = <span class="number">1</span>;</span><br><span class="line">			data.message = err;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			data.status = <span class="number">0</span>;</span><br><span class="line">			data.message = results;</span><br><span class="line">		&#125;</span><br><span class="line">		res.send(data)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<h4 id="封装一个即能使用回调函数，也能使用promise的mysql操作方法"><a href="#封装一个即能使用回调函数，也能使用promise的mysql操作方法" class="headerlink" title="封装一个即能使用回调函数，也能使用promise的mysql操作方法"></a>封装一个即能使用回调函数，也能使用promise的mysql操作方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mysqlFun.js</span></span><br><span class="line"><span class="comment">//这里的callback &amp;&amp; callback(data);相当于 if callback &#123;callback()&#125;;</span></span><br><span class="line"><span class="comment">//目的是万一使用的是promise的形式就没有传递回调函数导致出错</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mysqlConfig = <span class="built_in">require</span>(<span class="string">'./mysql.Config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    	query: <span class="function"><span class="keyword">function</span>(<span class="params">sql,params,callback</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> connection = mysql.createConnection(mysqlConfig);</span><br><span class="line">			connection.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(err)&#123;</span><br><span class="line">					callback &amp;&amp; callback(err)</span><br><span class="line">					reject(err)</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				connection.query(sql,params,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(err)&#123;</span><br><span class="line">						callback &amp;&amp; callback(err)</span><br><span class="line">						reject(err)</span><br><span class="line">						<span class="keyword">return</span>;</span><br><span class="line">					&#125;</span><br><span class="line">              <span class="comment">//注意：reject 和 resolve 只能带一个参数</span></span><br><span class="line">					<span class="keyword">var</span> options = &#123;&#125;</span><br><span class="line">					options.results = results;</span><br><span class="line">					options.fields = fields;</span><br><span class="line">					resolve(options)</span><br><span class="line">					callback &amp;&amp; callback(<span class="literal">null</span>,results,fields)</span><br><span class="line">				&#125;)</span><br><span class="line">				connection.end(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(err)&#123;</span><br><span class="line">						callback &amp;&amp; callback(err)</span><br><span class="line">						reject(err)</span><br><span class="line">						<span class="keyword">return</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> router = express.Router()</span><br><span class="line"><span class="keyword">var</span> Mysql = <span class="built_in">require</span>(<span class="string">'./mysqlFun'</span>) </span><br><span class="line"></span><br><span class="line">router.get(<span class="string">"/api/getlunbo"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">	<span class="keyword">var</span> sql = <span class="string">'select * from banner'</span></span><br><span class="line">	<span class="comment">// Mysql.query(sql)</span></span><br><span class="line">	<span class="comment">// .then(function(options)&#123;</span></span><br><span class="line">	<span class="comment">// 	data.status = 0;</span></span><br><span class="line">	<span class="comment">// 	data.message = options.results;</span></span><br><span class="line">	<span class="comment">// 	console.log(options.fields);</span></span><br><span class="line">	<span class="comment">// 	res.send(data)</span></span><br><span class="line">	<span class="comment">// &#125;,function(err)&#123;</span></span><br><span class="line">	<span class="comment">// 	data.status = 1;</span></span><br><span class="line">	<span class="comment">// 	data.message = err;</span></span><br><span class="line">	<span class="comment">// 	res.send(data)</span></span><br><span class="line">	<span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">	Mysql.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err) &#123;</span><br><span class="line">			data.status = <span class="number">1</span>;</span><br><span class="line">			data.message = err;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			data.status = <span class="number">0</span>;</span><br><span class="line">			data.message = results;</span><br><span class="line">		&#125;</span><br><span class="line">		res.send(data)</span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>mysql</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>node操作mysql</title>
    <url>/2019/03/29/node%E6%93%8D%E4%BD%9Cmysql/</url>
    <content><![CDATA[<h2 id="Node连接Mysql"><a href="#Node连接Mysql" class="headerlink" title="Node连接Mysql"></a>Node连接Mysql</h2><p>说到node，可能大家会想到MOngoDB作为数据库，这里将会介绍node与mysql的连接，并分享了封装好的实例代码，在项目开发中可直接使用。下一篇博客将会讲node连接MongoDB。</p>
<h2 id="安装Mysql模块"><a href="#安装Mysql模块" class="headerlink" title="安装Mysql模块"></a>安装Mysql模块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure>
<h2 id="连接Mysql"><a href="#连接Mysql" class="headerlink" title="连接Mysql"></a>连接Mysql</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * students.js</span></span><br><span class="line"><span class="comment"> * 操作mysql数据库</span></span><br><span class="line"><span class="comment"> * 职责：操作文件中的数据，只处理数据，不关心业务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : <span class="string">'localhost'</span>,</span><br><span class="line">  user     : <span class="string">'root'</span>,</span><br><span class="line">  password : <span class="string">'root'</span>,</span><br><span class="line">  database : <span class="string">'xiaobu'</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">connection.connect();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//查询语句</span></span><br><span class="line"><span class="comment">// connection.query('SELECT * from student', function (error, results, fields) &#123;</span></span><br><span class="line"><span class="comment">//   if (error) throw error;</span></span><br><span class="line"><span class="comment">//   console.log(results);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入方式 1</span></span><br><span class="line"><span class="comment">// var  addSql = 'INSERT INTO student (name,age,hobbies) VALUES(?,?,?)';</span></span><br><span class="line"><span class="comment">// var  addSqlParams = ['祥', 8 ,'踢球'];</span></span><br><span class="line"><span class="comment">// //增</span></span><br><span class="line"><span class="comment">// connection.query(addSql,addSqlParams,function (err, result) &#123;</span></span><br><span class="line"><span class="comment">//     if (err) throw err;</span></span><br><span class="line"><span class="comment">//     console.log(result);</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line">    <span class="comment">//插入方式2</span></span><br><span class="line">    <span class="comment">// connection.query('INSERT INTO student VALUES(null,"布鲁克斯", 18 ,"唱歌")',function (err, result) &#123;</span></span><br><span class="line">    <span class="comment">//     if (err) throw err;</span></span><br><span class="line">    <span class="comment">//     console.log(result);</span></span><br><span class="line">    <span class="comment">//   &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新</span></span><br><span class="line">    <span class="comment">// connection.query("UPDATE student SET name = ? WHERE id = ?", ['xiaobu',4],function (err, result) &#123;</span></span><br><span class="line">    <span class="comment">//     if (err) throw err;</span></span><br><span class="line">    <span class="comment">//     console.log(result);</span></span><br><span class="line">    <span class="comment">//   &#125;);</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//删除数据</span></span><br><span class="line">    <span class="comment">// connection.query('DELETE FROM student where id=2',function (err, result) &#123;</span></span><br><span class="line">    <span class="comment">//     if (err) throw err;</span></span><br><span class="line">    <span class="comment">//     console.log(result.affectedRows);</span></span><br><span class="line">    <span class="comment">//   &#125;);</span></span><br><span class="line"> </span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure>
<p>host：连接的服务器<br>user：数据库用户名<br>password：设置的MySQL密码<br>database： 要连接的数据库名</p>
<h2 id="常用的SQL语句"><a href="#常用的SQL语句" class="headerlink" title="常用的SQL语句"></a>常用的SQL语句</h2><p>具体的使用这里不做详细说明，包括select、insert、update、delete等语句。</p>
<h1 id="Node操作Mysql"><a href="#Node操作Mysql" class="headerlink" title="Node操作Mysql"></a>Node操作Mysql</h1><p><strong>查询</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//查询语句</span></span><br><span class="line"><span class="comment">// connection.query('SELECT * from student', function (error, results, fields) &#123;</span></span><br><span class="line"><span class="comment">//   if (error) throw error;</span></span><br><span class="line"><span class="comment">//   console.log(results);  //results是执行的结果，fields是字段</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br></pre></td></tr></table></figure>
<p><strong>添加</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//插入方式 1</span></span><br><span class="line"><span class="keyword">var</span>  addSql = <span class="string">'INSERT INTO student (name,age,hobbies) VALUES(?,?,?)'</span>;</span><br><span class="line"><span class="keyword">var</span>  addSqlParams = [<span class="string">'祥'</span>, <span class="number">8</span> ,<span class="string">'踢球'</span>];</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">connection.query(addSql,addSqlParams,<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;);</span><br><span class="line">    <span class="comment">//插入方式2</span></span><br><span class="line">    connection.query(<span class="string">'INSERT INTO student VALUES(null,"布鲁克斯", 18 ,"唱歌")'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>删除</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除数据</span></span><br><span class="line">  connection.query(<span class="string">'DELETE FROM student where id=2'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">      <span class="built_in">console</span>.log(result.affectedRows);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>更新</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新</span></span><br><span class="line">   connection.query(<span class="string">"UPDATE student SET name = ? WHERE id = ?"</span>, [<span class="string">'xiaobu'</span>,<span class="number">4</span>],<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">       <span class="built_in">console</span>.log(result);</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>结束连接</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">connection.end(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line">connection.destroy();</span><br></pre></td></tr></table></figure>
<p>这两种都行，第二种是强制结束。</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>说了这么多，感觉操作起来还是挺简单的。在实际开发中，我们想要操作起来更方便，那就让我们自己封装一下来使用。直接上代码：</p>
<p>封装好的代码</p>
<p>1.数据库配置文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    host : <span class="string">'localhost'</span>,</span><br><span class="line">    port : <span class="number">3306</span>,<span class="comment">//端口号</span></span><br><span class="line">    database : <span class="string">'xiaobu'</span>,<span class="comment">//数据库名</span></span><br><span class="line">    user : <span class="string">'root'</span>,<span class="comment">//数据库用户名</span></span><br><span class="line">    password : <span class="string">'root'</span><span class="comment">//数据库密码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>2.封装、暴露方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);<span class="comment">//引入mysql模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> databaseConfig = <span class="built_in">require</span>(<span class="string">'./mysql.config'</span>);  <span class="comment">//引入数据库配置模块中的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//向外暴露方法</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    query: <span class="function"><span class="keyword">function</span>(<span class="params">sql,params,callback</span>)</span>&#123;</span><br><span class="line">         <span class="comment">//每次使用的时候需要创建链接，数据操作完成之后要关闭连接</span></span><br><span class="line">        <span class="keyword">var</span> connection = mysql.createConnection(databaseConfig);</span><br><span class="line">        connection.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"数据库连接失败"</span>)</span><br><span class="line">                <span class="keyword">return</span> callback(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//开始数据操作</span></span><br><span class="line">            <span class="comment">//传入三个参数，第一个参数sql语句，第二个参数sql语句中需要的数据，第三个参数回调函数</span></span><br><span class="line">            connection.query( sql, params, <span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields </span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'数据操作失败'</span>);</span><br><span class="line">                       <span class="keyword">return</span> callback(err)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//将查询出来的数据返回给回调函数</span></span><br><span class="line">                    callback(<span class="literal">null</span>,results, fields);</span><br><span class="line">                    <span class="comment">//results作为数据操作后的结果，fields作为数据库连接的一些字段</span></span><br><span class="line">                    <span class="comment">//停止链接数据库，必须再查询语句后，要不然一调用这个方法，就直接停止链接，数据操作就会失败</span></span><br><span class="line">                    connection.end(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'关闭数据库连接失败！'</span>);</span><br><span class="line">                        <span class="keyword">return</span> callback(err)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.演示实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> Student = <span class="built_in">require</span>(<span class="string">'./mysql'</span>)</span><br><span class="line"><span class="keyword">var</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.redirect(<span class="string">'/students'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取数据列表，显示数据</span></span><br><span class="line">router.get(<span class="string">'/students'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sql = <span class="string">'select * from student'</span></span><br><span class="line">    Student.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,results, fields</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) res.send(err)</span><br><span class="line">        res.render(<span class="string">"index.html"</span>,&#123;</span><br><span class="line">            students: results</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//点击添加学生，跳转到添加学生界面</span></span><br><span class="line">router.get(<span class="string">'/students/new'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">"new.html"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//点击提交，添加学生数据</span></span><br><span class="line">router.post(<span class="string">'/students/new'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = req.body;</span><br><span class="line">    <span class="keyword">var</span> params = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> data)&#123;</span><br><span class="line">        params.push(data[key])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(params);</span><br><span class="line">    <span class="keyword">var</span> sql = <span class="string">'insert into student (name,gender,age,hobbies) values(?,?,?,?)'</span>;</span><br><span class="line">    Student.query(sql,params,<span class="function"><span class="keyword">function</span>(<span class="params">err,result,fields</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) res.send(err)</span><br><span class="line">        res.redirect(<span class="string">"/students"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//点击编辑，跳转到编辑页面</span></span><br><span class="line">router.get(<span class="string">'/students/edit'</span>,(req,res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> id = req.query.id;</span><br><span class="line">    <span class="keyword">var</span> sql = <span class="string">`select * from student where id = <span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line">    Student.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) res.send(err)</span><br><span class="line">        res.render(<span class="string">'edit.html'</span>,&#123;</span><br><span class="line">            data: results[<span class="number">0</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交编辑,更新数据</span></span><br><span class="line">router.post(<span class="string">"/students/edit"</span>,(req,res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> data = req.body;</span><br><span class="line">    <span class="keyword">var</span> sql = <span class="string">'update student set name = ?,gender = ?,age = ?, hobbies = ? where id = ?'</span>;</span><br><span class="line">    <span class="keyword">var</span> params = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> data)&#123;</span><br><span class="line">        params.push(data[key])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> id = params.shift();</span><br><span class="line">    params.push(id);</span><br><span class="line">    Student.query(sql,params,<span class="function"><span class="keyword">function</span>(<span class="params">err,result,fields</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) res.send(err)</span><br><span class="line">        res.redirect(<span class="string">"/students"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//点击删除，删除数据</span></span><br><span class="line">router.get(<span class="string">"/students/delete"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = req.query.id;</span><br><span class="line">    <span class="keyword">var</span> sql = <span class="string">'delete from student where id = ?'</span></span><br><span class="line">    Student.query(sql,id,<span class="function"><span class="keyword">function</span>(<span class="params">err,result,fields</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) res.send(err)</span><br><span class="line">        res.redirect(<span class="string">"/students"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<p>app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="comment">//配置art-template模板引擎</span></span><br><span class="line">app.engine(<span class="string">'.html'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//parser application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"><span class="comment">//parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">"/node_modules/"</span>,express.static(<span class="string">'./node_modules/'</span>))</span><br><span class="line">app.use(<span class="string">"/public/"</span>,express.static(<span class="string">'./public/'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// router(app)</span></span><br><span class="line">app.use(router)    <span class="comment">//将路由挂载到app</span></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server is running at 127.0.0.1:3000"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>主要目录如下</p>
<blockquote>
<p>/node_modules</p>
<p>/public</p>
<p>/views</p>
<blockquote>
<p>index.hrml    首页</p>
<p>edit.html    更新学生信息界面</p>
<p>new.html    添加学生界面</p>
</blockquote>
<p>app.js        //项目启动文件</p>
<p>mysql.config.js    //数据库配置</p>
<p>mysql.js           //封装的数据库方法</p>
<p>router.js    //执行操作</p>
<p>package.json</p>
<p>package-lock.json</p>
</blockquote>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>node</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mongoose</title>
    <url>/2019/03/27/mongoose/</url>
    <content><![CDATA[<h4 id="mongoose"><a href="#mongoose" class="headerlink" title="mongoose"></a>mongoose</h4><p><em>首先要确保安装了MongoDB和Node.js.</em></p>
<p>接下来使用<code>npm</code>以下命令从命令行安装Mongoose ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install mongoose</span><br></pre></td></tr></table></figure>
<p>现在说我们喜欢模糊的小猫，想要记录我们在MongoDB中见过的每只小猫。我们需要做的第一件事是在项目中包含mongoose，并<code>test</code>在我们本地运行的MongoDB实例上打开与数据库的连接。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getting-started.js</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/test'</span>, &#123;<span class="attr">useNewUrlParser</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>我们与在localhost上运行的测试数据库有挂起的连接。如果我们成功连接或发生连接错误，我们现在需要收到通知：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> db = mongoose.connection;</span><br><span class="line">db.on(<span class="string">'error'</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>, <span class="string">'connection error:'</span>));</span><br><span class="line">db.once(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// we're connected!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>一旦我们的连接打开，我们的回调就会被调用。为简洁起见，我们假设所有后续代码都在此回调中。</p>
<p>使用Mongoose，一切都来自<a href="https://mongoosejs.com/docs/guide.html" target="_blank" rel="noopener">Schema</a>。让我们来参考它并定义我们的小猫。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kittySchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  name: <span class="built_in">String</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>到现在为止还挺好。我们有一个带有一个属性的模式<code>name</code>，它将是一个 <code>String</code>。下一步是将模式编译为<a href="https://mongoosejs.com/docs/models.html" target="_blank" rel="noopener">模型</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Kitten = mongoose.model(<span class="string">'Kitten'</span>, kittySchema);</span><br></pre></td></tr></table></figure>
<p>模型是用于构造文档的类。在这种情况下，每个文档都将是一个小猫，其属性和行为在我们的模式中声明。让我们创建一个小猫文件，代表我们刚刚在人行道上遇到的小家伙：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> silence = <span class="keyword">new</span> Kitten(&#123; <span class="attr">name</span>: <span class="string">'Silence'</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(silence.name); <span class="comment">// 'Silence'</span></span><br></pre></td></tr></table></figure>
<p>小猫可以喵喵叫，让我们来看看如何在我们的文档中添加“说话”功能：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> methods must be added to the schema before compiling it with mongoose.model()</span></span><br><span class="line">kittySchema.methods.speak = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="keyword">this</span>.name</span><br><span class="line">    ? <span class="string">"Meow name is "</span> + <span class="keyword">this</span>.name</span><br><span class="line">    : <span class="string">"I don't have a name"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(greeting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Kitten = mongoose.model(<span class="string">'Kitten'</span>, kittySchema);</span><br></pre></td></tr></table></figure>
<p>添加到<code>methods</code>模式属性的函数将编译到<code>Model</code>原型中并在每个文档实例上公开：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fluffy = <span class="keyword">new</span> Kitten(&#123; <span class="attr">name</span>: <span class="string">'fluffy'</span> &#125;);</span><br><span class="line">fluffy.speak(); <span class="comment">// "Meow name is fluffy"</span></span><br></pre></td></tr></table></figure>
<p>我们有说话的小猫！但是我们还没有向MongoDB保存任何内容。可以通过调用其<a href="https://mongoosejs.com/docs/api.html#model_Model-save" target="_blank" rel="noopener">save</a>方法将每个文档保存到数据库中。如果发生任何回调，则回调的第一个参数将是错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fluffy.save(<span class="function"><span class="keyword">function</span> (<span class="params">err, fluffy</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">  fluffy.speak();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>说时间流逝，我们想要显示我们见过的所有小猫。我们可以通过我们的Kitten <a href="https://mongoosejs.com/docs/models.html" target="_blank" rel="noopener">模型</a>访问所有小猫文档。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Kitten.find(<span class="function"><span class="keyword">function</span> (<span class="params">err, kittens</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">  <span class="built_in">console</span>.log(kittens);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>我们只是将数据库中的所有小猫记录到控制台。如果我们想按名称过滤我们的小猫，Mongoose支持MongoDB丰富的<a href="https://mongoosejs.com/docs/queries.html" target="_blank" rel="noopener">查询</a>语法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Kitten.find(&#123; <span class="attr">name</span>: <span class="regexp">/^fluff/</span> &#125;, callback);</span><br></pre></td></tr></table></figure>
<p>这将搜索具有以“Fluff”开头的name属性的所有文档，并将结果作为一组kittens返回给回调。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mongoose_demo1.js</span></span><br><span class="line"><span class="comment">//引入mongoose</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接mongodb中的test数据库</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/test'</span>, &#123;<span class="attr">useNewUrlParser</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设计集合结构（表结构）</span></span><br><span class="line"><span class="keyword">var</span> kittySchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  name: <span class="built_in">String</span></span><br><span class="line">	&#125;);</span><br><span class="line"><span class="comment">//给集合添加一个speak的方法</span></span><br><span class="line">kittySchema.methods.speak = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="keyword">this</span>.name</span><br><span class="line">    ? <span class="string">"Meow name is "</span> + <span class="keyword">this</span>.name</span><br><span class="line">    : <span class="string">"I don't have a name"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(greeting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看连接状态</span></span><br><span class="line"><span class="keyword">var</span> db = mongoose.connection;</span><br><span class="line">db.on(<span class="string">'error'</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>, <span class="string">'connection error:'</span>));</span><br><span class="line">db.once(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// we're connected!</span></span><br><span class="line">  <span class="comment">//定义一个 kitten 采用 kittySchema 集合结构</span></span><br><span class="line">  <span class="keyword">var</span> Kitten = mongoose.model(<span class="string">'Kitten'</span>, kittySchema);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义一只 silence 猫</span></span><br><span class="line">  <span class="keyword">var</span> silence = <span class="keyword">new</span> Kitten(&#123; <span class="attr">name</span>: <span class="string">'Silence'</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//保存到数据库（异步的）</span></span><br><span class="line">  silence.save(<span class="function"><span class="keyword">function</span>(<span class="params">err,a</span>)</span>&#123;</span><br><span class="line">  	<span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">  		a.speak()  <span class="comment">//保存完说出猫的名字</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义一值fluffy 猫</span></span><br><span class="line">  <span class="keyword">var</span> fluffy = <span class="keyword">new</span> Kitten(&#123; <span class="attr">name</span>: <span class="string">'fluffy'</span> &#125;);</span><br><span class="line">	fluffy.speak();   <span class="comment">//说出自己的名字</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//将fluffy 的猫数据保存到数据库（异步）</span></span><br><span class="line">fluffy.save(<span class="function"><span class="keyword">function</span> (<span class="params">err, fluffy</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    fluffy.speak(); <span class="comment">//保存完说出猫的名字</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找kitten集合中的所有数据，下面的kittens，只是个形参，可以是任意合理的值</span></span><br><span class="line">Kitten.find(<span class="function"><span class="keyword">function</span> (<span class="params">err, kittens</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">  <span class="built_in">console</span>.log(kittens);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在命令窗口上运行这个文件 <code>node mongoose_demo1.js</code></p>
<p>第一次运行结果如下</p>
<p><img src="/2019/03/27/mongoose/1553660436316.png" alt="1553660436316"></p>
<p><img src="/2019/03/27/mongoose/1553660662122.png" alt="1553660662122"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询名字以 S 开头的纪录</span></span><br><span class="line">Kitten.find(&#123;<span class="attr">name</span>: <span class="regexp">/^S/</span> &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err, kittens</span>) </span>&#123;</span><br><span class="line">  		<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">  			<span class="built_in">console</span>.log(kittens);</span><br><span class="line">		&#125;)</span><br></pre></td></tr></table></figure>
<p>起步：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mongoose_demo2.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mongoose_demo2.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入mongoose</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="comment">//指定连接的数据库不存在时，会自动创建出来</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/xiaobu'</span>,&#123;<span class="attr">useNewUrlParser</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设计集合结构（表结构）</span></span><br><span class="line"><span class="comment">//字段名称就是表结构中的属性名称</span></span><br><span class="line"><span class="comment">//约束的目的是为了保证数据的完整性，不要脏数据</span></span><br><span class="line"><span class="comment">// var blogSchema = new Schema(&#123;</span></span><br><span class="line"><span class="comment">// 	title: String,</span></span><br><span class="line"><span class="comment">// 	author: String,</span></span><br><span class="line"><span class="comment">// 	body: String,</span></span><br><span class="line"><span class="comment">// 	comments:[&#123;body:String,date: Date&#125;],</span></span><br><span class="line"><span class="comment">// 	date: &#123;type: Date,default: Date.now&#125;,</span></span><br><span class="line"><span class="comment">// 	hidden: Boolean,</span></span><br><span class="line"><span class="comment">// 	meta:&#123;</span></span><br><span class="line"><span class="comment">// 		votes: Number,</span></span><br><span class="line"><span class="comment">// 		favs: Number</span></span><br><span class="line"><span class="comment">// 	&#125;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="keyword">var</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">	username:&#123;</span><br><span class="line">		type: <span class="built_in">String</span>,</span><br><span class="line">		required: <span class="literal">true</span> <span class="comment">//必须有</span></span><br><span class="line">	&#125;,</span><br><span class="line">	password:&#123;</span><br><span class="line">		type: <span class="built_in">String</span>,</span><br><span class="line">		required: <span class="literal">true</span></span><br><span class="line">	&#125;,</span><br><span class="line">	email:&#123;</span><br><span class="line">		type:<span class="built_in">String</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查看连接状态</span></span><br><span class="line"><span class="keyword">var</span> db = mongoose.connection;</span><br><span class="line">db.on(<span class="string">'error'</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>, <span class="string">'connection error:'</span>));</span><br><span class="line">db.once(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将文档结构 发布为模型</span></span><br><span class="line"><span class="comment">// mongoose.model 方法就是用来将一个架构发布为 model</span></span><br><span class="line"><span class="comment">// 第一个参数： 传入一个大写名词单数字符串用来表示你的数据库名称</span></span><br><span class="line"><span class="comment">//				mongoose会自动将大写名词的字符串生成 小写复数的集合名称</span></span><br><span class="line"><span class="comment">//				例如这里的User 最终会变成 users 集合名称</span></span><br><span class="line"><span class="comment">//第二个参数： 架构Schema</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 返回值 ： 模型架构函数</span></span><br><span class="line">	<span class="keyword">var</span> User = mongoose.model(<span class="string">'User'</span>,userSchema)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//当我们有了模型构造函数之后，就可以使用这个构造函数对User 中的数据为所欲为了</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">	<span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;   <span class="comment">//user名字随便取，合理就行</span></span><br><span class="line">		username: <span class="string">'admin'</span>,</span><br><span class="line">		password: <span class="string">'123456'</span>,</span><br><span class="line">		email: <span class="string">'110@123.com'</span></span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//插入数据</span></span><br><span class="line">	user.save(<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;   <span class="comment">//user是前面定义的</span></span><br><span class="line">		<span class="keyword">if</span>(err)&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"保存失败"</span>)</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"保存成功"</span>)</span><br><span class="line">			<span class="built_in">console</span>.log(ret)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询数据</span></span><br><span class="line">	<span class="comment">//查询多条记录</span></span><br><span class="line">	User.find(<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;    <span class="comment">//User，是前面定义模型架构函数的User</span></span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">        <span class="built_in">console</span>.log(ret)   <span class="comment">//查询到的结果 ret</span></span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//查询有条件的多条记录</span></span><br><span class="line">	User.find(&#123;<span class="attr">username</span>:<span class="regexp">/^x/</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">        <span class="built_in">console</span>.log(ret)  <span class="comment">//没有数据则 是一个空数组 []</span></span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//查询一条记录</span></span><br><span class="line">	User.findOne(<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line">     	<span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">        <span class="built_in">console</span>.log(ret)  <span class="comment">//没有数据则返回一个  null</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//查询有条件的一条记录</span></span><br><span class="line">	User.findOne(&#123;<span class="attr">username</span>:<span class="regexp">/^x/</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line">     	<span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">        <span class="built_in">console</span>.log(ret)  <span class="comment">//没有数据则返回一个  null</span></span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除数据</span></span><br><span class="line">		User.remove(&#123;</span><br><span class="line">			username: <span class="string">'yanxiang'</span></span><br><span class="line">		&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(err)&#123;</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"删除失败"</span>)</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"删除成功"</span>)</span><br><span class="line">				<span class="built_in">console</span>.log(ret)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/27/mongoose/1553671381405.png" alt="1553671381405"></p>
<h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新数据</span></span><br><span class="line">	<span class="comment">// User.findByIdAndUpdate('id值',&#123;要修改的属性:修改后的值&#125;,function(err,ret)&#123;...&#125;)</span></span><br><span class="line">	</span><br><span class="line">	User.findByIdAndUpdate(<span class="string">"5c9b21f043a6320d1ce7de95"</span>,&#123;</span><br><span class="line">		username: <span class="string">'shenxiaobu'</span></span><br><span class="line">	&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err) &#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"更新失败"</span>)</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"更新成功"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/27/mongoose/1553671521267.png" alt="1553671521267"></p>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>node</tag>
        <tag>mongoose</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>es6</title>
    <url>/2019/03/26/es6/</url>
    <content><![CDATA[<h4 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h4><p>数组find方法原理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//因为find已经是系统方法，所以使用myFind代替</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user=[</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'张三'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'李四'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'王五'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'陈六'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"><span class="built_in">Array</span>.prototype.myFind = <span class="function"><span class="keyword">function</span>(<span class="params">conditionFunc</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="keyword">this</span>.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(conditionFunc(<span class="keyword">this</span>[i],i))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = user.myFind(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index)  <span class="comment">//李四的下标，相当于上面的i</span></span><br><span class="line">    <span class="keyword">return</span> item.name === <span class="string">"李四"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(a)   <span class="comment">//object</span></span><br></pre></td></tr></table></figure>
<p>数组findIndex方法原理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//因为find已经是系统方法，所以使用myFindIndex代替</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user=[</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'张三'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'李四'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'王五'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'陈六'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"><span class="built_in">Array</span>.prototype.myFindIndex = <span class="function"><span class="keyword">function</span>(<span class="params">conditionFunc</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="keyword">this</span>.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(conditionFunc(<span class="keyword">this</span>[i],i))&#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = user.myFindIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index)  <span class="comment">//李四的下标，相当于上面的i</span></span><br><span class="line">    <span class="keyword">return</span> item.name === <span class="string">"李四"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(a)   <span class="comment">//1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>express</title>
    <url>/2019/03/25/express/</url>
    <content><![CDATA[<h3 id="express"><a href="#express" class="headerlink" title="express"></a>express</h3><h5 id="创建第一个最简单的express服务"><a href="#创建第一个最简单的express服务" class="headerlink" title="创建第一个最简单的express服务"></a>创建第一个最简单的express服务</h5><ol>
<li><p>新建一个目录 express_study，在这个目录下执行命令<code>npm init --yes</code></p>
</li>
<li><p>安装express <code>npm install express --save</code></p>
</li>
<li><p>新建一个app.js文件，编辑内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">//创建app</span></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">"hello express!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"app 127.0.0.1:3000 is running ..."</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在执行命令 <code>node app.js</code>，然后在浏览器输入地址，成功显示 hello express！</p>
</li>
<li><p>ctrl+c退出服务</p>
</li>
</ol>
<h5 id="修改代码自动重启服务器nodemon工具"><a href="#修改代码自动重启服务器nodemon工具" class="headerlink" title="修改代码自动重启服务器nodemon工具"></a>修改代码自动重启服务器nodemon工具</h5><ol>
<li><p>下载nodemon，<code>npm install nodemon --global</code></p>
</li>
<li><p>使用nodemon 执行文件，<code>nodemon app.js</code>  然后就可以实现更改内容不用重启</p>
<p>服务器了</p>
</li>
</ol>
<p><img src="/2019/03/25/express/1553505409046.png" alt="1553505409046"></p>
<ol start="3">
<li>点击保存（ctrl + s），服务器自动重启</li>
</ol>
<h5 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h5><p>在app.js里面加入一行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当以 /public/ 开头的时候，去 ./public/目录中找对应的资源</span></span><br><span class="line">app.use(<span class="string">"/public/"</span>,express.static(<span class="string">"./public/"</span>))</span><br></pre></td></tr></table></figure>
<p>就可以在浏览器输入地址查看到相应的静态资源</p>
<p><img src="/2019/03/25/express/1553506461447.png" alt="1553506461447"></p>
<p>如果把代码改为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当以 / 开头的时候，去 ./public/目录中找对应的资源</span></span><br><span class="line">app.use(express.static(<span class="string">"./public/"</span>))</span><br></pre></td></tr></table></figure>
<p>此时访问index.html 页面只需要 输入 127.0.0.1:3000/index.html</p>
<p><img src="/2019/03/25/express/1553506727171.png" alt="1553506727171"></p>
<p><img src="/2019/03/25/express/1553506958425.png" alt="1553506958425"></p>
<h5 id="express获取post数据"><a href="#express获取post数据" class="headerlink" title="express获取post数据"></a>express获取post数据</h5><p>在express中内置获取表单post请求的API，需要我们使用一个第三方包body-parser</p>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save body-parser</span><br></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引包</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="comment">//parser application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"><span class="comment">//parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure>
<p><a href="https://www.npmjs.com/package/body-parser" target="_blank" rel="noopener">文档</a></p>
<h5 id="express-使用-art-template"><a href="#express-使用-art-template" class="headerlink" title="express 使用 art-template"></a>express 使用 art-template</h5><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install art-template --save</span><br><span class="line">npm install express-art-template --save</span><br></pre></td></tr></table></figure>
<p>配置：</p>
<p><img src="/2019/03/25/express/1553509168911.png" alt="1553509168911"></p>
<p><img src="/2019/03/25/express/1553512774946.png" alt="1553512774946"></p>
<p>为了使app.js的代码更整洁，把路由部分的代码分离出去</p>
<p>新建一个 router.js的文件，在里面写内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>)</span>&#123;</span><br><span class="line">    app.use(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">        res.send(<span class="string">"hello router"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>则在app.js中需要引入router.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"> 	app.use(<span class="string">'/node_modules/'</span>,express.static(<span class="string">'./node_modules/'</span>))</span><br><span class="line">	app.use(<span class="string">'/public/'</span>,express.static(<span class="string">'./public/'</span>))</span><br><span class="line">	router(app)    <span class="comment">//引入路由</span></span><br><span class="line">	app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server is running at 127.0.0.1:3000"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这样就可以把路由部分写在router.js了，但是这样的路由书写方式还不是我们想要的</p>
<p>express给我们带来了另一种书写方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> router = express.Router()</span><br><span class="line">	router.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">        res.send(<span class="string">"hello express-router"</span>)</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<p>app.js 则采用另一种方式引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line">	app.use(<span class="string">'/node_modules/'</span>,express.static(<span class="string">'./node_modules/'</span>))</span><br><span class="line">	app.use(<span class="string">'/public/'</span>,express.static(<span class="string">'./public/'</span>))</span><br><span class="line">	app.use(router)       <span class="comment">//把路由容器挂载到app中</span></span><br><span class="line">	app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"server is running in 127.0.0.1:3000"</span>)</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>
<p>使用模块化设计，由于router.js上也会有很多方法，所以另外新建一个专门用来操作</p>
<p>数据的文件，新建一个 student.js的文件，用来数据操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * students.js</span></span><br><span class="line"><span class="comment"> * 数据操作文件模块</span></span><br><span class="line"><span class="comment"> * 职责：操作文件中的数据，只处理数据，不关心业务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> dbPath = <span class="string">'./db.json'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有学生列表</span></span><br><span class="line"><span class="comment"> * return []</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    exports.find = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        fs.readFile(dbPath,<span class="string">'utf-8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="keyword">return</span> callback(err)</span><br><span class="line">            &#125;</span><br><span class="line">            callback(<span class="literal">null</span>,<span class="built_in">JSON</span>.parse(data).students)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 添加保存学生</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    exports.save = <span class="function"><span class="keyword">function</span>(<span class="params">student,callback</span>)</span>&#123;</span><br><span class="line">        fs.readFile(dbPath,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="keyword">return</span> callback(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> db = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">            student.id = <span class="built_in">parseInt</span>(db.students.length&gt;=<span class="number">1</span>?db.students[db.students.length<span class="number">-1</span>].id:<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">            db.students.push(student)</span><br><span class="line">            <span class="keyword">var</span> fileData = <span class="built_in">JSON</span>.stringify(db)</span><br><span class="line">            fs.writeFile(dbPath,fileData,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                    callback(err)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    callback(<span class="literal">null</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳转编辑页</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    exports.goEdit = <span class="function"><span class="keyword">function</span>(<span class="params">id,callback</span>)</span>&#123;</span><br><span class="line">        fs.readFile(dbPath,<span class="string">'utf-8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="keyword">return</span> callback(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> db = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">            <span class="keyword">var</span> stu = db.students.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> item.id == id</span><br><span class="line">            &#125;)</span><br><span class="line">            callback(<span class="literal">null</span>,stu)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新学生</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    exports.updateById = <span class="function"><span class="keyword">function</span>(<span class="params">student,callback</span>)</span>&#123;</span><br><span class="line">        fs.readFile(dbPath,<span class="string">'utf-8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="keyword">return</span> callback(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> db = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">            <span class="keyword">var</span> stu = db.students.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> item.id == student.id  <span class="comment">//不要使用全等</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> student)&#123;</span><br><span class="line">                stu[key] = student[key]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> fileData = <span class="built_in">JSON</span>.stringify(db)</span><br><span class="line">            fs.writeFile(dbPath,fileData,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                    callback(err)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    callback(<span class="literal">null</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除学生</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">    exports.delete = <span class="function"><span class="keyword">function</span>(<span class="params">id,callback</span>)</span>&#123;</span><br><span class="line">        fs.readFile(dbPath,<span class="string">'utf-8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="keyword">return</span> callback(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> db = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">            <span class="keyword">var</span> deleteId = db.students.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> item.id == id</span><br><span class="line">            &#125;)</span><br><span class="line">            db.students.splice(deleteId,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            fs.writeFile(dbPath,<span class="built_in">JSON</span>.stringify(db),<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                    <span class="keyword">return</span> callback(err)</span><br><span class="line">                &#125;</span><br><span class="line">                callback(<span class="literal">null</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在router.js上引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> Student = <span class="built_in">require</span>(<span class="string">'./students'</span>)</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> router = express.Router()</span><br><span class="line">router.get(<span class="string">'/students'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">     Student.find(<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'server error'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.render(<span class="string">'index.html'</span>,&#123;</span><br><span class="line">            title: <span class="string">'hello world'</span>,</span><br><span class="line">            students: data     <span class="comment">//data就是获取到的学生表</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/students/new'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  res.render(<span class="string">"new.html"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.post(<span class="string">'/students/new'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(req.body)</span></span><br><span class="line">    Student.save(req.body,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'server error'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.redirect(<span class="string">'/students'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/students/edit'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">"/students/new"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.post(<span class="string">'/students/edit'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">"/students/new"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/students/delete'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">"/students/new"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="comment">//配置art-template模板引擎</span></span><br><span class="line">app.engine(<span class="string">'.html'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//parser application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"><span class="comment">//parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">"/node_modules/"</span>,express.static(<span class="string">'./node_modules/'</span>))</span><br><span class="line">app.use(<span class="string">"/public/"</span>,express.static(<span class="string">'./public/'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// router(app)</span></span><br><span class="line">app.use(router)    <span class="comment">//将路由挂载到app</span></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server is running at 127.0.0.1:3000"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="mongodb-的安装"><a href="#mongodb-的安装" class="headerlink" title="mongodb 的安装"></a>mongodb 的安装</h3><p><a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">下载地址</a></p>
<p>安装完 </p>
<p><img src="/2019/03/25/express/1553590137499.png" alt="1553590137499"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将mongodb路径C:\Program Files\MongoDB\Server\4.0\bin添加到环境变量</span><br></pre></td></tr></table></figure>
<p>启动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在想要执行mongodb操作的盘符下新建一个文件夹data，data下再新建一个db文件夹</span><br></pre></td></tr></table></figure>
<p>然后再命令窗口输入 mongod  回车</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongod</span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/25/express/1553606652312.png" alt="1553606652312"></p>
<p>执行完就代表启动成功了</p>
<p>关闭的话：在命令窗口  ctrl+c  或者关闭命令窗口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>mongodb 默认使用执行mongod 命令所处盘符目录下的 /data/db 作为自己的数据库存</span><br><span class="line"><span class="meta">#</span>储目录</span><br><span class="line"><span class="meta">#</span>所以在第一次执行该命令之前，先自己手动新建一个 /data/db</span><br><span class="line">mongod</span><br></pre></td></tr></table></figure>
<p>如果想要修改默认的存储目录，可以</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongod --dbpath=书存储目录路径</span><br></pre></td></tr></table></figure>
<p>停止</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在开启服务的控制台，直接 ctrl+c 即可停止</span><br><span class="line">或者直接关闭开启服务器的控制台也可以</span><br></pre></td></tr></table></figure>
<p>8.4 连接数据库</p>
<p>连接：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 该命令默认连接本机的mongodb 服务</span><br><span class="line">mongo</span><br></pre></td></tr></table></figure>
<p>退出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 在连接状态输入 exit 退出连接</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>8.5 基本命令</p>
<ul>
<li><p><code>show dbs</code></p>
<p>查看显示所有数据库</p>
</li>
<li><p><code>db</code></p>
<p>查看当前操作的数据库</p>
</li>
<li><p><code>use 数据库名称</code></p>
<p>切换到指定数据（如果没有，会新建）</p>
</li>
<li><p><code>show collections</code> </p>
<ul>
<li>展示数据库的集合</li>
</ul>
</li>
<li><p><code>db.集合.find()</code></p>
<ul>
<li>展示数据</li>
</ul>
</li>
<li><p>插入数据</p>
<ul>
<li>db.集合名.inserOne({“name”:”张三”})</li>
</ul>
</li>
<li><img src="/2019/03/25/express/1553609921448.png" alt="1553609921448"></li>
</ul>
<h4 id="8-6-在node中操作mongodb"><a href="#8-6-在node中操作mongodb" class="headerlink" title="8.6 在node中操作mongodb"></a>8.6 在node中操作mongodb</h4><p>​    8.6.1 使用官方的 mongodb 包来操作</p>
<p>​    </p>
<p>​    8.6.2 使用第三方包 mongoose 操作</p>
<h3 id="使用mongoose工具操作mongodb实现前面的学生管理系统"><a href="#使用mongoose工具操作mongodb实现前面的学生管理系统" class="headerlink" title="使用mongoose工具操作mongodb实现前面的学生管理系统"></a>使用mongoose工具操作mongodb实现前面的学生管理系统</h3><p>新建一个文件夹 ，将刚刚使用文件操作的学生管理系统代码除了node_nodules文件夹</p>
<p>都复制过来，删掉db.json(不用文件存储数据了)</p>
<p>文件目录如下</p>
<blockquote>
<p>mongoose_crud</p>
<blockquote>
<p>public</p>
<p>views</p>
<blockquote>
<p>index.html</p>
<p>edit.html</p>
<p>new.html</p>
</blockquote>
<p>app.js</p>
<p>router.js</p>
<p>package-lock.json</p>
<p>package.json</p>
<p>students.js</p>
</blockquote>
</blockquote>
<ol>
<li>执行<code>npm install</code> 安装依赖包</li>
<li>重写student.js文件内容</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//students.js  </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 使用mongoose操作mongodb实现学生信息管理</span></span><br><span class="line"><span class="comment">* 引入mongoose，导出student模块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema</span><br><span class="line"><span class="comment">//连接student数据库，没有的话会创建一个student数据库</span></span><br><span class="line">mongoose.connect(<span class="string">"mongodb://loaclhost/student"</span>，&#123;<span class="attr">useNewUrlParser</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//制作集合结构（表结构）</span></span><br><span class="line"><span class="keyword">var</span> studentSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    name:&#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    gender:&#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        enum:[<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">        <span class="keyword">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age:&#123;</span><br><span class="line">        type: <span class="built_in">Number</span></span><br><span class="line">    &#125;,</span><br><span class="line">    hobbies:&#123;</span><br><span class="line">        type: <span class="built_in">String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">"Student"</span>,studentSchema)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>执行命令启动程序，报错，mongoose没定义，因为没有下载mongoose，所以下</p>
<p>载mongoose， <code>npm i mongoose</code></p>
</li>
<li><p>执行命令，还是报错，因为mongodb没有打开，所以在数据库所在盘执行命令</p>
<p><code>mongod</code> 启动mongodb数据库。</p>
</li>
<li><p>修改router.js文件</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router.js</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 引入express</span></span><br><span class="line"><span class="comment">* 引入students.js传递过来的数据模型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> Student = <span class="built_in">require</span>(<span class="string">'./studets'</span>)</span><br><span class="line"><span class="keyword">var</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">//重定向</span></span><br><span class="line">router.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">     res.redirect(<span class="string">'/students'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取数据，渲染列表</span></span><br><span class="line">router.get(<span class="string">"/students"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    Student.find(<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">"server error"</span>)</span><br><span class="line">        res.render(<span class="string">"index.html"</span>,&#123;</span><br><span class="line">            students:ret</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//点击添加，跳转到添加界面</span></span><br><span class="line">router.get(<span class="string">"/students/new"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">"new.html"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//点击提交，实现添加功能</span></span><br><span class="line">router.post(<span class="string">"/students/new"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//app.js需要引入获取post表单数据的第三方插件 body-parser</span></span><br><span class="line">    <span class="comment">//采用 req.body 获取表单数据</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> Student(req.body)</span><br><span class="line">    data.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">"server error"</span>)</span><br><span class="line">        res.redirect(<span class="string">'/students'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//点击编辑，跳转到编辑界面，并带有该id的信息</span></span><br><span class="line">router.get(<span class="string">'/students/edit'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = req.query.id; <span class="comment">//版本在变化，以前获取到的id值是被双引号包住的</span></span><br><span class="line">    <span class="comment">//现在是require._id，id值才是被双引号包住的，得使用正则表达式去掉双引号</span></span><br><span class="line">    <span class="comment">//require.query._id.replace(/"/g,'')  去掉两边的双引号</span></span><br><span class="line">    </span><br><span class="line">    Student.findById(id,<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'server error'</span>)</span><br><span class="line">        res.render(<span class="string">"edit.html"</span>,&#123;<span class="attr">data</span>:ret&#125;)  <span class="comment">//ret是我们想要的对象</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果采用find的方法，则ret是一个数组，我们想要的对象被[]包住</span></span><br><span class="line">    <span class="comment">//属性的id记得前面加下划线  _id</span></span><br><span class="line">    Student.find(&#123;<span class="attr">_id</span>:id&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'server error'</span>)</span><br><span class="line">        <span class="comment">//ret得取索引为0的才是我们想要的对象</span></span><br><span class="line">        res.render(<span class="string">"edit.html"</span>,&#123;<span class="attr">data</span>:ret[<span class="number">0</span>]&#125;)  </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交编辑，实现更新</span></span><br><span class="line">router.post(<span class="string">"/students/edit"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = req.body.id</span><br><span class="line">    <span class="keyword">var</span> data = req.body</span><br><span class="line">    Student.findByIdAndUpdate(id,data,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">"server error"</span>)</span><br><span class="line">        res.redirect(<span class="string">"/students"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//点击删除，实现删除功能</span></span><br><span class="line">router.get(<span class="string">'/students/delete'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    Student.findByIdAndRemove(req.query.id,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> reqs.status(<span class="number">500</span>).send(<span class="string">"server error"</span>)</span><br><span class="line">        res.redirect(<span class="string">"/students"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>app.js 文件如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="comment">//配置art-template模板引擎</span></span><br><span class="line">app.engine(<span class="string">'.html'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//parser application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"><span class="comment">//parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">"/node_modules/"</span>,express.static(<span class="string">'./node_modules/'</span>))</span><br><span class="line">app.use(<span class="string">"/public/"</span>,express.static(<span class="string">'./public/'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// router(app)</span></span><br><span class="line">app.use(router)    <span class="comment">//将路由挂载到app</span></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server is running at 127.0.0.1:3000"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex</title>
    <url>/2019/03/22/vuex/</url>
    <content><![CDATA[<h4 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h4><p>vuex是为了保存组件之间共享数据而诞生的，如果组件之间有要共享的数据，可以直接</p>
<p>挂载到vuex中，而不必通过父子组件传值了，如果组件的数据不需要共享，此时，这些</p>
<p>不需要共享的数据，没有必要放到vuex中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">只有共享的数据，才有权放到vuex中；</span><br><span class="line">组件内部私有的数据，只要放到组件的data中即可</span><br><span class="line">props 和 data 和 vuex的区别</span><br></pre></td></tr></table></figure>
<p>结论：vuex是一个全局的共享数据存储区域，就相当于是一个数据的存储仓库</p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js  文件</span></span><br><span class="line"><span class="comment">// 入口文件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">// 配置vuex的步骤</span></span><br><span class="line"><span class="comment">// 1. 运行 cnpm i vuex -S </span></span><br><span class="line"><span class="comment">// 2. 导入包</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="comment">// 3. 注册vuex到vue中</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="comment">// 4. new Vuex.Store() 实例，得到一个 数据仓储对象</span></span><br><span class="line"><span class="keyword">var</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    <span class="comment">// 大家可以把 state 想象成 组件中的 data ,专门用来存储数据的</span></span><br><span class="line">    <span class="comment">// 如果在 组件中，想要访问，store 中的数据，只能通过 this.$store.state.*** 来访问</span></span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">// 注意： 如果要操作 store 中的 state 值，只能通过 调用 mutations 提供的方法，才能操作对应的数据，不推荐直接操作 state 中的数据，因为 万一导致了数据的紊乱，不能快速定位到错误的原因，因为，每个组件都可能有操作数据的方法；</span></span><br><span class="line">    increment(state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 注意： 如果组件想要调用 mutations 中的方法，只能使用 this.$store.commit('方法名')</span></span><br><span class="line">    <span class="comment">// 这种 调用 mutations 方法的格式，和 this.$emit('父组件中方法名')</span></span><br><span class="line">    subtract(state, obj) &#123;</span><br><span class="line">      <span class="comment">// 注意： mutations 的 函数参数列表中，最多支持两个参数，其中，参数1： 是 state 状态； 参数2： 通过 commit 提交过来的参数；</span></span><br><span class="line">      <span class="built_in">console</span>.log(obj)</span><br><span class="line">      state.count -= (obj.c + obj.d)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    <span class="comment">// 注意：这里的 getters， 只负责 对外提供数据，不负责 修改数据，如果想要修改 state 中的数据，请 去找 mutations</span></span><br><span class="line">    optCount: <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'当前最新的count值是：'</span> + state.count</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 经过咱们回顾对比，发现 getters 中的方法， 和组件中的过滤器比较类似，因为 过滤器和 getters 都没有修改原数据， 都是把原数据做了一层包装，提供给了 调用者；</span></span><br><span class="line">    <span class="comment">// 其次， getters 也和 computed 比较像， 只要 state 中的数据发生变化了，那么，如果 getters 正好也引用了这个数据，那么 就会立即触发 getters 的重新求值；</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结：</span></span><br><span class="line"><span class="comment">// 1. state中的数据，不能直接修改，如果想要修改，必须通过 mutations</span></span><br><span class="line"><span class="comment">// 2. 如果组件想要直接 从 state 上获取数据： 需要 this.$store.state.***</span></span><br><span class="line"><span class="comment">// 3. 如果 组件，想要修改数据，必须使用 mutations 提供的方法，需要通过 this.$store.commit('方法的名称'， 唯一的一个参数)</span></span><br><span class="line"><span class="comment">// 4. 如果 store 中 state 上的数据， 在对外提供的时候，需要做一层包装，那么 ，推荐使用 getters, 如果需要使用 getters ,则用 this.$store.getters.***</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">c</span> =&gt;</span> c(App),</span><br><span class="line">  store <span class="comment">// 5. 将 vuex 创建的 store 挂载到 VM 实例上， 只要挂载到了 vm 上，任何组件都能使用 store 来存取数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//App.vue文件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;这是 App 组件&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;counter&gt;&lt;/counter&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;amount&gt;&lt;/amount&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import counter from &quot;./components/counter.vue&quot;;</span><br><span class="line">import amount from &quot;./components/amount.vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    counter,</span><br><span class="line">    amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//counter.vue 文件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;减少&quot; @click=&quot;remove&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;增加&quot; @click=&quot;add&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;$store.state.count&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // count: 0</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add() &#123;</span><br><span class="line">      // 千万不要这么用，不符合 vuex 的设计理念</span><br><span class="line">      // this.$store.state.count++;</span><br><span class="line">      this.$store.commit(&quot;increment&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    remove() &#123;</span><br><span class="line">      this.$store.commit(&quot;subtract&quot;, &#123; c: 3, d: 1 &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    fullname: &#123;</span><br><span class="line">      get()&#123;&#125;,</span><br><span class="line">      set()&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// amount.vue文件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- &lt;h3&gt;&#123;&#123; $store.state.count &#125;&#125;&lt;/h3&gt; --&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; $store.getters.optCount &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-devtools-dev</title>
    <url>/2019/03/18/vue-devtools-dev/</url>
    <content><![CDATA[<h3 id="谷歌浏览器chrome的vuejs-devtools-插件的安装"><a href="#谷歌浏览器chrome的vuejs-devtools-插件的安装" class="headerlink" title="谷歌浏览器chrome的vuejs devtools 插件的安装"></a>谷歌浏览器chrome的vuejs devtools 插件的安装</h3><p>github下载插件，npm包安装依赖，拖入浏览器扩展程序</p>
<p>具体操作：</p>
<ol>
<li><h4 id="下载chrome扩展插件。"><a href="#下载chrome扩展插件。" class="headerlink" title="下载chrome扩展插件。"></a>下载chrome扩展插件。</h4><p>在github上下载压缩包并解压到本地，github下载地址：&lt;<a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">https://github.com/vuejs/vue-devtools</a></p>
</li>
<li><h2 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h2><p>下载完成后打开命令行cmd进入vue-devtools-master文件夹，</p>
<ol>
<li><p>npm install，安装依赖包；如果安装太慢，请参照文章末尾说明进行操作。</p>
</li>
<li><p>npm run build</p>
<p><img src="/2019/03/18/vue-devtools-dev/1552921222183.png" alt="1552921222183"></p>
</li>
</ol>
</li>
</ol>
<p>npm run build 执行完，会在shells&gt;chrome下的src文件夹里生产如上图所示的几个js文件；</p>
<p><img src="/2019/03/18/vue-devtools-dev/1552921306142.png" alt="1552921306142"></p>
<p>若不执行以上命令会报错，无法加载背景脚本”build/background.js”</p>
<ol start="3">
<li>打开shells&gt;chrome&gt;manifest.json并把json文件里的”persistent”:false改成true</li>
</ol>
<p><img src="/2019/03/18/vue-devtools-dev/1552921450830.png" alt="1552921450830"></p>
<ol start="4">
<li><strong>扩展chrome插件</strong></li>
</ol>
<p>1.打开chrome浏览器，打开更多工具&gt;扩展程序；</p>
<p>2.再点击加载已解压的扩展程序，然后把shells&gt;chrome文件夹放入</p>
<p><img src="/2019/03/18/vue-devtools-dev/1552921624151.png" alt="1552921624151"></p>
<p><img src="/2019/03/18/vue-devtools-dev/1552921664362.png" alt="1552921664362"></p>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>promise</title>
    <url>/2019/03/17/promise/</url>
    <content><![CDATA[<h4 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h4><p>创建一个文件取名叫做 promise，下面包含一个files文件夹，files下面有三个txt文件</p>
<blockquote>
<p>promise</p>
<blockquote>
<p>/files</p>
<blockquote>
<p>1.txt</p>
<p>2.txt</p>
<p>3.txt</p>
</blockquote>
<p>promise1.js</p>
</blockquote>
</blockquote>
<p>三个txt文件的内容与文件名一致。 1.txt的文件内容是  1.txt  以此类推</p>
<p>在promise文件下写一个文件读取的操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(path.join(__dirname,<span class="string">'./files/1.txt'</span>),<span class="string">'utf-8'</span>,(err,data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在该根目录下执行命令   <code>node  promise1.js</code>  输出结果 1.txt    </p>
<p>封装一个根据路径获取文件内容的方法  –  getFileByPath()</p>
<p>注释掉上面的代码，重新写一个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    fs.readFile(path,<span class="string">'utf-8'</span>,(err,data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> err</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = path.join(__dirname,<span class="string">'./files/1.txt'</span>)</span><br><span class="line">getFileByPath(a)</span><br></pre></td></tr></table></figure>
<p>在该根目录下执行命令   <code>node  promise1.js</code>  输出结果 1.txt    ,虽然能输出，但是我们并不能拿到data的数据，无法对data做用户想要的操作。首先试着用return，看下能不能返回值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    fs.readFile(path,<span class="string">'utf-8'</span>,(err,data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> err</span><br><span class="line">       <span class="keyword">return</span> data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = path.join(__dirname,<span class="string">'./files/1.txt'</span>)</span><br><span class="line"><span class="keyword">var</span> b = getFileByPath(a)</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br></pre></td></tr></table></figure>
<p>在该根目录下执行命令   <code>node  promise1.js</code>  输出结果 undefined </p>
<p>由于读取文件操作是异步操作，所以我们不该使用return，而应该想到 回调函数 callback。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;)</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">function getFileByPath(path,callback)&#123;</span><br><span class="line">    fs.readFile(path,&apos;utf-8&apos;,(err,data) =&gt; &#123;</span><br><span class="line">        if(err) throw err</span><br><span class="line">        callback(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">const a = path.join(__dirname,&apos;./files/1.txt&apos;)</span><br><span class="line">getFileByPath(a,data =&gt; &#123;</span><br><span class="line">    console.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在该根目录下执行命令   <code>node  promise1.js</code>  输出结果 1.txt ,这样我们就能在这个方法内对数据做调用者想要做的事情。不足之处就是没有对错误的时候进行处理，接下来来处理错误的回调函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">path,callback</span>)</span>&#123;</span><br><span class="line">    fs.readFile(path,<span class="string">'utf-8'</span>,(err,data) =&gt; &#123;</span><br><span class="line">        <span class="comment">//如果报错了，进入if分支后，if后面的代码就不用执行了，用return 结束掉</span></span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> callback(err)</span><br><span class="line">        callback(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = path.join(__dirname,<span class="string">'./files/1.txt'</span>)</span><br><span class="line">getFileByPath(a,data =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在该根目录下执行命令   <code>node  promise1.js</code>  输出结果 1.txt ，如果把文件改为不存在的文件，再执行命令 <code>node  promise1.js</code>  输出结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; Error: ENOENT: no such file or directory, open &apos;promise\files\4.txt&apos;</span><br><span class="line">  errno: -4058,</span><br><span class="line">  code: &apos;ENOENT&apos;,</span><br><span class="line">  syscall: &apos;open&apos;,</span><br><span class="line">  path: &apos;promise\\files\\4.txt&apos; &#125;</span><br></pre></td></tr></table></figure>
<p>上面的例子没有对结果进行判断，不知道数据是成功的数据还是失败的数据，接下来就来解决这一个问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*我们规定：如果获取成功，返回的数据放置在callback函数参数的第二个位置，</span></span><br><span class="line"><span class="comment">此时第一个位置的参数放一个 null；</span></span><br><span class="line"><span class="comment">如果获取失败，则第一个参数放置 err，第二个位置放置一个undefined*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">path,callback</span>)</span>&#123;</span><br><span class="line">    fs.readFile(path,<span class="string">'utf-8'</span>,(err,data) =&gt; &#123;</span><br><span class="line">        <span class="comment">//如果报错了，进入if分支后，if后面的代码就不用执行了，用return 结束掉</span></span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> callback(err)</span><br><span class="line">        callback(<span class="literal">null</span>，data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = path.join(__dirname,<span class="string">'./files/1.txt'</span>)</span><br><span class="line">getFileByPath(a,（err,data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err.message)</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>执行命令   <code>node  promise1.js</code>  输出结果 1.txt ，执行文件不存在时，输出为</p>
<p><code>ENOENT: no such file or directory, open &#39;promise\files\4.txt&#39;</code></p>
<p>尽管上面的方法让我们能够知道数据是 来自 获取失败的  还是来自获取成功的，但是</p>
<p>失败和成功共用了同一个回调函数，这是不推荐的，接下来是用两个回调函数来做。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">path,succCb,errCb</span>)</span>&#123;</span><br><span class="line">    fs.readFile(path,<span class="string">'utf-8'</span>,(err,data) =&gt; &#123;</span><br><span class="line">        <span class="comment">//如果报错了，进入if分支后，if后面的代码就不用执行了，用return 结束掉</span></span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> errCb(err)</span><br><span class="line">        succCb(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = path.join(__dirname,<span class="string">'./files/1.txt'</span>)</span><br><span class="line">getFileByPath(a,err =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;,data =&gt; &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>注意：成功的回调函数一定要调用，失败的回调函数不一定要调用，需要的时候调用</code></p>
<p>这样就初步实现了我们想要的通过路径获取文件内容方法，接下来完成一个需求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求：先读取文件 1.txt，再读取文件 2.txt，再读取文件 3.txt</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">path,succCb,errCb</span>)</span>&#123;</span><br><span class="line">    fs.readFile(path,<span class="string">'utf-8'</span>,(err,data) =&gt; &#123;</span><br><span class="line">        <span class="comment">//如果报错了，进入if分支后，if后面的代码就不用执行了，用return 结束掉</span></span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> errCb(err)</span><br><span class="line">        succCb(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = path.join(__dirname,<span class="string">'./files/1.txt'</span>)</span><br><span class="line"><span class="keyword">const</span> b = path.join(__dirname,<span class="string">'./files/2.txt'</span>)</span><br><span class="line"><span class="keyword">const</span> c = path.join(__dirname,<span class="string">'./files/3.txt'</span>)</span><br><span class="line">getFileByPath(a,data =&gt; &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(data)</span><br><span class="line">     getFileByPath(b,data =&gt; &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(data)</span><br><span class="line">         getFileByPath(c,data =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>执行命令 <code>node promise1.js</code>  输出结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.txt</span><br><span class="line">2.txt</span><br><span class="line">3.txt</span><br></pre></td></tr></table></figure>
<p>满足需求，但是这样的写法，如果需求是十个文件的话，代码难看，会陷入一个回调地狱。</p>
<p>所以接下来引入 promise</p>
<h3 id="promise-1"><a href="#promise-1" class="headerlink" title="promise"></a>promise</h3><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><ol>
<li><p>Promise 是一个 构造函数，既然是构造函数，那么，我们就可以</p>
<p>new Promise() 得到一个 Promise的实例；</p>
</li>
<li><p>在pPromise上，有两个函数，分别叫做 resolve（成功之后的回调函数）</p>
<p>和 reject（失败之后的回调函数）</p>
</li>
<li><p>在Promise构造函数的Prototype 属性上，有一个 .then()方法，也就说，只要是</p>
<p>Promise构造函数创建的实例，都可以访问到.then() 方法</p>
</li>
<li><p>Promise 表示一个 异步操作；每当我们new一个 Promise 的实例，这个实例 就表示一个具体的异步操作。</p>
</li>
<li><p>既然Promise 创建的实例，是一个异步操作，那么这个异步操作的结果只能有</p>
<p>两种状态</p>
<ol>
<li><p>状态1： 异步执行成功了，需要在内部调用 成功的 回调函数 resolve 把</p>
<p>结果返回给调用者</p>
</li>
<li><p>状态2： 异步执行失败了，需要在内部调用失败的回调函数 reject 把结果</p>
<p>返回给调用者</p>
</li>
<li><p>由于 Promise 的实例，是一个异步操作，所以，内部拿到操作的结果后，</p>
<p>无法使用 return 把操作结果返回给调用者；这时候，只能使用回调函数的</p>
<p>形式，来吧成功或者失败的结果返回给调用者</p>
</li>
</ol>
</li>
<li><p>我们可以在 new出来的 Promise 实例上，调用 .then()方法，【预先】为这个 </p>
<p>Promise异步操作，指定 成功（resolve）和失败（reject）回掉函数</p>
</li>
</ol>
<p><img src="/2019/03/17/promise/1552837375561.png" alt="1552837375561"></p>
<p>新建一个promise2.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意：这里new出来的promise，只是代表【形式上】的一个异步操作；</span></span><br><span class="line"><span class="comment">//什么是形式上的异步操作：就是说，我们只知道它是一个异步操作，但是做什么</span></span><br><span class="line"><span class="comment">//具体的的异步事情不清楚</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>()</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一个具体的异步操作，其中，使用function指定一个具体的异步操作</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//这个function内部写的就是具体的异步操作！！！</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用promise执行一个异步的读文件操作</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">//每当new一个 Promise实例的时候，就会立即执行这个异步操作中的代码</span></span><br><span class="line"><span class="comment">//也就是说，new的时候，除了能够得到一个promise实例之外，还会立即调用</span></span><br><span class="line"><span class="comment">//我们为promise构造函数传递的那个function，执行function中的异步操作</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./files/2.txt'</span>,<span class="string">'utf-8'</span>,(err,data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>一执行命令立马  显示2.txt的内容。说明new出来的实例会直接执行里面的代码，下面完成一个需求，当调用的时候再执行。</p>
<p>注意：在js中，只有function才能按需去执行，其他的代码都会立即执行，除非把那个方法写到function去，才能按需执行。 所以我们用function把promise实例包住就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初衷：给路径，返回读取到的内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">fpath</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fs.readFile(fpath,<span class="string">'utf-8'</span>,(err,data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    	&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line">getFileByPath(<span class="string">'./files/2.txt'</span>)</span><br></pre></td></tr></table></figure>
<p>这样子就只有调用的时候才会显示内容，但是对错误没有做处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">fpath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        fs.readFile(fpath,<span class="string">'utf-8'</span>,(err,data) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="keyword">return</span> reject(err)</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = getFileByPath(<span class="string">'./files/2.txt'</span>)</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data+<span class="string">'----'</span>)</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err+<span class="string">'----'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/17/promise/1552876118030.png" alt="1552876118030"></p>
<h4 id="使用primise解决回调地狱"><a href="#使用primise解决回调地狱" class="headerlink" title="使用primise解决回调地狱"></a>使用primise解决回调地狱</h4><p>新建一个 promise3.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">fpath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        fs.readFile(fpath,<span class="string">'utf-8'</span>,(err,data) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err)</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在上一个.then中，返回一个新的promise实例，就可以继续使用下一个 .then来处理</span></span><br><span class="line">getFileByPath(<span class="string">'./files/1.txt'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/2.txt'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/3.txt'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这样就解决了回调地狱的问题</p>
<p>存在的问题就是没有对失败时候进行处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果，前面的promise执行失败，我们不想让后续的pomis操作被终止，可以为每个</span></span><br><span class="line"><span class="comment">//promisr指定 失败的回调</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">fpath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        fs.readFile(fpath,<span class="string">'utf-8'</span>,(err,data) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err)</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在上一个.then中，返回一个新的promise实例，就可以继续使用下一个 .then来处理</span></span><br><span class="line">getFileByPath(<span class="string">'./files/4.txt'</span>)  <span class="comment">//4.txt不存在</span></span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/2.txt'</span>)</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"这是失败的结果"</span>+err.message)</span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/2.txt'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/3.txt'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"okok"</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">okok</span><br><span class="line">这是失败的结果ENOENT: no such file or directory, open &apos;G:promise\files\4.txt&apos;</span><br><span class="line">2.txt</span><br><span class="line">3.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有时候我们有这样的需求，和上面的需求正好相反，如果后续的promise执行依赖于前面</span></span><br><span class="line"><span class="comment">//的promise执行结果，如果前面的失败了，则后面的就没有执行下去的意义了，此时我们</span></span><br><span class="line"><span class="comment">//想要实现一旦有报错则立即终止 所有 promise 的执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">fpath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        fs.readFile(fpath,<span class="string">'utf-8'</span>,(err,data) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err)</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在上一个.then中，返回一个新的promise实例，就可以继续使用下一个 .then来处理</span></span><br><span class="line">getFileByPath(<span class="string">'./files/4.txt'</span>)  <span class="comment">//4.txt不存在</span></span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/2.txt'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/3.txt'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"> .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err.message)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"okok"</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">okok</span><br><span class="line">ENOENT: no such file or directory, open &apos;G:promise\files\4.txt&apos;</span><br></pre></td></tr></table></figure>
<p>后续的代码没有继续执行</p>
<h4 id="promise的使用场景"><a href="#promise的使用场景" class="headerlink" title="promise的使用场景"></a>promise的使用场景</h4><p>比如数据库有一张表是 人员信息，人员信息里面有 职业id，得再从职业表中获取职业名称。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用data.json代替数据库</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">"users"</span>:[</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">			<span class="attr">"name"</span>: <span class="string">"小布"</span>,</span><br><span class="line">			<span class="attr">"age"</span>: <span class="number">24</span>,</span><br><span class="line">			<span class="attr">"jobId"</span>: <span class="number">3</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">			<span class="attr">"name"</span>: <span class="string">"沈延祥"</span>,</span><br><span class="line">			<span class="attr">"age"</span>: <span class="number">23</span>,</span><br><span class="line">			<span class="attr">"jobId"</span>: <span class="number">2</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">			<span class="attr">"name"</span>: <span class="string">"祥你的365夜"</span>,</span><br><span class="line">			<span class="attr">"age"</span>: <span class="number">22</span>,</span><br><span class="line">			<span class="attr">"jobId"</span>: <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	],</span><br><span class="line">	<span class="attr">"jobs"</span>:[</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">			<span class="attr">"job"</span>: <span class="string">"学生"</span> </span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">			<span class="attr">"job"</span>: <span class="string">"老师"</span> </span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">			<span class="attr">"job"</span>: <span class="string">"演员"</span> </span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h5><p>定义一个data.json文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>全局安装一个 json-server  一个能够使用地址访问文件的包</span><br><span class="line">cnpm install json-server -global</span><br></pre></td></tr></table></figure>
<p>在所在目录执行命令，打开要成为接口的json文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">json-server --watch data.json</span><br></pre></td></tr></table></figure>
<p>在浏览器输入地址，即可获取数据，同理使用ajax请求也可以获取数据</p>
<p>跟地址为： 127.0.0.1:3000</p>
<p>新建一个index.html文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>promise<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">content-type</span>=<span class="string">"text/html"</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"1111.js"</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"temp"</span>&gt;</span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;user.name&#125;&#125;"</span> <span class="attr">id</span>=<span class="string">"name"</span> &gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"age"</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;user.age&#125;&#125;"</span> <span class="attr">id</span>=<span class="string">"age"</span> &gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"job"</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">select</span>&gt;</span></span></span><br><span class="line">					&#123;&#123;each jobs&#125;&#125;</span><br><span class="line">					&#123;&#123;if user.jobId == $value.id&#125;&#125;</span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;$value.id&#125;&#125;"</span> <span class="attr">selected</span> &gt;</span>&#123;&#123;$value.job&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="javascript">					&#123;&#123;<span class="keyword">else</span>&#125;&#125;</span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;$value.id&#125;&#125;"</span> &gt;</span>&#123;&#123;$value.job&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">					&#123;&#123;/if&#125;&#125;					</span><br><span class="line">					&#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/jquery/dist/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/art-template/lib/template-web.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//自己封装一个ajax的get请求</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">				<span class="comment">// function get(url,callback)&#123;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 	var xml = new XMLHttpRequest();</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">				<span class="comment">// 	xml.onload = function()&#123;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 		callback(xml.responseText)</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 	&#125;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 	xml.open('get',url,true);</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 	xml.send()</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">				<span class="comment">// get('http://localhost:3000/user/2',function(userdata)&#123;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 	get('http://localhost:3000/jobs',function(jobsdata)&#123;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 		console.log(userdata)   //是一个字符串，需要转以为对象</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 		var htmlStr = template('temp',&#123;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 			user: JSON.parse(userdata),</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 			jobs: JSON.parse(jobsdata)</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 		&#125;)</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 		document.querySelector("#box").innerHTML = htmlStr;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 	&#125;)</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// &#125;)</span></span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">			<span class="comment">// $.get('http://localhost:3000/user/2',function(userdata)&#123;</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">// 	$.get('http://localhost:3000/jobs',function(jobdata)&#123;</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">// 		console.log(userdata)</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">// 		console.log(jobdata)</span></span></span><br><span class="line"><span class="javascript">					<span class="comment">// var htmlStr = template('temp',&#123;</span></span></span><br><span class="line"><span class="javascript">					<span class="comment">// 	user: userdata,</span></span></span><br><span class="line"><span class="javascript">					<span class="comment">// 	jobs: jobdata</span></span></span><br><span class="line"><span class="javascript">					<span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">// 		console.log(htmlStr);</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">// 		$('#box').html(htmlStr)</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">// 	&#125;)</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">// &#125;)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">			<span class="comment">//使用jquery的promise</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> obj = &#123;&#125;</span></span><br><span class="line"><span class="javascript">			$.<span class="keyword">get</span>('http://localhost:3000/user/2')</span></span><br><span class="line"><span class="javascript">			.then(<span class="function"><span class="keyword">function</span>(<span class="params">userData</span>)</span>&#123;</span></span><br><span class="line">				obj.user = userData;</span><br><span class="line"><span class="javascript">				<span class="keyword">return</span> $.<span class="keyword">get</span>('http://localhost:3000/jobs')</span></span><br><span class="line">			&#125;)</span><br><span class="line"><span class="javascript">			.then(<span class="function"><span class="keyword">function</span>(<span class="params">jobData</span>)</span>&#123;</span></span><br><span class="line">				obj.jobs = jobData;</span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> htmlStr = template(<span class="string">'temp'</span>,obj)</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(htmlStr);</span></span><br><span class="line"><span class="javascript">				$(<span class="string">'#box'</span>).html(htmlStr)</span></span><br><span class="line">			&#125;)</span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="comment">//封装promise版的 get方法</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="keyword">function</span> <span class="title">promiseGet</span>(<span class="params">url</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> xml = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">					xml.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						resolve(<span class="built_in">JSON</span>.parse(xml.responseText))</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="javascript">					xml.open(<span class="string">"get"</span>,url,<span class="literal">true</span>)</span></span><br><span class="line">					xml.send()</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">			promiseGet(<span class="string">'http://127.0.0.1:3000/user'</span>)</span></span><br><span class="line"><span class="javascript">			.then(<span class="function"><span class="keyword">function</span>(<span class="params">userdata</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(userdata)      <span class="comment">//成功获取到数据</span></span></span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">			<span class="comment">//封装像jquery那样即可以使用回调函数也可以使用promise的then方法 </span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="keyword">function</span> <span class="title">bothGet</span>(<span class="params">url,callback</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> xml = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">					xml.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						 <span class="comment">//前面加一个callback是防止使用promise方式而没有传递callback函数导致错误</span></span></span><br><span class="line"><span class="javascript">						callback &amp;&amp; callback(<span class="built_in">JSON</span>.parse(xml.responseText))     </span></span><br><span class="line"><span class="javascript">						resolve(<span class="built_in">JSON</span>.parse(xml.responseText))</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="javascript">                    xml.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span></span><br><span class="line">                        reject(err)</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">					xml.open(<span class="string">"get"</span>,url,<span class="literal">true</span>)</span></span><br><span class="line">					xml.send()</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">			bothGet(<span class="string">'http://127.0.0.1:3000/user'</span>)</span></span><br><span class="line"><span class="javascript">			.then(<span class="function"><span class="keyword">function</span>(<span class="params">userdata</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(userdata)      <span class="comment">//成功获取到数据</span></span></span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">			bothGet(<span class="string">'http://127.0.0.1:3000/jobs'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">userdata</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(userdata)   <span class="comment">//成功获取数据</span></span></span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为使用到了 art-template 模板引擎和 jquery，所以得先安装</p>
<p><code>cnpm install art-template jquery -S</code></p>
<p><img src="/2019/03/17/promise/1553848165505.png" alt="1553848165505"></p>
<p><img src="/2019/03/17/promise/1553850736436.png" alt="1553850736436"></p>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>vue实战项目1</title>
    <url>/2019/03/16/vue%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE1/</url>
    <content><![CDATA[<h3 id="vue项目实战"><a href="#vue项目实战" class="headerlink" title="vue项目实战"></a>vue项目实战</h3><p><a href="https://shenxiaobu.github.io/2019/03/16/vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%981/">第一步，搭建好目录，并配置好文件</a></p>
<p>搭建好文件目录并将配置文件配置好后。</p>
<p>执行命令 <code>cnpm install</code>，将项目依赖包和工具下载下来。</p>
<p>在index.html文件里面的body内创建一个div</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在main.js文件里面引入vue和app.vue组件，并创建一个vue实例，render界面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import app from &apos;./app.vue&apos;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line"> 	el: &quot;#app&quot;,</span><br><span class="line">    render:c=&gt;c(app)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.vue文件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;你好&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>执行命令 <code>cnpm run dev</code>  显示效果如下</p>
<p><img src="/2019/03/16/vue实战项目1/1552747844009.png" alt="1552747844009"></p>
<p>接下来就是实现顶部标题栏，这里采用 mint-ui中 header组件。</p>
<p>在main.js中引用组件，并安装到vue上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.js文件  增加代码</span></span><br><span class="line"><span class="keyword">import</span> &#123;Header&#125; <span class="keyword">from</span> <span class="string">'mint-ui'</span>  </span><br><span class="line">Vue.component(Header.name,Header)</span><br><span class="line"><span class="built_in">console</span>.log(Header.name)  <span class="comment">//结果为 mt-header 有结果说明引包成功</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//app.vue文件中引用header</span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;mt-header title=&quot;小布商城&quot;&gt;&lt;/mt-header&gt;</span><br><span class="line">	&lt;h1&gt;你好&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>这样子的话，执行项目会报错</p>
<p><img src="/2019/03/16/vue实战项目1/1552748492838.png" alt="1552748492838"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[WDS] Errors while compiling. Reload prevented.</span><br><span class="line">./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?&#123;&quot;id&quot;:&quot;data-v-5ef48958&quot;,&quot;hasScoped&quot;:false,&quot;buble&quot;:&#123;&quot;transforms&quot;:&#123;&#125;&#125;&#125;!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&amp;index=0!./src/app.vue</span><br><span class="line">(Emitted value instead of an instance of Error) </span><br><span class="line">  Error compiling template:</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &lt;mt-header title=&quot;小布商城&quot;&gt;&lt;/mt-header&gt;</span><br><span class="line">  &lt;h1&gt;你好&lt;/h1&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  - Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.</span><br><span class="line"></span><br><span class="line"> @ ./src/app.vue 11:0-276</span><br><span class="line"> @ ./src/main.js</span><br><span class="line"> @ multi ./node_modules/_webpack-dev-server@2.11.3@webpack-dev-server/client?http://localhost:3000 webpack/hot/dev-server ./src/main.js</span><br><span class="line">errors @ bundle.js:10120</span><br><span class="line">onmessage @ bundle.js:12061</span><br><span class="line">EventTarget.dispatchEvent @ bundle.js:12241</span><br><span class="line">(anonymous) @ bundle.js:12958</span><br><span class="line">SockJS._transportMessage @ bundle.js:12956</span><br><span class="line">EventEmitter.emit @ bundle.js:12157</span><br><span class="line">WebSocketTransport.ws.onmessage @ bundle.js:15032</span><br></pre></td></tr></table></figure>
<p>报错原因就是 template只能有一个子标签（一级的子元素），不能有两个子标签</p>
<p>解决办法，用div包住刚刚的 mt-header和h1 标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;mt-header title=&quot;小布商城&quot;&gt;&lt;/mt-header&gt;</span><br><span class="line">		&lt;h1&gt;你好&lt;/h1&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>点击 ctrl+ s 保存，报错自动消失，并显示界面如下</p>
<p><img src="/2019/03/16/vue实战项目1/1552748750357.png" alt="1552748750357"></p>
<p>接下来实现底部tabbar部分</p>
<p>tabbar我们采用 MUI的tabbar找到MUI的tabbar示例，右键查看源代码，并把tabbar的代码复制到app.vue中,并将父元素的div加以个 app-container类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">        &lt;mt-header title=&quot;小布商城&quot;&gt;&lt;/mt-header&gt;</span><br><span class="line">        &lt;h1&gt;你好&lt;/h1&gt;</span><br><span class="line">        &lt;nav class=&quot;mui-bar mui-bar-tab&quot;&gt;</span><br><span class="line">			&lt;a class=&quot;mui-tab-item mui-active&quot; href=&quot;#tabbar&quot;&gt;</span><br><span class="line">				&lt;span class=&quot;mui-icon mui-icon-home&quot;&gt;&lt;/span&gt;</span><br><span class="line">				&lt;span class=&quot;mui-tab-label&quot;&gt;首页&lt;/span&gt;</span><br><span class="line">			&lt;/a&gt;</span><br><span class="line">			&lt;a class=&quot;mui-tab-item&quot; href=&quot;#tabbar-with-chat&quot;&gt;</span><br><span class="line">				&lt;span class=&quot;mui-icon mui-icon-email&quot;&gt;&lt;span class=&quot;mui-badge&quot;&gt;9&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">				&lt;span class=&quot;mui-tab-label&quot;&gt;消息&lt;/span&gt;</span><br><span class="line">			&lt;/a&gt;</span><br><span class="line">			&lt;a class=&quot;mui-tab-item&quot; href=&quot;#tabbar-with-contact&quot;&gt;</span><br><span class="line">				&lt;span class=&quot;mui-icon mui-icon-contact&quot;&gt;&lt;/span&gt;</span><br><span class="line">				&lt;span class=&quot;mui-tab-label&quot;&gt;通讯录&lt;/span&gt;</span><br><span class="line">			&lt;/a&gt;</span><br><span class="line">			&lt;a class=&quot;mui-tab-item&quot; href=&quot;#tabbar-with-map&quot;&gt;</span><br><span class="line">				&lt;span class=&quot;mui-icon mui-icon-gear&quot;&gt;&lt;/span&gt;</span><br><span class="line">				&lt;span class=&quot;mui-tab-label&quot;&gt;设置&lt;/span&gt;</span><br><span class="line">			&lt;/a&gt;</span><br><span class="line">		&lt;/nav&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>保存，显示效果如下</p>
<p><img src="/2019/03/16/vue实战项目1/1552749104693.png" alt="1552749104693"></p>
<p>为什么和MUI示例的样式不一样呢？因为没有引入css文件，接下来就是引入mui.css了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js文件下引入 mui.css(事先已经存放好位置了)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./lib/mui/css/mui.min.css'</span></span><br></pre></td></tr></table></figure>
<p>保存后效果如下</p>
<p><img src="/2019/03/16/vue实战项目1/1552749413240.png" alt="1552749413240"></p>
<p>接下来就是更改底部的icon和对应的文字了。</p>
<p>我们要做的四个tabbar  分别是  首页   会员    购物车   搜索</p>
<p>在mui的icon示例中 我们找到了  首页  会员呢  搜索的图标，但是购物车的图标我们并没有看到。暂时先修改三个</p>
<h5 id="购物车的图标怎么找？"><a href="#购物车的图标怎么找？" class="headerlink" title="购物车的图标怎么找？"></a>购物车的图标怎么找？</h5><p>浏览mui的示例时，我们看到了关于  icon 的示例还有另一个icon-extra.html示例，打开后发现有我们需要的购物车图标。审查元素后发现是引用了mui-icon-extra mui-icon-extra-cart 两个类。</p>
<p><img src="/2019/03/16/vue实战项目1/1552749911201.png" alt="1552749911201"></p>
<p>我们将原先的 mui-icon mui-icon-contact 类更换为mui-icon-extra mui-icon-extra-cart 这两个类。显示效果如下</p>
<p><img src="/2019/03/16/vue实战项目1/1552750077775.png" alt="1552750077775"></p>
<p>不仅图标没出来，连购物车三个字的样式都变了，所以可以想到，刚刚的 mui-icon类 是不可以删除的，这个类有样式，将 mui-icon 类添加进去。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mui-tab-item"</span> <span class="attr">href</span>=<span class="string">"#tabbar-with-contact"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-extra mui-icon-extra-cart"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/16/vue实战项目1/1552750231268.png" alt="1552750231268"></p>
<p>购物车三个字的样式回来了，但是图标的问题还是没解决，那为什么示例的代码就能正常显示图标，我们的就不行呢？所以查看示例icon-extra.html文件的源代码</p>
<p><img src="/2019/03/16/vue实战项目1/1552750382550.png" alt="1552750382550"></p>
<p>我们发现它不仅引用了mui.min.css 还引用了 icons-extra.css</p>
<p>于是我们将示例中的 icons-extra.css 文件复制一份放到和 我们的mui.min.css文件同级</p>
<p>并按照合适的路径在main.js文件中引入该css文件。</p>
<p>保存执行，报错</p>
<p><img src="/2019/03/16/vue实战项目1/1552750771370.png" alt="1552750771370"></p>
<p>因为在 icons-extra.css 文件中还引入了  路径为 ../fonts/mui-icons-extra.ttf 的字体文件，所以我们从示例中复制一份字体文件，并按照路径所示位置放好，刚好是在mui下的fonts目录下。目录如图所示<img src="/2019/03/16/vue实战项目1/1552750990714.png" alt="1552750990714"></p>
<p>放好字体文件并确保存放的位置是正确的后，保存，界面显示如下</p>
<p><img src="/2019/03/16/vue实战项目1/1552751122875.png" alt="1552751122875"></p>
<p>这样我们的顶部和底部的样式基本就ok了</p>
<p>接下来，我们完成 tabbar 路由部分</p>
<p>首先将tabbar 中的a标签 改为 router-link标签，把href 改为 to，并把跳转的路由更换，tabbar部分的代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"mui-bar mui-bar-tab"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"mui-tab-item mui-active"</span> <span class="attr">to</span>=<span class="string">"/home"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"mui-tab-item"</span> <span class="attr">to</span>=<span class="string">"/member"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-contact"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>会员<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"mui-tab-item"</span> <span class="attr">to</span>=<span class="string">"/shopcar"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-extra mui-icon-extra-cart"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-badge"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"mui-tab-item"</span> <span class="attr">to</span>=<span class="string">"/search"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="实现路由"><a href="#实现路由" class="headerlink" title="实现路由"></a>实现路由</h4><p>要实现路由，首先肯定得引入路由包，并在Vue上安装,引入 router.js文件，并将router挂载到vue实例上，这样就可以在 router.js 文件上配置路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js 文件上引入 vue-router并安装到Vue上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    render: <span class="function"><span class="params">c</span>=&gt;</span>c(app),</span><br><span class="line">    router      <span class="comment">//将路由挂载到实例上</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p> router.js 文件配置路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes:[  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<p>这样底部的菜单就可以一点击改变浏览器跑到相应的地址了，只是没有做页面跳转。</p>
<p>接下来在src下创建一个 叫做 components的文件夹，components下创建一个 tabbar的文件夹，tarbar文件夹下创建四个.vue文件分别为</p>
<ol>
<li>HomeContainer.vue</li>
<li>MemberContainer.vue</li>
<li>ShopcarContainer.vue</li>
<li>SearchContainer.vue  </li>
</ol>
<p>四个文件的内容分别为相应的文件名，如HomeContainer.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;HomeContainer.vue&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>配置router.js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">'./components/tabbar/HomeContainer.vue'</span></span><br><span class="line"><span class="keyword">import</span> search <span class="keyword">from</span> <span class="string">'./components/tabbar/SearchContainer.vue'</span></span><br><span class="line"><span class="keyword">import</span> member <span class="keyword">from</span> <span class="string">'./components/tabbar/MemberContainer.vue'</span></span><br><span class="line"><span class="keyword">import</span> shopcar <span class="keyword">from</span> <span class="string">'./components/tabbar/ShopcarContainer.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes:[  </span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">'/'</span>,<span class="attr">redirect</span>: <span class="string">'/home'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">'/home'</span>, <span class="attr">component</span>: home&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">'/member'</span>, <span class="attr">component</span>: member&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">'/shopcar'</span>, <span class="attr">component</span>: shopcar&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">'search'</span>, <span class="attr">component</span>: search&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<p>保存后查看是否有报错，如果有报错的话，很大原因是文件名打错了，或者是哪个字母漏了或多了，根据报错查找原因，这次是因为tabbar文件夹的名字取成 tarbar了，导致报错，修改完后；</p>
<h4 id="点击tabbar-还是不跳转？"><a href="#点击tabbar-还是不跳转？" class="headerlink" title="点击tabbar 还是不跳转？"></a>点击tabbar 还是不跳转？</h4><p>原因就是没有在 app.vue 放置一个 router-view标签。添加并保存后点击tabbar效果，发现点击搜索，并没有跳转，经过检查，发现是因为路由配置出错，在 search 路由哪里，少了个 / ，添加后成功。 所以配置路由一定要细心</p>
<p><img src="/2019/03/16/vue实战项目1/1552753737543.png" alt="1552753737543"></p>
<p>补充：刚刚我们做的顶部mt-header，没有设置fixed属性，会导致，顶部标题会跟着移动，所以我们在app.vue文件上给 mt-header 标签添加 fixed 属性使其固定在顶部。</p>
<p>但是给定了fixed属性后，我们的界面变成了这样。</p>
<p><img src="/2019/03/16/vue实战项目1/1552754370867.png" alt="1552754370867"></p>
<p>在app.vue文件中设置样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.app-container</span>&#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>成功回到想要的样式。</p>
<hr>
<h4 id="接下来在home界面制作轮播图"><a href="#接下来在home界面制作轮播图" class="headerlink" title="接下来在home界面制作轮播图"></a>接下来在home界面制作轮播图</h4><p>轮播图采用mint-ui的组件，使用 mint-ui组件注意事项</p>
<ol>
<li>因为我们是按需引入的方式引入mint-ui，所以我们需要先引入我们标签上出现的mt-name  中的 name引入进来。</li>
<li>如前面我们用到了 <code>mt-header</code> ，所以我们引入 <code>import {Header} from &#39;mint-ui&#39;</code></li>
<li>引入了还不够，还得在Vue上创建该组件<code>Vue.component(Header.name,Header)</code></li>
</ol>
<p>由于mint-ui的官网进不去，我们没法查看文档，于是我们去github上查找mint-ui的项目，并下载下来，我们可以查看example里面的代码，然后复制代码块来使用。</p>
<p><a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="noopener">mint-ui在github上的下载地址</a></p>
<p><img src="/2019/03/16/vue实战项目1/1552792984950.png" alt="1552792984950"></p>
<p>查看mint-ui里面example的 swipe 部分，复制代码块到home。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mt-swipe</span> <span class="attr">:auto</span>=<span class="string">"4000"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mt-swipe-item</span> <span class="attr">class</span>=<span class="string">"slide1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mt-swipe-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mt-swipe-item</span> <span class="attr">class</span>=<span class="string">"slide2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">mt-swipe-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mt-swipe-item</span> <span class="attr">class</span>=<span class="string">"slide3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">mt-swipe-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mt-swipe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击保存直接报错，原因就是我们没有引入标签的样式，由于上面使用了两个mt的mint自定义标签，所以我们需要引用两个，使用首字母全大写的方式进行引入，如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Header,Swipe,SwipeItem&#125; <span class="keyword">from</span> <span class="string">'mint-ui'</span></span><br></pre></td></tr></table></figure>
<p>还是报错，因为还没有引入组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(Swipe.name,Swipe)</span><br><span class="line">Vue.component(SwipeItem.name,SwipeItem)</span><br></pre></td></tr></table></figure>
<p>保存还是报错，报错如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead</span><br></pre></td></tr></table></figure>
<p>这个报错前面就遇到过了，就是因为 .vue文件上的 template 标签只能包住一个 子标签，我们现在的代码如下：</p>
<p><img src="/2019/03/16/vue实战项目1/1552793787465.png" alt="1552793787465"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">    	&lt;!--轮播图部分--&gt;</span><br><span class="line">    	&lt;mt-swipe :auto=&quot;4000&quot;&gt;</span><br><span class="line">     		&lt;mt-swipe-item class=&quot;slide1&quot;&gt;1&lt;/mt-swipe-item&gt;</span><br><span class="line">      		&lt;mt-swipe-item class=&quot;slide2&quot;&gt;2&lt;/mt-swipe-item&gt;</span><br><span class="line">      		&lt;mt-swipe-item class=&quot;slide3&quot;&gt;3&lt;/mt-swipe-item&gt;</span><br><span class="line">    	&lt;/mt-swipe&gt;</span><br><span class="line">    	&lt;h1&gt;HomeContainer.vue&lt;/h1&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>保存，报错消失，显示效果如下</p>
<p><img src="/2019/03/16/vue实战项目1/1552793946849.png" alt="1552793946849"></p>
<p>我们要的轮播图还是没有出现，这时我们就要审查元素，查看我们的轮播图的标签有没有渲染在页面上，查看并分析原因，我们发现轮播图的高度为0</p>
<p><img src="/2019/03/16/vue实战项目1/1552794158912.png" alt="1552794158912"></p>
<p>所以我们认为是没有给轮播图高度导致的页面上没有显示出来，所以先试着给轮播图高度，然后看看效果</p>
<p><img src="/2019/03/16/vue实战项目1/1552794222708.png" alt="1552794222708"></p>
<p>说明确实是因为没有高度而导致轮播图没显示，所以我们在 HomeContainer.vue里面的style中用scss 给界面写样式</p>
<p><code>注意：在.vue文件中的style中写样式，必须带上 scoped，这样才会控制作用范围只在当前vue文件有效，避免污染全局，可以设置 lang属性为 scss，代表使用 scss预演编写样式</code></p>
<p>这时我们可以把 app.vue里面的你好给去掉了，占位置，然后编写我们的轮播图样式。</p>
<p>我们先来熟悉下scss的编写，下面完成一个需求</p>
<p>三个轮播图页面显示背景分别为黄色，红色，蓝色</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line">	<span class="selector-class">.mint-swipe</span>&#123;</span><br><span class="line">		<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">		<span class="selector-class">.mint-swipe-item</span> &#123;</span><br><span class="line">            &amp;<span class="selector-pseudo">:nth-child</span>(1)&#123;</span><br><span class="line">                <span class="attribute">background</span>: yellow;</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;<span class="selector-pseudo">:nth-child</span>(2)&#123;</span><br><span class="line">                <span class="attribute">background</span>: red;</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;<span class="selector-pseudo">:nth-child</span>(3)&#123;</span><br><span class="line">                <span class="attribute">background</span>: blue;</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/16/vue实战项目1/1552795167260.png" alt="1552795167260"></p>
<p>效果实现，接下来我们使用请求的数据来渲染轮播图，涉及到请求，首先就得想到</p>
<p>vue-resource 包，来发送请求并获取相应数据。</p>
<p>注意</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不仅要在 main.js文件上 引入 vue-resource 包</span><br><span class="line">还得  在Vue上安装，两条指令缺一不可</span><br><span class="line"></span><br><span class="line">import VueResource from &apos;vue-resource&apos;</span><br><span class="line">Vue.use(VueResource)</span><br></pre></td></tr></table></figure>
<p>在HomeContainer.vue文件上的script标签上使用请求，并渲染到界面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!--轮播图部分--&gt;</span><br><span class="line">        &lt;mt-swipe :auto=&quot;4000&quot;&gt;</span><br><span class="line">        &lt;mt-swipe-item v-for=&quot;item in bannerList&quot; :key=&quot;item.img&quot; &gt;</span><br><span class="line">            &lt;router-link :to=&quot;item.url&quot;&gt;&lt;img :src=&quot;item.img&quot; /&gt;&lt;/router-link&gt;</span><br><span class="line">        &lt;/mt-swipe-item&gt;</span><br><span class="line">        &lt;/mt-swipe&gt;</span><br><span class="line"></span><br><span class="line">        &lt;h1&gt;HomeContainer.vue&lt;/h1&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;Toast&#125; from &apos;mint-ui&apos;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                bannerList: []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created()&#123;</span><br><span class="line">            this.getBannerList()</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getBannerList()&#123;</span><br><span class="line">                console.log(&quot;123&quot;)</span><br><span class="line">                this.$http.get(&apos;http://47.89.21.179:8080/api/getlunbo&apos;).then(result=&gt;&#123;</span><br><span class="line">                    console.log(result.body)</span><br><span class="line">                    if(result.body.status === 0)&#123;</span><br><span class="line">                        this.bannerList = result.body.message</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                         Toast(&quot;请求失败&quot;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    .mint-swipe&#123;</span><br><span class="line">        height: 200px;</span><br><span class="line">        .mint-swipe-item &#123;</span><br><span class="line">            &amp;:nth-child(1)&#123;</span><br><span class="line">                background: yellow;</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;:nth-child(2)&#123;</span><br><span class="line">                background: red;</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;:nth-child(3)&#123;</span><br><span class="line">                background: blue;</span><br><span class="line">            &#125;</span><br><span class="line">            img&#123;</span><br><span class="line">                width: 100%;</span><br><span class="line">                height: 100%;</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>做到这里有三个问题？</p>
<ol>
<li><p>为什么router.js文件里面需要引入vue-router？</p>
</li>
<li><p>为什么HomeContainer.vue中有使用到vue-resource却不用在文件上单独引包？</p>
</li>
<li>为什么main.js文件上引用了 mint-ui上的toast，HomeContainer.vue上不能用，会报错说没有定义toast，还得在HomeContainer.vue文件上单独引用才可以使用Toast？</li>
</ol>
<p>第一个问题，应该还好，因为router.js里面，使用了 new VueRouter({})</p>
<p>第二个问题，应该就是HomeContainer.vue是vue文件，在main.js引用的vue包，都能直接使用吧。</p>
<p>第三个问题，应该就是 Toast 不是mint-ui的标签，并没有使用 Vue.component()进行组件安装，所以需要使用得单独引用吧。</p>
<p>个人乱个解释，如有看到，并有错误请指点微信(syx365night)</p>
<p>这样轮播图部分就完成了，接下来就是制作菜单</p>
<hr>
<p>菜单部分我们采用，mui里面的九宫格，同样的直接复制代码块，然后进行整改。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--菜单部分--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"mui-table-view mui-grid-view mui-grid-9"</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"mui-table-view-cell mui-media mui-col-xs-4 mui-col-sm-3"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-media-body"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"mui-table-view-cell mui-media mui-col-xs-4 mui-col-sm-3"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-email"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-badge"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-media-body"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"mui-table-view-cell mui-media mui-col-xs-4 mui-col-sm-3"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-chatbubble"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-media-body"</span>&gt;</span>Chat<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"mui-table-view-cell mui-media mui-col-xs-4 mui-col-sm-3"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-location"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-media-body"</span>&gt;</span>location<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"mui-table-view-cell mui-media mui-col-xs-4 mui-col-sm-3"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-media-body"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"mui-table-view-cell mui-media mui-col-xs-4 mui-col-sm-3"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-phone"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-media-body"</span>&gt;</span>Phone<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"mui-table-view-cell mui-media mui-col-xs-4 mui-col-sm-3"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-gear"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-media-body"</span>&gt;</span>Setting<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"mui-table-view-cell mui-media mui-col-xs-4 mui-col-sm-3"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-info"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-media-body"</span>&gt;</span>about<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	           <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"mui-table-view-cell mui-media mui-col-xs-4 mui-col-sm-3"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-more"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-media-body"</span>&gt;</span>more<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/03/16/vue实战项目1/1552801503730.png" alt="1552801503730"></p>
<p>我们要做的事六个格子的菜单，标题分别为  新闻资讯、图片分享、商品购买、留言反馈、视频专区、联系我们。</p>
<p>我们在src目录下新建一个文件夹images，专门用来存放照片，当然以后可能照片也是从服务器获取。</p>
<p>为了界面代码简洁，我们在制作了一串列表数据，并使用 v-for的形式渲染界面。</p>
<p>数据如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">menuList:[</span><br><span class="line">                        &#123;id:1,title:'新闻资讯',img:'./src/images/menu1.png',url:""&#125;,</span><br><span class="line">                        &#123;id:2,title:'图片分享',img:'./src/images/menu2.png',url:""&#125;,</span><br><span class="line">                        &#123;id:3,title:'商品购买',img:'./src/images/menu3.png',url:""&#125;,</span><br><span class="line">                        &#123;id:4,title:'留言反馈',img:'./src/images/menu4.png',url:""&#125;,</span><br><span class="line">                        &#123;id:5,title:'视频专区',img:'./src/images/menu5.png',url:""&#125;,</span><br><span class="line">                        &#123;id:6,title:'联系我们',img:'./src/images/menu6.png',url:""&#125;,</span><br><span class="line">                   ]</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--菜单部分--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app-menu"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"mui-table-view mui-grid-view mui-grid-9"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"mui-table-view-cell mui-media mui-col-xs-4 mui-col-sm-3"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">v-for</span>=<span class="string">"item in menuList"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"item.url"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.img"</span>/&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-media-body"</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/03/16/vue实战项目1/1552802174625.png" alt="1552802174625"></p>
<p>接下来就是修改样式了</p>
<p>将图片大小修改为 宽 60px，高 60px</p>
<p>将背景修改为 白色</p>
<p>将标题的字体大小改为 13px</p>
<p>样式代码如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line">    <span class="selector-class">.app-menu</span>&#123;</span><br><span class="line">        <span class="selector-class">.mui-grid-view</span><span class="selector-class">.mui-grid-9</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="selector-tag">img</span>&#123;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.mui-media-body</span>&#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/03/16/vue实战项目1/1552802643778.png" alt="1552802643778"></p>
<p>发现有边框格子不好看，删除掉边框</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.app-menu</span>&#123;</span><br><span class="line">        <span class="selector-class">.mui-grid-view</span><span class="selector-class">.mui-grid-9</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">border</span>: none;</span><br><span class="line">           <span class="selector-class">.mui-table-view-cell</span>&#123;</span><br><span class="line">               <span class="attribute">border</span>: <span class="number">0</span>;         <span class="comment">/* border：0 与 border：none  */</span></span><br><span class="line">                <span class="selector-tag">img</span>&#123;</span><br><span class="line">                    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">                    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="selector-class">.mui-media-body</span>&#123;</span><br><span class="line">                    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/03/16/vue实战项目1/1552803177033.png" alt="1552803177033"></p>
<p>这里我们就要扯到  border:none 和 border: 0 的区别了</p>
<p>详情请看<a href="https://blog.csdn.net/u010200222/article/details/45622647" target="_blank" rel="noopener">border:none与border:0的区别</a></p>
<p>这样菜单部分就完成了</p>
<hr>
<p>接下来设置切换路由时的动画效果</p>
<p>在app.vue中添加v-enter,v-leave-to,v-enter-active,v-leave-active类的样式，并用transition 标签包住 路由容器。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">app.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">app<span class="selector-class">.vue</span></span><br><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line">	<span class="selector-class">.v-enter</span>&#123;</span><br><span class="line">		<span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">transform</span>: translateX(<span class="number">100%</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-class">.v-leave-to</span>&#123;</span><br><span class="line">		<span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">transform</span>: translateX(-<span class="number">100%</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	v-enter-active,v-leave-active&#123;</span><br><span class="line">		<span class="attribute">transition</span>: all <span class="number">0.5s</span> ease;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>查看点击切换路由的时候，发现前面忘记对 linkActiveClass 进行设置了，导致home图标一直是高亮的。回到刚刚的路由，我们只要在router.js</p>
<p>文件中定义一个类，使其高亮显示就好了。因为我们用的是 mui 的组件，所以其实那个类mui已经给我们了，查看 home 标签的 类就可以发现那个类的名字叫做 mui-active</p>
<p><img src="/2019/03/16/vue实战项目1/1552805175763.png" alt="1552805175763"></p>
<p>然后将 router.js文件中的路由配置中加一个 linkActiveClass属性，值为’mui-active’，然后把app.vue文件中home里面的mui-active类去掉就可以了</p>
<p><img src="/2019/03/16/vue实战项目1/1552805389742.png" alt="1552805389742"></p>
<hr>
<p>回到动画这，由于设置了动画，出现了许多问题</p>
<p><img src="/2019/03/16/vue实战项目1/1552805819059.png" alt="1552805819059"></p>
<p>图片上只写了 overflow  其实是 overflow-x</p>
<p>设置完在 app-container类设置完 overflow-x属性为 hidden后还存在问题。</p>
<p><img src="/2019/03/16/vue实战项目1/1552821067729.png" alt="1552821067729"></p>
<p>换页的时候会从地下跑上去。这不是我们想要的，解决办法</p>
<p>给  .v-leave-to  一个为 absolute的定位就可以了，至于为什么，我也不知道。</p>
<p>由于我们前面各个页面的内容是用 h1 包住的，还是会存在 滚动条的问题，所以得把 h1 标签改为  div标签  如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ShopcarContainer.vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样我们的Home界面就差不多。</p>
<hr>
<p>制作我们的新闻资讯页面，首先就是配置HomeContainer.vue文件里面 新闻资讯那个</p>
<p>router-link 的to 属性，改为 /home/newslist  ，其次在router.js文件上添加一个路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;path: &apos;/home/newslist&apos;，component: newslist&#125;</span><br></pre></td></tr></table></figure>
<p>然后记得在前面引入路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import newslist from &apos;./components/news/newslist.vue&apos;</span><br></pre></td></tr></table></figure>
<p>最后根据这个路径创建一个文件夹，其实顺序说反了，不过都一样，反过来做的出来</p>
<p>更聪明。切记，路径很容易出错，所以一定要小心字母大小写以及少写或者多写。</p>
<p>点击新闻资讯显示效果如下</p>
<p><img src="/2019/03/16/vue实战项目1/1553001873471.png" alt="1553001873471"></p>
<p>接下来就是新闻列表了，查看了新闻列表的样式，发现mui里面的 media-list 例子非常一致，于是采用他作为我们新闻列表的样式，查看源代码，复制</p>
<p>点击保存，报错了，显示错误原因是因为例子中有图片，将图片修改为我们本地图片</p>
<p>显示效果如下</p>
<p><img src="/2019/03/16/vue实战项目1/1553002360180.png" alt="1553002360180"></p>
<p>接下来修改样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul class=&quot;mui-table-view&quot;&gt;</span><br><span class="line">        &lt;li class=&quot;mui-table-view-cell mui-media&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;javascript:;&quot;&gt;</span><br><span class="line">                &lt;img class=&quot;mui-media-object mui-pull-left&quot; src=&quot;https://shenxiaobu.github.io/images/xiaobu.png&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;mui-media-body&quot;&gt;</span><br><span class="line">                    &lt;h1 class=&apos;mui-ellipsis&apos;&gt;能和心爱的人一起睡觉，是件幸福的事情；可是，打呼噜怎么办？&lt;/h1&gt;</span><br><span class="line">                    &lt;p class=&quot;subtitle&quot;&gt;</span><br><span class="line">                        &lt;span&gt;发表时间：2019-03-19 21:35:32&lt;/span&gt;&lt;span&gt;点击100次&lt;/span&gt;</span><br><span class="line">                    &lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    .mui-table-view&#123;</span><br><span class="line">        .mui-media-body&#123;</span><br><span class="line">            h1&#123;</span><br><span class="line">                font-size: 14px;</span><br><span class="line">            &#125;</span><br><span class="line">            p&#123;</span><br><span class="line">                display: flex;</span><br><span class="line">                justify-content: space-between;</span><br><span class="line">                font-size: 12px;</span><br><span class="line">                color: #226aff;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>接下来就是采用 axios  获取新闻列表数据。</p>
<p><code>cnpm i axios -S</code> 安装axios    然后再main.js上引入 并安装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">'http://47.89.21.179:8080'</span> <span class="comment">//设置访问根路径</span></span><br><span class="line">Vue.prototype.axios = axios  <span class="comment">//在Vue中添加axios的方法</span></span><br></pre></td></tr></table></figure>
<p>在新闻列表页上使用axios请求并渲染数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul class=&quot;mui-table-view&quot;&gt;</span><br><span class="line">        &lt;li class=&quot;mui-table-view-cell mui-media&quot; v-for=&quot;item in newsList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">            &lt;router-link :to=&quot;&apos;/home/newsList/newsinfo/&apos;+item.id&quot;&gt;</span><br><span class="line">                &lt;img class=&quot;mui-media-object mui-pull-left&quot; src=&quot;https://shenxiaobu.github.io/images/xiaobu.png&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;mui-media-body&quot;&gt;</span><br><span class="line">                    &lt;h1 class=&apos;mui-ellipsis&apos;&gt;&#123;&#123;item.title&#125;&#125;&lt;/h1&gt;</span><br><span class="line">                    &lt;p class=&quot;subtitle&quot;&gt;</span><br><span class="line">                        &lt;span&gt;发表时间：&#123;&#123;item.add_time&#125;&#125;&lt;/span&gt;&lt;span&gt;点击&#123;&#123;item.click&#125;&#125;次&lt;/span&gt;</span><br><span class="line">                    &lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/router-link&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123;Toast&#125; from &apos;mint-ui&apos;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                newsList: []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created()&#123;</span><br><span class="line">            this.getNewsList()</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getNewsList()&#123;</span><br><span class="line">                this.axios.get(&apos;api/getnewslist&apos;).then(result =&gt; &#123;</span><br><span class="line">                    console.log(result.data)</span><br><span class="line">                    if(result.data.status === 0)&#123;</span><br><span class="line">                        this.newsList = result.data.message</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        Toast(&quot;新闻列表获取失败&quot;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/03/16/vue实战项目1/1553005327395.png" alt="1553005327395"></p>
<p>可以发现，时间格式不是我们想要的，这是我们可以想到过滤器，接下来我们使用过滤器来解决时间格式这个问题</p>
<p>推荐个好插件，一个时间格式化的插件  moment。</p>
<p>三部曲</p>
<ol>
<li>安装 <code>cnpm i moment -S</code></li>
<li>引用 <code>import moment from &#39;moment&#39;</code></li>
<li>调用</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import moment from &apos;moment&apos;</span><br><span class="line">Vue.filter(&apos;dataFormat&apos;,function(dataStr,pattern=&apos;YYYY-MM-DD HH-mm-ss&apos;)&#123;</span><br><span class="line">    return moment(dataStr).format(pattern)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在日期中后面加个管道符，然后加 dataFormat，就可以实现时间格式过滤了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;item.add_time|dataFormat&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/03/16/vue实战项目1/1553006264832.png" alt="1553006264832"></p>
<p>接下来就是制作新闻详情</p>
<hr>
<p>配置路由，在新闻列表中配置路由</p>
<p>然后在router.js添加路由，并创建相应的路由文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&apos;/home/newsList/newsinfo/&apos;+item.id&quot;&gt;&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">import newsinfo from &apos;./components/news/newsinfo.vue&apos;</span><br><span class="line"> &#123;path: &quot;/home/newslist/newsinfo/:id&quot;, component: newsinfo&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/16/vue实战项目1/1553006876936.png" alt="1553006876936"></p>
<p>接下来就是获取数据，写页面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">     &lt;div class=&quot;newsinfo-container&quot;&gt;</span><br><span class="line">        &lt;h1 class=&quot;title&quot;&gt;&#123;&#123;newsInfo.title&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;p class=&quot;subtitle&quot;&gt;</span><br><span class="line">            &lt;span&gt;创建时间： &#123;&#123;newsInfo.add_time | dataFormat&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;span&gt;点击&#123;&#123;newsInfo.click&#125;&#125;次&lt;/span&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot; v-html=&apos;newsInfo.content&apos;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;Toast&#125; from &apos;mint-ui&apos;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                id: this.$route.params.id,</span><br><span class="line">                newsInfo: &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created()&#123;</span><br><span class="line">            this.getNewsInfo()</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getNewsInfo()&#123;</span><br><span class="line">                this.axios.get(&apos;api/getnew/&apos;+this.id)</span><br><span class="line">                .then(result =&gt; &#123;</span><br><span class="line">                     if(result.data.status === 0)&#123;</span><br><span class="line">                           this.newsInfo = result.data.message[0] </span><br><span class="line">                       &#125;else&#123;</span><br><span class="line">                           Toast(&quot;获取新闻详情失败&quot;)</span><br><span class="line">                       &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&apos;scss&apos; scoped&gt;</span><br><span class="line"> .newsinfo-container&#123;</span><br><span class="line">        padding: 0 5px;</span><br><span class="line">        .title&#123;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin: 15px 0;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        .subtitle&#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: space-between;</span><br><span class="line">            font-size: 13px;</span><br><span class="line">            color: #226aff;</span><br><span class="line">        &#125;</span><br><span class="line">        .content&#123;</span><br><span class="line">            img&#123;</span><br><span class="line">                width: 100%;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>还差一个评论页面，由于很多地方都有用到评论，所以评论和评论列表，我们把它制作</p>
<p>成一个组件，名在叫做 comment.vue.</p>
<p>在components下新建一个文件夹subcomponents，然后在这个文件夹下创建一个</p>
<p>comment.vue  内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;这是评论组件&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>在newsinfo.vue上引用comment组件  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;comment-box&gt;&lt;<span class="regexp">/comment-box&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">import</span> comment <span class="keyword">from</span> <span class="string">'../subcomponents/comment.vue'</span></span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;&#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            <span class="string">"comment-box"</span>:comment</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/03/16/vue实战项目1/1553008528358.png" alt="1553008528358"></p>
<p>按钮使用 mint-ui 的button</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mt-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"large"</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">mt-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mt-button</span> <span class="attr">type</span>=<span class="string">"danger"</span> <span class="attr">size</span>=<span class="string">"large"</span> <span class="attr">plain</span>&gt;</span>加载更多<span class="tag">&lt;/<span class="name">mt-button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用到 mint-ui  所以得在main.js上引入，并导入组件。</p>
<h4 id="评论组件"><a href="#评论组件" class="headerlink" title="评论组件"></a>评论组件</h4><p>获取评论列表数据，渲染界面。</p>
<p>加载更多数据，页码+1，完成数组拼接 </p>
<p>发表评论，完成数组头部插入数据</p>
<p>axios post提交注意事项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Toast&#125; <span class="keyword">from</span> <span class="string">'mint-ui'</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                pageIndex: <span class="number">1</span>,</span><br><span class="line">                commentList: [],</span><br><span class="line">                content: <span class="string">''</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        props:[<span class="string">'id'</span>],</span><br><span class="line">        created()&#123;</span><br><span class="line">            <span class="keyword">this</span>.getCommentList()</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getCommentList()&#123;</span><br><span class="line">                <span class="keyword">this</span>.axios.get(<span class="string">'api/getcomments/'</span>+<span class="keyword">this</span>.id,&#123;</span><br><span class="line">                    params:&#123;</span><br><span class="line">                        pageindex: <span class="keyword">this</span>.pageIndex</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(result.data)</span><br><span class="line">                    <span class="keyword">if</span>(result.data.status === <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">this</span>.commentList = <span class="keyword">this</span>.commentList.concat(result.data.message) </span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        Toast(<span class="string">"请求失败"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            getMore()&#123;</span><br><span class="line">                <span class="keyword">this</span>.pageIndex++;</span><br><span class="line">                <span class="keyword">this</span>.getCommentList();</span><br><span class="line">            &#125;,</span><br><span class="line">            postComment()&#123;</span><br><span class="line">                <span class="keyword">this</span>.content = <span class="keyword">this</span>.content.trim()</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.content.length == <span class="number">0</span>)</span><br><span class="line">                     <span class="keyword">return</span> Toast(<span class="string">"请输入内容"</span>)</span><br><span class="line">              <span class="keyword">this</span>.axios.post(<span class="string">'api/postcomment/'</span>+<span class="keyword">this</span>.id,qs.stringify(&#123;<span class="string">"content"</span>:<span class="keyword">this</span>.content&#125;),</span><br><span class="line">              &#123;<span class="attr">headers</span>:&#123;</span><br><span class="line">                  <span class="string">'Content-Type'</span>: <span class="string">'application/X-www-form-urlencoded'</span></span><br><span class="line">              &#125;&#125;)</span><br><span class="line">                <span class="comment">// this.$http.post('api/postcomment/'+this.id,&#123;"content":this.content&#125;)</span></span><br><span class="line">                    .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span>(result.data.status === <span class="number">0</span>)&#123;</span><br><span class="line">                            <span class="keyword">var</span> cmt = &#123;</span><br><span class="line">                                user_name:<span class="string">'匿名用户'</span>,</span><br><span class="line">                                add_time: <span class="built_in">Date</span>.now(),</span><br><span class="line">                                content: <span class="keyword">this</span>.content</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">this</span>.commentList.unshift(cmt)</span><br><span class="line">                            <span class="keyword">this</span>.content = <span class="string">''</span></span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            Toast(<span class="string">"信息提交不成功"</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>需要引入qs，对 对象 进行转译</p>
<hr>
<h4 id="制作图片资讯"><a href="#制作图片资讯" class="headerlink" title="制作图片资讯"></a>制作图片资讯</h4><p>顶部采用MUI 的组件代码块，tab-top-webview-main.html，复制这个文件内有效内容</p>
<p>到我们的组件上，并修改样式。渲染完我们自己的顶部分类内容后，发现左右滑动不</p>
<p>了，原因是因为代码块内部有  .mui-scroll-wrapper类，要实现scroll滑动，还得去查看</p>
<p>官方文档关于 scroll的详细介绍</p>
<p><img src="/2019/03/16/vue实战项目1/1553396721135.png" alt="1553396721135"></p>
<p>在我们的组件上引用了如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mui <span class="keyword">from</span> <span class="string">'../../lib/mui/js/mui.min.js'</span></span><br><span class="line">mui(<span class="string">'.mui-scroll-wrapper'</span>).scroll(&#123;</span><br><span class="line">	deceleration: <span class="number">0.0005</span> <span class="comment">//flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>运行后发现报错，原因是因为引入的mui.js文件在严格模式下会出问题，所以我们要</p>
<p>不适用严格模式运行，所以引入插件 <code>babel-plugin-transform-remove-strict-mode</code></p>
<p><code>cnpm i babel-plugin-transform-remove-strict-mode -S</code></p>
<p>安装完成后在 .babelrc 文件上加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;transform-remove-strict-mode&quot;</span><br></pre></td></tr></table></figure>
<p>这样直接刷新的新闻资讯页面的时候就能滑动了，但是从其他地方跳转到新闻资讯后</p>
<p>左右滑动不了。原因是我们刚刚没有把scroll初始化放在Vue实例的生命周期函数中去，</p>
<p>因为我们是对界面渲染完后，才初始化的，所以得放在 mounted 上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">       mui(&apos;.mui-scroll-wrapper&apos;).scroll(&#123;</span><br><span class="line">      deceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<p>这时就ok了</p>
<p><img src="/2019/03/16/vue实战项目1/1553397958190.png" alt="1553397958190"></p>
<p>下面的图片展示采用 mint-ui的懒加载，按需引入mint-ui组件的话并没有懒加载效果</p>
<p>所以得引入全部的 mint-ui组件，还有就是懒加载使用方法看官方文档，经常更新</p>
<p>得给元素设置一个宽高。。。</p>
<p>商品购买界面  使用经典两列布局</p>
<p>商品详情界面  使用 mui 里面的 card 组件。</p>
<p>第一个轮播图，发现和home界面的轮播图相似，所以我们自己将轮播图封装起来，</p>
<p>在 subcomponents文件夹下新建一个swiper.vue的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">     &lt;mt-swipe :auto=&quot;4000&quot;&gt;</span><br><span class="line">        &lt;mt-swipe-item v-for=&apos;item in bannerList&apos; :key=&quot;item.img&quot;&gt;</span><br><span class="line">            &lt;img :src=&quot;item.img&quot; :class=&quot;&#123;&apos;full&apos;:isfull&#125;&quot; /&gt;</span><br><span class="line">        &lt;/mt-swipe-item&gt;</span><br><span class="line">    &lt;/mt-swipe&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        props:[&apos;bannerList&apos;,&quot;isfull&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">     .mint-swipe&#123;</span><br><span class="line">        height: 200px;</span><br><span class="line">        .mint-swipe-item&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            img&#123;</span><br><span class="line">                height: 100%;</span><br><span class="line">                &amp;.full&#123;</span><br><span class="line">                    width: 100%;</span><br><span class="line">                    height: 100%;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>因为首页的轮播图 宽高都是百分百，商品详情的轮播图是高百分百，宽自适应，所以</p>
<p>设置了一个full类，用来判断是否该全100%</p>
<p>下面的数量添加，采用 MUI的 numberbox组件。还是采用自己封装她，然后哪里需要</p>
<p>就哪里引入，由于这个box的组件又是得引入js，并初始化，所以还是得放在生命周期</p>
<p>上的mounted上初始化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">        &lt;div class=&quot;mui-numbox&quot; data-numbox-min=&apos;1&apos; &gt;</span><br><span class="line">            &lt;button class=&quot;mui-btn mui-btn-numbox-minus&quot; type=&quot;button&quot;&gt;-&lt;/button&gt;</span><br><span class="line">            &lt;input id=&quot;test&quot; @change=&apos;getSelectCount&apos;  ref=&apos;count&apos; class=&quot;mui-input-numbox&quot; type=&quot;number&quot; value=&quot;1&quot; /&gt;</span><br><span class="line">            &lt;button class=&quot;mui-btn mui-btn-numbox-plus&quot; type=&quot;button&quot;&gt;+&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import mui from &apos;../../lib/mui/js/mui.min.js&apos;</span><br><span class="line">    export default&#123;</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            mui(&apos;.mui-numbox&apos;).numbox()</span><br><span class="line">        &#125;,</span><br><span class="line">        props:[&apos;maxnum&apos;],</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getSelectCount()&#123;</span><br><span class="line">                this.$emit(&apos;func&apos;,parseInt(this.$refs.count.value))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;   //设置了max-box的最大数量，然而因为父组件的最大数量是通过请求得来的数据，</span><br><span class="line">                  //是异步的，所以max值会是undefined，但是最后max的值总会是我们想要的值，</span><br><span class="line">                  //所以采用watch监听属性值的变化，并渲染上去,查看mui的maxbox的js方法</span><br><span class="line">            maxnum: function(newVal, oldVal)&#123;</span><br><span class="line">                mui(&apos;.mui-numbox&apos;).numbox()</span><br><span class="line">                .setOption(&apos;max&apos;,newVal)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>由于要设置一个最大值等于库存量，所以得组件传值，将库存量的值传给组件，但是由</p>
<p>于库存量的值是通过请求得来的数据，属于异步操作，所以组件上的最大值一开始渲染</p>
<p>的时候是一个undefined，所以我们的使用watch 监听库存量的值，并使用js方法改变</p>
<p>最大值。因为迟早会请求到数据，所以使用watch监听数据改变。</p>
<p><img src="/2019/03/16/vue实战项目1/1553398911883.png" alt="1553398911883"></p>
<p>注意： 别以为这样就完事了，但是其实里面输入一个超过库存量的值，然后再点外面的</p>
<p>空白，虽然会里面的数值会变成库存量，但是里面的真实值其实是你输入的超过库存量</p>
<p>的值。</p>
<p><img src="/2019/03/16/vue实战项目1/1553399261538.png" alt="1553399261538"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getSelectCount(data)&#123;</span><br><span class="line">                  <span class="keyword">this</span>.selectCount = data</span><br><span class="line"></span><br><span class="line">                  <span class="built_in">console</span>.log(data)</span><br><span class="line">                  <span class="keyword">if</span>(<span class="keyword">this</span>.selectCount &gt; <span class="keyword">this</span>.goodsInfo.stock_quantity)</span><br><span class="line">                      <span class="keyword">this</span>.selectCount = <span class="keyword">this</span>.goodsInfo.stock_quantity</span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>后面的图文介绍，因为是使用 v-html 引入的，里面的表情并没有 scoped自己添加的那</p>
<p>样的自定义属性，所以标有 scoped属性 里面的样式，对 v-html 的样式是不起效果的。</p>
<p>所以引入了  deep</p>
<h3 id="deep深度多用选择器"><a href="#deep深度多用选择器" class="headerlink" title="deep深度多用选择器"></a>deep深度多用选择器</h3><p>deep 能够影响子元素的渲染，未采用 /deep/ 的时候</p>
<p><img src="/2019/03/16/vue实战项目1/1553399808871.png" alt="1553399808871"></p>
<p>采用/deep/的时候</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style lang='scss' scoped&gt;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.goods-desc</span>&#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">        <span class="selector-class">.title</span>&#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#226aff</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        /deep/ .content&#123;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">            <span class="selector-tag">img</span>&#123;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">                <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">                <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">p</span>&#123;</span><br><span class="line">                <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/16/vue实战项目1/1553399912141.png" alt="1553399912141"></p>
<p>另一种方法就是去掉  scoped属性，但是为了避免后期不必要的麻烦，还是尽量不要去</p>
<p>掉scoped，然后采用deep深度作用选择器，具体使用方法，查看官方文档</p>
<hr>
<p>接下来就是添加购物车  小球动画了</p>
<p> 实现原理：</p>
<ol>
<li><p>获取numbox中数量的位置1，底部菜单购物车徽章的位置2</p>
</li>
<li><p>让小球从位置1 以需要的贝赛尔曲线轨迹运动到位置2</p>
</li>
<li><p>由于每把手机的宽高比都不一样，所以得采用先获取位置，再定位。</p>
</li>
<li><p>由于mounted上理论上界面是都渲染好了，但是为了更精准点，我们延迟一秒后</p>
<p>再对小球进行定位</p>
<ol start="5">
<li>为了防止重复点击，影响小球效果，得让小球显示的时候禁止点击</li>
</ol>
</li>
</ol>
<p>在 文本框中输入一个小球的 div</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">       @before-enter=&quot;beforeEnter&quot;</span><br><span class="line">       @enter=&quot;enter&quot;</span><br><span class="line">       @after-enter=&quot;afterEnter&quot;&gt;</span><br><span class="line">           &lt;div class=&quot;ball&quot; ref=&quot;ball&quot; v-show=&quot;ballflag&quot;&gt;&lt;/div&gt;</span><br><span class="line">       &lt;/transition&gt;</span><br></pre></td></tr></table></figure>
<p>修改小球的样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ball</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">background</span>: red;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">z-index</span>: <span class="number">11</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>小球的位置获取到文本框的位置后再进行定位</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">               <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">               setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                   that.setBallposition()</span><br><span class="line">               &#125;,<span class="number">1000</span>)</span><br><span class="line">               <span class="comment">//使用一次性定时器，确保界面完全加载后再将小球定位</span></span><br><span class="line">               <span class="comment">//注意，定时器里面一定不能用this，得使用代称</span></span><br><span class="line">           &#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">     setBallposition()&#123;</span><br><span class="line">     		<span class="comment">//test 就是文本框的位置</span></span><br><span class="line">                   <span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line">            <span class="comment">//getBoundingClientRect 获取四个边的距离       </span></span><br><span class="line">                   <span class="keyword">const</span> testposition = test.getBoundingClientRect();</span><br><span class="line">                  <span class="keyword">this</span>.$refs.ball.style.top = (testposition.top+<span class="number">10</span>)+<span class="string">'px'</span>;</span><br><span class="line">                   <span class="keyword">this</span>.$refs.ball.style.left = (testposition.left+<span class="number">10</span>)+<span class="string">'px'</span>;</span><br><span class="line">               &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在添加购物车按钮中添加一个事件,并在data上定义一个isClick，防止重复点击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mt-button type=&apos;danger&apos; size=&quot;small&quot; palin @click=&quot;addshopcar&quot;&gt;加入购物车&lt;/mt-button&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> addshopcar()&#123;</span><br><span class="line">                        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="keyword">this</span>.isClick)&#123;</span><br><span class="line">                            Toast(<span class="string">"如果要大幅度更改数量可以直接在输入框修改数量"</span>)</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">this</span>.isClick = !<span class="keyword">this</span>.isClick</span><br><span class="line">                             setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                                that.isClick = !that.isClick</span><br><span class="line">                            &#125;,<span class="number">3000</span>)</span><br><span class="line">                             <span class="keyword">this</span>.ballflag = !<span class="keyword">this</span>.ballflag;</span><br><span class="line">                        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>定义动画</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeEnter(el)&#123;</span><br><span class="line">                   el.style.transform = <span class="string">"translate(0,0)"</span></span><br><span class="line">               &#125;,</span><br><span class="line">               enter(el,done)&#123;</span><br><span class="line">                   el.offsetWidth;</span><br><span class="line">                   <span class="keyword">const</span> badgeposition = <span class="built_in">document</span>.getElementById(<span class="string">"badge"</span>).getBoundingClientRect();</span><br><span class="line">                   <span class="keyword">const</span> ballposition = <span class="keyword">this</span>.$refs.ball.getBoundingClientRect();</span><br><span class="line">                   <span class="keyword">var</span> xdist = badgeposition.x - ballposition.x;</span><br><span class="line">                   <span class="keyword">var</span> ydist = badgeposition.y - ballposition.y;</span><br><span class="line">                   el.style.transform = <span class="string">`translate(<span class="subst">$&#123;xdist&#125;</span>px,<span class="subst">$&#123;ydist&#125;</span>px)`</span>;</span><br><span class="line">                   el.style.transition = <span class="string">'all 0.5s cubic-bezier(0.4,-0.3,1,.68)'</span></span><br><span class="line">                   done()</span><br><span class="line">               &#125;,</span><br><span class="line">               afterEnter(el)&#123;</span><br><span class="line">                   <span class="keyword">this</span>.ballflag =!<span class="keyword">this</span>.ballflag;</span><br><span class="line">               &#125;,</span><br></pre></td></tr></table></figure>
<hr>
<p>接下来就是购物车使用 vuex 的部分了</p>
<p>安装 vuex， <code>cnpm i vuex -S</code></p>
<p>在main.js 中引入 vuex</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        car: []</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在实例上挂载store</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;&#125;,</span><br><span class="line">    store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>由于后期会写很多方法和数据在 store里面，所以新建一个 store.js</p>
<p>的文件，在里面书写 store</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store.js'</span></span><br><span class="line"><span class="comment">//在实例上挂载store</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;&#125;,</span><br><span class="line">    store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//store.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">var</span> car = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'car'</span>) || <span class="string">'[]'</span>)</span><br><span class="line"><span class="keyword">var</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">	state:&#123; <span class="comment">//this.$store.state</span></span><br><span class="line">		car: car</span><br><span class="line">	&#125;,</span><br><span class="line">	mutations:&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;,</span><br><span class="line">	getters:&#123; <span class="comment">//this.$store.getters.方法名称</span></span><br><span class="line">			</span><br><span class="line">		</span><br><span class="line">	&#125;	</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure>
<p>第一步：点击加入购物车按钮</p>
<ol>
<li>组建一个对象，包括 id，数量,价格，是否选中；</li>
<li>调用store中mutations中加入购物车的方法</li>
<li>这个方法是存储购物车的</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addToCar(state,goodsinfo)&#123;   <span class="comment">//this.$store.commit("方法名称"，一个参数)</span></span><br><span class="line">			<span class="comment">//点击加入购物车，把商品信息保存到store中的car中</span></span><br><span class="line">			<span class="comment">//分析：</span></span><br><span class="line">			<span class="comment">//1. 如果购物车中，之前就已经有这个对应的商品了，那么只需要更新数量</span></span><br><span class="line">			<span class="comment">//2. 如果没有，则直接把商品数据，push到car中即可</span></span><br><span class="line">			<span class="keyword">var</span> flag = <span class="literal">false</span></span><br><span class="line">			state.car.some(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(item.id == goodsinfo.id)&#123;</span><br><span class="line">					flag = <span class="literal">true</span></span><br><span class="line">					item.count += <span class="built_in">parseInt</span>(goodsinfo.count)</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">			<span class="comment">//如果最终循环完毕，得到的flag还是false，则把商品直接push到购物车中</span></span><br><span class="line">			<span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">				state.car.push(goodsinfo)</span><br><span class="line">			&#125;</span><br><span class="line">			localStorage.setItem(<span class="string">'car'</span>,<span class="built_in">JSON</span>.stringify(state.car))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getters:&#123; <span class="comment">//this.$store.getters.方法名称</span></span><br><span class="line">			getCount:<span class="function"><span class="keyword">function</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> c = <span class="number">0</span>;</span><br><span class="line">				state.car.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">					c += item.count</span><br><span class="line">				&#125;);</span><br><span class="line">				<span class="keyword">return</span> c</span><br><span class="line">			&#125;,</span><br><span class="line">			getGoodsCount:<span class="function"><span class="keyword">function</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> s = &#123;&#125;;</span><br><span class="line">				state.car.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">					s[item.id] = item.count</span><br><span class="line">				&#125;)</span><br><span class="line">				<span class="keyword">return</span> s</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>application</tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目实战1</title>
    <url>/2019/03/16/vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%981/</url>
    <content><![CDATA[<h4 id="开发一个vue应用"><a href="#开发一个vue应用" class="headerlink" title="开发一个vue应用"></a>开发一个vue应用</h4><p>拿到之前配置好的文件，文件目录如下</p>
<blockquote>
<p>application</p>
<blockquote>
<p>/dist</p>
<blockquote>
<p>bundle.js</p>
</blockquote>
<p>/src</p>
<blockquote>
<p>/lib</p>
<blockquote>
<p>/mui</p>
<blockquote>
<p>/css</p>
<blockquote>
<p>mui.css</p>
<p>mui.min.css</p>
</blockquote>
<p>/fonts</p>
<blockquote>
<p>mui.ttf</p>
</blockquote>
<p>/js</p>
<blockquote>
<p>mui.js</p>
<p>mui.min.js</p>
</blockquote>
</blockquote>
</blockquote>
<p>app.vue</p>
<p>index.html</p>
<p>main.js</p>
<p>router.js</p>
</blockquote>
<p>.babelrc</p>
<p>.gitnore</p>
<p>LICENSE</p>
<p>package-lock.json</p>
<p>package.json</p>
<p>readme.md</p>
<p>webpack.config.js</p>
</blockquote>
</blockquote>
<p>配置文件如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">package.json文件</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"webpack-study2"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack-dev-server --open --port 3000  --hot"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"bootstrap"</span>: <span class="string">"^3.3.7"</span>,</span><br><span class="line">    <span class="attr">"jquery"</span>: <span class="string">"^3.3.1"</span>,</span><br><span class="line">    <span class="attr">"mint-ui"</span>: <span class="string">"^2.2.13"</span>,</span><br><span class="line">    <span class="attr">"vue"</span>: <span class="string">"^2.6.8"</span>,</span><br><span class="line">    <span class="attr">"vue-resource"</span>: <span class="string">"^1.5.1"</span>,</span><br><span class="line">    <span class="attr">"vue-router"</span>: <span class="string">"^3.0.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-core"</span>: <span class="string">"^6.26.3"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^7.1.5"</span>,</span><br><span class="line">    <span class="attr">"babel-plugin-component"</span>: <span class="string">"^1.1.1"</span>,</span><br><span class="line">    <span class="attr">"babel-plugin-transform-runtime"</span>: <span class="string">"^6.23.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-env"</span>: <span class="string">"^1.7.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-stage-0"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="attr">"css-loader"</span>: <span class="string">"^2.1.1"</span>,</span><br><span class="line">    <span class="attr">"file-loader"</span>: <span class="string">"^3.0.1"</span>,</span><br><span class="line">    <span class="attr">"html-webpack-plugin"</span>: <span class="string">"^3.2.0"</span>,</span><br><span class="line">    <span class="attr">"less"</span>: <span class="string">"^3.9.0"</span>,</span><br><span class="line">    <span class="attr">"less-loader"</span>: <span class="string">"^4.1.0"</span>,</span><br><span class="line">    <span class="attr">"node-sass"</span>: <span class="string">"^4.11.0"</span>,</span><br><span class="line">    <span class="attr">"sass-loader"</span>: <span class="string">"^7.1.0"</span>,</span><br><span class="line">    <span class="attr">"style-loader"</span>: <span class="string">"^0.23.1"</span>,</span><br><span class="line">    <span class="attr">"url-loader"</span>: <span class="string">"^1.1.2"</span>,</span><br><span class="line">    <span class="attr">"vue-loader"</span>: <span class="string">"^15.7.0"</span>,</span><br><span class="line">    <span class="attr">"vue-template-compiler"</span>: <span class="string">"^2.6.8"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.29.6"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.2.3"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^3.2.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">webpack.config.js文件</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//启用热更新的第二步</span></span><br><span class="line"><span class="comment">//const webpack = require("webpack")</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>) <span class="comment">// vue-loader@15以上的要用这个</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	entry: path.join(__dirname,<span class="string">'./src/main.js'</span>),</span><br><span class="line">	output:&#123;</span><br><span class="line">		path: path.join(__dirname,<span class="string">'./dist'</span>), <span class="comment">//指定打包好的文件输出到哪个目录去</span></span><br><span class="line">		filename: <span class="string">'bundle.js'</span>  <span class="comment">//指定 输出文件的名称</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="comment">// devServer: &#123;  //这是配置 dev-server 命令参数的第二种形式，相对来说，这首方式麻烦一些</span></span><br><span class="line">	<span class="comment">// 	// --open --port 3000 --contentBase src --hot</span></span><br><span class="line">	<span class="comment">// 	open: true,  //自动打开浏览器</span></span><br><span class="line">	<span class="comment">// 	port: 3000,   //设置启动时候的运行端口</span></span><br><span class="line">	<span class="comment">// 	contentBase: 'src',  //指定托管的根目录</span></span><br><span class="line">	<span class="comment">// 	hot: true   //启用热更新的第一步</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// &#125;,</span></span><br><span class="line">	plugins: [  <span class="comment">//配置插件的节点n</span></span><br><span class="line">		<span class="comment">//new webpack.HotModuleReplacementPlugin()   //new 一个热更新的模块对象，这是 启用热更新的第三步</span></span><br><span class="line">		<span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">			template: path.join(__dirname,<span class="string">"src/index.html"</span>),   <span class="comment">//指定 模板页面，将来会根据指定的页面路径，去生成内存中的页面</span></span><br><span class="line">			filename: <span class="string">"index.html"</span>  <span class="comment">//指定生成的页面的名称</span></span><br><span class="line">		&#125;),</span><br><span class="line">		<span class="keyword">new</span> VueLoaderPlugin() <span class="comment">//vue-loader@15以上的要用这个</span></span><br><span class="line">	],</span><br><span class="line">	<span class="built_in">module</span>:&#123;   <span class="comment">//这个节点用来配置所有第三方模块加载器</span></span><br><span class="line">		rules:[  <span class="comment">//所有第三方模块的规则</span></span><br><span class="line">			&#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]&#125; , <span class="comment">//配置处理.css文件的第三方loader规则</span></span><br><span class="line">			&#123;<span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'less-loader'</span>]&#125; , <span class="comment">//配置处理 .less的第三方loader规则</span></span><br><span class="line">			&#123;<span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'sass-loader'</span>]&#125; ,<span class="comment">//配置处理 .scss的第三方loader规则</span></span><br><span class="line">			&#123;<span class="attr">test</span>: <span class="regexp">/\.(jpg|jpeg|png|gif|bmp)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader?limit=9435'</span>&#125; ,<span class="comment">//配置处理图片 的第三方loader规则</span></span><br><span class="line">			&#123;<span class="attr">test</span>: <span class="regexp">/\.(ttf|eot|svg|woff|woff2|otf)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader'</span>&#125; , <span class="comment">//配置处理 字体的第三方loader规则</span></span><br><span class="line">			&#123;<span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">use</span>: <span class="string">'babel-loader'</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>&#125;, <span class="comment">//配置处理 babel的第三方loader规则</span></span><br><span class="line">			&#123;<span class="attr">test</span>: <span class="regexp">/\.vue$/</span>, <span class="attr">use</span>: <span class="string">'vue-loader'</span>&#125;			<span class="comment">//配置处理 vue的第三方loader规则</span></span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">	resolve:&#123;</span><br><span class="line">		alias:&#123;  <span class="comment">//修改vue被引入时的包的路径，相当于给 绝对路径 弄个 好看的简称</span></span><br><span class="line">			<span class="comment">//"vue$": "vue/dist/vue.js",  //  前者是后者的简称</span></span><br><span class="line">			<span class="string">"bootstrap$"</span>: <span class="string">"bootstrap/dist/css/bootstrap.css"</span>  <span class="comment">//前者是后者的简称</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		同项目根目录上的package.json文件一样，我们在里面的script节点上配置了</span></span><br><span class="line"><span class="comment">		"dev": "webpack-dev-server"</span></span><br><span class="line"><span class="comment">		这样我们就可以使用 cnpm run dev 代替 cpm run webpack-dev-server了</span></span><br><span class="line"><span class="comment">		前者就是后者的简称，就是后者的替代</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.bbabelrc 文件</span><br><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [&quot;env&quot;, &quot;stage-0&quot;],</span><br><span class="line">    &quot;plugins&quot;: [&quot;transform-runtime&quot;, [&quot;component&quot;, [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;libraryName&quot;: &quot;mint-ui&quot;,</span><br><span class="line">        &quot;style&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    ]]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.gitignore文件</span><br><span class="line"></span><br><span class="line">node_modules</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">.git</span><br></pre></td></tr></table></figure>
<p>LICENSE文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The MIT License (MIT)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2014 connors and other contributors</span><br><span class="line"></span><br><span class="line">Permission is hereby granted, free of charge, to any person obtaining a copy of</span><br><span class="line">this software and associated documentation files (the &quot;Software&quot;), to deal in</span><br><span class="line">the Software without restriction, including without limitation the rights to</span><br><span class="line">use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of</span><br><span class="line">the Software, and to permit persons to whom the Software is furnished to do so,</span><br><span class="line">subject to the following conditions:</span><br><span class="line"></span><br><span class="line">The above copyright notice and this permission notice shall be included in all</span><br><span class="line">copies or substantial portions of the Software.</span><br><span class="line"></span><br><span class="line">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span><br><span class="line">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS</span><br><span class="line">FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR</span><br><span class="line">COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER</span><br><span class="line">IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN</span><br><span class="line">CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>application</tag>
      </tags>
  </entry>
  <entry>
    <title>将代码上传到码云</title>
    <url>/2019/03/16/%E5%B0%86%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0%E5%88%B0%E7%A0%81%E4%BA%91/</url>
    <content><![CDATA[<h4 id="如何将本地代码上传到码云"><a href="#如何将本地代码上传到码云" class="headerlink" title="如何将本地代码上传到码云"></a>如何将本地代码上传到码云</h4><p><a href="https://gitee.com/" target="_blank" rel="noopener">登陆码云，注册登录</a></p>
<p>点击头像 -&gt; 修改资料 -&gt; SSH公钥 <a href="http://git.mydoc.io/?t=154712" target="_blank" rel="noopener">如何生成SSH公钥</a></p>
<p>创建自己的空仓储，</p>
<p><img src="/2019/03/16/将代码上传到码云/1552715301824.png" alt="1552715301824"></p>
<p>创建完会有如下图所示<img src="/2019/03/16/将代码上传到码云/1552714560417.png" alt="1552714560417"></p>
<p>使用 <code>git config --global user.name &quot;用户名&quot;</code> 和 <code>git config --global user.email ***@**.com</code> 来全局配置提交时用户的名称和邮箱</p>
<ol>
<li><p>创建一个 .gitignore 的文件  //项目忽略文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.gitignore文件内容</span><br><span class="line"></span><br><span class="line">node_modules</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个 readme.md文件，对项目进行描述</p>
</li>
<li><p>复制一份license文件</p>
</li>
</ol>
<p>文件目录如下</p>
<p><img src="/2019/03/16/将代码上传到码云/1552712999092.png" alt="1552712999092"></p>
<ol start="4">
<li><p>在项目根目录下  <code>git init</code> 一下，创建一个本地电脑的仓库，这样就在根目录上创建了一个.git的隐藏文件<img src="/2019/03/16/将代码上传到码云/1552713222814.png" alt="1552713222814"></p>
</li>
<li><p>查看文件状态 执行 <code>git status</code> <img src="/2019/03/16/将代码上传到码云/1552713441474.png" alt="1552713441474"></p>
</li>
<li>执行 <code>git add .</code> 将这些文件放到 .git本地仓库中的暂存区，再执行<code>git status</code> 查看状态<img src="/2019/03/16/将代码上传到码云/1552713658066.png" alt="1552713658066"></li>
<li>将暂存区的文件提交到 本地仓库 .git 中,执行<code>git commit -m &quot;提交时候的备注&quot;</code><img src="/2019/03/16/将代码上传到码云/1552713882159.png" alt="1552713882159"></li>
<li><p>查看现在的状态 <code>git status</code>  <img src="/2019/03/16/将代码上传到码云/1552714060397.png" alt="1552714060397"></p>
</li>
<li><p>将本地仓库上传到码云中，执行<code>git push -u origin master</code></p>
</li>
</ol>
<p><a href="https://blog.csdn.net/ezconn/article/details/81872785" target="_blank" rel="noopener">android studio git 提取项目Authentication failed 和Incorrect username or password ( access token )的问题</a></p>
<p><img src="/2019/03/16/将代码上传到码云/1552716444658.png" alt="1552716444658"></p>
<p>在 vscode 编辑器上，将代码同步到码云</p>
<p><img src="/2019/03/16/将代码上传到码云/1552717454570.png" alt="1552717454570"></p>
<p><img src="/2019/03/16/将代码上传到码云/1552717651260.png" alt="1552717651260"></p>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>mint-UI与MUI的基本使用</title>
    <url>/2019/03/15/mint-UI%E4%B8%8EMUI%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="mint-UI的使用"><a href="#mint-UI的使用" class="headerlink" title="mint-UI的使用"></a>mint-UI的使用</h4><p> mint-ui是基于vue的前端组件库</p>
<p><a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="noopener">Github 仓储地址</a></p>
<p><a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">Mint-UI官方文档</a></p>
<p><a href="https://www.cnblogs.com/smallteeth/p/6901610.html" target="_blank" rel="noopener">mint-ui文档</a></p>
<p>mint-UI特性</p>
<ul>
<li>Mint UI 包含丰富的 CSS 和 JS 组件，能够满足日常的移动端开发需要。通过它，可以快速构建出风格统一的页面，提升开发效率。</li>
<li>真正意义上的按需加载组件。可以只加载声明过的组件及其样式文件，无需再纠结文件体积过大。</li>
<li>考虑到移动端的性能门槛，Mint UI 采用 CSS3 处理各种动效，避免浏览器进行不必要的重绘和重排，从而使用户获得流畅顺滑的体验。</li>
<li>依托 Vue.js 高效的组件化方案，Mint UI 做到了轻量化。即使全部引入，压缩后的文件体积也仅有 ~30kb (JS + CSS) gzip。</li>
</ul>
<h1 id="Mint-UI中导入所有组件的配置方式"><a href="#Mint-UI中导入所有组件的配置方式" class="headerlink" title="Mint-UI中导入所有组件的配置方式"></a>Mint-UI中导入所有组件的配置方式</h1><ol>
<li>安装mint-ui <code>cnpm i mint-ui -S</code></li>
<li><p>在main.js上导入 <code>import MintUi from &quot;mint-ui&quot;mint-ui</code></p>
</li>
<li><p>引入mint-ui样式  <code>import &#39;mint-ui/lib/style.css&#39;</code></p>
</li>
<li><p>在Vue中安装 MintUi <code>Vue.use(MintUi)</code></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意： mint-ui是基于vue的，前提是有安装vue，并引入vue</span><br></pre></td></tr></table></figure>
<p>然后在组建上使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mt-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"large"</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">mt-button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就可以使用mint-ui的组件了</p>
<h3 id="Mint-UI中按需导入组件的配置方式"><a href="#Mint-UI中按需导入组件的配置方式" class="headerlink" title="Mint-UI中按需导入组件的配置方式"></a>Mint-UI中按需导入组件的配置方式</h3><ol>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">按需导入需要借助 babel-plugin-component</span><br><span class="line">1. cnpm install babel-plugin-component -D</span><br><span class="line">2. 安装好之后，将.babelrc 文件 添加一个plugin</span><br><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;env&quot;, &quot;stage-0&quot;],</span><br><span class="line">  &quot;plugins&quot;: [&quot;transform-runtime&quot;, [&quot;component&quot;, [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;libraryName&quot;: &quot;mint-ui&quot;,</span><br><span class="line">      &quot;style&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  ]]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">按需导入mint-ui组件</span><br><span class="line"></span><br><span class="line">import &#123; button &#125; from &apos;mint-ui&apos;  //这里以button为例子</span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加到vue组件上</span><br><span class="line">Vue.component(button.name,button)  //button.name就是 mt-button,也可以自定义</span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在页面上使用</span><br><span class="line">&lt;mt-button type=&quot;danger&quot; size=&quot;large&quot;&gt;primary&lt;/mt-button&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="介绍MUI代码块"><a href="#介绍MUI代码块" class="headerlink" title="介绍MUI代码块"></a>介绍MUI代码块</h2><blockquote>
<p>注意： MUI 不同于 Mint-UI，MUI只是开发出来的一套好用的代码片段，里面提供了配套的样式、配套的HTML代码段，类似于 Bootstrap； 而 Mint-UI，是真正的组件库，是使用 Vue 技术封装出来的 成套的组件，可以无缝的和 VUE项目进行集成开发；<br>因此，从体验上来说， Mint-UI体验更好，因为这是别人帮我们开发好的现成的Vue组件；<br>从体验上来说， MUI和Bootstrap类似；<br>理论上，任何项目都可以使用 MUI 或 Bootstrap，但是，MInt-UI只适用于Vue项目；</p>
</blockquote>
<p>注意： MUI 并不能使用  npm 去下载，需要自己手动从 github 上，下载现成的包，自己解压出来，然后手动拷贝到项目中使用；</p>
<h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><ol>
<li><p><img src="/2019/03/15/mint-UI与MUI的基本使用/1552641665702.png" alt="1552641665702"></p>
</li>
<li><p><img src="/2019/03/15/mint-UI与MUI的基本使用/1552642049709.png" alt="1552642049709"></p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">导入MUI的样式表</span><br><span class="line">//用法与使用bootstrap一样，只不过bootstrap是通过npm下载的，存放目录不一样</span><br><span class="line">import &apos;./lib/mui/css/mui.min.css&apos;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据官方提供的文档和example，尝试使用相关的组件</p>
</li>
<li><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--如：button的使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"mui-btn"</span>&gt;</span>默认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"mui-btn mui-btn-primary"</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"mui-btn mui-btn-success"</span>&gt;</span>绿色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"mui-btn mui-btn-warning"</span>&gt;</span>黄色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"mui-btn mui-btn-danger"</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"mui-btn mui-btn-royal"</span>&gt;</span>紫色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>MUI的使用，查看example，复制代码，然后检查需要的类，如果复制后代码没有效果的，查看example的源代码，看看是否引入了哪些样式我们没有引入的，然后把缺少的样式文件引入，最后根据错误提示，补缺补漏。</p>
<p>【参考】</p>
<p><a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="noopener">MUI官网</a></p>
<p><a href="http://dev.dcloud.net.cn/mui/ui/" target="_blank" rel="noopener">MUI文档</a></p>
<p><a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="noopener">mint-ui</a></p>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>mint-UI</tag>
        <tag>MUI</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack使用（二）</title>
    <url>/2019/03/13/webpack%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h4 id="import引包规则"><a href="#import引包规则" class="headerlink" title="import引包规则"></a>import引包规则</h4><ol>
<li><p>安装vue 包，<code>cnpm i vue -S</code></p>
</li>
<li><p>在main.js上引入包<code>import Vue from “vue”</code></p>
</li>
<li><p>在index.html界面导入<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code></p>
</li>
<li><p>在main.js里面写上vue的基本结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">var</span> vm = Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg: <span class="string">"你好"</span></span><br><span class="line">    &#125;，</span><br><span class="line">    methods:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>cnpm run dev</code>  执行项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">页面报错如下</span><br><span class="line">[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.</span><br></pre></td></tr></table></figure>
<p>这让我们引入思考，为什么传统vue网页在页面上使用script标签引入vue包就可以实现呢，而 <code>import Vue from “vue”</code>不行呢？</p>
<p>引入了 import 的引包规则。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//import的引包规则 同 nodejs中require的引包规则完全一样，就语法不一样</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>   <span class="comment">//这是import引包方式</span></span><br><span class="line"><span class="keyword">var</span> Vue = <span class="built_in">require</span>(<span class="string">"Vue"</span>)  <span class="comment">//这是require的引包方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两者具有相同的引包规则</span></span><br><span class="line"><span class="comment">//1.找项目根目录中有没有 node_modules的文件夹</span></span><br><span class="line"><span class="comment">//2.在node_modules 中根据包名，找对应的 vue文件夹</span></span><br><span class="line"><span class="comment">//3.在vue文件夹中，找一个叫做package.json的配置文件</span></span><br><span class="line"><span class="comment">//4.在package.json文件中，查找一个main属性[main属性指定了这个包在被加载时候的入口文件]</span></span><br></pre></td></tr></table></figure>
<p>根据引包规则，查找我们的<code>import Vue from “vue”</code> 引用的是哪个包。</p>
<p><img src="/2019/03/13/webpack使用（二）/1552494857856.png" alt="1552494857856"></p>
<p>打开package.json文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package.json 文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"vue"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"2.6.8"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Reactive, component-oriented view layer for modern web interfaces."</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"dist/vue.runtime.common.js"</span>,</span><br><span class="line">  <span class="string">"module"</span>: <span class="string">"dist/vue.runtime.esm.js"</span>,</span><br><span class="line">  <span class="string">"unpkg"</span>: <span class="string">"dist/vue.js"</span>,</span><br><span class="line">  <span class="string">"jsdelivr"</span>: <span class="string">"dist/vue.js"</span>,</span><br><span class="line">  <span class="string">"typings"</span>: <span class="string">"types/index.d.ts"</span>,</span><br><span class="line">  <span class="string">"files"</span>: [</span><br><span class="line">    <span class="string">"src"</span>,</span><br><span class="line">    <span class="string">"dist/*.js"</span>,</span><br><span class="line">    <span class="string">"types/*.d.ts"</span></span><br><span class="line">  ],<span class="comment">//后面省略</span></span><br></pre></td></tr></table></figure>
<p>我们发现main指定的文件是一个叫做<code>vue.runtime.common.js</code>的文件，所以导致我们运行时不能正常运行。因为这不是一个齐全的vue包。</p>
<p><img src="/2019/03/13/webpack使用（二）/1552495228833.png" alt="1552495228833"></p>
<p>知道是因为我们引的包不是我们真正要引入的包后，我们要如何才能引入想要的包呢？</p>
<p>办法有三种</p>
<ol>
<li><p>直接使用 路径方式，访问到那个vue.js的包</p>
<p><code>import Vue from &quot;../node_modules/vue/dist/vue.js&quot;</code></p>
<p>node_modules可以省略，在<a href="https://shenxiaobu.github.io/2019/03/05/webpack%E4%BD%BF%E7%94%A8/">webpack的基本使用</a>已经解释过</p>
<p><code>import Vue from &quot;vue/dist/vue.js&quot;</code></p>
<p>但是这样子不够华丽，不推荐使用</p>
</li>
<li><p>修改vue包里面的package.json文件里面的main属性</p>
<p><code>&quot;main&quot;: &quot;dist/vue.runtime.common.js&quot;,</code></p>
<p>修改为<code>&quot;main&quot;: &quot;dist/vue.js&quot;,</code></p>
<p>修改了安装包，强烈不推荐使用</p>
</li>
<li><p>在webpack.config.js配置文件中添加resolve属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js文件下</span></span><br><span class="line">resolve: &#123;</span><br><span class="line">   alias:&#123;  <span class="comment">//修改vue被引入时的包的路径，相当于给 绝对路径 弄个 好看的简称</span></span><br><span class="line">			<span class="string">"vue$"</span>: <span class="string">"vue/dist/vue.js"</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">		同项目根目录上的package.json文件一样，我们在里面的script节点上配置了</span></span><br><span class="line"><span class="comment">		"dev": "webpack-dev-server"</span></span><br><span class="line"><span class="comment">		这样我们就可以使用 cnpm run dev 代替 cpm run webpack-dev-server了</span></span><br><span class="line"><span class="comment">		前者就是后者的简称，就是后者的替代</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js文件</span></span><br><span class="line"><span class="comment">//还是采用华丽的引包方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br></pre></td></tr></table></figure>
<p>以上三种方式都能完成，第三种方式由于修改了配置文件，所以需要重启项目才能看到效果。效果如下</p>
<p><img src="/2019/03/13/webpack使用（二）/1552496412525.png" alt="1552496412525"></p>
</li>
</ol>
<p>通过这里我们了解到了webpack.config.js配置文件还有配置入口文件目录的功能，我们是否可以对我们前面引用过的bootstrap也进行同样配置呢？</p>
<p>因为我们之前引入bootstrap的方式是采用路径的方式</p>
<p><code>import &quot;bootstrap/dist/css/bootstrap.css&quot;</code></p>
<p>这样子并不华丽，我们能否也变成</p>
<p><code>import “bootstrap”</code></p>
<p>和前面引入jquery还有vue一样呢？</p>
<p>jquery为什么不用配置也可以直接 <code>import $ from &quot;jquery&quot;</code> 呢？</p>
<p>查看jquery包的package.json文件中的main属性指向路径</p>
<p><code>&quot;main&quot;: &quot;dist/jquery.js&quot;,</code></p>
<p><img src="/2019/03/13/webpack使用（二）/1552497178187.png" alt="1552497178187"></p>
<p>继续聊bootstrap，在main.js文件中直接使用</p>
<p><code>import &quot;bootstrap&quot;</code>看看会报什么错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transition.js:59 Uncaught ReferenceError: jQuery is not defined</span><br><span class="line">    at eval (transition.js:59)</span><br><span class="line">    at Object../node_modules/_bootstrap@3.4.1@bootstrap/js/transition.js (bundle.js:971)</span><br><span class="line">    at __webpack_require__ (bundle.js:724)</span><br><span class="line">    at fn (bundle.js:101)</span><br><span class="line">    at eval (npm.js:2)</span><br><span class="line">    at Object../node_modules/_bootstrap@3.4.1@bootstrap/dist/js/npm.js (bundle.js:839)</span><br><span class="line">    at __webpack_require__ (bundle.js:724)</span><br><span class="line">    at fn (bundle.js:101)</span><br><span class="line">    at eval (main.js:17)</span><br><span class="line">    at Object../src/main.js (bundle.js:1446)</span><br></pre></td></tr></table></figure>
<p>直接报错了，很明显，我们查看下bootstrap包的package.json文件中main的属性指向哪个文件。</p>
<p><code>&quot;main&quot;: &quot;./dist/js/npm&quot;,</code>指向js/npm文件，有点可怕</p>
<p>接下来，我们通过配置webpack.config.js文件中的resolves属性下的alias属性，看看是否能够成功。</p>
<p>配置如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resolve:&#123;</span><br><span class="line">		alias:&#123;  <span class="comment">//修改vue被引入时的包的路径，相当于给 绝对路径 弄个 好看的简称</span></span><br><span class="line">			<span class="string">"vue$"</span>: <span class="string">"vue/dist/vue.js"</span>,  <span class="comment">//  前者是后者的简称</span></span><br><span class="line">			<span class="string">"bootstrap$"</span>: <span class="string">"bootstrap/dist/css/bootstrap.css"</span>  <span class="comment">//前者是后者的简称</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		同项目根目录上的package.json文件一样，我们在里面的script节点上配置了</span></span><br><span class="line"><span class="comment">		"dev": "webpack-dev-server"</span></span><br><span class="line"><span class="comment">		这样我们就可以使用 cnpm run dev 代替 cpm run webpack-dev-server了</span></span><br><span class="line"><span class="comment">		前者就是后者的简称，就是后者的替代</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>由于修改了webpack.config.js配置文件，所以重启项目，看看是否可以。我觉得可以，no problem。</p>
<p>关闭项目，重启</p>
<p><img src="/2019/03/13/webpack使用（二）/1552498449592.png" alt="1552498449592"></p>
<p>和想象的差不多，完全没问题，ok，就到这里，转眼已经是凌晨01：35了，该睡觉了，知识学不完的。晚安</p>
<hr>
<p>继续上面的案例</p>
<p>上面说到了<code>import Vue from &#39;vue&#39;</code>如果不配置webpack.config.js的话，引用的包是一个vue.runtime.common.js 的包。这个包并不能实现像网页那样一个齐全的功能，只提供了runtime-only的方式，并没有像网页上那样的使用方式。</p>
<p>那么这个包是怎么用呢？</p>
<p>我们把之前对webpackage.config.js关于resolve的配置去除掉vue部分，这样我们引用的vue就是这个runtime-only的方式了</p>
<p>去掉之后运行项目，毫无疑问报错了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.</span><br></pre></td></tr></table></figure>
<p>所以引入.vue文件，runtime-only编译形式能够对.vue 文件有效。</p>
<p>在src目录下新建一个 login.vue的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;&lt;/template&gt;</span><br><span class="line">&lt;script&gt;&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>这是.vue文件的目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">login.vue文件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h5&gt;这是&#123;&#123;msg&#125;&#125;登陆组件&lt;/h5&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    // 注意：组件中的 data 必须是 function</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;xiaobu&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    show() &#123;</span><br><span class="line">      console.log(&quot;调用了 login.vue 中的 show 方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">	h5&#123;</span><br><span class="line">		color: red;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>在main.js文件上引入组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./css/index.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./css/index.less'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./css/index.scss'</span></span><br><span class="line"><span class="comment">// import 'bootstrap/dist/css/bootstrap.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"bootstrap"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">'li:odd'</span>).css(<span class="string">'backgroundColor'</span>,<span class="string">'red'</span>)</span><br><span class="line">	$(<span class="string">'li:even'</span>).css(<span class="string">'backgroundColor'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'#'</span>+<span class="string">'123336'</span></span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> info = &#123;<span class="attr">name</span>: <span class="string">"xiaobu"</span>,<span class="attr">age</span>: <span class="number">24</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue/dist/vue.js"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*先安装 vue-loader,vue-template-compiler</span></span><br><span class="line"><span class="comment">然后在 webpack.config.js 配置</span></span><br><span class="line"><span class="comment">const VueLoaderPlugin = require('vue-loader/lib/plugin') // vue-loader@15以上的要用这个</span></span><br><span class="line"><span class="comment">plugins: [  //配置插件的节点n</span></span><br><span class="line"><span class="comment">		new VueLoaderPlugin() //vue-loader@15以上的要用这个</span></span><br><span class="line"><span class="comment">	],</span></span><br><span class="line"><span class="comment">	module:&#123;   //这个节点用来配置所有第三方模块加载器</span></span><br><span class="line"><span class="comment">	&#123;test: /\.vue$/, use: 'vue-loader'&#125;			//配置处理 vue的第三方loader规则</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">"./login.vue"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	el: <span class="string">"#app"</span>,</span><br><span class="line">	data:&#123;</span><br><span class="line">		msg: <span class="string">"你好?"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	methods:&#123;&#125;,</span><br><span class="line"><span class="comment">// components:&#123;</span></span><br><span class="line"><span class="comment">// 		// "login":&#123;</span></span><br><span class="line"><span class="comment">// 		// 	template: "&lt;h1&gt;你好&lt;/h1&gt;"</span></span><br><span class="line"><span class="comment">// 		// &#125;</span></span><br><span class="line"><span class="comment">// 		login</span></span><br><span class="line"><span class="comment">// 	&#125;</span></span><br><span class="line">	<span class="comment">/*render: function(createElement)&#123;  //会把这个#app的内容都替换掉</span></span><br><span class="line"><span class="comment">		return createElement(login)</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	render: <span class="function"><span class="params">c</span> =&gt;</span> c(login)   <span class="comment">//上面的简写</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>遇到的自己挖的坑，在配置loader的时候，没写好，弄了半天硬是不行。</p>
<p>一开始是因为vue-loader版本过高，后来知道是V15的版本必须加上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">"vue/lib/plugin"</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    plugins:[</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">],</span><br><span class="line">	<span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;<span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,<span class="attr">use</span>: <span class="string">"vue-loader"</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的配置就是正确的配置</p>
<p>但是就是因为自己的一时疏忽，配置loader的时候写成</p>
<p><code>{test: /.\vue$/,use:&quot;vue-loader&quot;}</code></p>
<p>不仔细看根本不知道哪里错了，就是这么个问题浪费了一下午。</p>
<p>后来终于好了。</p>
<p><code>注意： vue版本和 vue-template-complier版本必须一致</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//总结梳理： webpack中如何使用 vue：</span></span><br><span class="line"><span class="comment">//1. 安装vue包  cnpm i vue -S</span></span><br><span class="line"><span class="comment">//2. 由于在webpack中，推荐使用 .vue这个组件模板文件定义组件，所以需要安装能解析这种文件的 loader   </span></span><br><span class="line">cnpm vue-loader vue-template-complier -D</span><br><span class="line">注意：再次强调，vue和vue-template-complier版本必须一致</span><br><span class="line"><span class="comment">//3. 在main.js 中 导入 vue模块， import Vue from 'vue'</span></span><br><span class="line"><span class="comment">//4. 定义一个 .vue结尾的组件，其中组件由三部分组成：&lt;template&gt;,&lt;script&gt;,&lt;style&gt;</span></span><br><span class="line"><span class="comment">//5. 使用 import login from './login.vue' 导入这个组件</span></span><br><span class="line"><span class="comment">//6. 创建vm的实例 var vm = new Vue(&#123;el: '#app',render: c=&gt;(login)&#125;)</span></span><br><span class="line"><span class="comment">//7. 在页面中创建一个 id为app的div元素，作为我们vm实例要控制的区域</span></span><br></pre></td></tr></table></figure>
<hr>
<p>上面在vue文件中的script标签中讲到了 export default，接下来就将这个 export default 和 export。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//js文件或者 script标签里面</span></span><br><span class="line"><span class="comment">//注意： export default 向外暴露的成员，可以使用任意的变量来接收</span></span><br><span class="line"><span class="comment">//注意： 在一个模块中，export default 只允许向外暴露一次</span></span><br><span class="line"><span class="comment">//注意： 在一个模块中，可以同时使用export default 和 export 向外暴露成员</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：使用export向外暴露的成员，只能使用 &#123; &#125; 的形式来接收，这种形式叫做 [按需导出]</span></span><br><span class="line"><span class="comment">//注意： export 可以向外暴露多个成员，同时，如果某些成员我们在import的时候不需要，则可以不在 &#123; &#125; 中定义</span></span><br><span class="line"><span class="comment">//注意：使用export到处的成员，必须严格按照 导出时候的名称，来使用 &#123;&#125; 按需接收</span></span><br><span class="line"><span class="comment">//注意: 使用export 导出的成员，如果就想换个名称来接收，可以使用as 来起别名</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<ol>
<li><p>在src目录下新建一个叫做test.js的文件</p>
</li>
<li><p>在js文件上做导出</p>
</li>
<li><p>在main.js文件上做导入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test.js文件如下</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  &#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        name: <span class="string">"xiaobu"</span>,</span><br><span class="line">        age: <span class="string">"24"</span>,</span><br><span class="line">        favorite: <span class="string">"basketball"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> name = <span class="string">"buge"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> star = <span class="string">"james"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> goods = &#123;</span><br><span class="line">    song: <span class="string">"小星星"</span>,</span><br><span class="line">    who: <span class="string">"刘德华"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js文件如下</span></span><br><span class="line"><span class="keyword">import</span> xiaobu,&#123;name,star <span class="keyword">as</span> s,goods,good&#125; <span class="keyword">from</span> <span class="string">'./test.js'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(xiaobu)  <span class="comment">//&#123;data: &#123;name: "xiaobu", age: "24", favorite: "basketball"&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"export name的值是---"</span>+name) <span class="comment">//export name的值是---buge</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"export star的值是---"</span>+s) <span class="comment">//export star的值是---james</span></span><br><span class="line"><span class="built_in">console</span>.log(goods)<span class="comment">// &#123;song: "小星星", who: "刘德华"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(star)   <span class="comment">//报错，star is not defind</span></span><br><span class="line"><span class="built_in">console</span>.log(good)  <span class="comment">// nudefined </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//*** as ***  后面是前面的别名，取别名之后，原先的名字不能用</span></span><br></pre></td></tr></table></figure>
<hr>
</li>
</ol>
</li>
</ol>
<hr>
<h5 id="webpack中使用vue-router"><a href="#webpack中使用vue-router" class="headerlink" title="webpack中使用vue-router"></a>webpack中使用vue-router</h5><ol>
<li>下载vue vue-router包，<code>cnpm i vue vue-router -S</code></li>
<li>在main.js文件中引入包  <code>import Vue from &quot;vue&quot;</code> <code>import VueRouter from &quot;vue-router&quot;</code></li>
<li>在main.js文件中 安装该包  Vue.use(VueRouter)</li>
<li>这样就可以在main.js中使用路由了</li>
<li><p>创建路由界面，名字为  name.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html界面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js文件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">"./main/login.vue"</span></span><br><span class="line"><span class="keyword">import</span> register <span class="keyword">from</span> <span class="string">"./main/register.vue"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;  </span><br><span class="line">    routes:[ <span class="comment">//注意是routes   是route没有r，然后加s，代表有多个路由，是数组</span></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">"/"</span>,<span class="attr">redirect</span>: <span class="string">"/login"</span>&#125;,<span class="comment">//重定向</span></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">"/login"</span>,<span class="attr">component</span>:login&#125;<span class="comment">//component 没有加s，除非是类似经典路由布局那样的</span></span><br><span class="line">     &#123;<span class="attr">path</span>: <span class="string">"/register"</span>,<span class="attr">component</span>: register&#125;   </span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    render: <span class="function"><span class="params">c</span>=&gt;</span>c(app),</span><br><span class="line">    router               <span class="comment">//一定要记得挂载到vm实例上</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./main/login.vue文件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;这是account的登陆组件&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">        export default &#123;</span><br><span class="line">            data() &#123;</span><br><span class="line">            // 注意：组件中的 data 必须是 function</span><br><span class="line">                return &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            methods: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style  scoped&gt;</span><br><span class="line"></span><br><span class="line">    /*普通的style标签只支持普通的样式，如果想要启用scss或less，需要为style设置 lang属性*/</span><br><span class="line">    /*在.vue文件中定义 style 样式的话，那么推荐开启 scoped 属性，以免污染全局样式*/</span><br><span class="line">    div&#123;</span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./main/register.vue文件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;这是account的注册组件&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">        export default &#123;</span><br><span class="line">            data() &#123;</span><br><span class="line">            // 注意：组件中的 data 必须是 function</span><br><span class="line">                return &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            methods: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h5 id="scoped的原理"><a href="#scoped的原理" class="headerlink" title="scoped的原理"></a>scoped的原理</h5><p>原理就是在该组件上添加一个 data-v-组件代号  的属性，只有拥有该属性能够有该样式，所以相当于只对组件本身有效，对别的组件无效。</p>
<p><img src="/2019/03/13/webpack使用（二）/1552631895604.png" alt="1552631895604"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode编辑器自动生成代码片段</title>
    <url>/2019/03/13/vscode%E7%BC%96%E8%BE%91%E5%99%A8%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
    <content><![CDATA[<h4 id="vscode-快速生成代码片段"><a href="#vscode-快速生成代码片段" class="headerlink" title="vscode 快速生成代码片段"></a>vscode 快速生成代码片段</h4><h5 id="如何快速生成代码片段"><a href="#如何快速生成代码片段" class="headerlink" title="如何快速生成代码片段"></a>如何快速生成代码片段</h5><p>在.html结尾的文件   <code>!+enter</code> 快速生成 html 代码片段如下,在其他类型的文件输入该命令则无效</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="添加别的代码片段"><a href="#添加别的代码片段" class="headerlink" title="添加别的代码片段"></a>添加别的代码片段</h5><blockquote>
<p>打开vscode编辑器</p>
<blockquote>
<p>文件(File）=》首选项（Preferences）=》用户代码片段（User Snippets）</p>
<blockquote>
<p>搜索html，打开html.json</p>
</blockquote>
</blockquote>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">html.json文件显示如下</span><br><span class="line">&#123;</span><br><span class="line">		<span class="comment">// Place your snippets for html here. Each snippet is defined under a snippet name and has a prefix, body and </span></span><br><span class="line">	<span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line">	<span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span></span><br><span class="line">	<span class="comment">// same ids are connected.</span></span><br><span class="line">	<span class="comment">// Example:</span></span><br><span class="line">	<span class="comment">// "Print to console": &#123;</span></span><br><span class="line">	<span class="comment">// 	"prefix": "log",</span></span><br><span class="line">	<span class="comment">// 	"body": [</span></span><br><span class="line">	<span class="comment">// 		"console.log('$1');",</span></span><br><span class="line">	<span class="comment">// 		"$2"</span></span><br><span class="line">	<span class="comment">// 	],</span></span><br><span class="line">	<span class="comment">// 	"description": "Log output to console"</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>prefix</code> 表示生成对应预设代码的命令（此处设置的vh）</p>
<p><code>$0</code> 表示生成代码后鼠标光标的位置</p>
<p><code>body</code> 包住的内容就是代码片段的内容，每一行用双引号包住，并以逗号结尾。如需要缩进，使用tab键使代码整齐。具体如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="comment">// Place your snippets for html here. Each snippet is defined under a snippet name and has a prefix, body and </span></span><br><span class="line">	<span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line">	<span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span></span><br><span class="line">	<span class="comment">// same ids are connected.</span></span><br><span class="line">	<span class="comment">// Example:</span></span><br><span class="line">	<span class="attr">"Print to console"</span>: &#123;</span><br><span class="line">		<span class="attr">"prefix"</span>: <span class="string">"vh"</span>,</span><br><span class="line">		<span class="attr">"body"</span>: [</span><br><span class="line">		<span class="string">"&lt;!DOCTYPE html&gt;"</span>,</span><br><span class="line">		<span class="string">"&lt;html lang='en'&gt;"</span>,</span><br><span class="line">		<span class="string">"	&lt;head&gt;"</span>,</span><br><span class="line">		<span class="string">"		&lt;meta charset='UTF-8'&gt;"</span>,</span><br><span class="line">		<span class="string">"		&lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt;"</span>,</span><br><span class="line">		<span class="string">"		&lt;meta http-equiv='X-UA-Compatible' content='ie=edge'&gt;"</span>,</span><br><span class="line">		<span class="string">"		&lt;title&gt;Document&lt;/title&gt;"</span>,</span><br><span class="line">		<span class="string">"		&lt;script src='./lib/vue-2.4.0.js'&gt;&lt;/script&gt;"</span>,</span><br><span class="line">		<span class="string">"	&lt;/head&gt;"</span>,</span><br><span class="line">		<span class="string">"&lt;body&gt;"</span>,</span><br><span class="line">		<span class="string">"	&lt;div id='app'&gt;"</span>,</span><br><span class="line">		<span class="string">"		$0"</span>,</span><br><span class="line">		<span class="string">"	&lt;/div&gt;"</span>,</span><br><span class="line">		<span class="string">"&lt;script&gt;"</span>,</span><br><span class="line">		<span class="string">"				var vm = new Vue(&#123;"</span>,</span><br><span class="line">		<span class="string">"					el: '#app',"</span>,</span><br><span class="line">		<span class="string">"					data: &#123;&#125;,"</span>,</span><br><span class="line">		<span class="string">"					methods: &#123;&#125;"</span>,  </span><br><span class="line">		<span class="string">"				&#125;);"</span>,</span><br><span class="line">		<span class="string">"&lt;/script&gt;"</span>,</span><br><span class="line">		<span class="string">"&lt;/body&gt;"</span>,</span><br><span class="line">		<span class="string">"&lt;/html&gt;"</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">"description"</span>: <span class="string">"Log output to console"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以在 .html文件上 使用 vh+enter 就可以跳出代码块了。</p>
<p>测试过了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vh+enter   ok</span><br><span class="line">Vh+enter   ok</span><br><span class="line">VH+enter   ok</span><br><span class="line">vH+enter   ok</span><br><span class="line">结论：和大小写没关系，应该是两个变量都转化为小写再进行比较，因为我把prefix的值改为大写后，上面四个命令照样ok。</span><br></pre></td></tr></table></figure>
<p>同理，如果想要在.vue文件使用快捷方式生成代码块，只要在用户代码块那里选择vue.json文件，在里面进行配置。</p>
]]></content>
      <categories>
        <category>编辑器的使用</category>
      </categories>
      <tags>
        <tag>-VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>如何自如的使用npm在项目中安装和删除模块包</title>
    <url>/2019/03/12/%E5%A6%82%E4%BD%95%E8%87%AA%E5%A6%82%E7%9A%84%E4%BD%BF%E7%94%A8npm%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%A0%E9%99%A4%E6%A8%A1%E5%9D%97%E5%8C%85/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm是javascript的包管理工具，利用npm可以安装、删除、发布模块包，提高开发效率。</span><br></pre></td></tr></table></figure>
<p>1、安装模块包<br>npm安装模块包的方式有两种：全局安装和本地安装</p>
<p>全局安装：</p>
<p>npm install <package-name> -g</package-name></p>
<p><code>-g &lt;=&gt;  -global</code></p>
<p>全局安装后，可以通过使用对应模块包的命令行工具执行操作命令</p>
<p>本地安装：</p>
<p>本地安装模块包的一个特点就是：在使用安装好的模块包时，需要通过require(‘<package-name>‘)来引入到项目中使用；</package-name></p>
<p>本地安装时还需要考虑的一个问题就是安装好模块包后，其信息是否要写入到项目package.json中？如果写，写到哪？因此，本地安装衍生出三种命令，分别为：</p>
<p>npm install <package-name><br>安装模块包，模块包的信息不会写入到项目的package.json文件中；</package-name></p>
<p>npm install <package-name> –save</package-name></p>
<p><code>--save &lt;=&gt;   -S</code></p>
<p>安装模块包，并且将模块包的信息写入到项目package.json中的dependencies对象中；</p>
<p>npm install <package-name> –save-dev</package-name></p>
<p><code>--save-dev &lt;=&gt;  -D</code></p>
<p>安装模块包，并且将模块包的信息写入到项目package.json中的devDependencies对象中；</p>
<p>2、删除模块包<br>删除与安装相对应，也分为全局删除和本地删除</p>
<p>全局删除：</p>
<p>npm uninsatll <package-name> -g<br>本地删除：</package-name></p>
<p>对应的，本地删除也需要考虑是否再删除模块包的同时删除项目package.json中对应的信息，因此，利用npm本地删除模块包的命令也是三种，分别为：</p>
<p>npm uninstall <package-name><br>删除模块包，对应模块包的信息不会从项目package.json文件中删除；</package-name></p>
<p>npm uninstall <package-name> –save<br>删除模块包，并且将对应的模块包信息从项目package.json的dependencies对象中删除；</package-name></p>
<p>npm uninstall <package-name> –save-dev<br>删除模块包，并且将对应的模块包信息从项目package.json的devDependencies对象中删除；</package-name></p>
<p>参考文献<br>[1] 【npm】利用npm安装/删除/发布/更新/撤销发布包<br>[2] npm install 时，如何只安装dependencies，而不安装devDependencies</p>
<p>[3] npm里我要删除一个包或者添加一个包怎么弄？</p>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router</title>
    <url>/2019/03/08/vue%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h4 id="vue最基本的哈希路由"><a href="#vue最基本的哈希路由" class="headerlink" title="vue最基本的哈希路由"></a>vue最基本的哈希路由</h4><ol>
<li><p>引入vue包，再引入vue-router包</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 1. 安装 vue-router 路由模块 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-router-3.0.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置哈希跳转</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">   <span class="comment">&lt;!-- 这是 vue-router 提供的元素，专门用来 当作占位符的，将来，路由规则，匹配到的组件，就会展示到这个 router-view 中去 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 所以： 我们可以把 router-view 认为是一个占位符 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注册组件与路由，并将路由挂载到实例上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line"><span class="comment">// 组件的模板对象</span></span><br><span class="line">    <span class="keyword">var</span> login = &#123;</span><br><span class="line">      template: <span class="string">'&lt;h1&gt;登录组件&lt;/h1&gt;'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> register = &#123;</span><br><span class="line">      template: <span class="string">'&lt;h1&gt;注册组件&lt;/h1&gt;'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建一个路由对象， 当 导入 vue-router 包之后，在 window 全局对象中，就有了一个 路由的构造函数，叫做 VueRouter</span></span><br><span class="line">    <span class="comment">// 在 new 路由对象的时候，可以为 构造函数，传递一个配置对象</span></span><br><span class="line">    <span class="keyword">var</span> routerObj = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">      <span class="comment">// route // 这个配置对象中的 route 表示 【路由匹配规则】 的意思</span></span><br><span class="line">      routes: [ <span class="comment">// 路由匹配规则 </span></span><br><span class="line">        <span class="comment">// 每个路由规则，都是一个对象，这个规则对象，身上，有两个必须的属性：</span></span><br><span class="line">        <span class="comment">//  属性1 是 path， 表示监听 哪个路由链接地址；</span></span><br><span class="line">        <span class="comment">//  属性2 是 component， 表示，如果 路由是前面匹配到的 path ，则展示 component 属性对应的那个组件</span></span><br><span class="line">        <span class="comment">// 注意： component 的属性值，必须是一个 组件的模板对象， 不能是 组件的引用名称；</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">component</span>: login &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/register'</span>, <span class="attr">component</span>: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router: routerObj <span class="comment">// 将路由规则对象，注册到 vm 实例上，用来监听 URL 地址的变化，然后展示对应的组件</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="router-link路由"><a href="#router-link路由" class="headerlink" title="router-link路由"></a>router-link路由</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- router-link 默认渲染为一个a 标签,可以使用tag属性更改默认标签 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span> <span class="attr">tag</span>=<span class="string">"span"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> routerObj = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">     <span class="comment">// route // 这个配置对象中的 route 表示 【路由匹配规则】 的意思</span></span><br><span class="line">     routes: [ <span class="comment">// 路由匹配规则 </span></span><br><span class="line">       <span class="comment">// 每个路由规则，都是一个对象，这个规则对象，身上，有两个必须的属性：</span></span><br><span class="line">       <span class="comment">//  属性1 是 path， 表示监听 哪个路由链接地址；</span></span><br><span class="line">       <span class="comment">//  属性2 是 component， 表示，如果 路由是前面匹配到的 path ，则展示 component 属性对应的那个组件</span></span><br><span class="line">       <span class="comment">// 注意： component 的属性值，必须是一个 组件的模板对象， 不能是 组件的引用名称；</span></span><br><span class="line">       <span class="comment">//设置重定向，直接到 /login界面</span></span><br><span class="line">       &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/login'</span> &#125;, <span class="comment">// 这里的 redirect 和 Node 中的 redirect 完全是两码事</span></span><br><span class="line">       &#123; <span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">component</span>: login &#125;,</span><br><span class="line">       &#123; <span class="attr">path</span>: <span class="string">'/register'</span>, <span class="attr">component</span>: register &#125;</span><br><span class="line">     ],</span><br><span class="line">     linkActiveClass: <span class="string">'myactive'</span>  <span class="comment">//修改默认类为 myactive</span></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">     el: <span class="string">'#app'</span>,</span><br><span class="line">     data: &#123;&#125;,</span><br><span class="line">     methods: &#123;&#125;,</span><br><span class="line">     router: routerObj <span class="comment">// 将路由规则对象，注册到 vm 实例上，用来监听 URL 地址的变化，然后展示对应的组件</span></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="路由规则定义参数-query"><a href="#路由规则定义参数-query" class="headerlink" title="路由规则定义参数 query"></a>路由规则定义参数 query</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 如果在路由中，使用 查询字符串，给路由传递参数，则 不需要修改 路由规则的 path 属性 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login?id=10&amp;name=zs"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> login = &#123;</span><br><span class="line">     template: <span class="string">'&lt;h1&gt;登录 --- &#123;&#123; $route.query.id &#125;&#125; --- &#123;&#123; $route.query.name &#125;&#125;&lt;/h1&gt;'</span>,</span><br><span class="line">     data()&#123;</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">         msg: <span class="string">'123'</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     created()&#123; <span class="comment">// 组件的生命周期钩子函数</span></span><br><span class="line">       <span class="comment">// console.log(this.$route)</span></span><br><span class="line">       <span class="comment">// console.log(this.$route.query.id)</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> register = &#123;</span><br><span class="line">     template: <span class="string">'&lt;h1&gt;注册&lt;/h1&gt;'</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">     routes: [</span><br><span class="line">       &#123; <span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">component</span>: login &#125;,</span><br><span class="line">       &#123; <span class="attr">path</span>: <span class="string">'/register'</span>, <span class="attr">component</span>: register &#125;</span><br><span class="line">     ]</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">     el: <span class="string">'#app'</span>,</span><br><span class="line">     data: &#123;&#125;,</span><br><span class="line">     methods: &#123;&#125;,</span><br><span class="line">     <span class="comment">// router: router  一样的时候可以写成如下样子</span></span><br><span class="line">     router</span><br><span class="line">   &#125;);</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="路由规则传参方式2-params"><a href="#路由规则传参方式2-params" class="headerlink" title="路由规则传参方式2 params"></a>路由规则传参方式2 params</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 如果在路由中，使用 查询字符串，给路由传递参数，则 不需要修改 路由规则的 path 属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login/12/ls"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> login = &#123;</span><br><span class="line">      template: <span class="string">'&lt;h1&gt;登录 --- &#123;&#123; $route.params.id &#125;&#125; --- &#123;&#123; $route.params.name &#125;&#125;&lt;/h1&gt;'</span>,</span><br><span class="line">      data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          msg: <span class="string">'123'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      created()&#123; <span class="comment">// 组件的生命周期钩子函数</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$route.params.id)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> register = &#123;</span><br><span class="line">      template: <span class="string">'&lt;h1&gt;注册&lt;/h1&gt;'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/login/:id/:name'</span>, <span class="attr">component</span>: login &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/register'</span>, <span class="attr">component</span>: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      <span class="comment">// router: router</span></span><br><span class="line">      router</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-router-3.0.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/account"</span>&gt;</span>Account<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是 Account 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/account/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/account/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 组件的模板对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> account = &#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">'#tmpl'</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> login = &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> register = &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          path: <span class="string">'/account'</span>,</span></span><br><span class="line">          component: account,</span><br><span class="line"><span class="javascript">          <span class="comment">// 使用 children 属性，实现子路由，同时，子路由的 path 前面，不要带 / ，否则永远以根路径开始请求，这样不方便我们用户去理解URL地址</span></span></span><br><span class="line">          children: [</span><br><span class="line"><span class="javascript">            &#123; <span class="attr">path</span>: <span class="string">'login'</span>, <span class="attr">component</span>: login &#125;,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">path</span>: <span class="string">'register'</span>, <span class="attr">component</span>: register &#125;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">// &#123; path: '/account/login', component: login &#125;,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#123; path: '/account/register', component: register &#125;</span></span></span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="经典路由布局"><a href="#经典路由布局" class="headerlink" title="经典路由布局"></a>经典路由布局</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-router-3.0.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    html,</span><br><span class="line">    body &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.header</span> &#123;</span></span><br><span class="line">      background-color: orange;</span><br><span class="line">      height: 80px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h1 &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">      font-size: 16px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">      display: flex;</span><br><span class="line">      height: 600px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">      background-color: lightgreen;</span><br><span class="line">      flex: 2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">      background-color: lightpink;</span><br><span class="line">      flex: 8;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> header = &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>Header头部区域<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> leftBox = &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>Left侧边栏区域<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mainBox = &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>mainBox主体区域<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建路由对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">      routes: [</span><br><span class="line">        /* &#123; path: '/', component: header &#125;,</span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">'/left'</span>, <span class="attr">component</span>: leftBox &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">'/main'</span>, <span class="attr">component</span>: mainBox &#125; *<span class="regexp">/</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          path: <span class="string">'/'</span>, <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">'default'</span>: header,</span></span><br><span class="line"><span class="javascript">            <span class="string">'left'</span>: leftBox,</span></span><br><span class="line"><span class="javascript">            <span class="string">'main'</span>: mainBox</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件</title>
    <url>/2019/03/08/vue%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意： 代码风格，由于html标签都是单个单词的标签，为了更好的区分组件与标签，组件名应该使用两个单词的组成，如:</span><br><span class="line">goods_list</span><br></pre></td></tr></table></figure>
<p>vue组件的第一种用法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   //组件的引用</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果要使用组件，直接，把组件的名称，以 HTML 标签的形式，引入到页面中，即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-com1</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1.1 使用 Vue.extend 来创建全局的Vue组件</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// var com1 = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml">    //   template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是使用 Vue.extend 创建的组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>' // 通过 template 属性，指定了组件要展示的HTML结构</span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1.2 使用 Vue.component('组件的名称', 创建出来的组件模板对象)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue.component('myCom1', com1)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果使用 Vue.component 定义全局组件的时候，组件名称使用了 驼峰命名，则在引用组件的时候，需要把 大写的驼峰改为小写的字母，同时，两个单词之前，使用 - 链接；</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果不使用驼峰,则直接拿名称来使用即可;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue.component('myCom1', com1)</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue.component 第一个参数:组件的名称,将来在引用组件的时候,就是一个 标签形式 来引入 它的</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第二个参数: Vue.extend 创建的组件  ,其中 template 就是组件将来要展示的HTML内容</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'myCom1'</span>, Vue.extend(&#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是使用 Vue.extend 创建的组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line">    &#125;))</span><br><span class="line">     </span><br><span class="line"><span class="javascript">  <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="vue组件的第二种创建方式"><a href="#vue组件的第二种创建方式" class="headerlink" title="vue组件的第二种创建方式"></a>vue组件的第二种创建方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  //组件的引用</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果要使用组件，直接，把组件的名称，以 HTML 标签的形式，引入到页面中，即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-com2</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//直接使用vue.component()创建</span></span></span><br><span class="line"><span class="javascript"> <span class="comment">// 注意:不论是哪种方式创建出来的组件,组件的 template 属性指向的模板内容,必须有且只能有唯一的一个根元素</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'myCom2'</span>, &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是直接使用 Vue.component 创建出来的组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>		<span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>vue组件的第三种创建方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-com3</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 在 被控制的 #app 外面,使用 template 元素,定义组件的HTML模板结构  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是通过 template 元素,在外部定义的组件结构,这个方式,有代码的只能提示和高亮<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>好用,不错!<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'myCom3'</span>, &#123;</span></span><br><span class="line"><span class="javascript">    template: <span class="string">'#tmpl'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="私有组件"><a href="#私有组件" class="headerlink" title="私有组件"></a>私有组件</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span></span><br><span class="line">    //无法访问app2的私有组件login-box</span><br><span class="line">  <span class="tag">&lt;<span class="name">login-box</span>&gt;</span><span class="tag">&lt;/<span class="name">login-box</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">login-box</span>&gt;</span><span class="tag">&lt;/<span class="name">login-box</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是私有的 login 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app1'</span>,</span></span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    filters: &#123;&#125;,</span><br><span class="line">    directives: &#123;&#125;,</span><br><span class="line"> &#125;);</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app2'</span>,</span></span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    filters: &#123;&#125;,</span><br><span class="line">    directives: &#123;&#125;,</span><br><span class="line"><span class="javascript">    components: &#123; <span class="comment">// 定义实例内部私有组件的</span></span></span><br><span class="line">      loginBox: &#123;</span><br><span class="line"><span class="javascript">        template: <span class="string">'#tmpl2'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：私有的属性，是components，单词后面要加一个s，因为私有的组件可以定义多个组件。</span><br><span class="line">定义全局的组件，一次定义一个，所以是</span><br><span class="line">vue.component(组件名，&#123;template：组件内容&#125;)</span><br><span class="line">没有加s （个人理解）</span><br></pre></td></tr></table></figure>
<h4 id="组件中的data和methods"><a href="#组件中的data和methods" class="headerlink" title="组件中的data和methods"></a>组件中的data和methods</h4><p>代码风格注意事项先来一波</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">*组件的 data 必须是一个函数。</span><br><span class="line">当在组件中使用 data 属性的时候 (除了 <span class="keyword">new</span> Vue 外的任何地方)，它的值必须是返回一个对象的函数。</span><br><span class="line">当 data 的值是一个对象时，它会在这个组件的所有实例之间共享。想象一下，假如一个 TodoList 组件的数据是这样的：</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  listTitle: <span class="string">''</span>,</span><br><span class="line">  todos: []</span><br><span class="line">&#125;</span><br><span class="line">我们可能希望重用这个组件，允许用户维护多个列表 (比如分为购物、心愿单、日常事务等)。这时就会产生问题。因为每个组件的实例都引用了相同的数据对象，更改其中一个列表的标题就会改变其它每一个列表的标题。增删改一个待办事项的时候也是如此。</span><br><span class="line"></span><br><span class="line">取而代之的是，我们希望每个组件实例都管理其自己的数据。为了做到这一点，每个实例必须生成一个独立的数据对象。在 JavaScript 中，在一个函数中返回这个对象就可以了：</span><br><span class="line"></span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    listTitle: <span class="string">''</span>,</span><br><span class="line">    todos: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">反例</span><br><span class="line">Vue.component(<span class="string">'some-comp'</span>, &#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: <span class="string">'bar'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: <span class="string">'bar'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">好例子</span><br><span class="line">Vue.component(<span class="string">'some-comp'</span>, &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      foo: <span class="string">'bar'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// In a .vue file</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      foo: <span class="string">'bar'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在一个 Vue 的根实例上直接使用对象是可以的，</span></span><br><span class="line"><span class="comment">// 因为只存在一个这样的实例。</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: <span class="string">'bar'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><a href="https://cn.vuejs.org/v2/style-guide/#%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE-%E5%BF%85%E8%A6%81" target="_blank" rel="noopener">参考vue官网代码风格</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">组件中的data</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-com1</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 组件可以有自己的 data 数据</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 组件的 data 和 实例的 data 有点不一样,实例中的 data 可以为一个对象,但是 组件中的 data 必须是一个方法</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 3. 组件中的 data 除了必须为一个方法之外,这个方法内部,还必须返回一个对象才行;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 4. 组件中 的data 数据,使用方式,和实例中的 data 使用方式完全一样!!!</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'myCom1'</span>, &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是全局组件 --- &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">      data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          msg: <span class="string">'这是组件的中data定义的数据'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">组件中的methods</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">my-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">my-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">my-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"+1"</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> dataObj = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 这是一个计数器的组件, 身上有个按钮,每当点击按钮,让 data 中的 count 值 +1</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'myCounter'</span>, &#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">'#tmpl'</span>,</span></span><br><span class="line"><span class="javascript">      data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// return dataObj  如果采用这个，则导致每个组件的count数据共享，都是一样的值</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        increment() &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.count++</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="组件切换方式1"><a href="#组件切换方式1" class="headerlink" title="组件切换方式1"></a>组件切换方式1</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"flag=true"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"flag=false"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">login-box</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span><span class="tag">&lt;/<span class="name">login-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">register-box</span> <span class="attr">v-else</span>=<span class="string">"flag"</span>&gt;</span><span class="tag">&lt;/<span class="name">register-box</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    vue.component(<span class="string">'loginBox'</span>,&#123;</span></span><br><span class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>登陆组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    vue.component(<span class="string">'registerBox'</span>,&#123;</span></span><br><span class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>注册组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> vue(&#123;</span></span><br><span class="line">        el: #app,</span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">        flag: <span class="literal">false</span></span></span><br><span class="line">    	&#125;,</span><br><span class="line">       	methods:&#123;&#125;                   </span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>组件切换方式2</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"comName='login-box'"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"comName='register-box'"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Vue提供了 component ,来展示对应名称的组件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- component 是一个占位符, :is 属性,可以用来指定要展示的组件的名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"comName"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 总结:当前学习了几个 Vue 提供的标签了??? --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- component,  template,  transition,  transitionGroup  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 组件名称是 字符串</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'loginBox'</span>, &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'registerBox'</span>, &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>注册组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        comName: <span class="string">'login-box'</span> <span class="comment">// 当前 component 中的 :is 绑定的组件的名称</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>组件切换动画</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-to</span> &#123;</span></span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateX(150px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-active</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.5s</span> <span class="selector-tag">ease</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"comName='login-box'"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"comName='register-box'"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通过 mode 属性,设置组件切换时候的 模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"comName"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 组件名称是 字符串</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'loginBox'</span>, &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'registerBox'</span>, &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>注册组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        comName: <span class="string">'login-box'</span> <span class="comment">// 当前 component 中的 :is 绑定的组件的名称</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>vue父组件向子组件传值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父组件，可以在引用子组件的时候， 通过 属性绑定（v-bind:） 的形式, 把 需要传递给 子组件的数据，以属性绑定的形式，传递到子组件内部，供子组件使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-com</span> <span class="attr">v-bind:parentmsg</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">'123 啊-父组件中的数据'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 结论：经过演示，发现，子组件中，默认无法访问到 父组件中的 data 上的数据 和 methods 中的方法</span></span></span><br><span class="line">        myCom: &#123;</span><br><span class="line"><span class="javascript">          data() &#123; <span class="comment">// 注意： 子组件中的 data 数据，并不是通过 父组件传递过来的，而是子组件自身私有的，比如： 子组件通过 Ajax ，请求回来的数据，都可以放到 data 身上；</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// data 上的数据，都是可读可写的；</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">              title: <span class="string">'123'</span>,</span></span><br><span class="line"><span class="javascript">              content: <span class="string">'qqq'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"><span class="xml">          template: '<span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">"change"</span>&gt;</span>这是组件定义的属性，可以用来传值&#123;&#123; parentmsg &#125;&#125;--这是组件中自己的title：&#123;&#123;title&#125;&#125;，这是组件中自己的content:&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 注意： 组件中的 所有 props 中的数据，都是通过 父组件传递给子组件的</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// props 中的数据，都是只读的，无法重新赋值</span></span></span><br><span class="line"><span class="javascript">          props: [<span class="string">'parentmsg'</span>], <span class="comment">// 把父组件传递过来的 parentmsg 属性，先在 props 数组中，定义一下，这样，才能使用这个数据</span></span></span><br><span class="line">          directives: &#123;&#125;,</span><br><span class="line">          filters: &#123;&#125;,</span><br><span class="line">          components: &#123;&#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">            change() &#123;</span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.parentmsg = <span class="string">'组件的方法被触发了'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>微信小程序父组件设置组件内部属性的值与方法</p>
<ol>
<li>创建一个名为components目录专门用来存放组件</li>
<li>在components目录下新建一个组件名的目录，如Dialog</li>
<li>在组件目录下新建component将会创建出四个文件</li>
</ol>
<p>如图所示</p>
<p><img src="/2019/03/08/vue组件/1552030142489.png" alt="1552030142489"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">dialog.js 文件</span><br><span class="line">// components/Dialog/dialog.js</span><br><span class="line">Component(&#123;</span><br><span class="line">  /**</span><br><span class="line">   * 组件的属性列表</span><br><span class="line">   */</span><br><span class="line">  properties: &#123;</span><br><span class="line">    title:&#123;</span><br><span class="line">      type: String,</span><br><span class="line">      value: ""</span><br><span class="line">    &#125;,</span><br><span class="line">    content:&#123;</span><br><span class="line">      type: String,</span><br><span class="line">      value: ""</span><br><span class="line">    &#125;,</span><br><span class="line">    cancelText:&#123;</span><br><span class="line">      type: String,</span><br><span class="line">      value: ""</span><br><span class="line">    &#125;,</span><br><span class="line">    confirmText:&#123;</span><br><span class="line">      type: String,</span><br><span class="line">      value: ""</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 组件的初始数据</span><br><span class="line">   */</span><br><span class="line">  data: &#123;</span><br><span class="line">    isShow: false</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 组件的方法列表</span><br><span class="line">   */</span><br><span class="line">  methods: &#123;</span><br><span class="line">    showDialog:function()&#123;</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        isShow:!this.data.isShow</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    hideDialog: function () &#123;</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        isShow: !this.data.isShow</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    _cancelEvent:function()&#123;</span><br><span class="line">      this.triggerEvent("cancelEvent")  //点击取消触发cancelEvent事件</span><br><span class="line">    &#125;,</span><br><span class="line">    _confirmEvent: function () &#123;</span><br><span class="line">      this.triggerEvent("confirmEvent")  //点击确定触发confirmEvent事件</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dialog.json文件</span><br><span class="line">&#123;</span><br><span class="line">  "component": true,        //一定要设置为true</span><br><span class="line">  "usingComponents": &#123;&#125;     //用到别的组的话，这里引用</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dialog.xml文件</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx_dialog_container"</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;!isShow&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx_mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx_dialog"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx_dialog_title"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx_dialog_content"</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx_dialog_footer"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx_dialog_btn"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">catchtap</span>=<span class="string">'_cancelEvent'</span></span></span><br><span class="line"><span class="tag">      &gt;</span>&#123;&#123;cancelText&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx_dialog_btn"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">catchtap</span>=<span class="string">'_confirmEvent'</span></span></span><br><span class="line"><span class="tag">      &gt;</span>&#123;&#123;confirmText&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dialog.wxss文件</span><br><span class="line">/* components/Dialog/dialog.wxss */</span><br><span class="line">.wx_mask&#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 1000;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  background: rgba(0,0,0,0.3);</span><br><span class="line">&#125;</span><br><span class="line">.wx_dialog&#123;</span><br><span class="line">  position:fixed;</span><br><span class="line">  z-index: 5000;</span><br><span class="line">  width: 80%;</span><br><span class="line">  max-width: 600rpx;</span><br><span class="line">  top: 50%;</span><br><span class="line">  left: 50%;</span><br><span class="line">  -webkit-transform: translate(-50%,-50%);</span><br><span class="line">  transform: translate(-50%,-50%);</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  text-align: center;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.wx_dialog_title&#123;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">  padding: 15px 15px 5px;</span><br><span class="line">&#125;</span><br><span class="line">.wx_dialog_content&#123;</span><br><span class="line">  padding: 15px 15px 5px;</span><br><span class="line">  min-height: 40px;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  line-height: 1.3;</span><br><span class="line">  word-wrap: break-word;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  color: #999999;</span><br><span class="line">&#125;</span><br><span class="line">.wx_dialog_footer&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">  position: relative;</span><br><span class="line">  line-height: 45px;</span><br><span class="line">  font-size: 17px;</span><br><span class="line">&#125;</span><br><span class="line">.wx_dialog_footer::before&#123;</span><br><span class="line">  content: "";</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  height:1px;</span><br><span class="line">  border-top: 1px solid #d5d5d6;</span><br><span class="line">  color: #d5d5d6;</span><br><span class="line">  -webkit-transform-origin: 0 0;</span><br><span class="line">  transform-origin: 0 0 ;</span><br><span class="line">  -webkit-transform: scaleY(0.5);</span><br><span class="line">  transform: scaleY(0.5);</span><br><span class="line">  &#125;</span><br><span class="line">  .wx_dialog_btn&#123;</span><br><span class="line">    display: block;</span><br><span class="line">    -webkit-flex: 1;</span><br><span class="line">    flex: 1;</span><br><span class="line">    -webkit-tab-highlight-color: rgba(0,0,0,0);</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line">  .wx_dialog_footer .wx_dialog_btn:nth-of-type(1)&#123;</span><br><span class="line">    color: #353535;</span><br><span class="line">  &#125;</span><br><span class="line">  .wx_dialog_footer .wx_dialog_btn:nth-of-type(2)&#123;</span><br><span class="line">    color: #3cc51f;</span><br><span class="line">  &#125;</span><br><span class="line"> .wx_dialog_footer .wx_dialog_btn:nth-of-type(2):after&#123;</span><br><span class="line">   content: '';</span><br><span class="line">   position: absolute;</span><br><span class="line">   left: 0;</span><br><span class="line">   top: 0;</span><br><span class="line">   width: 1px;</span><br><span class="line">   bottom: 0;</span><br><span class="line">   border-left: 1px solid #d5d5d6;</span><br><span class="line">   color: #d5d5d6;</span><br><span class="line">   -webkit-transform-origin: 0 0 ;</span><br><span class="line">   transform-origin: 0 0;</span><br><span class="line">   -webkit-transform:  scaleX(0.5);</span><br><span class="line">   transform: scaleX(0.5);    /*解决物理像素问题*/</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这样组件部分就完成了，就差引用组件了</p>
<p>比如index页面需要引用上面的 dialog组件</p>
<ol>
<li><p>找到index.json文件  设置属性</p>
</li>
<li><p>到index.wxml文件  在需要引用的地方 使用组件并设置属性和方法</p>
</li>
<li>在index.js文件中 对组件方法做逻辑处理</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">index.json文件</span><br><span class="line">&#123;</span><br><span class="line">  "usingComponents": &#123;</span><br><span class="line">    "dialog":"/components/Dialog/dialog"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index.wxml文件</span><br><span class="line">  <span class="tag">&lt;<span class="name">dialog</span> <span class="attr">id</span>=<span class="string">"dialog"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"提示"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">content</span>=<span class="string">"对方感觉你不帅，并递给你一张通往韩国的机票"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">cancelText</span>=<span class="string">"取消"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">confirmText</span>=<span class="string">'确定'</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bind:cancelEvent</span>=<span class="string">"cancel"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bind:confirmEvent</span>=<span class="string">"confirm"</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>  <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">bindtap</span>=<span class="string">'showDialog'</span>&gt;</span>ClickMe<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">index.js文件</span><br><span class="line">  onReady:function()&#123;</span><br><span class="line">    this.dialog = this.selectComponent("#dialog");   //获取dialog组件对象，就可以调用组件的方法</span><br><span class="line">  &#125;,</span><br><span class="line">  confirm:function()&#123;</span><br><span class="line">    console.log("点击了确定");</span><br><span class="line">    this.dialog.hideDialog();</span><br><span class="line">  &#125;,</span><br><span class="line">  cancel: function () &#123;</span><br><span class="line">    console.log("点击了不好");</span><br><span class="line">    this.dialog.hideDialog();</span><br><span class="line">  &#125;,</span><br><span class="line">  showDialog:function()&#123;</span><br><span class="line">    this.dialog.showDialog();</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>这样小程序的dialog组件就完成了</p>
<p>效果如下</p>
<p><img src="/2019/03/08/vue组件/1552031442273.png" alt="1552031442273"></p>
<p>vue组件父组件获取子组件数据的方法同小程序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父组件向子组件 传递 方法，使用的是 事件绑定机制； v-on, 当我们自定义了 一个 事件属性之后，那么，子组件就能够，通过某些方式，来调用 传递进去的 这个 方法了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-com2</span> @<span class="attr">func</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com2</span>&gt;</span></span><br><span class="line">	&#123;&#123;datamsgFormSon.name&#125;&#125;-------&#123;&#123;datamsgFormSon.age&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是 子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"这是子组件中的按钮 - 点击它，触发 父组件传递过来的 func 方法"</span> @<span class="attr">click</span>=<span class="string">"myclick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义了一个字面量类型的 组件模板对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myCom2 = &#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">'#tmpl'</span>, <span class="comment">// 通过指定了一个 Id, 表示 说，要去加载 这个指定Id的 template 元素中的内容，当作 组件的HTML结构</span></span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          sonmsg: &#123; <span class="attr">name</span>: <span class="string">'大头儿子'</span>, <span class="attr">age</span>: <span class="number">6</span> &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">	</span><br><span class="line">      methods: &#123;</span><br><span class="line">        myclick() &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 当点击子组件的按钮的时候，如何 拿到 父组件传递过来的 func 方法，并调用这个方法？？？</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//  emit 英文原意： 是触发，调用、发射的意思</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// this.$emit('func123', 123, 456)</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$emit(<span class="string">'func'</span>, <span class="keyword">this</span>.sonmsg)   <span class="comment">//触发func函数并传递this.sonmsg这个数据过去</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        datamsgFormSon: &#123; <span class="attr">name</span>: <span class="string">'小头爸爸'</span>, <span class="attr">age</span>: <span class="number">26</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        show(data) &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// console.log('调用了父组件身上的 show 方法: --- ' + data)</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(data);</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.datamsgFormSon = data</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      components: &#123;</span><br><span class="line">        myCom2</span><br><span class="line"><span class="javascript">        <span class="comment">// myCom2: myCom2   一样的时候可以写成上面那样</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="组件案例-评论列表"><a href="#组件案例-评论列表" class="headerlink" title="组件案例 评论列表"></a>组件案例 评论列表</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./lib/bootstrap-3.3.7.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cmt-box</span> @<span class="attr">func</span>=<span class="string">"loadComments"</span>&gt;</span><span class="tag">&lt;/<span class="name">cmt-box</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>评论人： &#123;&#123; item.user &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.content &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>评论人：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>评论内容：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"发表评论"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> @<span class="attr">click</span>=<span class="string">"postComment"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> commentBox = &#123;</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          user: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">          content: <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      template: <span class="string">'#tmpl'</span>,</span></span><br><span class="line">      methods: &#123;</span><br><span class="line">        postComment() &#123; </span><br><span class="line"><span class="javascript"> 		<span class="comment">//定义一个变量存储数据</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> comment = &#123; <span class="attr">id</span>: <span class="built_in">Date</span>.now(), <span class="attr">user</span>: <span class="keyword">this</span>.user, <span class="attr">content</span>: <span class="keyword">this</span>.content &#125;</span></span><br><span class="line"><span class="javascript">		<span class="comment">//清空界面的数据</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.user = <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">		  <span class="keyword">this</span>.content = <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">			<span class="comment">//上传数据给父组件</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$emit(<span class="string">'func'</span>,comment)</span></span><br><span class="line">		  </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [</span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">user</span>: <span class="string">'李白'</span>, <span class="attr">content</span>: <span class="string">'天生我材必有用'</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">user</span>: <span class="string">'江小白'</span>, <span class="attr">content</span>: <span class="string">'劝君更尽一杯酒'</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">user</span>: <span class="string">'小马'</span>, <span class="attr">content</span>: <span class="string">'我姓马， 风吹草低见牛羊的马'</span> &#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      beforeCreate()&#123; <span class="comment">// 注意：这里不能调用 loadComments 方法，因为在执行这个钩子函数的时候，data 和 methods 都还没有被初始化好</span></span></span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      created()&#123;</span><br><span class="line"><span class="javascript">          <span class="comment">//第一次加载，自动调用这个方法，将数据缓存到浏览器</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.loadComments(<span class="string">''</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">	  </span><br><span class="line">	</span><br><span class="line">        loadComments(data) &#123;</span><br><span class="line">	</span><br><span class="line">				/*</span><br><span class="line">			如果有缓存，获取缓存的数据，如果没有缓存获取服务器的数据</span><br><span class="line">			</span><br><span class="line">		*/</span><br><span class="line"><span class="javascript">		  <span class="keyword">this</span>.list = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'cmts'</span>)） || <span class="keyword">this</span>.list;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">			<span class="keyword">if</span>((data!=<span class="string">''</span>)&amp;&amp;(data.content!=<span class="string">''</span>)&amp;&amp;(data.user!=<span class="string">''</span>))&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">this</span>.list.unshift(data);</span></span><br><span class="line"><span class="javascript">			&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">"数据为空"</span>);</span></span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"><span class="javascript">			localStorage.setItem(<span class="string">'cmts'</span>,<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.list))</span></span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="javascript">        <span class="string">'cmt-box'</span>: commentBox</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="通过-ref-属性获取DOM元素和组件"><a href="#通过-ref-属性获取DOM元素和组件" class="headerlink" title="通过 ref 属性获取DOM元素和组件"></a>通过 ref 属性获取DOM元素和组件</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取元素"</span> @<span class="attr">click</span>=<span class="string">"getElement"</span> <span class="attr">ref</span>=<span class="string">"mybtn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"myh3"</span> <span class="attr">ref</span>=<span class="string">"myh3"</span>&gt;</span>哈哈哈， 今天天气太好了！！！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">login</span> <span class="attr">ref</span>=<span class="string">"mylogin"</span>&gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> login = &#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          msg: <span class="string">'son msg'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        show() &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'调用了子组件的方法'</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        getElement() &#123;</span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'myh3'</span>).innerText)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">//  ref  是 英文单词 【reference】   值类型 和 引用类型  referenceError</span></span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.myh3.innerText)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.mylogin.msg)</span></span><br><span class="line"><span class="javascript">           <span class="keyword">this</span>.$refs.mylogin.show()</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        login</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击显示如下</p>
<p><img src="/2019/03/08/vue组件/1552041157599.png" alt="1552041157599"></p>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual_Studio_Code</title>
    <url>/2019/03/08/Visual-Studio-Code%E7%94%A8%E6%B3%95%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="visual-studio-code-的使用"><a href="#visual-studio-code-的使用" class="headerlink" title="visual studio code 的使用"></a>visual studio code 的使用</h3><table>
<thead>
<tr>
<th>通用</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+Shift+P, F1</td>
<td>打开命令面板</td>
</tr>
<tr>
<td>Ctrl+P</td>
<td>快速打开文件</td>
</tr>
<tr>
<td>Ctrl+Shift+N</td>
<td>打开新窗口/实例</td>
</tr>
<tr>
<td>Ctrl+Shift+W</td>
<td>关闭窗口/实例</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>基础编辑</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+X</td>
<td>剪切当前行</td>
</tr>
<tr>
<td>Ctrl+C</td>
<td>复制当前行</td>
</tr>
<tr>
<td>Alt+ ↑ / ↓</td>
<td>向上/向下移动当前行</td>
</tr>
<tr>
<td>Shift+Alt + ↓ / ↑</td>
<td>向上/向下复制当前行</td>
</tr>
<tr>
<td>Ctrl+Shift+K</td>
<td>删除当前行</td>
</tr>
<tr>
<td>Ctrl+Enter</td>
<td>在当前行以下插入</td>
</tr>
<tr>
<td>Ctrl+Shift+Enter</td>
<td>在当前行以上插入</td>
</tr>
<tr>
<td>Ctrl+Shift+\</td>
<td>跳转到匹配的括号</td>
</tr>
<tr>
<td>Ctrl+] / [</td>
<td>缩进/取消缩进</td>
</tr>
<tr>
<td>Home</td>
<td>转到行首</td>
</tr>
<tr>
<td>End</td>
<td>转到行尾</td>
</tr>
<tr>
<td>Ctrl+Home</td>
<td>转到页首</td>
</tr>
<tr>
<td>Ctrl+End</td>
<td>转到页尾</td>
</tr>
<tr>
<td>Ctrl+↑ / ↓</td>
<td>向上/向下滚动</td>
</tr>
<tr>
<td>Alt+PgUp / PgDown</td>
<td>向上/向下翻页</td>
</tr>
<tr>
<td>Ctrl+Shift+[</td>
<td>折叠当前代码块</td>
</tr>
<tr>
<td>Ctrl+Shift+]</td>
<td>展开当前代码块</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+[</td>
<td>折叠所有子代码块</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+]</td>
<td>展开所有子代码块</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+0</td>
<td>折叠所有代码块</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+J</td>
<td>展开所有代码块</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+C</td>
<td>添加行注释</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+U</td>
<td>删除行注释</td>
</tr>
<tr>
<td>Ctrl+/</td>
<td>添加/删除行注释</td>
</tr>
<tr>
<td>Shift+Alt+A</td>
<td>添加/删除块注释</td>
</tr>
<tr>
<td>Alt+Z</td>
<td>自动换行</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>导航</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+T</td>
<td>显示所有符号</td>
</tr>
<tr>
<td>Ctrl+G</td>
<td>跳转到行</td>
</tr>
<tr>
<td>Ctrl+P</td>
<td>跳转到文件</td>
</tr>
<tr>
<td>Ctrl+Shift+O</td>
<td>跳转到符号</td>
</tr>
<tr>
<td>Ctrl+Shift+M</td>
<td>显示问题面板</td>
</tr>
<tr>
<td>F8</td>
<td>跳转到下一个问题或警告</td>
</tr>
<tr>
<td>Shift+F8</td>
<td>跳转到前一个问题或警告</td>
</tr>
<tr>
<td>Ctrl+Shift+Tab</td>
<td>显示编辑器文件历史</td>
</tr>
<tr>
<td>Alt+ ← / →</td>
<td>向后/向前查看文件</td>
</tr>
<tr>
<td>Ctrl+M</td>
<td>开启/关闭 Tab 移动焦点</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>搜索和替换</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+F</td>
<td>查找</td>
</tr>
<tr>
<td>Ctrl+H</td>
<td>替换</td>
</tr>
<tr>
<td>F3 / Shift+F3</td>
<td>查找下一个/前一个</td>
</tr>
<tr>
<td>Alt+Enter</td>
<td>选择所有匹配项</td>
</tr>
<tr>
<td>Ctrl+D</td>
<td>选择下一个匹配项</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+D</td>
<td>跳过当前选择项</td>
</tr>
<tr>
<td>Alt+C / R / W</td>
<td>切换大小写敏感/正则表达式/全词</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>多光标与选择</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Alt+Click</td>
<td>插入光标</td>
</tr>
<tr>
<td>Ctrl+Alt+ ↑ / ↓</td>
<td>向上/向下插入光标</td>
</tr>
<tr>
<td>Ctrl+U</td>
<td>撤销上一个光标</td>
</tr>
<tr>
<td>Shift+Alt+I</td>
<td>在选中行的行尾插入光标</td>
</tr>
<tr>
<td>Ctrl+I</td>
<td>选择当前行</td>
</tr>
<tr>
<td>Ctrl+Shift+L</td>
<td>选择当前选中项的所有匹配项</td>
</tr>
<tr>
<td>Ctrl+F2</td>
<td>选择当前单词的所有匹配项</td>
</tr>
<tr>
<td>Shift+Alt+→</td>
<td>扩展选择</td>
</tr>
<tr>
<td>Shift+Alt+←</td>
<td>缩小选择</td>
</tr>
<tr>
<td>Shift+Alt + (drag mouse)</td>
<td>列（框）选择</td>
</tr>
<tr>
<td>Ctrl+Shift+Alt + (arrow key)</td>
<td>列（框）选择</td>
</tr>
<tr>
<td>Ctrl+Shift+Alt +PgUp/PgDown</td>
<td>向上页/下页列（框）选择</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>富语言编辑</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+Space</td>
<td>打开建议</td>
</tr>
<tr>
<td>Ctrl+Shift+Space</td>
<td>打开参数提示</td>
</tr>
<tr>
<td>Tab</td>
<td>Emmet 展开缩写</td>
</tr>
<tr>
<td>Shift+Alt+F</td>
<td>格式化文档</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+F</td>
<td>格式化选择区域</td>
</tr>
<tr>
<td>F12</td>
<td>跳转到定义</td>
</tr>
<tr>
<td>Alt+F12</td>
<td>打开窗口显示定义</td>
</tr>
<tr>
<td>Ctrl+K F12</td>
<td>打开侧边栏显示定义</td>
</tr>
<tr>
<td>Ctrl+.</td>
<td>快速解决</td>
</tr>
<tr>
<td>Shift+F12</td>
<td>显示引用</td>
</tr>
<tr>
<td>F2</td>
<td>重命名符号</td>
</tr>
<tr>
<td>Ctrl+Shift+ . / ,</td>
<td>替换为下一个/上一个值</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+X</td>
<td>删除行尾空格</td>
</tr>
<tr>
<td>Ctrl+K M</td>
<td>更改文本语言</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>编辑管理</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+F4, Ctrl+W</td>
<td>关闭编辑的文件</td>
</tr>
<tr>
<td>Ctrl+K F</td>
<td>关闭文件夹</td>
</tr>
<tr>
<td>Ctrl+\</td>
<td>拆分编辑器窗口</td>
</tr>
<tr>
<td>Ctrl+ 1 / 2 / 3</td>
<td>切换到第一、第二或第三个窗口</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+ ←/→</td>
<td>切换到上一个/下一个窗口</td>
</tr>
<tr>
<td>Ctrl+Shift+PgUp /PgDown</td>
<td>向左/向右移动编辑的文件</td>
</tr>
<tr>
<td>Ctrl+K ← / →</td>
<td>向左/向右移动编辑窗口</td>
</tr>
</tbody>
</table>
<p>如何让.vue文件代码高亮</p>
<ol>
<li>点击拓展，搜索vetur</li>
<li>安装vetur</li>
<li>重启Visaul Stdio Code</li>
</ol>
<p><img src="/2019/03/08/Visual-Studio-Code用法及常用快捷键总结/微信图片_20190308130422.png" alt></p>
]]></content>
      <categories>
        <category>编辑器使用</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>vue动画</title>
    <url>/2019/03/07/vue%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h3 id="vue过渡-amp-动画"><a href="#vue过渡-amp-动画" class="headerlink" title="vue过渡&amp;动画"></a>vue过渡&amp;动画</h3><p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。<br>包括以下工具：</p>
<ul>
<li>在 CSS 过渡和动画中自动应用 class</li>
<li>可以配合使用第三方 CSS 动画库，如 Animate.css</li>
<li>在过渡钩子函数中使用 JavaScript 直接操作 DOM</li>
<li>可以配合使用第三方 JavaScript 动画库，如 Velocity.js</li>
</ul>
<h3 id="过渡的类名"><a href="#过渡的类名" class="headerlink" title="过渡的类名"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E7%9A%84%E7%B1%BB%E5%90%8D" target="_blank" rel="noopener">过渡的类名</a></h3><p>在进入/离开的过渡中，会有 6 个 class 切换。</p>
<ol>
<li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li>
<li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li>
<li><code>v-enter-to</code>: <strong>2.1.8版及以上</strong> 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 <code>v-enter</code> 被移除)，在过渡/动画完成之后移除。</li>
<li><code>v-leave</code>: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li>
<li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li>
<li><code>v-leave-to</code>: <strong>2.1.8版及以上</strong> 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave</code> 被删除)，在过渡/动画完成之后移除。</li>
</ol>
<p><img src="/2019/03/07/vue动画/1551940378050.png" alt="1551940378050"></p>
<p>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>&lt;transition&gt;</code>，则 <code>v-</code> 是这些类名的默认前缀。如果你使用了 <code>&lt;transition name=&quot;my-transition&quot;&gt;</code>，那么 <code>v-enter</code> 会替换为 <code>my-transition-enter</code>。</p>
<p><code>v-enter-active</code> 和 <code>v-leave-active</code> 可以控制进入/离开过渡的不同的缓和曲线，在下面章节会有个示例说明。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2. 自定义两组样式，来控制 transition 内部的元素实现动画 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/* v-enter 【这是一个时间点】 是进入之前，元素的起始状态，此时还没有开始进入 */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* v-leave-to 【这是一个时间点】 是动画离开之后，离开的终止状态，此时，元素 动画已经结束了 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-to</span> &#123;</span></span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateX(150px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* v-enter-active 【入场动画的时间段】 */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* v-leave-active 【离场动画的时间段】 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-active</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-active</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.8s</span> <span class="selector-tag">ease</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.my-enter</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.my-leave-to</span> &#123;</span></span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateY(70px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.my-enter-active</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.my-leave-active</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.8s</span> <span class="selector-tag">ease</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"toggle"</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需求： 点击按钮，让 h3 显示，再点击，让 h3 隐藏 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 使用 transition 元素，把 需要被动画控制的元素，包裹起来 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- transition 元素，是 Vue 官方提供的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>这是一个H3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"toggle2"</span> @<span class="attr">click</span>=<span class="string">"flag2=!flag2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"my"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h6</span> <span class="attr">v-if</span>=<span class="string">"flag2"</span>&gt;</span>这是一个H6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        flag: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        flag2: <span class="literal">false</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="自定义过渡的类名"><a href="#自定义过渡的类名" class="headerlink" title="自定义过渡的类名"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%9A%84%E7%B1%BB%E5%90%8D" target="_blank" rel="noopener">自定义过渡的类名</a></h3><p>我们可以通过以下特性来自定义过渡类名：</p>
<ul>
<li><code>enter-class</code></li>
<li><code>enter-active-class</code></li>
<li><code>enter-to-class</code> (2.1.8+)</li>
<li><code>leave-class</code></li>
<li><code>leave-active-class</code></li>
<li><code>leave-to-class</code> (2.1.8+)</li>
</ul>
<p>他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 <a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">Animate.css</a> 结合使用十分有用。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./lib/animate.css"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 入场 bounceIn    离场 bounceOut --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"toggle"</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需求： 点击按钮，让 h3 显示，再点击，让 h3 隐藏 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;transition enter-active-class="animated bounceIn" leave-active-class="animated bounceOut"&gt;</span></span><br><span class="line"><span class="comment">      &lt;h3 v-if="flag"&gt;这是一个H3&lt;/h3&gt;</span></span><br><span class="line"><span class="comment">    &lt;/transition&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用 :duration="毫秒值" 来统一设置 入场 和 离场 时候的动画时长 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;transition enter-active-class="bounceIn" leave-active-class="bounceOut" :duration="200"&gt;</span></span><br><span class="line"><span class="comment">      &lt;h3 v-if="flag" class="animated"&gt;这是一个H3&lt;/h3&gt;</span></span><br><span class="line"><span class="comment">    &lt;/transition&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用  :duration="&#123; enter: 200, leave: 400 &#125;"  来分别设置 入场的时长 和 离场的时长  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">enter-active-class</span>=<span class="string">"bounceIn"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">leave-active-class</span>=<span class="string">"bounceOut"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:duration</span>=<span class="string">"&#123; enter: 200, leave: 400 &#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">"flag"</span> <span class="attr">class</span>=<span class="string">"animated"</span>&gt;</span>这是一个H3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        flag: <span class="literal">false</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="JavaScript-钩子"><a href="#JavaScript-钩子" class="headerlink" title="JavaScript 钩子"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#JavaScript-%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">JavaScript 钩子</a></h3><p>可以在属性中声明 JavaScript 钩子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  v-on:before-enter=&quot;beforeEnter&quot;</span><br><span class="line">  v-on:enter=&quot;enter&quot;</span><br><span class="line">  v-on:after-enter=&quot;afterEnter&quot;</span><br><span class="line">  v-on:enter-cancelled=&quot;enterCancelled&quot;</span><br><span class="line"></span><br><span class="line">  v-on:before-leave=&quot;beforeLeave&quot;</span><br><span class="line">  v-on:leave=&quot;leave&quot;</span><br><span class="line">  v-on:after-leave=&quot;afterLeave&quot;</span><br><span class="line">  v-on:leave-cancelled=&quot;leaveCancelled&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line">// ...</span><br><span class="line">methods: &#123;</span><br><span class="line">  // --------</span><br><span class="line">  // 进入中</span><br><span class="line">  // --------</span><br><span class="line"></span><br><span class="line">  beforeEnter: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // 当与 CSS 结合使用时</span><br><span class="line">  // 回调函数 done 是可选的</span><br><span class="line">  enter: function (el, done) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterEnter: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  enterCancelled: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // --------</span><br><span class="line">  // 离开时</span><br><span class="line">  // --------</span><br><span class="line"></span><br><span class="line">  beforeLeave: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // 当与 CSS 结合使用时</span><br><span class="line">  // 回调函数 done 是可选的</span><br><span class="line">  leave: function (el, done) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterLeave: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // leaveCancelled 只用于 v-show 中</span><br><span class="line">  leaveCancelled: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些钩子函数可以结合 CSS <code>transitions/animations</code> 使用，也可以单独使用。</p>
<p><code>注意</code>当只用 JavaScript 过渡的时候，<strong>在 enter 和 leave 中必须使用 done 进行回调</strong>。否则，它们将被同步调用，过渡会立即完成。</p>
<p><code>注意</code>推荐对于仅使用 JavaScript 过渡的元素添加 <code>v-bind:css=&quot;false&quot;</code>，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。</p>
<h5 id="使用钩子函数模拟小球半场动画-html"><a href="#使用钩子函数模拟小球半场动画-html" class="headerlink" title="使用钩子函数模拟小球半场动画.html"></a>使用钩子函数模拟小球半场动画.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.ball</span> &#123;</span></span><br><span class="line">      width: 15px;</span><br><span class="line">      height: 15px;</span><br><span class="line">      border-radius: 50%;</span><br><span class="line">      background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"快到碗里来"</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 使用 transition 元素把 小球包裹起来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">before-enter</span>=<span class="string">"beforeEnter"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">enter</span>=<span class="string">"enter"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">after-enter</span>=<span class="string">"afterEnter"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball"</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        flag: <span class="literal">false</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 注意： 动画钩子函数的第一个参数：el，表示 要执行动画的那个DOM元素，是个原生的 JS DOM对象</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 大家可以认为 ， el 是通过 document.getElementById('') 方式获取到的原生JS DOM对象</span></span></span><br><span class="line">        beforeEnter(el)&#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// beforeEnter 表示动画入场之前，此时，动画尚未开始，可以 在 beforeEnter 中，设置元素开始动画之前的起始样式</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 设置小球开始动画之前的，起始位置</span></span></span><br><span class="line"><span class="javascript">          el.style.transform = <span class="string">"translate(0, 0)"</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        enter(el, done)&#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 这句话，没有实际的作用，但是，如果不写，出不来动画效果；</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 可以认为 el.offsetWidth 会强制动画刷新</span></span></span><br><span class="line">          el.offsetWidth</span><br><span class="line"><span class="javascript">          <span class="comment">// enter 表示动画 开始之后的样式，这里，可以设置小球完成动画之后的，结束状态</span></span></span><br><span class="line"><span class="javascript">          el.style.transform = <span class="string">"translate(150px, 450px)"</span></span></span><br><span class="line"><span class="javascript">          el.style.transition = <span class="string">'all 1s ease'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// 这里的 done， 起始就是 afterEnter 这个函数，也就是说：done 是 afterEnter 函数的引用</span></span></span><br><span class="line">          done()</span><br><span class="line">        &#125;,</span><br><span class="line">        afterEnter(el)&#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 动画完成之后，会调用 afterEnter</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log('ok')</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="列表动画"><a href="#列表动画" class="headerlink" title="列表动画"></a>列表动画</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    li &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#999</span>;</span></span><br><span class="line">      margin: 5px;</span><br><span class="line">      line-height: 35px;</span><br><span class="line">      padding-left: 5px;</span><br><span class="line">      font-size: 12px;</span><br><span class="line">      width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      background-color: hotpink;</span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.8s</span> <span class="selector-tag">ease</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-to</span> &#123;</span></span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateY(80px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-active</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.6s</span> <span class="selector-tag">ease</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 下面的 .v-move 和 .v-leave-active 配合使用，能够实现列表后续的元素，渐渐地漂上来的效果 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-move</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.6s</span> <span class="selector-tag">ease</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-active</span>&#123;</span></span><br><span class="line">      position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        Id:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        Name:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"添加"</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;ul&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 在实现列表过渡的时候，如果需要过渡的元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果要为 v-for 循环创建的元素设置动画，必须为每一个 元素 设置 :key 属性 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 给 ransition-group 添加 appear 属性，实现页面刚展示出来时候，入场时候的效果 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 通过 为 transition-group 元素，设置 tag 属性，指定 transition-group 渲染为指定的元素，如果不指定 tag 属性，默认，渲染为 span 标签 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">appear</span> <span class="attr">tag</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, i) in list"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span> @<span class="attr">click</span>=<span class="string">"del(i)"</span>&gt;</span></span><br><span class="line">          &#123;&#123;item.id&#125;&#125; --- &#123;&#123;item.name&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;/ul&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        id: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        name: <span class="string">''</span>,</span></span><br><span class="line">        list: [</span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'赵高'</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'秦桧'</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'严嵩'</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'魏忠贤'</span> &#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        add() &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.list.push(&#123; <span class="attr">id</span>: <span class="keyword">this</span>.id, <span class="attr">name</span>: <span class="keyword">this</span>.name &#125;)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.id = <span class="keyword">this</span>.name = <span class="string">''</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        del(i) &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.list.splice(i, <span class="number">1</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>animation</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs解释jsonp原理</title>
    <url>/2019/03/06/nodejs%E8%A7%A3%E9%87%8Ajsonp%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="node边实现一个服务器"><a href="#node边实现一个服务器" class="headerlink" title="node边实现一个服务器"></a>node边实现一个服务器</h3><p>新建一个jsonp.js的文件，复制下面代码；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line">   // 导入解析 URL 地址的核心模块</span><br><span class="line">   const urlModule = require(&apos;url&apos;);</span><br><span class="line"></span><br><span class="line">   const server = http.createServer();</span><br><span class="line">   // 监听 服务器的 request 请求事件，处理每个请求</span><br><span class="line">   server.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">     const url = req.url;</span><br><span class="line"></span><br><span class="line">     // 解析客户端请求的URL地址</span><br><span class="line">     var info = urlModule.parse(url, true);</span><br><span class="line"></span><br><span class="line">     // 如果请求的 URL 地址是 /getjsonp ，则表示要获取JSONP类型的数据</span><br><span class="line">     if (info.pathname === &apos;/getjsonp&apos;) &#123;</span><br><span class="line">       // 获取客户端指定的回调函数的名称</span><br><span class="line">       var cbName = info.query.callback;</span><br><span class="line">       // 手动拼接要返回给客户端的数据对象</span><br><span class="line">       var data = &#123;</span><br><span class="line">         name: &apos;zs&apos;,</span><br><span class="line">         age: 22,</span><br><span class="line">         gender: &apos;男&apos;,</span><br><span class="line">         hobby: [&apos;吃饭&apos;, &apos;睡觉&apos;, &apos;运动&apos;]</span><br><span class="line">       &#125;</span><br><span class="line">       // 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：</span><br><span class="line">       var result = `$&#123;cbName&#125;($&#123;JSON.stringify(data)&#125;)`;</span><br><span class="line">       // 将拼接好的方法的调用，返回给客户端去解析执行</span><br><span class="line">       res.end(result);</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">       res.end(&apos;404&apos;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   server.listen(3000, () =&gt; &#123;</span><br><span class="line">     console.log(&apos;server running at http://127.0.0.1:3000&apos;);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>
<p>在jsonp.js所在文件夹右键打开命令窗口</p>
<p>执行<code>node jsonp.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xiaobu@DESKTOP-P7959T8 MINGW64 ~<span class="regexp">/Desktop</span></span><br><span class="line"><span class="regexp">$ node jsonp.js</span></span><br><span class="line"><span class="regexp">server running at http:/</span><span class="regexp">/127.0.0.1:3000</span></span><br></pre></td></tr></table></figure>
<p>这样服务器就打开了</p>
<p>接下来就是客户端这边了</p>
<p>新建一个html文件，代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">showInfo123</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data)</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1:3000/getjsonp?callback=showInfo123"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;script&gt;</span></span><br><span class="line"><span class="comment">  show()</span></span><br><span class="line"><span class="comment">&lt;/script&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在浏览器中打开这个文件，并查看console日志，就能看到服务器返回的数据。如图</p>
<p><img src="/2019/03/06/nodejs解释jsonp原理/1551880444096.png" alt="1551880444096"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jsonp原理：</span><br><span class="line">	就是利用script标签+回调函数来获取请求的数据</span><br><span class="line">	解决了跨域问题，与ajax请求数据方式完全不同</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>底层原理</category>
      </categories>
      <tags>
        <tag>jsonp</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>vue基础</title>
    <url>/2019/03/06/vue%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="vue基础"><a href="#vue基础" class="headerlink" title="vue基础"></a>vue基础</h3><p><img src="/2019/03/06/vue基础/01.MVC和MVVM的关系图解.png" alt></p>
<p><img src="/2019/03/06/vue基础/lifecycle.png" alt></p>
<p>生命周期演示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"修改msg"</span> @<span class="attr">click</span>=<span class="string">"msg='No'"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"h3"</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">'ok'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        show() &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'执行了show方法'</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      beforeCreate() &#123; <span class="comment">// 这是我们遇到的第一个生命周期函数，表示实例完全被创建出来之前，会执行它</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(this.msg)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// this.show()</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 注意： 在 beforeCreate 生命周期函数执行的时候，data 和 methods 中的 数据都还没有没初始化</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      created() &#123; <span class="comment">// 这是遇到的第二个生命周期函数</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(this.msg)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// this.show()</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//  在 created 中，data 和 methods 都已经被初始化好了！</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果要调用 methods 中的方法，或者操作 data 中的数据，最早，只能在 created 中操作</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      beforeMount() &#123; <span class="comment">// 这是遇到的第3个生命周期函数，表示 模板已经在内存中编辑完成了，但是尚未把 模板渲染到 页面中</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(document.getElementById('h3').innerText)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 在 beforeMount 执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模板字符串</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      mounted() &#123; <span class="comment">// 这是遇到的第4个生命周期函数，表示，内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(document.getElementById('h3').innerText)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 注意： mounted 是 实例创建期间的最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，此时，如果没有其它操作的话，这个实例，就静静的 躺在我们的内存中，一动不动</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 接下来的是运行中的两个事件</span></span></span><br><span class="line"><span class="javascript">      beforeUpdate() &#123; <span class="comment">// 这时候，表示 我们的界面还没有被更新【数据被更新了吗？  数据肯定被更新了】</span></span></span><br><span class="line">        /* console.log('界面上元素的内容：' + document.getElementById('h3').innerText)</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'data 中的 msg 数据是：'</span> + <span class="keyword">this</span>.msg) *<span class="regexp">/</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 得出结论： 当执行 beforeUpdate 的时候，页面中的显示的数据，还是旧的，此时 data 数据是最新的，页面尚未和 最新的数据保持同步</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      updated() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'界面上元素的内容：'</span> + <span class="built_in">document</span>.getElementById(<span class="string">'h3'</span>).innerText)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'data 中的 msg 数据是：'</span> + <span class="keyword">this</span>.msg)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// updated 事件执行的时候，页面和 data 数据已经保持同步了，都是最新的</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>生命周期总结</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beforeCreate()  表示实例完全被创建出来之前，会执行它</span><br><span class="line">注意： 在 beforeCreate 生命周期函数执行的时候，data 和 methods 中的 数据都还没有没初始化</span><br><span class="line"></span><br><span class="line">created()   表示示例已经创建好了在 created 中，data 和 methods 都已经被初始化好了！</span><br><span class="line">  如果要调用 methods 中的方法，或者操作 data 中的数据，最早，只能在 created 中操作</span><br><span class="line">  </span><br><span class="line"> beforeMount()  表示 模板已经在内存中编辑完成了，但是尚未把 模板渲染到 页面中，挂载尚未完成</span><br><span class="line">  在 beforeMount 执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模板字符串</span><br><span class="line">  </span><br><span class="line"> mounted()  表示内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了</span><br><span class="line"> 注意： mounted 是 实例创建期间的最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，此时，如果没有其它操作的话，这个实例，就静静的 躺在我们的内存中，一动不动</span><br><span class="line"> </span><br><span class="line"> beforeUpdate()  当执行 beforeUpdate 的时候，页面中的显示的数据，还是旧的，此时 data 数据是最新的，页面尚未和 最新的数据保持同步</span><br><span class="line"> </span><br><span class="line"> updated()  updated 事件执行的时候，页面和 data 数据已经保持同步了，都是最新的</span><br></pre></td></tr></table></figure>
<p>品牌列表案例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./lib/bootstrap-3.3.7.css"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 需要用到Jquery吗？？？ --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123;1+1&#125;&#125; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span>添加品牌<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body form-inline"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          Id:</span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          Name:</span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"name"</span> @<span class="attr">keyup.f2</span>=<span class="string">"add"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 在Vue中，使用事件绑定机制，为元素指定处理函数的时候，如果加了小括号，就可以给函数传参了 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"添加"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          搜索名称关键字：</span><br><span class="line">          <span class="comment">&lt;!-- 注意： Vue中所有的指令，在调用的时候，都以 v- 开头 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"keywords"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">v-focus</span> <span class="attr">v-color</span>=<span class="string">"'green'"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-hover table-striped"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Ctime<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Operation<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 之前， v-for 中的数据，都是直接从 data 上的list中直接渲染过来的 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 现在， 我们自定义了一个 search 方法，同时，把 所有的关键字，通过传参的形式，传递给了 search 方法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在 search 方法内部，通过 执行 for 循环， 把所有符合 搜索关键字的数据，保存到 一个新数组中，返回 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in search(keywords)"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-text</span>=<span class="string">"item.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.ctime | dateFormat('yyyy-mm-dd') &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"del(item.id)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-color</span>=<span class="string">"'pink'"</span> <span class="attr">v-fontweight</span>=<span class="string">"900"</span> <span class="attr">v-fontsize</span>=<span class="string">"50"</span>&gt;</span>&#123;&#123; dt | dateFormat &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 全局的过滤器， 进行时间的格式化</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 所谓的全局过滤器，就是所有的VM实例都共享的</span></span></span><br><span class="line"><span class="javascript">    Vue.filter(<span class="string">'dateFormat'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">dateStr, pattern = <span class="string">""</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 根据给定的时间字符串，得到特定的时间</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(dateStr)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">//   yyyy-mm-dd</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> y = dt.getFullYear()</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> m = dt.getMonth() + <span class="number">1</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> d = dt.getDate()</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// return y + '-' + m + '-' + d</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (pattern.toLowerCase() === <span class="string">'yyyy-mm-dd'</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> hh = dt.getHours()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> mm = dt.getMinutes()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ss = dt.getSeconds()</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 自定义全局按键修饰符</span></span></span><br><span class="line">    Vue.config.keyCodes.f2 = 113</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 使用  Vue.directive() 定义全局的指令  v-focus</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 其中：参数1 ： 指令的名称，注意，在定义的时候，指令的名称前面，不需要加 v- 前缀, </span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 但是： 在调用的时候，必须 在指令名称前 加上 v- 前缀来进行调用</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//  参数2： 是一个对象，这个对象身上，有一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作</span></span></span><br><span class="line"><span class="javascript">    Vue.directive(<span class="string">'focus'</span>, &#123;</span></span><br><span class="line"><span class="javascript">      bind: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123; <span class="comment">// 每当指令绑定到元素上的时候，会立即执行这个 bind 函数，只执行一次</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 注意： 在每个 函数中，第一个参数，永远是 el ，表示 被绑定了指令的那个元素，这个 el 参数，是一个原生的JS对象</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 在元素 刚绑定了指令的时候，还没有 插入到 DOM中去，这时候，调用 focus 方法没有作用</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//  因为，一个元素，只有插入DOM之后，才能获取焦点</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// el.focus()</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;  <span class="comment">// inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】</span></span></span><br><span class="line">        el.focus()</span><br><span class="line"><span class="javascript">        <span class="comment">// 和JS行为有关的操作，最好在 inserted 中去执行，否则 JS行为不生效</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      updated: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;  <span class="comment">// 当VNode更新的时候，会执行 updated， 可能会触发多次</span></span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 自定义一个 设置字体颜色的 指令</span></span></span><br><span class="line"><span class="javascript">    Vue.directive(<span class="string">'color'</span>, &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 样式，只要通过指令绑定给了元素，不管这个元素有没有被插入到页面中去，这个元素肯定有了一个内联的样式</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 将来元素肯定会显示到页面中，这时候，浏览器的渲染引擎必然会解析样式，应用给这个元素</span></span></span><br><span class="line"><span class="javascript">      bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// el.style.color = 'red'</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(binding.name)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 和样式相关的操作，一般都可以在 bind 执行</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(binding.value)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(binding.expression)</span></span></span><br><span class="line"></span><br><span class="line">        el.style.color = binding.value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        id: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        name: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        keywords: <span class="string">''</span>, <span class="comment">// 搜索的关键字</span></span></span><br><span class="line">        list: [</span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'奔驰'</span>, <span class="attr">ctime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'宝马'</span>, <span class="attr">ctime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        add() &#123; <span class="comment">// 添加的方法</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log('ok')</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 分析：</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 1. 获取到 id 和 name ,直接从 data 上面获取 </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 2. 组织出一个对象</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 3. 把这个对象，调用 数组的 相关方法，添加到 当前 data 上的 list 中</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 4. 注意：在Vue中，已经实现了数据的双向绑定，每当我们修改了 data 中的数据，Vue会默认监听到数据的改动，自动把最新的数据，应用到页面上；</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// 5. 当我们意识到上面的第四步的时候，就证明大家已经入门Vue了，我们更多的是在进行 VM中 Model 数据的操作，同时，在操作Model数据的时候，指定的业务逻辑操作；</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> car = &#123; <span class="attr">id</span>: <span class="keyword">this</span>.id, <span class="attr">name</span>: <span class="keyword">this</span>.name, <span class="attr">ctime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.list.push(car)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.id = <span class="keyword">this</span>.name = <span class="string">''</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        del(id) &#123; <span class="comment">// 根据Id删除数据</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 分析：</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 1. 如何根据Id，找到要删除这一项的索引</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 2. 如果找到索引了，直接调用 数组的 splice 方法</span></span></span><br><span class="line"></span><br><span class="line">          /* this.list.some((item, i) =&gt; &#123;</span><br><span class="line">            if (item.id == id) &#123;</span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.list.splice(i, <span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 在 数组的 some 方法中，如果 return true，就会立即终止这个数组的后续循环</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;) */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> index = <span class="keyword">this</span>.list.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">            if (item.id == id) &#123;</span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(index)</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.list.splice(index, <span class="number">1</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        search(keywords) &#123; <span class="comment">// 根据关键字，进行数据的搜索</span></span></span><br><span class="line">          /* var newList = []</span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">            if (item.name.indexOf(keywords) != -1) &#123;</span><br><span class="line">              newList.push(item)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> newList *<span class="regexp">/</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// 注意：  forEach   some   filter   findIndex   这些都属于数组的新方法，</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//  都会对数组中的每一项，进行遍历，执行相关的操作；</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="keyword">this</span>.list.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// if(item.name.indexOf(keywords) != -1)</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 注意 ： ES6中，为字符串提供了一个新方法，叫做  String.prototype.includes('要包含的字符串')</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//  如果包含，则返回 true ，否则返回 false</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//  contain</span></span></span><br><span class="line">            if (item.name.includes(keywords)) &#123;</span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> item</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// return newList</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 如何自定义一个私有的过滤器（局部）</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app2'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        dt: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line"><span class="javascript">      filters: &#123; <span class="comment">// 定义私有过滤器    过滤器有两个 条件  【过滤器名称 和 处理函数】</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 过滤器调用的时候，采用的是就近原则，如果私有过滤器和全局过滤器名称一致了，这时候 优先调用私有过滤器</span></span></span><br><span class="line"><span class="javascript">        dateFormat: <span class="function"><span class="keyword">function</span> (<span class="params">dateStr, pattern = <span class="string">''</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 根据给定的时间字符串，得到特定的时间</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(dateStr)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">//   yyyy-mm-dd</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> y = dt.getFullYear()</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> m = (dt.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> d = dt.getDate().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (pattern.toLowerCase() === <span class="string">'yyyy-mm-dd'</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> hh = dt.getHours().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> mm = dt.getMinutes().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> ss = dt.getSeconds().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span> ~~~~~~~`</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      directives: &#123; <span class="comment">// 自定义私有指令</span></span></span><br><span class="line"><span class="javascript">        <span class="string">'fontweight'</span>: &#123; <span class="comment">// 设置字体粗细的</span></span></span><br><span class="line"><span class="javascript">          bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span></span><br><span class="line">            el.style.fontWeight = binding.value</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="string">'fontsize'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123; <span class="comment">// 注意：这个 function 等同于 把 代码写到了 bind 和 update 中去</span></span></span><br><span class="line"><span class="javascript">          el.style.fontSize = <span class="built_in">parseInt</span>(binding.value) + <span class="string">'px'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 过滤器的定义语法</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue.filter('过滤器的名称', function()&#123;&#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 过滤器中的 function ，第一个参数，已经被规定死了，永远都是 过滤器 管道符前面 传递过来的数据</span></span></span><br><span class="line">    /* Vue.filter('过滤器的名称', function (data) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> data + <span class="string">'123'</span></span></span><br><span class="line">    &#125;) */</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// document.getElementById('search').focus()</span></span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 过滤器调用时候的格式    &#123;&#123; name | 过滤器的名称 &#125;&#125; --&gt;</span></span><br></pre></td></tr></table></figure>
<p>知识点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;!-- 之前， v-for 中的数据，都是直接从 data 上的list中直接渲染过来的 --&gt;</span><br><span class="line">        &lt;!-- 现在， 我们自定义了一个 search 方法，同时，把 所有的关键字，通过传参的形式，传递给了 search 方法 --&gt;</span><br><span class="line">        &lt;!-- 在 search 方法内部，通过 执行 for 循环， 把所有符合 搜索关键字的数据，保存到 一个新数组中，返回 --&gt;</span><br><span class="line">        &lt;tr v-for=&quot;item in search(keywords)&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">            </span><br><span class="line"> 渲染方式采用 search(keywords)  采用方法返回的值作为循环的对象。</span><br><span class="line"> </span><br><span class="line">  数组的push()方法  向数组的末尾添加一个或更多元素，并返回新的长度。</span><br><span class="line">  数组的splice()方法   从数组中添加或删除元素</span><br><span class="line">  移除数组的第三个元素，并在数组第三个位置添加新元素:</span><br><span class="line">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class="line">fruits.splice(2,1,&quot;Lemon&quot;,&quot;Kiwi&quot;);</span><br><span class="line"></span><br><span class="line">fruits 输出结果：</span><br><span class="line">Banana,Orange,Lemon,Kiwi,Mango</span><br></pre></td></tr></table></figure>
<p><em>array</em>.splice(<em>index</em>,<em>howmany</em>,<em>item1</em>,…..,<em>itemX</em>)</p>
<h2 id="参数-Values"><a href="#参数-Values" class="headerlink" title="参数 Values"></a>参数 Values</h2><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>index</em></td>
<td>必需。规定从何处添加/删除元素。 该参数是开始插入和（或）删除的数组元素的下标，必须是数字。</td>
</tr>
<tr>
<td><em>howmany</em></td>
<td>必需。规定应该删除多少元素。必须是数字，但可以是 “0”。 如果未规定此参数，则删除从 index 开始到原数组结尾的所有元素。</td>
</tr>
<tr>
<td><em>item1</em>, …, <em>itemX</em></td>
<td>可选。要添加到数组的新元素</td>
</tr>
</tbody>
</table>
<p>forEach   some   filter   findIndex   这些都属于数组的新方法</p>
<p><a href="http://www.runoob.com/jsref/jsref-foreach.html" target="_blank" rel="noopener">点击查看forEach详解</a></p>
<p><a href="http://www.runoob.com/jsref/jsref-some.html" target="_blank" rel="noopener">点击查看some详解</a></p>
<p><a href="http://www.runoob.com/jsref/jsref-filter.html" target="_blank" rel="noopener">点击查看filter详解</a></p>
<p><a href="http://www.runoob.com/jsref/jsref-findindex.html" target="_blank" rel="noopener">点击查看findIndex详解</a></p>
<p><a href="https://cn.vuejs.org/v2/guide/filters.html" target="_blank" rel="noopener">点击学习vue过滤器</a></p>
<p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">点击学习vue自定义指令</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg | msgFormat('疯狂+1', '123') | test &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义一个 Vue 全局的过滤器，名字叫做  msgFormat</span></span></span><br><span class="line"><span class="javascript">    Vue.filter(<span class="string">'msgFormat'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg, arg, arg2</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 字符串的  replace 方法，第一个参数，除了可写一个 字符串之外，还可以定义一个正则</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> msg.replace(<span class="regexp">/单纯/g</span>, arg + arg2)</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.filter(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> msg + <span class="string">'========'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">'曾经，我也是一个单纯的少年，单纯的我，傻傻的问，谁是世界上最单纯的男人'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日常笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>js对象的属性与方法</title>
    <url>/2019/03/05/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="String-对象属性"><a href="#String-对象属性" class="headerlink" title="String 对象属性"></a>String 对象属性</h2><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-constructor-string.html" target="_blank" rel="noopener">constructor</a></td>
<td>对创建该对象的函数的引用</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-length-string.html" target="_blank" rel="noopener">length</a></td>
<td>字符串的长度</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-prototype-string.html" target="_blank" rel="noopener">prototype</a></td>
<td>允许您向对象添加属性和方法</td>
</tr>
</tbody>
</table>
<p>###string对象方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>charAt()</td>
<td>返回指定索引位置的字符</td>
</tr>
<tr>
<td>charCodeAt()</td>
<td>返回指定索引位置字符的 Unicode 值</td>
</tr>
<tr>
<td>concat()</td>
<td>连接两个或多个字符串，返回连接后的字符串</td>
</tr>
<tr>
<td>fromCharCode()</td>
<td>将 Unicode 转换为字符串</td>
</tr>
<tr>
<td>indexOf()</td>
<td>返回字符串中检索指定字符第一次出现的位置</td>
</tr>
<tr>
<td>lastIndexOf()</td>
<td>返回字符串中检索指定字符最后一次出现的位置</td>
</tr>
<tr>
<td>localeCompare()</td>
<td>用本地特定的顺序来比较两个字符串</td>
</tr>
<tr>
<td>match()</td>
<td>找到一个或多个正则表达式的匹配</td>
</tr>
<tr>
<td>replace()</td>
<td>替换与正则表达式匹配的子串</td>
</tr>
<tr>
<td>search()</td>
<td>检索与正则表达式相匹配的值</td>
</tr>
<tr>
<td>slice()</td>
<td>提取字符串的片断，并在新的字符串中返回被提取的部分</td>
</tr>
<tr>
<td>split()</td>
<td>把字符串分割为子字符串数组</td>
</tr>
<tr>
<td>substr()</td>
<td>从起始索引号提取字符串中指定数目的字符</td>
</tr>
<tr>
<td>substring()</td>
<td>提取字符串中两个指定的索引号之间的字符</td>
</tr>
<tr>
<td>toLocaleLowerCase()</td>
<td>根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td>
</tr>
<tr>
<td>toLocaleUpperCase()</td>
<td>根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td>
</tr>
<tr>
<td>toLowerCase()</td>
<td>把字符串转换为小写</td>
</tr>
<tr>
<td>toString()</td>
<td>返回字符串对象值</td>
</tr>
<tr>
<td>toUpperCase()</td>
<td>把字符串转换为大写</td>
</tr>
<tr>
<td>trim()</td>
<td>移除字符串首尾空白</td>
</tr>
<tr>
<td>valueOf()</td>
<td>返回某个字符串对象的原始值</td>
</tr>
</tbody>
</table>
<h2 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h2><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-constructor-array.html" target="_blank" rel="noopener">constructor</a></td>
<td>返回创建数组对象的原型函数。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-length-array.html" target="_blank" rel="noopener">length</a></td>
<td>设置或返回数组元素的个数。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-prototype-array.html" target="_blank" rel="noopener">prototype</a></td>
<td>允许你向数组对象添加属性或方法。</td>
</tr>
</tbody>
</table>
<h2 id="Array-对象方法"><a href="#Array-对象方法" class="headerlink" title="Array 对象方法"></a>Array 对象方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-concat-array.html" target="_blank" rel="noopener">concat()</a></td>
<td>连接两个或更多的数组，并返回结果。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-copywithin.html" target="_blank" rel="noopener">copyWithin()</a></td>
<td>从数组的指定位置拷贝元素到数组的另一个指定位置中。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-entries.html" target="_blank" rel="noopener">entries()</a></td>
<td>返回数组的可迭代对象。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-every.html" target="_blank" rel="noopener">every()</a></td>
<td>检测数值元素的每个元素是否都符合条件。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-fill.html" target="_blank" rel="noopener">fill()</a></td>
<td>使用一个固定值来填充数组。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-filter.html" target="_blank" rel="noopener">filter()</a></td>
<td>检测数值元素，并返回符合条件所有元素的数组。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-find.html" target="_blank" rel="noopener">find()</a></td>
<td>返回符合传入测试（函数）条件的数组元素。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-findindex.html" target="_blank" rel="noopener">findIndex()</a></td>
<td>返回符合传入测试（函数）条件的数组元素索引。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-foreach.html" target="_blank" rel="noopener">forEach()</a></td>
<td>数组每个元素都执行一次回调函数。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-from.html" target="_blank" rel="noopener">from()</a></td>
<td>通过给定的对象中创建一个数组。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-includes.html" target="_blank" rel="noopener">includes()</a></td>
<td>判断一个数组是否包含一个指定的值。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-indexof-array.html" target="_blank" rel="noopener">indexOf()</a></td>
<td>搜索数组中的元素，并返回它所在的位置。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-isarray.html" target="_blank" rel="noopener">isArray()</a></td>
<td>判断对象是否为数组。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-join.html" target="_blank" rel="noopener">join()</a></td>
<td>把数组的所有元素放入一个字符串。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-keys.html" target="_blank" rel="noopener">keys()</a></td>
<td>返回数组的可迭代对象，包含原始数组的键(key)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-lastindexof-array.html" target="_blank" rel="noopener">lastIndexOf()</a></td>
<td>返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-map.html" target="_blank" rel="noopener">map()</a></td>
<td>通过指定函数处理数组的每个元素，并返回处理后的数组。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-pop.html" target="_blank" rel="noopener">pop()</a></td>
<td>删除数组的最后一个元素并返回删除的元素。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-push.html" target="_blank" rel="noopener">push()</a></td>
<td>向数组的末尾添加一个或更多元素，并返回新的长度。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-reduce.html" target="_blank" rel="noopener">reduce()</a></td>
<td>将数组元素计算为一个值（从左到右）。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-reduceright.html" target="_blank" rel="noopener">reduceRight()</a></td>
<td>将数组元素计算为一个值（从右到左）。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-reverse.html" target="_blank" rel="noopener">reverse()</a></td>
<td>反转数组的元素顺序。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-shift.html" target="_blank" rel="noopener">shift()</a></td>
<td>删除并返回数组的第一个元素。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-slice-array.html" target="_blank" rel="noopener">slice()</a></td>
<td>选取数组的的一部分，并返回一个新数组。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-some.html" target="_blank" rel="noopener">some()</a></td>
<td>检测数组元素中是否有元素符合指定条件。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-sort.html" target="_blank" rel="noopener">sort()</a></td>
<td>对数组的元素进行排序。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-splice.html" target="_blank" rel="noopener">splice()</a></td>
<td>从数组中添加或删除元素。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-tostring-array.html" target="_blank" rel="noopener">toString()</a></td>
<td>把数组转换为字符串，并返回结果。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-unshift.html" target="_blank" rel="noopener">unshift()</a></td>
<td>向数组的开头添加一个或更多元素，并返回新的长度。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-valueof-array.html" target="_blank" rel="noopener">valueOf()</a></td>
<td>返回数组对象的原始值。</td>
</tr>
</tbody>
</table>
<h2 id="Boolean-对象属性"><a href="#Boolean-对象属性" class="headerlink" title="Boolean 对象属性"></a>Boolean 对象属性</h2><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-constructor-boolean.html" target="_blank" rel="noopener">constructor</a></td>
<td>返回对创建此对象的 Boolean 函数的引用</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-prototype-boolean.html" target="_blank" rel="noopener">prototype</a></td>
<td>使您有能力向对象添加属性和方法。</td>
</tr>
</tbody>
</table>
<h2 id="Boolean-对象方法"><a href="#Boolean-对象方法" class="headerlink" title="Boolean 对象方法"></a>Boolean 对象方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-tostring-boolean.html" target="_blank" rel="noopener">toString()</a></td>
<td>把布尔值转换为字符串，并返回结果。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-valueof-boolean.html" target="_blank" rel="noopener">valueOf()</a></td>
<td>返回 Boolean 对象的原始值。</td>
</tr>
</tbody>
</table>
<h2 id="Date-对象属性"><a href="#Date-对象属性" class="headerlink" title="Date 对象属性"></a>Date 对象属性</h2><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-constructor-date.html" target="_blank" rel="noopener">constructor</a></td>
<td>返回对创建此对象的 Date 函数的引用。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-prototype-date.html" target="_blank" rel="noopener">prototype</a></td>
<td>使您有能力向对象添加属性和方法。</td>
</tr>
</tbody>
</table>
<h2 id="Date-对象方法"><a href="#Date-对象方法" class="headerlink" title="Date 对象方法"></a>Date 对象方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getdate.html" target="_blank" rel="noopener">getDate()</a></td>
<td>从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getday.html" target="_blank" rel="noopener">getDay()</a></td>
<td>从 Date 对象返回一周中的某一天 (0 ~ 6)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getfullyear.html" target="_blank" rel="noopener">getFullYear()</a></td>
<td>从 Date 对象以四位数字返回年份。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-gethours.html" target="_blank" rel="noopener">getHours()</a></td>
<td>返回 Date 对象的小时 (0 ~ 23)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getmilliseconds.html" target="_blank" rel="noopener">getMilliseconds()</a></td>
<td>返回 Date 对象的毫秒(0 ~ 999)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getminutes.html" target="_blank" rel="noopener">getMinutes()</a></td>
<td>返回 Date 对象的分钟 (0 ~ 59)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getmonth.html" target="_blank" rel="noopener">getMonth()</a></td>
<td>从 Date 对象返回月份 (0 ~ 11)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getseconds.html" target="_blank" rel="noopener">getSeconds()</a></td>
<td>返回 Date 对象的秒数 (0 ~ 59)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-gettime.html" target="_blank" rel="noopener">getTime()</a></td>
<td>返回 1970 年 1 月 1 日至今的毫秒数。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-gettimezoneoffset.html" target="_blank" rel="noopener">getTimezoneOffset()</a></td>
<td>返回本地时间与格林威治标准时间 (GMT) 的分钟差。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getutcdate.html" target="_blank" rel="noopener">getUTCDate()</a></td>
<td>根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getutcday.html" target="_blank" rel="noopener">getUTCDay()</a></td>
<td>根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getutcfullyear.html" target="_blank" rel="noopener">getUTCFullYear()</a></td>
<td>根据世界时从 Date 对象返回四位数的年份。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getutchours.html" target="_blank" rel="noopener">getUTCHours()</a></td>
<td>根据世界时返回 Date 对象的小时 (0 ~ 23)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getutcmilliseconds.html" target="_blank" rel="noopener">getUTCMilliseconds()</a></td>
<td>根据世界时返回 Date 对象的毫秒(0 ~ 999)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getutcminutes.html" target="_blank" rel="noopener">getUTCMinutes()</a></td>
<td>根据世界时返回 Date 对象的分钟 (0 ~ 59)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getutcmonth.html" target="_blank" rel="noopener">getUTCMonth()</a></td>
<td>根据世界时从 Date 对象返回月份 (0 ~ 11)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-getutcseconds.html" target="_blank" rel="noopener">getUTCSeconds()</a></td>
<td>根据世界时返回 Date 对象的秒钟 (0 ~ 59)。</td>
</tr>
<tr>
<td>getYear()</td>
<td>已废弃。 请使用 getFullYear() 方法代替。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-parse.html" target="_blank" rel="noopener">parse()</a></td>
<td>返回1970年1月1日午夜到指定日期（字符串）的毫秒数。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-setdate.html" target="_blank" rel="noopener">setDate()</a></td>
<td>设置 Date 对象中月的某一天 (1 ~ 31)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-setfullyear.html" target="_blank" rel="noopener">setFullYear()</a></td>
<td>设置 Date 对象中的年份（四位数字）。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-sethours.html" target="_blank" rel="noopener">setHours()</a></td>
<td>设置 Date 对象中的小时 (0 ~ 23)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-setmilliseconds.html" target="_blank" rel="noopener">setMilliseconds()</a></td>
<td>设置 Date 对象中的毫秒 (0 ~ 999)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-setminutes.html" target="_blank" rel="noopener">setMinutes()</a></td>
<td>设置 Date 对象中的分钟 (0 ~ 59)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-setmonth.html" target="_blank" rel="noopener">setMonth()</a></td>
<td>设置 Date 对象中月份 (0 ~ 11)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-setseconds.html" target="_blank" rel="noopener">setSeconds()</a></td>
<td>设置 Date 对象中的秒钟 (0 ~ 59)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-settime.html" target="_blank" rel="noopener">setTime()</a></td>
<td>setTime() 方法以毫秒设置 Date 对象。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-setutcdate.html" target="_blank" rel="noopener">setUTCDate()</a></td>
<td>根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-setutcfullyear.html" target="_blank" rel="noopener">setUTCFullYear()</a></td>
<td>根据世界时设置 Date 对象中的年份（四位数字）。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-setutchours.html" target="_blank" rel="noopener">setUTCHours()</a></td>
<td>根据世界时设置 Date 对象中的小时 (0 ~ 23)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-setutcmilliseconds.html" target="_blank" rel="noopener">setUTCMilliseconds()</a></td>
<td>根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-setutcminutes.html" target="_blank" rel="noopener">setUTCMinutes()</a></td>
<td>根据世界时设置 Date 对象中的分钟 (0 ~ 59)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-setutcmonth.html" target="_blank" rel="noopener">setUTCMonth()</a></td>
<td>根据世界时设置 Date 对象中的月份 (0 ~ 11)。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-setutcseconds.html" target="_blank" rel="noopener">setUTCSeconds()</a></td>
<td>setUTCSeconds() 方法用于根据世界时 (UTC) 设置指定时间的秒字段。</td>
</tr>
<tr>
<td>setYear()</td>
<td>已废弃。请使用 setFullYear() 方法代替。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-todatestring.html" target="_blank" rel="noopener">toDateString()</a></td>
<td>把 Date 对象的日期部分转换为字符串。</td>
</tr>
<tr>
<td>toGMTString()</td>
<td>已废弃。请使用 toUTCString() 方法代替。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-toisostring.html" target="_blank" rel="noopener">toISOString()</a></td>
<td>使用 ISO 标准返回字符串的日期格式。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-tojson.html" target="_blank" rel="noopener">toJSON()</a></td>
<td>以 JSON 数据格式返回日期字符串。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-tolocaledatestring.html" target="_blank" rel="noopener">toLocaleDateString()</a></td>
<td>根据本地时间格式，把 Date 对象的日期部分转换为字符串。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-tolocaletimestring.html" target="_blank" rel="noopener">toLocaleTimeString()</a></td>
<td>根据本地时间格式，把 Date 对象的时间部分转换为字符串。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-tolocalestring.html" target="_blank" rel="noopener">toLocaleString()</a></td>
<td>据本地时间格式，把 Date 对象转换为字符串。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-tostring-date.html" target="_blank" rel="noopener">toString()</a></td>
<td>把 Date 对象转换为字符串。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-totimestring.html" target="_blank" rel="noopener">toTimeString()</a></td>
<td>把 Date 对象的时间部分转换为字符串。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-toutcstring.html" target="_blank" rel="noopener">toUTCString()</a></td>
<td>根据世界时，把 Date 对象转换为字符串。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-utc.html" target="_blank" rel="noopener">UTC()</a></td>
<td>根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-valueof-date.html" target="_blank" rel="noopener">valueOf()</a></td>
<td>返回 Date 对象的原始值。</td>
</tr>
</tbody>
</table>
<h2 id="Math-对象属性"><a href="#Math-对象属性" class="headerlink" title="Math 对象属性"></a>Math 对象属性</h2><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-e.html" target="_blank" rel="noopener">E</a></td>
<td>返回算术常量 e，即自然对数的底数（约等于2.718）。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-ln2.html" target="_blank" rel="noopener">LN2</a></td>
<td>返回 2 的自然对数（约等于0.693）。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-ln10.html" target="_blank" rel="noopener">LN10</a></td>
<td>返回 10 的自然对数（约等于2.302）。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-log2e.html" target="_blank" rel="noopener">LOG2E</a></td>
<td>返回以 2 为底的 e 的对数（约等于 1.4426950408889634）。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-log10e.html" target="_blank" rel="noopener">LOG10E</a></td>
<td>返回以 10 为底的 e 的对数（约等于0.434）。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-pi.html" target="_blank" rel="noopener">PI</a></td>
<td>返回圆周率（约等于3.14159）。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-sqrt1-2.html" target="_blank" rel="noopener">SQRT1_2</a></td>
<td>返回 2 的平方根的倒数（约等于 0.707）。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-sqrt2.html" target="_blank" rel="noopener">SQRT2</a></td>
<td>返回 2 的平方根（约等于 1.414）。</td>
</tr>
</tbody>
</table>
<h2 id="Math-对象方法"><a href="#Math-对象方法" class="headerlink" title="Math 对象方法"></a>Math 对象方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-abs.html" target="_blank" rel="noopener">abs(x)</a></td>
<td>返回 x 的绝对值。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-acos.html" target="_blank" rel="noopener">acos(x)</a></td>
<td>返回 x 的反余弦值。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-asin.html" target="_blank" rel="noopener">asin(x)</a></td>
<td>返回 x 的反正弦值。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-atan.html" target="_blank" rel="noopener">atan(x)</a></td>
<td>以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-atan2.html" target="_blank" rel="noopener">atan2(y,x)</a></td>
<td>返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-ceil.html" target="_blank" rel="noopener">ceil(x)</a></td>
<td>对数进行上舍入。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-cos.html" target="_blank" rel="noopener">cos(x)</a></td>
<td>返回数的余弦。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-exp.html" target="_blank" rel="noopener">exp(x)</a></td>
<td>返回 Ex 的指数。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-floor.html" target="_blank" rel="noopener">floor(x)</a></td>
<td>对 x 进行下舍入。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-log.html" target="_blank" rel="noopener">log(x)</a></td>
<td>返回数的自然对数（底为e）。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-max.html" target="_blank" rel="noopener">max(x,y,z,…,n)</a></td>
<td>返回 x,y,z,…,n 中的最高值。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-min.html" target="_blank" rel="noopener">min(x,y,z,…,n)</a></td>
<td>返回 x,y,z,…,n中的最低值。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-pow.html" target="_blank" rel="noopener">pow(x,y)</a></td>
<td>返回 x 的 y 次幂。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-random.html" target="_blank" rel="noopener">random()</a></td>
<td>返回 0 ~ 1 之间的随机数。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-round.html" target="_blank" rel="noopener">round(x)</a></td>
<td>四舍五入。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-sin.html" target="_blank" rel="noopener">sin(x)</a></td>
<td>返回数的正弦。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-sqrt.html" target="_blank" rel="noopener">sqrt(x)</a></td>
<td>返回数的平方根。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-tan.html" target="_blank" rel="noopener">tan(x)</a></td>
<td>返回角的正切。</td>
</tr>
</tbody>
</table>
<h2 id="Number-对象属性"><a href="#Number-对象属性" class="headerlink" title="Number 对象属性"></a>Number 对象属性</h2><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-constructor-number.html" target="_blank" rel="noopener">constructor</a></td>
<td>返回对创建此对象的 Number 函数的引用。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-max-value.html" target="_blank" rel="noopener">MAX_VALUE</a></td>
<td>可表示的最大的数。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-min-value.html" target="_blank" rel="noopener">MIN_VALUE</a></td>
<td>可表示的最小的数。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-negative-infinity.html" target="_blank" rel="noopener">NEGATIVE_INFINITY</a></td>
<td>负无穷大，溢出时返回该值。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-number-nan.html" target="_blank" rel="noopener">NaN</a></td>
<td>非数字值。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-positive-infinity.html" target="_blank" rel="noopener">POSITIVE_INFINITY</a></td>
<td>正无穷大，溢出时返回该值。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-prototype-num.html" target="_blank" rel="noopener">prototype</a></td>
<td>允许您可以向对象添加属性和方法。</td>
</tr>
</tbody>
</table>
<h2 id="Number-对象方法"><a href="#Number-对象方法" class="headerlink" title="Number 对象方法"></a>Number 对象方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-isfinite-number.html" target="_blank" rel="noopener">isFinite</a></td>
<td>检测指定参数是否为无穷大。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-toexponential.html" target="_blank" rel="noopener">toExponential(x)</a></td>
<td>把对象的值转换为指数计数法。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-toexponential.html" target="_blank" rel="noopener">toExponential(x)</a></td>
<td>把对象的值转换为指数计数法。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-tofixed.html" target="_blank" rel="noopener">toFixed(x)</a></td>
<td>把数字转换为字符串，结果的小数点后有指定位数的数字。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-toprecision.html" target="_blank" rel="noopener">toPrecision(x)</a></td>
<td>把数字格式化为指定的长度。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-tostring-number.html" target="_blank" rel="noopener">toString()</a></td>
<td>把数字转换为字符串，使用指定的基数。</td>
</tr>
<tr>
<td><a href="http://www.runoob.com/jsref/jsref-valueof-number.html" target="_blank" rel="noopener">valueOf()</a></td>
<td>返回一个 Number 对象的基本数字值。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>js对象</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>string</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用指令</title>
    <url>/2019/03/05/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Git-常用命令详解（二）"><a href="#Git-常用命令详解（二）" class="headerlink" title="Git 常用命令详解（二）"></a>Git 常用命令详解（二）</h1><p>Git 是一个很强大的分布式版本管理工具，它不但适用于管理大型开源软件的源代码（如：<a href="http://git.kernel.org/" target="_blank" rel="noopener">linux kernel</a>），管理私人的文档和源代码也有很多优势（如：<a href="http://code.google.com/p/wsi-lgame-pro/" target="_blank" rel="noopener">wsi-lgame-pro</a>）</p>
<p>Git 的更多介绍，请参考我的上一篇博客：<a href="http://blog.csdn.net/sunboy_2050/article/details/7527877" target="_blank" rel="noopener">Git 版本管理工具</a></p>
<p><strong>一、 Git 命令初识</strong></p>
<p>在正式介绍Git命令之前，先介绍一下Git 的基本命令和操作，对Git命令有一个总体的认识</p>
<p>示例：从Git 版本库的初始化，通常有两种方式：</p>
<p>1）git clone：这是一种较为简单的初始化方式，当你已经有一个远程的Git版本库，只需要在本地克隆一份</p>
<p>例如：git  clone  git://github.com/someone/some_project.git   some_project </p>
<p>上面的命令就是将’git://github.com/someone/some_project.git’这个URL地址的远程版本库，完全克隆到本地some_project目录下</p>
<p>2）git init 和 git remote：这种方式稍微复杂一些，当你本地创建了一个工作目录，你可以进入这个目录，使用’git init’命令进行初始化；Git以后就会对该目录下的文件进行版本控制，这时候如果你需要将它放到远程服务器上，可以在远程服务器上创建一个目录，并把可访问的URL记录下来，此时你就可以利用’git remote add’命令来增加一个远程服务器端，</p>
<p>例如：git  remote  add  origin  git://github.com/someone/another_project.git</p>
<p>上面的命令就会增加URL地址为’git: //github.com/someone/another_project.git’，名称为origin的远程服务器，以后提交代码的时候只需要使用 origin别名即可</p>
<p>二、 Git 常用命令</p>
<p>1) 远程仓库相关命令</p>
<p>检出仓库：        $ git clone git://github.com/jquery/jquery.git</p>
<p>查看远程仓库：$ git remote -v</p>
<p>添加远程仓库：$ git remote add [name] [url]</p>
<p>删除远程仓库：$ git remote rm [name]</p>
<p>修改远程仓库：$ git remote set-url –push [name] [newUrl]</p>
<p>拉取远程仓库：$ git pull [remoteName] [localBranchName]</p>
<p>推送远程仓库：$ git push [remoteName] [localBranchName]</p>
<p>*如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</p>
<p>$git push origin test:master         // 提交本地test分支作为远程的master分支</p>
<p>$git push origin test:test              // 提交本地test分支作为远程的test分支</p>
<p><strong>2）分支(branch)操作相关命令</strong></p>
<p>查看本地分支：$ git branch</p>
<p>查看远程分支：$ git branch -r</p>
<p>创建本地分支：$ git branch [name] —-注意新分支创建后不会自动切换为当前分支</p>
<p>切换分支：$ git checkout [name]</p>
<p>创建新分支并立即切换到新分支：$ git checkout -b [name]</p>
<p>删除分支：$ git branch -d [name] —- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</p>
<p>合并分支：$ git merge [name] —-将名称为[name]的分支与当前分支合并</p>
<p>创建远程分支(本地分支push到远程)：$ git push origin [name]</p>
<p>删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] </p>
<p>*创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</p>
<p>$git symbolic-ref HEAD refs/heads/[name]</p>
<p>$rm .git/index</p>
<p>$git clean -fdx</p>
<p><strong>3）版本(tag)操作相关命令</strong></p>
<p>查看版本：$ git tag</p>
<p>创建版本：$ git tag [name]</p>
<p>删除版本：$ git tag -d [name]</p>
<p>查看远程版本：$ git tag -r</p>
<p>创建远程版本(本地版本push到远程)：$ git push origin [name]</p>
<p>删除远程版本：$ git push origin :refs/tags/[name]</p>
<p>合并远程仓库的tag到本地：$ git pull origin –tags</p>
<p>上传本地tag到远程仓库：$ git push origin –tags</p>
<p>创建带注释的tag：$ git tag -a [name] -m ‘yourMessage’</p>
<p><strong>4) 子模块(submodule)相关操作命令</strong></p>
<p>添加子模块：$ git submodule add [url] [path]</p>
<p>如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs</p>
<p>初始化子模块：$ git submodule init  —-只在首次检出仓库时运行一次就行</p>
<p>更新子模块：$ git submodule update —-每次更新或切换分支后都需要运行一下</p>
<p>删除子模块：（分4步走哦）</p>
<p>1) $ git rm –cached [path]</p>
<p>2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉</p>
<p>3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉</p>
<p>4) 手动删除子模块残留的目录</p>
<p><strong>5）忽略一些文件、文件夹不提交</strong></p>
<p>在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如</p>
<p>target</p>
<p>bin</p>
<p>*.db</p>
<p><strong>三、 Git 命令详解</strong></p>
<p>现在我们有了本地和远程的版本库，让我们来试着用用Git的基本命令：</p>
<p><strong>git pull：</strong>从其他的版本库（既可以是远程的也可以是本地的）将代码更新到本地，例如：’git pull origin master’就是将origin这个版本库的代码更新到本地的master主枝，该功能类似于SVN的<strong>update</strong></p>
<p><strong>git add：</strong>是将当前更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步，例如’git add app/model/user.rb’就会增加app/model/user.rb文件到Git的索引中，该功能类似于SVN的<strong>add</strong></p>
<p><strong>git rm：</strong>从当前的工作空间中和索引中删除文件，例如’git rm app/model/user.rb’，该功能类似于SVN的<strong>rm、del</strong></p>
<p><strong>git commit：</strong>提交当前工作空间的修改内容，类似于SVN的commit命令，例如’git commit -m story #3, add user model’，提交的时候必须用-m来输入一条提交信息，该功能类似于SVN的<strong>commit</strong></p>
<p><strong>git push：</strong>将本地commit的代码更新到远程版本库中，例如’git push origin’就会将本地的代码更新到名为orgin的远程版本库中</p>
<p><strong>git log：</strong>查看历史日志，该功能类似于SVN的<strong>log</strong></p>
<p><strong>git revert：</strong>还原一个版本的修改，必须提供一个具体的Git版本号，例如’git revert bbaf6fb5060b4875b18ff9ff637ce118256d6f20’，Git的版本号都是生成的一个哈希值</p>
<p>上面的命令几乎都是每个版本控制工具所公有的，下面就开始尝试一下Git独有的一些命令：</p>
<p><strong>git branch：</strong>对分支的增、删、查等操作，例如’git branch new_branch’会从当前的工作版本创建一个叫做new_branch的新分支，’git branch -D new_branch’就会强制删除叫做new_branch的分支，’git branch’就会列出本地所有的分支</p>
<p><strong>git checkout：</strong>Git的checkout有两个作用，其一是在不同的branch之间进行切换，例如’git checkout new_branch’就会切换到new_branch的分支上去；另一个功能是还原代码的作用，例如’git checkout app/model/user.rb’就会将user.rb文件从上一个已提交的版本中更新回来，未提交的内容全部会回滚</p>
<p><strong>git rebase：</strong>用下面两幅图解释会比较清楚一些，rebase命令执行后，实际上是将分支点从C移到了G，这样分支也就具有了从C到G的功能</p>
<p><img src="https://img-my.csdn.net/uploads/201205/02/1335955913_5248.png" alt="img"></p>
<p><strong>git reset：</strong>将当前的工作目录完全回滚到指定的版本号，假设如下图，我们有A-G五次提交的版本，其中C的版本号是 bbaf6fb5060b4875b18ff9ff637ce118256d6f20，我们执行了’git reset bbaf6fb5060b4875b18ff9ff637ce118256d6f20’那么结果就只剩下了A-C三个提交的版本</p>
<p><img src="https://img-my.csdn.net/uploads/201205/02/1335955922_4934.png" alt="img"></p>
<p><strong>git stash：</strong>将当前未提交的工作存入Git工作栈中，时机成熟的时候再应用回来，这里暂时提一下这个命令的用法，后面在技巧篇会重点讲解</p>
<p><strong>git config：</strong>利用这个命令可以新增、更改Git的各种设置，例如’git config branch.master.remote origin’就将master的远程版本库设置为别名叫做origin版本库，后面在技巧篇会利用这个命令个性化设置你的Git，为你打造独一无二的 Git</p>
<p><strong>git tag：</strong>可以将某个具体的版本打上一个标签，这样你就不需要记忆复杂的版本号哈希值了，例如你可以使用’git tag revert_version bbaf6fb5060b4875b18ff9ff637ce118256d6f20’来标记这个被你还原的版本，那么以后你想查看该版本时，就可以使用 revert_version标签名，而不是哈希值了</p>
<p>Git 之所以能够提供方便的本地分支等特性，是与它的文件存储机制有关的。Git存储版本控制信息时使用它自己定义的一套文件系统存储机制，在代码根目录下有一个.git文件夹，会有如下这样的目录结构：</p>
<p><img src="https://img-my.csdn.net/uploads/201205/02/1335955931_2964.png" alt="img"></p>
<p>有几个比较重要的文件和目录需要解释一下：HEAD文件存放根节点的信息，其实目录结构就表示一个树型结构，Git采用这种树形结构来存储版本信息，那么HEAD就表示根；refs目录存储了你在当前版本控制目录下的各种不同引用（引用指的是你本地和远程所用到的各个树分支的信息），它有heads、remotes、stash、tags四个子目录，分别存储对不同的根、远程版本库、Git栈和标签的四种引用，你可以通过命令’git show-ref’更清晰地查看引用信息；logs目录根据不同的引用存储了日志信息。因此，Git只需要代码根目录下的这一个.git目录就可以记录完整的版本控制信息，而不是像SVN那样根目录和子目录下都有.svn目录。那么下面就来看一下Git与SVN的区别吧</p>
<p><strong>四、 Git 与SVN 比较</strong></p>
<p><strong>SVN</strong>（Subversion）是当前使用最多的版本控制工具。与它相比较，<strong>Git</strong> 最大的优势在于两点：易于本地增加分支和分布式的特性。</p>
<p>下面两幅图可以形象的展示Git与SVN的不同之处：</p>
<p><img src="https://img-my.csdn.net/uploads/201205/02/1335955948_6239.png" alt="img"></p>
<p>-———–</p>
<p><img src="https://img-my.csdn.net/uploads/201205/02/1335955958_4495.png" alt="img"></p>
<p>1）本地增加分支</p>
<p>图中Git本地和服务器端结构都很灵活，所有版本都存储在一个目录中，你只需要进行分支的切换即可达到在某个分支工作的效果</p>
<p>而SVN则完全不同，如果你需要在本地试验一些自己的代码，只能本地维护多个不同的拷贝，每个拷贝对应一个SVN服务器地址</p>
<p>举一个实际的例子：</p>
<p>使用SVN作为版本控制工具，当正在试图增强一个模块，工作做到一半，由于会改变原模块的行为导致代码服务器上许多测试的失败，所以并没有提交代码。</p>
<p>这时候假如现在有一个很紧急的Bug需要处理， 必须在两个小时内完成。我只好将本地的所有修改diff，并输出成为一个patch文件，然后回滚有关当前任务的所有代码，再开始修改Bug的任务，等到修改好后，在将patch应用回来。前前后后要完成多个繁琐的步骤，这还不计中间代码发生冲突所要进行的工作量。</p>
<p>可是如果使用Git， 我们只需要开一个分支或者转回到主分支上，就可以随时开始Bug修改的任务，完成之后，只要切换到原来的分支就可以优雅的继续以前的任务。只要你愿意，每一个新的任务都可以开一个分支，完成后，再将它合并到主分支上，轻松而优雅。</p>
<p>2）分布式提交</p>
<p>Git 可以本地提交代码，所以在上面的图中，Git有利于将一个大任务分解，进行本地的多次提交</p>
<p>而SVN只能在本地进行大量的一次性更改，导致将来合并到主干上造成巨大的风险</p>
<p>3）日志查看</p>
<p>Git 的代码日志是在本地的，可以随时查看</p>
<p>SVN的日志在服务器上的，每次查看日志需要先从服务器上下载下来</p>
<p>例如：代码服务器在美国，当每次查看几年前所做的工作时，日志下载可能需要十分钟，这不能不说是一个痛苦。但是如果迁移到Git上，利用Git日志在本地的特性，查看某个具体任务的所有代码历史，每次只需要几秒钟，大大方便了工作，提高了效率。</p>
<p>当然分布式并不是说用了Git就不需要一个代码中心服务器，如果你工作在一个团队里，还是需要一个服务器来保存所有的代码的。</p>
<p><strong>五、 总结</strong></p>
<p>上面简单介绍了Git 的基本概念、一些常用命令和原理，大家也可以尝试动手，在Google Code 或 GitHub 上创建一个自己的开源项目</p>
<p>Git 创建与使用示例：</p>
<p>在Google Code 上，我创建了Git 项目：<a href="http://code.google.com/p/linux-kernel-source/source/checkout" target="_blank" rel="noopener">linux-kernel-source</a></p>
<p>在GitHub上，我引用的Git 项目：<a href="https://github.com/facebook/hiphop-php" target="_blank" rel="noopener">hiphop-php</a></p>
<p>在osChina上，我分享的项目：<a href="http://www.oschina.net/code/explore/gcc-4.5.2" target="_blank" rel="noopener">gcc-4.5.2</a></p>
<p><strong>参考推荐：</strong></p>
<p><a href="http://hi.baidu.com/sunboy_2050/blog/item/b7ec1432be8d9c82a8018eff.html" target="_blank" rel="noopener">Git 命令参数及用法详解</a></p>
<p><a href="http://blog.csdn.net/sunboy_2050/article/details/7527877" target="_blank" rel="noopener">Git 版本管理工具</a></p>
<p><a href="http://blog.csdn.net/sunboy_2050/article/details/6187464" target="_blank" rel="noopener">SVN常用命令</a></p>
<p><a href="http://scmbob.org/git_and_svn.html" target="_blank" rel="noopener">SVN和Git的比较</a></p>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack的基本使用</title>
    <url>/2019/03/05/webpack%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><h3 id="webpack最基本的使用"><a href="#webpack最基本的使用" class="headerlink" title="webpack最基本的使用"></a>webpack最基本的使用</h3><p>创建文件根目录如下</p>
<blockquote>
<p>webpack-study</p>
<blockquote>
<p>/dist</p>
<blockquote>
<p>bundle.js    //执行webpack 打包命令时生成的</p>
</blockquote>
<p>/node_modules   //执行npm install 时生成的模板文件</p>
<p>/src</p>
<blockquote>
<p>/css</p>
<p>/js</p>
<p>/image</p>
<p>index.html      //要显示的界面</p>
<p>main.js       // 入口文件</p>
</blockquote>
<p>package.json    //执行npm init 时生成的文件</p>
<p>package-lock.json</p>
<p>webpack.config.js</p>
</blockquote>
</blockquote>
<ol>
<li><p>安装node</p>
</li>
<li><p>创建如上目录</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">index.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>隔行变色<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--因为 main中的代码，涉及到了ES6的新语法，但是浏览器不识别--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;script src="main.js"&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 通过webpack 这么一个前端构建工具，把main.js做了一下处理，生成了一个bundle.js的文件--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../dist/bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">main.js</span><br><span class="line"><span class="comment">//这是main.js 是我们项目的js入口文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 导入jquery</span></span><br><span class="line"><span class="comment">//import *** from *** 是 ES6中导入模块的方式</span></span><br><span class="line"><span class="comment">//由于ES6的代码 太高级了 浏览器解析不了，所以这一行执行报错</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line"><span class="comment">// const $ = require('jquery')</span></span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">'li:odd'</span>).css(<span class="string">'backgroundColor'</span>,<span class="string">'yellow'</span>)</span><br><span class="line">	$(<span class="string">'li:even'</span>).css(<span class="string">'backgroundColor'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'#'</span>+<span class="string">'D97634'</span></span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//经过刚才的演示  webpack 可以做什么事情？？？？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. webpack能够处理js文件的互相依赖关系</span></span><br><span class="line"><span class="comment">//2. webpack能够处理js的兼容问题，把高级浏览器不识别的语法转为低级的浏览器能够正常识别的语法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 刚才运行的命令格式  webpack 要打包的文件的路径 -o 打包好的输出文件的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先执行 npm init 初始化，会创建一个 package.json的文件，里面的配置用于，存储依赖项，每安装一个包，这里的依赖项配置就会添加相应的包名称，以后即使没有module文件，只要有这个文件在，也可以通过 npm intall 命令把需要用到的包下载下来</span></span><br><span class="line"><span class="comment">// 由于需要引入jquery 所以得先下载 npm i jquery --save</span></span><br><span class="line"><span class="comment">//如： webpack .\src\main.js -o .\dist\bundle.js</span></span><br></pre></td></tr></table></figure>
<p>效果显示如下</p>
<p><img src="/2019/03/05/webpack使用/1552195421995.png" alt="1552195421995"></p>
<p>这样就可以运行index.html文件并实现隔行换色效果了，但是为了避免每次打包都得输入很长的命令，于是创建了一个webpack.config.js的文件进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">webpack.config.js文件（webpack是基于node的，所以也有node的模块）</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个配置文件其实就是一个js文件，通过Node中的模块操作，向外暴露了一个 配置对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	<span class="comment">// 大家已经学会了举一反三  大家觉得在配置文件中 需要手动指定  入口 和  出口</span></span><br><span class="line">	entry: path.join(__dirname,<span class="string">'./src/main.js'</span>),<span class="comment">//入口  表示要使用 webpack 打包哪个文件</span></span><br><span class="line">	output:&#123; <span class="comment">//输出文件相关的配置</span></span><br><span class="line">		path: path.join(__dirname,<span class="string">'./dist'</span>), <span class="comment">//指定打包好的文件输出到哪个目录去</span></span><br><span class="line">		filename: <span class="string">'bundle.js'</span>  <span class="comment">//指定 输出文件的名称</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们在控制台直接输入 webpack命令的时候，webpack做了一下几步</span></span><br><span class="line"><span class="comment">//  1  首先，webpack 发现 我们并没有通过 命令的形式，给他制定入口和出口</span></span><br><span class="line"><span class="comment">//  2  webpack就会去项目的根目录 查找一个叫做  ‘webpack.config.js’的配置文件</span></span><br><span class="line"><span class="comment">//  3  当找到配置文件后，webpack 会去解析执行这个 配置文件  当解析执行完配置文件后就得到了 配置文件中，到处的配置对象</span></span><br><span class="line"><span class="comment">//  4 当webpack拿到配置对象后，就拿到了配置对象中指定的入口和出口 然后进行打包构建</span></span><br></pre></td></tr></table></figure>
<p>配置完成后打包就不需要再输入 入口文件和出口文件了，直接输入webpack 回车即可。</p>
<p>更改颜色为red，并执行webpack命令，刷新浏览器，效果如下</p>
<p><img src="/2019/03/05/webpack使用/1552196415094.png" alt="1552196415094"></p>
<p>每次都要执行webpack命令进行打包也是挺麻烦的，为了实现每次保存，自动打包，我们用到了 webpack-dev-server 工具</p>
<p>这个工具可以帮我们实现保存自动打包。</p>
<ol>
<li><p>执行命令  <code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖，执行完毕后会多了个package.json文件，效果如下</p>
<p><img src="/2019/03/05/webpack使用/1552197918444.png" alt="1552197918444"></p>
<p>由于不是全局安装，所以无法执行该命令</p>
</li>
</ol>
<p>G:\前端\vuejs深入浅出资料\day5\代码\webpack-study2&gt;webpack-dev-server<br>‘webpack-dev-server’ 不是内部或外部命令，也不是可运行的程序<br>或批处理文件。</p>
<p>所以需要到package.json文件里面修改配置</p>
<p>在<code>scripts</code>节点下新增<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>指令</p>
<p>执行npm run dev 命令是还是报错，因为还需要一个局部的webpack包，效果如下</p>
<p><img src="/2019/03/05/webpack使用/1552199753582.png" alt="1552199753582"></p>
<p>解决： 1. 执行命令 <code>npm i webpack -D</code> 局部安装 webpack包</p>
<p>由于npm命令安装比较慢，所以采用cnpm安装，如下图</p>
<p><img src="/2019/03/05/webpack使用/1552200596168.png" alt="1552200596168"></p>
<p>由于webpack的版本在 4.0以上 所以还得再安装一个</p>
<p>webpack-cli 包，执行命令为<code>cnpm i webpack-cli -D</code></p>
<p>再执行<code>npm run dev</code>效果如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; webpack-study2@1.0.0 dev G:\前端\vuejs深入浅出资料\day5\代码\webpack-study2</span><br><span class="line">&gt; webpack-dev-server</span><br><span class="line"></span><br><span class="line">i ｢wds｣: Project is running at http://localhost:8080/</span><br><span class="line">i ｢wds｣: webpack output is served from /</span><br><span class="line">i ｢wdm｣: Hash: 7fbd96ee591e95cde72b</span><br><span class="line">Version: webpack 4.29.6</span><br><span class="line">Time: 1392ms</span><br><span class="line">Built at: 2019-03-10 14:47:53</span><br><span class="line">    Asset     Size  Chunks             Chunk Names</span><br><span class="line">bundle.js  652 KiB    main  [emitted]  main</span><br><span class="line">Entrypoint main = bundle.js</span><br><span class="line">[0] multi ./node_modules/_webpack-dev-server@3.2.1@webpack-dev-server/client?http://localhost:8080 ./src/main.js 40 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/_ansi-html@0.0.7@ansi-html/index.js] 4.16 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/_ansi-regex@2.1.1@ansi-regex/index.js] 135 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/_events@3.0.0@events/events.js] 13.3 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/_jquery@3.3.1@jquery/dist/jquery.js] 265 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/_loglevel@1.6.1@loglevel/lib/loglevel.js] 7.68 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/_querystring-es3@0.2.1@querystring-es3/index.js] 127 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/_strip-ansi@3.0.1@strip-ansi/index.js] 161 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/_url@0.11.0@url/url.js] 22.8 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/_webpack-dev-server@3.2.1@webpack-dev-server/client/index.js?http://localhost:8080] ./node_modules/_webpack-dev-server@3.2.1@webpack-dev-server/client?http://localhost:8080 8.1 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/_webpack-dev-server@3.2.1@webpack-dev-server/client/overlay.js] 3.59 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/_webpack-dev-server@3.2.1@webpack-dev-server/client/socket.js] 1.05 KiB &#123;main&#125; [built]</span><br><span class="line">[./node_modules/_webpack@4.29.6@webpack/hot/emitter.js] (webpack)/hot/emitter.js 75 bytes &#123;main&#125; [built]</span><br><span class="line">[./node_modules/webpack/hot sync ^\.\/log$] ./node_modules/webpack/hot sync nonrecursive ^\.\/log$ 170 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/main.js] 161 bytes &#123;main&#125; [built]</span><br><span class="line">    + 12 hidden modules</span><br><span class="line">i ｢wdm｣: Compiled successfully.</span><br></pre></td></tr></table></figure>
<p>这样就可以通过访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 来访问项目了，但是这样打包后会产生一个名为 bundle.js的文件，并存储在根目录下，但是我们看不到他，所以需要到刚刚引用 bundle.js那里去更换访问路径，以访问到打包后的bundle.js文件。这样就实现了每次保存都会有新的bundle.js文件，无需手动执行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>变色<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这是之前自己手动执行webpack打包后产生的bundle.js文件--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--&lt;script src="../dist/bundle.js"&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--这是webpack-dev-server 自动执行webpack打包后产生的bundle.js文件，位置在根目录下且我们看不见--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就实现了每次保存都会实时编译了。效果如下，更改颜色为green并按ctrl+s保存，立马变颜色</p>
<p><img src="/2019/03/05/webpack使用/1552201348447.png" alt="1552201348447"></p>
</li>
</ol>
<p>但是这样还有一个问题就是，每次执行 npm run dev后还得手动点开链接，所以在package.json里面配置script下的“dev”</p>
<p><code>&quot;dev&quot;: &quot;webpack-dev-server --open --port 3000&quot;</code></p>
<p>现在执行<code>npm run dev</code>命令，浏览器被自动打开，达成我们的目的了，但是还是有不足，就是浏览器页面在根目录上，并没有在我们的index.html。所以还得更改配置</p>
<p><code>&quot;dev&quot;: &quot;webpack-dev-server --open --port 3000 --contentBase src&quot;</code></p>
<p>这样就实现了直接到src下的index界面。</p>
<p>由于每次保存都是重新执行打包，而且会刷新浏览器进行重新渲染。采用 –hot 这个命令 实现只对bundle.js进行补丁，以及异步更新。</p>
<p><code>&quot;dev&quot;: &quot;webpack-dev-server --open --port 3000 --contentBase src --hot&quot;</code></p>
<p>第二种方式实现 open  port  contenBase hot  功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">在package.json文件里面配置</span><br><span class="line"><span class="string">"dev"</span>:<span class="string">"webpack-dev-server"</span></span><br><span class="line">在webpack.config.js里面配置</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//启用热更新的第二步</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	entry: path.join(__dirname,<span class="string">'./src/main.js'</span>),</span><br><span class="line">	output:&#123;</span><br><span class="line">		path: path.join(__dirname,<span class="string">'./dist'</span>), <span class="comment">//指定打包好的文件输出到哪个目录去</span></span><br><span class="line">		filename: <span class="string">'bundle.js'</span>  <span class="comment">//指定 输出文件的名称</span></span><br><span class="line">	&#125;,</span><br><span class="line">	devServer: &#123;  <span class="comment">//这是配置 dev-server 命令参数的第二种形式，相对来说，这首方式麻烦一些</span></span><br><span class="line">		<span class="comment">// --open --port 3000 --contentBase src --hot</span></span><br><span class="line">		open: <span class="literal">true</span>,  <span class="comment">//自动打开浏览器</span></span><br><span class="line">		port: <span class="number">3000</span>,   <span class="comment">//设置启动时候的运行端口</span></span><br><span class="line">		contentBase: <span class="string">'src'</span>,  <span class="comment">//指定托管的根目录</span></span><br><span class="line">		hot: <span class="literal">true</span>   <span class="comment">//启用热更新的第一步</span></span><br><span class="line"></span><br><span class="line">	&#125;,</span><br><span class="line">	plugins: [  <span class="comment">//配置插件的节点n</span></span><br><span class="line">		<span class="keyword">new</span> webpack.HotModuleReplacementPlugin()   <span class="comment">//new 一个热更新的模块对象，这是 启用热更新的第三步</span></span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用html-webpack-plugin插件配置启动页面"><a href="#使用html-webpack-plugin插件配置启动页面" class="headerlink" title="使用html-webpack-plugin插件配置启动页面"></a>使用<code>html-webpack-plugin</code>插件配置启动页面</h2><p>由于使用<code>--contentBase</code>指令的过程比较繁琐，需要指定启动的目录，同时还需要修改index.html中script标签的src属性，所以推荐大家使用<code>html-webpack-plugin</code>插件配置启动页面.</p>
<ol>
<li>运行<code>cnpm i html-webpack-plugin --save-dev</code>安装到开发依赖</li>
<li>修改<code>webpack.config.js</code>配置文件如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 导入处理路径的模块</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">// 导入自动生成HTMl文件的插件</span><br><span class="line">var htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: path.resolve(__dirname, &apos;src/js/main.js&apos;), // 项目入口文件</span><br><span class="line">    output: &#123; // 配置输出选项</span><br><span class="line">        path: path.resolve(__dirname, &apos;dist&apos;), // 配置输出的路径</span><br><span class="line">        filename: &apos;bundle.js&apos; // 配置输出的文件名</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[ // 添加plugins节点配置插件</span><br><span class="line">        new htmlWebpackPlugin(&#123;</span><br><span class="line">            template:path.resolve(__dirname, &apos;src/index.html&apos;),//模板路径</span><br><span class="line">            filename:&apos;index.html&apos;//自动在根目录生成的HTML文件的名称，我们看不见，所以可以省略 -contentBase src  这个配置</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>修改<code>package.json</code>中<code>script</code>节点中的dev指令如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server&quot;  //或者下面这样</span><br><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --open --port 3000 --hot&quot;</span><br><span class="line">//不需要配置  contentBase src了</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>将index.html中script标签注释掉，因为<code>html-webpack-plugin</code>插件会自动把bundle.js注入到index.html页面中！</li>
</ol>
<p>现在好像都差不多了，但是，如果引入css文件呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在main.js上引入css时，</span><br><span class="line">import &apos;./css/index.css&apos; </span><br><span class="line">会引发问题</span><br><span class="line">You may need an appropriate loader to handle this file type.</span><br><span class="line"> 提示我们需要一个合适的loader</span><br></pre></td></tr></table></figure>
<p>所以此时我们就去下载 style-loader和 css-loader，执行命令</p>
<p><code>npm i style-loader css-loader -D</code></p>
<p>下载完成后修改webpack.config.js文件来配置loader规则</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//module与entry，output，plugins同级</span></span><br><span class="line"><span class="built_in">module</span>:&#123;   <span class="comment">//这个节点用来配置所有第三方模块加载器</span></span><br><span class="line">	rules:[  <span class="comment">//所有第三方模块的规则</span></span><br><span class="line">		&#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]&#125;  <span class="comment">//配置处理.css文件的第三方loader规则</span></span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/05/webpack使用/1552317211318.png" alt="1552317211318"></p>
<p><img src="/2019/03/05/webpack使用/1552317563232.png" alt="1552317563232"></p>
<p>引入less文件，同css。</p>
<ol>
<li><p><code>cnpm i less-loader less -D</code> 安装less-loader 和 less</p>
</li>
<li><p><code>import &#39;./css/index.less&#39;</code> 引入less文件</p>
</li>
<li><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">在webpack.config.js里面配置 <span class="built_in">module</span>里面的rules配置规则</span><br><span class="line"><span class="built_in">module</span>:&#123;   <span class="comment">//这个节点用来配置所有第三方模块加载器</span></span><br><span class="line">		rules:[  <span class="comment">//所有第三方模块的规则</span></span><br><span class="line">			&#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]&#125; , <span class="comment">//配置处理.css文件的第三方loader规则</span></span><br><span class="line">			&#123;<span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'less-loader'</span>]&#125; <span class="comment">//注意：顺序是从后面到前面，less转译成css，css转译成js</span></span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>这样就完成了对less文件的引入</p>
</li>
</ol>
<p>引用scss文件，同less</p>
<ol>
<li><p><code>cnpm i sass-loader -D</code>安装sass-loader配置webpack.config.js文件</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module:&#123;   //这个节点用来配置所有第三方模块加载器</span><br><span class="line">		rules:[  //所有第三方模块的规则</span><br><span class="line">			&#123;test: /\.css$/, use:[&apos;style-loader&apos;,&apos;css-loader&apos;]&#125; , //配置处理.css文件的第三方loader规则</span><br><span class="line">			&#123;test: /\.less$/, use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]&#125;, //注意：顺序是从后面到前面，less转译成css，css转译成js</span><br><span class="line">				&#123;test: /\.scss$/, use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;]&#125; //注意：顺序是从后面到前面，less转译成css，css转译成js</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>运行  npm run dev</code>发现错误<code>应用sass-loader需要先安装 node-sass</code> 所以安装 node-sass</p>
</li>
<li><p><code>npm i node-sass -D</code>安装完成后，执行<code>npm run dev</code>，ok没问题，成功引入.scss文件</p>
</li>
</ol>
<p>如果在css或less或scss文件上，有应用到url 背景图片的时候，有缺少了 url-loader 和 file-loader</p>
<ol>
<li><p><code>cnpm i url-loader file-loader -D</code>  安装url-loader 和file-loader</p>
</li>
<li><p>在webpack.config.js上添加配置 </p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module:&#123;   //这个节点用来配置所有第三方模块加载器</span><br><span class="line">  		rules:[  //所有第三方模块的规则</span><br><span class="line">  			&#123;test: /\.css$/, use:[&apos;style-loader&apos;,&apos;css-loader&apos;]&#125; , //配置处理.css文件的第三方loader规则</span><br><span class="line">  			&#123;test: /\.less$/, use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]&#125; ,</span><br><span class="line">  			&#123;test: /\.scss$/, use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;]&#125; ,</span><br><span class="line">  			&#123;test: /\.(jpg|jpeg|png|gif|bmp)$/, use: &apos;url-loader?limit=9435&apos;&#125; </span><br><span class="line">  		]</span><br><span class="line">  	&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>执行 npm run dev</code> 就可以实现了</p>
</li>
</ol>
<p>注意：</p>
<p><img src="/2019/03/05/webpack使用/C:/Users\xiaobu\AppData\Roaming\Typora\typora-user-images\1552381533226.png" alt="1552381533226"></p>
<p>如果引入bootstrap包，并使用bootstrap的字体呢？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html文件引入 字体图标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-heart"</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p><code>cnpm i bootstrap@3.3.7 -S</code> 安装bootstrap </p>
<p>注意： 版本号一定要下去，因为不加版本号默认是下载最新的bootstrap，bootstrap版本四和三很大区别，所以不熟悉慎用。</p>
</li>
<li><p>在main.js上引用bootstrap</p>
<p>//注意：如果通过路径的形式，去引入node_modules中的文件，可以直接省略 路径前面的 node_module 这一层目录，直接写 包的名称，然后后面跟上具体的文件路径</p>
<p>//不写 node_modules这一层目录，默认就会去node_modules中寻找</p>
<p><code>import &#39;bootstrap/dist/css/bootstrap.css&#39;</code></p>
</li>
<li><p><code>cnpm run dev</code>执行项目发现会出现一个错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">You may need an appropriate loader to handle <span class="keyword">this</span> file type.</span><br><span class="line">| <span class="keyword">import</span> <span class="string">'bootstrap/dist/css/bootstrap.css'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//没有加载合适的loader，所以出错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置rules</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;   <span class="comment">//这个节点用来配置所有第三方模块加载器</span></span><br><span class="line">		rules:[  <span class="comment">//所有第三方模块的规则</span></span><br><span class="line">			&#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]&#125; , <span class="comment">//配置处理.css文件的第三方loader规则</span></span><br><span class="line">			&#123;<span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'less-loader'</span>]&#125; , <span class="comment">//配置处理 .less的第三方loader规则</span></span><br><span class="line">			&#123;<span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'sass-loader'</span>]&#125; ,<span class="comment">//配置处理 .scss的第三方loader规则</span></span><br><span class="line">			&#123;<span class="attr">test</span>: <span class="regexp">/\.(jpg|jpeg|png|gif|bmp)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader?limit=9435'</span>&#125; ,<span class="comment">//配置处理图片 的第三方loader规则</span></span><br><span class="line">			&#123;<span class="attr">test</span>: <span class="regexp">/\.(ttf|eot|svg|woff|woff2|otf)$/</span>, <span class="attr">use</span>: <span class="string">'url-loader'</span>&#125;  <span class="comment">//配置处理 字体的第三方loader规则</span></span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>5.执行<code>cnpm run dev</code> 成功得到一个爱心图标如下</p>
<p><img src="/2019/03/05/webpack使用/1552409777752.png" alt="1552409777752"></p>
</li>
</ol>
<h4 id="webpack打包常见问题"><a href="#webpack打包常见问题" class="headerlink" title="webpack打包常见问题"></a>webpack打包常见问题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package.json文件</span><br><span class="line">由于是json文件，所以必须严格按照json格式书写，不能有注释，如</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    //&quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server --open --port 3000  --hot&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">这样将报错  Ejsonparse  json转译错误</span><br><span class="line"></span><br><span class="line">`如果遇到npm run dev` 报错说  webpack-dev-server 不是内部或外部的命令，也不是运行程序，则很大可能就是根目录的node_modules 文件夹没有了，需要重新安装，安装命令如下</span><br><span class="line">npm install  执行这个命令，就会根据package.json里面的依赖包及版本号进行下载相应所依赖的包。</span><br><span class="line">由于npm install 会比较慢，我们时常安装一半没耐心，会ctrl+c终止掉，这样做的话，我们就必须把 node_modules 文件夹删除掉，重新安装，这次执行 cnpm install  命令。这样就重新安装完了。</span><br></pre></td></tr></table></figure>
<h5 id="在main-js文件中输入一些ES6或者ES7的语法"><a href="#在main-js文件中输入一些ES6或者ES7的语法" class="headerlink" title="在main.js文件中输入一些ES6或者ES7的语法"></a>在main.js文件中输入一些ES6或者ES7的语法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> info = &#123;<span class="attr">name</span>: <span class="string">"xiaobu"</span>,<span class="attr">age</span>: <span class="number">24</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Module parse failed: Unexpected token (<span class="number">17</span>:<span class="number">13</span>)</span><br><span class="line">You may need an appropriate loader to handle <span class="keyword">this</span> file type.</span><br><span class="line">|</span><br><span class="line">| <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&gt;       <span class="keyword">static</span> info = &#123;<span class="attr">name</span>: <span class="string">"xiaobu"</span>,<span class="attr">age</span>: <span class="number">24</span>&#125;</span><br><span class="line">| &#125;</span><br><span class="line">|</span><br><span class="line"> @ multi ./node_modules/_webpack-dev-server@<span class="number">3.2</span><span class="number">.1</span>@webpack-dev-server/client?http:<span class="comment">//localhost:3000 (webpack)/hot/dev-server.js ./src/main.js mai</span></span><br><span class="line">n[<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>在main.js文件中引用ES6或者ES7的新语法，webpack并不能完全识别并处理；这时候需要借助 第三方的 loader，来帮助webpack处理这些高级的语法，当第三方loader把高级语法转化为 低级语法之后会把结果交给webpack打包到bundle.js文件中</p>
<p>通过Babel，可以帮我们将高级的语法转化为低级的语法</p>
<ol>
<li><p>在webpack中，可以运行如下两套命令，安装两套包，去安装Babel相关的loader功能</p>
<ol>
<li>第一套： cnpm i babel-core babel-loader babel-plugin-transform-runtime -D</li>
<li>第二套： cnpm i babel-preset-env babel-preset-stage-0 -D</li>
</ol>
</li>
<li><p>打开webpack的配置文件，在module节点下的rules数组中，添加一个新的匹配规则：</p>
<ol>
<li><p><code>{test: /\.js$/, use: &#39;babel-loader&#39;,exclude: /node_modules/}</code></p>
</li>
<li><p>注意：在配置babel的loader规则的时候，必须把node_modules目录，通过exclude选项排除掉，原因有两</p>
<ol>
<li>如果不排除 node_modules，则Babel会把node_modules中所有的第三方js文件，都打包编译，这样会非常消耗cpu，同时，打包速度非常慢；</li>
<li>哪怕最终Babel把所有的node_modules中的js都转化完毕了，但是，项目也无法正常运行</li>
</ol>
</li>
<li><p>在项目的根目录中，新建一个叫做 .babelrc 的Babel配置文件，这个配置文件属于json格式，所以 .babelrc 文件严格遵守json书写格式，不能有注释，属性必须双引号包住。</p>
<ol>
<li><p>在 .babelrc 写如下配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>:[<span class="string">"env"</span>,<span class="string">"stage-0"</span>],</span><br><span class="line">    <span class="attr">"plugins"</span>:[<span class="string">"transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<p><code>注意：babel-loader必须加版本号 @7   因为新版本会出问题</code></p>
<p>最后成功在控制台看到如下图所示</p>
<p><img src="/2019/03/05/webpack使用/1552456317309.png" alt="1552456317309"></p>
</li>
</ol>
<h2 id="在网页中会引用哪些常见的静态资源？"><a href="#在网页中会引用哪些常见的静态资源？" class="headerlink" title="在网页中会引用哪些常见的静态资源？"></a>在网页中会引用哪些常见的静态资源？</h2><ul>
<li>JS<ul>
<li>.js  .jsx  .coffee  .ts（TypeScript  类 C# 语言）</li>
</ul>
</li>
<li>CSS<ul>
<li>.css  .less   .sass  .scss</li>
</ul>
</li>
<li>Images<ul>
<li>.jpg   .png   .gif   .bmp   .svg</li>
</ul>
</li>
<li>字体文件（Fonts）<ul>
<li>.svg   .ttf   .eot   .woff   .woff2</li>
</ul>
</li>
<li>模板文件<ul>
<li>.ejs   .jade  .vue【这是在webpack中定义组件的方式，推荐这么用】</li>
</ul>
</li>
</ul>
<h2 id="网页中引入的静态资源多了以后有什么问题？？？"><a href="#网页中引入的静态资源多了以后有什么问题？？？" class="headerlink" title="网页中引入的静态资源多了以后有什么问题？？？"></a>网页中引入的静态资源多了以后有什么问题？？？</h2><ol>
<li>网页加载速度慢， 因为 我们要发起很多的二次请求；</li>
<li>要处理错综复杂的依赖关系</li>
</ol>
<h2 id="如何解决上述两个问题"><a href="#如何解决上述两个问题" class="headerlink" title="如何解决上述两个问题"></a>如何解决上述两个问题</h2><ol>
<li>合并、压缩、精灵图、图片的Base64编码</li>
<li>可以使用之前学过的requireJS、也可以使用webpack可以解决各个包之间的复杂依赖关系；</li>
</ol>
<h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack?"></a>什么是webpack?</h2><p>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；</p>
<h2 id="如何完美实现上述的2种解决方案"><a href="#如何完美实现上述的2种解决方案" class="headerlink" title="如何完美实现上述的2种解决方案"></a>如何完美实现上述的2种解决方案</h2><ol>
<li>使用Gulp， 是基于 task 任务的；</li>
<li>使用Webpack， 是基于整个项目进行构建的；</li>
</ol>
<ul>
<li>借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</li>
<li>根据官网的图片介绍webpack打包的过程</li>
<li><a href="http://webpack.github.io/" target="_blank" rel="noopener">webpack官网</a></li>
</ul>
<h2 id="webpack安装的两种方式"><a href="#webpack安装的两种方式" class="headerlink" title="webpack安装的两种方式"></a>webpack安装的两种方式</h2><ol>
<li>运行<code>npm i webpack -g</code>全局安装webpack，这样就能在全局使用webpack的命令</li>
<li>在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</li>
</ol>
<h2 id="初步使用webpack打包构建列表隔行变色案例"><a href="#初步使用webpack打包构建列表隔行变色案例" class="headerlink" title="初步使用webpack打包构建列表隔行变色案例"></a>初步使用webpack打包构建列表隔行变色案例</h2><ol>
<li>运行<code>npm init</code>初始化项目，使用npm管理项目中的依赖包</li>
<li>创建项目基本的目录结构</li>
<li>使用<code>cnpm i jquery --save</code>安装jquery类库</li>
<li><p>创建<code>main.js</code>并书写各行变色的代码逻辑：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 导入jquery类库</span><br><span class="line">   import $ from &apos;jquery&apos;</span><br><span class="line"></span><br><span class="line">   // 设置偶数行背景色，索引从0开始，0是偶数</span><br><span class="line">   $(&apos;#list li:even&apos;).css(&apos;backgroundColor&apos;,&apos;lightblue&apos;);</span><br><span class="line">   // 设置奇数行背景色</span><br><span class="line">   $(&apos;#list li:odd&apos;).css(&apos;backgroundColor&apos;,&apos;pink&apos;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接在页面上引用<code>main.js</code>会报错，因为浏览器不认识<code>import</code>这种高级的JS语法，需要使用webpack进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；</p>
</li>
<li>运行<code>webpack 入口文件路径 输出文件路径</code>对<code>main.js</code>进行处理：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack src/js/main.js dist/bundle.js</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="使用webpack的配置文件简化打包时候的命令"><a href="#使用webpack的配置文件简化打包时候的命令" class="headerlink" title="使用webpack的配置文件简化打包时候的命令"></a>使用webpack的配置文件简化打包时候的命令</h2><ol>
<li>在项目根目录中创建<code>webpack.config.js</code></li>
<li>由于运行webpack命令的时候，webpack需要指定入口文件和输出文件的路径，所以，我们需要在<code>webpack.config.js</code>中配置这两个路径：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 导入处理路径的模块</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">// 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: path.resolve(__dirname, &apos;src/js/main.js&apos;), // 项目入口文件</span><br><span class="line">    output: &#123; // 配置输出选项</span><br><span class="line">        path: path.resolve(__dirname, &apos;dist&apos;), // 配置输出的路径</span><br><span class="line">        filename: &apos;bundle.js&apos; // 配置输出的文件名</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="实现webpack的实时打包构建"><a href="#实现webpack的实时打包构建" class="headerlink" title="实现webpack的实时打包构建"></a>实现webpack的实时打包构建</h2><ol>
<li>由于每次重新修改代码之后，都需要手动运行webpack打包的命令，比较麻烦，所以使用<code>webpack-dev-server</code>来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</li>
<li>运行<code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖</li>
<li><p>安装完成之后，在命令行直接运行<code>webpack-dev-server</code>来进行打包，发现报错，此时需要借助于<code>package.json</code>文件中的指令，来进行运行<code>webpack-dev-server</code>命令，在<code>scripts</code>节点下新增<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>指令，发现可以进行实时打包，但是dist目录下并没有生成<code>bundle.js</code>文件，这是因为<code>webpack-dev-server</code>将打包好的文件放在了内存中</p>
<ul>
<li>把<code>bundle.js</code>放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</li>
<li>这个时候访问webpack-dev-server启动的<code>http://localhost:8080/</code>网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的index首页，此时引用不到bundle.js文件，需要修改index.html中script的src属性为:<code>&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt;</code></li>
<li>为了能在访问<code>http://localhost:8080/</code>的时候直接访问到index首页，可以使用<code>--contentBase src</code>指令来修改dev指令，指定启动的根目录：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --contentBase src&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>同时修改index页面中script的src属性为<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></p>
</li>
</ol>
<h2 id="使用html-webpack-plugin插件配置启动页面-1"><a href="#使用html-webpack-plugin插件配置启动页面-1" class="headerlink" title="使用html-webpack-plugin插件配置启动页面"></a>使用<code>html-webpack-plugin</code>插件配置启动页面</h2><p>由于使用<code>--contentBase</code>指令的过程比较繁琐，需要指定启动的目录，同时还需要修改index.html中script标签的src属性，所以推荐大家使用<code>html-webpack-plugin</code>插件配置启动页面.</p>
<ol>
<li>运行<code>cnpm i html-webpack-plugin --save-dev</code>安装到开发依赖</li>
<li><p>修改<code>webpack.config.js</code>配置文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 导入处理路径的模块</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">// 导入自动生成HTMl文件的插件</span><br><span class="line">var htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: path.resolve(__dirname, &apos;src/js/main.js&apos;), // 项目入口文件</span><br><span class="line">    output: &#123; // 配置输出选项</span><br><span class="line">        path: path.resolve(__dirname, &apos;dist&apos;), // 配置输出的路径</span><br><span class="line">        filename: &apos;bundle.js&apos; // 配置输出的文件名</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[ // 添加plugins节点配置插件</span><br><span class="line">        new htmlWebpackPlugin(&#123;</span><br><span class="line">            template:path.resolve(__dirname, &apos;src/index.html&apos;),//模板路径</span><br><span class="line">            filename:&apos;index.html&apos;//自动生成的HTML文件的名称</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>package.json</code>中<code>script</code>节点中的dev指令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将index.html中script标签注释掉，因为<code>html-webpack-plugin</code>插件会自动把bundle.js注入到index.html页面中！</p>
</li>
</ol>
<h2 id="实现自动打开浏览器、热更新和配置浏览器的默认端口号"><a href="#实现自动打开浏览器、热更新和配置浏览器的默认端口号" class="headerlink" title="实现自动打开浏览器、热更新和配置浏览器的默认端口号"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h2><p><strong>注意：热更新在JS中表现的不明显，可以从一会儿要讲到的CSS身上进行介绍说明！</strong></p>
<h3 id="方式1："><a href="#方式1：" class="headerlink" title="方式1："></a>方式1：</h3><ul>
<li>修改<code>package.json</code>的script节点如下，其中<code>--open</code>表示自动打开浏览器，<code>--port 4321</code>表示打开的端口号为4321，<code>--hot</code>表示启用浏览器热更新：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --hot --port 4321 --open&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="方式2："><a href="#方式2：" class="headerlink" title="方式2："></a>方式2：</h3><ol>
<li><p>修改<code>webpack.config.js</code>文件，新增<code>devServer</code>节点如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">        hot:true,</span><br><span class="line">        open:true,</span><br><span class="line">        port:4321</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在头部引入<code>webpack</code>模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var webpack = require(&apos;webpack&apos;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>plugins</code>节点下新增：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new webpack.HotModuleReplacementPlugin()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="使用webpack打包css文件"><a href="#使用webpack打包css文件" class="headerlink" title="使用webpack打包css文件"></a>使用webpack打包css文件</h2><ol>
<li>运行<code>cnpm i style-loader css-loader --save-dev</code></li>
<li><p>修改<code>webpack.config.js</code>这个配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module: &#123; // 用来配置第三方loader模块的</span><br><span class="line">        rules: [ // 文件的匹配规则</span><br><span class="line">            &#123; test: /\.css$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;] &#125;//处理css文件的规则</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：<code>use</code>表示使用哪些模块来处理<code>test</code>所匹配到的文件；<code>use</code>中相关loader模块的调用顺序是从后向前调用的；</p>
</li>
</ol>
<h2 id="使用webpack打包less文件"><a href="#使用webpack打包less文件" class="headerlink" title="使用webpack打包less文件"></a>使用webpack打包less文件</h2><ol>
<li>运行<code>cnpm i less-loader less -D</code></li>
<li>修改<code>webpack.config.js</code>这个配置文件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; test: /\.less$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;less-loader&apos;] &#125;,</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="使用webpack打包sass文件"><a href="#使用webpack打包sass文件" class="headerlink" title="使用webpack打包sass文件"></a>使用webpack打包sass文件</h2><ol>
<li>运行<code>cnpm i sass-loader node-sass --save-dev</code></li>
<li>在<code>webpack.config.js</code>中添加处理sass文件的loader模块：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; test: /\.scss$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;sass-loader&apos;] &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="使用webpack处理css中的路径"><a href="#使用webpack处理css中的路径" class="headerlink" title="使用webpack处理css中的路径"></a>使用webpack处理css中的路径</h2><ol>
<li>运行<code>cnpm i url-loader file-loader --save-dev</code></li>
<li><p>在<code>webpack.config.js</code>中添加处理url路径的loader模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; test: /\.(png|jpg|gif)$/, use: &apos;url-loader&apos; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以通过<code>limit</code>指定进行base64编码的图片大小；只有小于指定字节（byte）的图片才会进行base64编码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; test: /\.(png|jpg|gif)$/, use: &apos;url-loader?limit=43960&apos; &#125;,</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="使用babel处理高级JS语法"><a href="#使用babel处理高级JS语法" class="headerlink" title="使用babel处理高级JS语法"></a>使用babel处理高级JS语法</h2><ol>
<li>运行<code>cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev</code>安装babel的相关loader包</li>
<li>运行<code>cnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev</code>安装babel转换的语法</li>
<li><p>在<code>webpack.config.js</code>中添加相关loader模块，其中需要注意的是，一定要把<code>node_modules</code>文件夹添加到排除项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; test: /\.js$/, use: &apos;babel-loader&apos;, exclude: /node_modules/ &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目根目录中添加<code>.babelrc</code>文件，并修改这个配置文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[&quot;es2015&quot;, &quot;stage-0&quot;],</span><br><span class="line">    &quot;plugins&quot;:[&quot;transform-runtime&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注意：语法插件<code>babel-preset-es2015</code>可以更新为<code>babel-preset-env</code>，它包含了所有的ES相关的语法；</strong></p>
</li>
</ol>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://segmentfault.com/p/1210000008466178" target="_blank" rel="noopener">babel-preset-env：你需要的唯一Babel插件</a><br><a href="https://segmentfault.com/a/1190000009065987" target="_blank" rel="noopener">Runtime transform 运行时编译es6</a></p>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客搭建</title>
    <url>/2019/03/05/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="hexo博客搭建"><a href="#hexo博客搭建" class="headerlink" title="hexo博客搭建"></a>hexo博客搭建</h3><ol>
<li>安装Git</li>
<li>安装Node.js</li>
<li>安装Hexo</li>
<li>Hexo博客初始化</li>
<li>Hexo博客部署到GitHub</li>
<li>备份博客源文件</li>
<li>拓展<ol>
<li>更换hexo主题</li>
<li>修改站点语言</li>
<li>开启搜索，字数统计和阅读时长统计</li>
<li>添加分类和标签</li>
<li>更换页面菜单布局位置</li>
<li>配置文章浏览量</li>
<li>插入本地图片</li>
<li>设置动态背景</li>
<li>添加Fork me on GitHub</li>
<li>添加友情链接</li>
<li>设置阅读全文</li>
</ol>
</li>
</ol>
<h1 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h1><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a></p>
<p>windows：到git官网上下载,<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Download git</a>,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p>
<p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p>
<p><code>sudo apt-get install git</code></p>
<p>安装好后，用<code>git --version</code> 来查看一下版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xiaobu@DESKTOP-P7959T8 MINGW64 /f/blog/myblog</span><br><span class="line">$ git --version</span><br><span class="line">git version 2.21.0.windows.1</span><br></pre></td></tr></table></figure>
<h1 id="2-安装Nodejs"><a href="#2-安装Nodejs" class="headerlink" title="2.安装Nodejs"></a>2.安装Nodejs</h1><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。<a href="https://nodejs.org/en/" target="_blank" rel="noopener">点击下载nodejs</a></p>
<p>windows：nodejs选择LTS版本就行了。</p>
<p>linux：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure>
<p>安装完后，打开命令行</p>
<p>node -v<br>npm -v</p>
<p>检查一下有没有安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xiaobu@DESKTOP-P7959T8 MINGW64 /f/blog/myblog</span><br><span class="line">$ node -v</span><br><span class="line">v8.11.4</span><br><span class="line"></span><br><span class="line">xiaobu@DESKTOP-P7959T8 MINGW64 /f/blog/myblog</span><br><span class="line">$ npm -v</span><br><span class="line">5.6.0</span><br></pre></td></tr></table></figure>
<h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h2><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p>
<p>输入命令</p>
<p><code>npm install -g hexo-cli</code></p>
<p>依旧用<code>hexo -v</code>查看一下版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xiaobu@DESKTOP-P7959T8 MINGW64 /f/blog/myblog</span><br><span class="line">$ hexo -v</span><br><span class="line">hexo: 3.8.0</span><br><span class="line">hexo-cli: 1.1.0</span><br><span class="line">os: Windows_NT 10.0.10240 win32 x64</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">node: 8.11.4</span><br><span class="line">v8: 6.2.414.54</span><br><span class="line">uv: 1.19.1</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">modules: 57</span><br><span class="line">nghttp2: 1.32.0</span><br><span class="line">napi: 3</span><br><span class="line">openssl: 1.0.2p</span><br><span class="line">icu: 60.1</span><br><span class="line">unicode: 10.0</span><br><span class="line">cldr: 32.0</span><br><span class="line">tz: 2017c</span><br></pre></td></tr></table></figure>
<p>至此就全部安装完了。</p>
<p>接下来初始化一下hexo</p>
<p><code>hexo init myblog</code></p>
<p>这个myblog可以自己取什么名字都行，然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd myblog //进入这个myblog文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>新建完成后，指定文件夹目录下有：</p>
<ul>
<li>node_modules: 依赖包</li>
<li>public：存放生成的页面</li>
<li>scaffolds：生成文章的一些模板</li>
<li>source：用来存放你的文章</li>
<li>themes：主题</li>
<li><strong> _config.yml: 博客的配置文件</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p>
<p>大概长这样：</p>
<p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksvj6e0j211c0f2n60.jpg" alt="blockchain"></p>
<p>使用ctrl+c可以把服务关掉。</p>
<h2 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4.GitHub创建个人仓库"></a>4.GitHub创建个人仓库</h2><p>首先，你先要有一个GitHub账户，去注册一个吧。</p>
<p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p>
<p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstcm7ej20ei0c1aah.jpg" alt="blockchain"></p>
<p>创建一个和你用户名相同的仓库，<a href="http://xn--yfr16an19l.github.io/" target="_blank" rel="noopener">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href="http://xn--xxxx-4m5f354ev5p.github.io/" target="_blank" rel="noopener">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p>
<p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstusrdj20iw0o4myp.jpg" alt></p>
<p>点击create repository。</p>
<h2 id="5生成SSH添加到GitHub"><a href="#5生成SSH添加到GitHub" class="headerlink" title="5生成SSH添加到GitHub"></a>5生成SSH添加到GitHub</h2><p>回到你的git bash中，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p>
<p>可以用以下两条，检查一下你有没有输对</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>
<p>然后创建SSH,一路回车</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p>
<p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstd106j20kb073gll.jpg" alt></p>
<p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p>
<p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key</p>
<p>把你的id_rsa.pub里面的信息复制进去。</p>
<p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstdifaj210s0gfjrz.jpg" alt></p>
<h2 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6.将hexo部署到GitHub"></a>6.将hexo部署到GitHub</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code>顾名思义,生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p>
<p>注意deploy时可能要你输入username和password。</p>
<p>得到下图就说明部署成功了，过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Branch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;https://github.com/shenxiaobu/shenxiaobu.github.io.git&apos;.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure>
<p>新建一个文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new newpapername</span><br></pre></td></tr></table></figure>
<p>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>就可以看到更新了。</p>
<h2 id="7拓展"><a href="#7拓展" class="headerlink" title="7拓展"></a>7拓展</h2><p>​    1）更换hexo主题</p>
<p>​    下载</p>
<p>​    <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT主题</a></p>
<p>解压到 F:\blog\myblog\themes</p>
<p><img src="/2019/03/05/hexo博客搭建/C:/Users\xiaobu\AppData\Roaming\Typora\typora-user-images\1551756486185.png" alt="1551756486185"></p>
<p>修改<code>F:\blog\myblog\_config.yml</code>配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: hexo-theme-next-master</span><br></pre></td></tr></table></figure>
<p>2)修改站点语言</p>
<p>编辑<code>F:\blog\myblog\_config.yml</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 祥你的365夜</span><br><span class="line">subtitle:</span><br><span class="line">description: 如果有一腔热血，又足够努力，人生最坏的结果，也不过是大器晚成而已！</span><br><span class="line">keywords:</span><br><span class="line">author: shenxiaobu</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure>
<p>3）开启搜索、字数统计和阅读时长统计</p>
<p>安装依赖hexo-symbols-count-time、hexo-generator-searchdb，安装依赖不成功时先删除D:\mytest\myhexo\node_modules文件夹，重新安装依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br><span class="line"></span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>配置主题样式文件</p>
<p>进入<code>F:\blog\myblog\themes\hexo-theme-next-master\</code>文件夹，编辑_config.yml文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure>
<p>配置站点文件</p>
<p>编辑<code>F:\blog\myblog\_config.yml</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#阅读时长和本文字数</span><br><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line"></span><br><span class="line">#搜索功能</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<p>4）添加分类和标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br><span class="line"></span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>
<p>编辑<code>F:\blog\myblog\source\categories\index.md</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-01-22 16:37:58</span><br><span class="line">type: &quot;categories&quot;   #这部分是新添加的</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>编辑<code>F:\blog\myblog\source\tags\index.md</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-01-22 16:38:40</span><br><span class="line">type: &quot;tags&quot; #新添加的内容</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>修改菜单，添加categories和tags到主题的.config配置文件menu中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure>
<p>新增文章的时候，需要添加categories、tags</p>
<p>如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo博客搭建</span><br><span class="line">date: 2019-01-23 09:07:30</span><br><span class="line">categories: 日常记录</span><br><span class="line">tags: </span><br><span class="line">  - hexo</span><br><span class="line">  - git</span><br><span class="line">  - github</span><br><span class="line">  - node</span><br><span class="line">  - markdown</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>5)更换NexT主题布局方式</p>
<p>进去主题里面的配置文件更改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>
<p>6）配置文章浏览量</p>
<p>注册</p>
<p><a href="https://leancloud.cn/" target="_blank" rel="noopener">https://leancloud.cn/</a></p>
<p>创建应用</p>
<p><img src="https://i.imgur.com/NHal0S7.png" alt></p>
<p>创建Class</p>
<p><img src="https://i.imgur.com/eXGym94.png" alt></p>
<p>配置web安全域名</p>
<p><img src="https://i.imgur.com/FEbZt23.png" alt></p>
<p>获取app_id、app_key</p>
<p><img src="https://i.imgur.com/SE6pqQj.png" alt></p>
<p>编辑<code>D:\blog\myblog\themes\hexo-theme-next-master\_config.yml</code>配置文件，填app_id</p>
<p>app_key;security设置为false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Show number of visitors to each article.</span><br><span class="line"># You can visit https://leancloud.cn get AppID and AppKey.</span><br><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: BedsOkBLOBR4nM4W52xTcBhb-gzGzoHsz #&lt;app_id&gt;</span><br><span class="line">  app_key: EEaRfb6dCMaS38laDCkSYhM9 #&lt;app_key&gt;</span><br><span class="line">  # Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span><br><span class="line">  # If you don&apos;t care about security in leancloud counter and just want to use it directly</span><br><span class="line">  # (without hexo-leancloud-counter-security plugin), set `security` to `false`.</span><br><span class="line">  security: false</span><br><span class="line">  betterPerformance: false</span><br></pre></td></tr></table></figure>
<p>7）插入本地图片</p>
<p>安装依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>编辑<code>D:\blog\myblog\_config.yml</code>配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>
<p>命令hexo new post test来生成博文时，/source/_post文件夹中除了test.md外，还有一个同名test文件夹，将需要用的图片放到该文件夹，然后在markdown上引用它，并修改路径名，如下图</p>
<h3 id><a href="#" class="headerlink" title></a><img src="/2019/03/05/hexo博客搭建/1551848109753.png" alt="1551848109753"></h3><p>8)设置动态背景</p>
<p>进入D:\blog\myblog\themes\hexo-theme-next-master\layout\文件夹，编辑_layout.swig文件，在<code>&lt;/body&gt;</code>之前添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>9)添加Fork me on GitHub</p>
<p>进入D:\blog\myblog\themes\hexo-theme-next-master\layout\文件夹，编辑_layout.swig文件，在<br><code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下面添加选择的<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">图标样式代码</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;https://github.com/shenxiaobu/&quot; class=&quot;github-corner&quot; aria-label=&quot;View source on GitHub&quot;&gt;&lt;svg width=&quot;80&quot; height=&quot;80&quot; viewBox=&quot;0 0 250 250&quot; style=&quot;fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot; fill=&quot;currentColor&quot; style=&quot;transform-origin: 130px 106px;&quot; class=&quot;octo-arm&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot; fill=&quot;currentColor&quot; class=&quot;octo-body&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>10）添加友情链接</p>
<p>方式一<br>进入<code>D:\blog\myblog\themes\hexo-theme-next-master\layout\_partials</code>文件夹，在<code>footer.swig</code>文件末尾追加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;友情链接：</span><br><span class="line"> &lt;a class=&quot;theme-link&quot;  href=&quot;http://collect.w3ctrain.com/&quot;&gt; 前端收藏夹 &lt;/a&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;</span><br><span class="line"> &lt;a class=&quot;theme-link&quot; href=&quot;http://www.alloyteam.com/nav/&quot;&gt; Web前端导航 &lt;/a&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;</span><br><span class="line"> &lt;a class=&quot;theme-link&quot;  href=&quot;http://www.runoob.com/&quot;&gt; 菜鸟教程 &lt;/a&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;</span><br><span class="line"> &lt;a class=&quot;theme-link&quot; href=&quot;https://mccxj.github.io/&quot;&gt; 小毛的胡思乱想 &lt;/a&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>方式二<br>进入<code>D:\blog\myblog\themes\hexo-theme-next-master</code>文件夹，编辑<code>_config.yml</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_icon: link</span><br><span class="line">links_title: Links</span><br><span class="line">links_layout: block</span><br><span class="line">#links_layout: inline</span><br><span class="line">#links:</span><br><span class="line">  #Title: http://example.com</span><br><span class="line">links:</span><br><span class="line">  美团技术团队: https://tech.meituan.com/</span><br><span class="line">  百度FEX: http://fex.baidu.com/</span><br><span class="line">  淘宝FED: http://taobaofed.org/</span><br></pre></td></tr></table></figure>
<p>11）设置阅读全文</p>
<p>进入<code>D:\blog\myblog\themes\hexo-theme-next-master</code>文件夹，编辑<code>_config.yml</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">hexo史上最全搭建教程</a></p>
<p><a href="https://www.lixint.me/hexo-theme-diy.html" target="_blank" rel="noopener">[持续更新]Hexo博客主题安装及Next主题个性化修改</a></p>
<p><a href="https://shenlibing.github.io/myhexo/2019/01/23/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#more" target="_blank" rel="noopener">小兵兵的hexo搭建</a></p>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2019/03/04/markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Markdown语法介绍"><a href="#Markdown语法介绍" class="headerlink" title="Markdown语法介绍"></a>Markdown语法介绍</h1><p>Markdown是一种纯文本格式的语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<p>相比WYSIWYG编辑器</p>
<p><strong>优点</strong></p>
<p>1 . 因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。</p>
<p>2.操作简单。比如：WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题前加#即可。</p>
<p><strong>缺点</strong></p>
<ol>
<li>需要记住一些语法（当然，是很简单。五分钟学会）。</li>
<li>有些平台不支持Markdown编辑模式。简书支持Markdown格式。</li>
</ol>
<h2 id="一-标题"><a href="#一-标题" class="headerlink" title="一 标题"></a>一 标题</h2><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，两个#二级标题，以此类推。<br>支持六级标题。</p>
<p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。<br>示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line"></span><br><span class="line">## 这是二级标题</span><br><span class="line"></span><br><span class="line">### 这是三级标题</span><br><span class="line"></span><br><span class="line">#### 这是四级标题</span><br><span class="line"></span><br><span class="line">##### 这是五级标题</span><br><span class="line"></span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure></p>
<p>显示效果如下</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr>
<h2 id="二-字体"><a href="#二-字体" class="headerlink" title="二 字体"></a>二 字体</h2><p>·<strong>加粗</strong></p>
<p>要加粗的文字左右分别用两个*号包起来</p>
<p>·<em>斜体</em></p>
<p>要倾斜的文字左右分别用一个*号包起来</p>
<p>·<strong><em>斜体加粗</em></strong></p>
<p>要倾斜和加粗的文字左右分别用三个*号包起来</p>
<p>·<del>删除线</del></p>
<p>要加删除线的文字左右分别用两个~号包起来<br>.<code>文字底纹</code><br>要加底纹的文字左右分别用两个 `号包起来</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**这是要加粗的文字**</span><br><span class="line">*这是要倾斜的文字*</span><br><span class="line">***这是要倾斜和加粗的文字***</span><br><span class="line">~~这是要删除线的文字~~</span><br><span class="line">`文字内容`</span><br></pre></td></tr></table></figure>
<p><strong>这是要加粗的文字</strong><br><em>这是要倾斜的文字</em><br><strong><em>这是要倾斜和加粗的文字</em></strong><br><del>这是要删除线的文字</del><br><code>文字内容</code></p>
<h2 id="三-引用"><a href="#三-引用" class="headerlink" title="三 引用"></a>三 引用</h2><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;</p>
<p>n个···</p>
<p>貌似可以一直加下去，但没什么用</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
</blockquote>
<blockquote>
<blockquote>
</blockquote>
<blockquote>
<blockquote>
</blockquote>
<blockquote>
<blockquote>
</blockquote>
<blockquote>
<blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>可以无穷下去</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="四-分割线"><a href="#四-分割线" class="headerlink" title="四 分割线"></a>四 分割线</h2><p>三个或者三个以上的 - 或者 *都可以。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>可以看到效果都一样的，不过*得三个或五个</p>
<hr>
<hr>
<hr>
<hr>
<h2 id="五-图片"><a href="#五-图片" class="headerlink" title="五 图片"></a>五 图片</h2><p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片alt]（图片地址&apos;&apos;图片title&apos;&apos;）</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移动到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![blockchain](https://shenxiaobu.github.io/images/xiaobu.png &quot;小布&quot;)</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="https://shenxiaobu.github.io/images/xiaobu.png" alt="blockchain" title="小布"></p>
<p>上传本地图片直接点击导航栏的图片标志，选择图片即可</p>
<h2 id="六-超链接"><a href="#六-超链接" class="headerlink" title="六 超链接"></a>六 超链接</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址&quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[简书](http://jianshu.com &quot;简书&quot;)</span><br><span class="line">[度娘](http://baidu.com)</span><br></pre></td></tr></table></figure>
<p><a href="http://jianshu.com" title="简书" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">度娘</a></p>
<p>注释：markdown本身语法不支持在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面打开的话，可以用html语言的a标签代替。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</span><br><span class="line">示例</span><br><span class="line">&lt;a href=&quot;https://shenxiaobu.github.io/&quot; target=&quot;_blank&quot;&gt;小布的博客&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<h2 id="七-列表"><a href="#七-列表" class="headerlink" title="七 列表"></a>七 列表</h2><h3 id="·无序列表"><a href="#·无序列表" class="headerlink" title="·无序列表"></a>·无序列表</h3><p>语法：</p>
<p>无序列表用-+*任何一种都可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间要有一个空格</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ul>
<h3 id="·有序列表"><a href="#·有序列表" class="headerlink" title="·有序列表"></a>·有序列表</h3><p>语法：</p>
<p>数字加点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<h4 id="·列表嵌套"><a href="#·列表嵌套" class="headerlink" title="·列表嵌套"></a>·列表嵌套</h4><h5 id="上一级和下一级之间敲三个空格即可"><a href="#上一级和下一级之间敲三个空格即可" class="headerlink" title="上一级和下一级之间敲三个空格即可"></a>上一级和下一级之间敲三个空格即可</h5><p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 一级无序列表</span><br><span class="line">   - 二级无序列表</span><br><span class="line">   - 二级无序列表</span><br><span class="line">   - 二级无序列表</span><br><span class="line">- 一级无序列表</span><br><span class="line">   - 二级无序列表</span><br><span class="line">   - 二级无序列表</span><br><span class="line">   - 二级无序列表</span><br><span class="line">1. 一级有序列表</span><br><span class="line">   1. 二级有序列表</span><br><span class="line">   2. 二级有序列表</span><br><span class="line">   3. 二级有序列表</span><br><span class="line">2. 一级有序列表</span><br><span class="line">   1. 二级有序列表</span><br><span class="line">   2. 二级有序列表</span><br><span class="line">   3. 二级有序列表</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li><p>一级无序列表</p>
<ul>
<li>二级无序列表</li>
<li>二级无序列表</li>
<li>二级无序列表</li>
</ul>
</li>
<li><p>一级无序列表</p>
<ul>
<li><p>二级无序列表</p>
</li>
<li><p>二级无序列表</p>
</li>
<li>二级无序列表</li>
</ul>
</li>
</ul>
<ol>
<li>一级有序列表<ol>
<li>二级有序列表</li>
<li>二级有序列表</li>
<li>二级有序列表</li>
</ol>
</li>
<li>一级有序列表<ol>
<li>二级有序列表</li>
<li>二级有序列表</li>
<li>二级有序列表</li>
</ol>
</li>
</ol>
<h3 id="八-表格"><a href="#八-表格" class="headerlink" title="八 表格"></a>八 表格</h3><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|表头|表头|表头|</span><br><span class="line">|---|:--:|---:|</span><br><span class="line">|内容|内容|内容|</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">-有一个就行了，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">- 两边加:表示文字居中</span><br><span class="line">- 右边加: 表示文字居右</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|姓名|技能|排行|</span><br><span class="line">|---|:--:|--:|</span><br><span class="line">|刘备|哭|大哥|</span><br><span class="line">|关羽|打|二哥|</span><br><span class="line">|张飞|骂|三弟|</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>姓名</th>
<th style="text-align:center">技能</th>
<th style="text-align:right">排行</th>
</tr>
</thead>
<tbody>
<tr>
<td>刘备</td>
<td style="text-align:center">哭</td>
<td style="text-align:right">大哥</td>
</tr>
<tr>
<td>关羽</td>
<td style="text-align:center">打</td>
<td style="text-align:right">二哥</td>
</tr>
<tr>
<td>张飞</td>
<td style="text-align:center">骂</td>
<td style="text-align:right">三弟</td>
</tr>
</tbody>
</table>
<h3 id="九-代码"><a href="#九-代码" class="headerlink" title="九 代码"></a>九 代码</h3><p>语法：</p>
<p>单行代码： 代码之间分别用一个反引号包起来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure>
<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">	代码···</span><br><span class="line">	代码···</span><br><span class="line">	代码···</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边的小括号即可。</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<p>​    单行代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`create database hero;`</span><br></pre></td></tr></table></figure>
<p>​    代码块</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">xiaobu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"这是一个很寂寞的天下着有些伤心的雨"</span></span><br><span class="line">	&#125;</span><br><span class="line">	xiaobu();</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>​    单行代码</p>
<p><code>create database hero;</code></p>
<p>​    代码块</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xiaobu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"这是一片很寂寞的天下着有些伤心的雨"</span></span><br><span class="line">&#125;</span><br><span class="line">xiaobu();</span><br></pre></td></tr></table></figure>
<h3 id="十-流程图"><a href="#十-流程图" class="headerlink" title="十 流程图"></a>十 流程图</h3><p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​```flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">效果如下：</span><br><span class="line"></span><br><span class="line">```flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure>
<p><code>`</code></p>
]]></content>
      <categories>
        <category>编辑器使用</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>vue</title>
    <url>/2019/03/04/vue/</url>
    <content><![CDATA[<h2 id="vue笔记"><a href="#vue笔记" class="headerlink" title="vue笔记"></a>vue笔记</h2><p>vue的基本代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1. 导入Vue的包 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 将来 new 的Vue实例，会控制这个 元素中的所有内容 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Vue 实例所控制的这个元素区域，就是我们的 V  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 创建一个Vue的实例</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 当我们导入包之后，在浏览器的内存中，就多了一个 Vue 构造函数</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//  注意：我们 new 出来的这个 vm 对象，就是我们 MVVM中的 VM调度者</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,  <span class="comment">// 表示，当前我们 new 的这个 Vue 实例，要控制页面上的哪个区域</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 这里的 data 就是 MVVM中的 M，专门用来保存 每个页面的数据的</span></span></span><br><span class="line"><span class="javascript">      data: &#123; <span class="comment">// data 属性中，存放的是 el 中要用到的数据</span></span></span><br><span class="line"><span class="javascript">        msg: <span class="string">'欢迎学习Vue'</span> <span class="comment">// 通过 Vue 提供的指令，很方便的就能把数据渲染到页面上，程序员不再手动操作DOM元素了【前端的Vue之类的框架，不提倡我们去手动操作DOM元素了】</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>vue v-cloak 的学习</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="comment">/* display: none; */</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 v-cloak 能够解决 插值表达式闪烁的问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>++++++++ &#123;&#123; msg &#125;&#125; ----------<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span>==================<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认 v-text 是没有闪烁问题的 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-text会覆盖元素中原本的内容，但是 插值表达式  只会替换自己的这个占位符，不会把 整个元素的内容清空 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"msg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"msg2"</span>&gt;</span>1212112<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-bind: 是 Vue中，提供的用于绑定属性的指令 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;input type="button" value="按钮" v-bind:title="mytitle + '123'"&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意： v-bind: 指令可以被简写为 :要绑定的属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-bind 中，可以写合法的JS表达式 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Vue 中提供了 v-on: 事件绑定机制 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;input type="button" value="按钮" :title="mytitle + '123'" v-on:click="alert('hello')"&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> @<span class="attr">click</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">'123'</span>,</span></span><br><span class="line"><span class="xml">        msg2: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>哈哈，我是一个大大的H1， 我大，我骄傲<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">        mytitle: <span class="string">'这是一个自己定义的title'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      methods: &#123; <span class="comment">// 这个 methods属性中定义了当前Vue实例所有可用的方法</span></span></span><br><span class="line"><span class="javascript">        show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          alert(<span class="string">'Hello'</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    /* document.getElementById('btn').onclick = function()&#123;</span><br><span class="line"><span class="javascript">      alert(<span class="string">'Hello'</span>)</span></span><br><span class="line">    &#125; */</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 1. 如何定义一个基本的Vue代码结构 --&gt;</span><br><span class="line">&lt;!-- 2. 插值表达式 和  v-text   --&gt;</span><br><span class="line">&lt;!-- 3. v-cloak --&gt;</span><br><span class="line">&lt;!-- 4. v-html --&gt;</span><br><span class="line">&lt;!-- 5. v-bind   Vue提供的属性绑定机制   缩写是 : --&gt;</span><br><span class="line">&lt;!-- 6. v-on     Vue提供的事件绑定机制   缩写是 @ --&gt;</span><br></pre></td></tr></table></figure>
<p>vue利用js字符串的substring()截取字符串实现文字跑马灯效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1. 导入Vue包 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2. 创建一个要控制的区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"浪起来"</span> @<span class="attr">click</span>=<span class="string">"lang"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"低调"</span> @<span class="attr">click</span>=<span class="string">"stop"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 注意：在 VM实例中，如果想要获取 data 上的数据，或者 想要调用 methods 中的 方法，必须通过 this.数据属性名  或  this.方法名 来进行访问，这里的this，就表示 我们 new 出来的  VM 实例对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">'猥琐发育，别浪~~！'</span>,</span></span><br><span class="line"><span class="javascript">        intervalId: <span class="literal">null</span> <span class="comment">// 在data上定义 定时器Id</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        lang() &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(this.msg)</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 获取到头的第一个字符</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// this</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="keyword">this</span>.intervalId != <span class="literal">null</span>) <span class="keyword">return</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.intervalId = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> start = <span class="keyword">this</span>.msg.substring(<span class="number">0</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 获取到 后面的所有字符</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> end = <span class="keyword">this</span>.msg.substring(<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 重新拼接得到新的字符串，并赋值给 this.msg</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.msg = end + start</span></span><br><span class="line">          &#125;, 400)</span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// 注意： VM实例，会监听自己身上 data 中所有数据的改变，只要数据一发生变化，就会自动把 最新的数据，从data 上同步到页面中去；【好处：程序员只需要关心数据，不需要考虑如何重新渲染DOM页面】</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        stop() &#123; <span class="comment">// 停止定时器</span></span></span><br><span class="line"><span class="javascript">          clearInterval(<span class="keyword">this</span>.intervalId)</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 每当清除了定时器之后，需要重新把 intervalId 置为 null</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.intervalId = <span class="literal">null</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 分析：</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 给 【浪起来】 按钮，绑定一个点击事件   v-on   @</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 在按钮的事件处理函数中，写相关的业务逻辑代码：拿到 msg 字符串，然后 调用 字符串的 substring 来进行字符串的截取操作，把 第一个字符截取出来，放到最后一个位置即可；</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 3. 为了实现点击下按钮，自动截取的功能，需要把 2 步骤中的代码，放到一个定时器中去；</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>vue 里面事件修饰符那些事</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">      height: 150px;</span><br><span class="line">      background-color: darkcyan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line">      padding: 40px;</span><br><span class="line">      background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用  .stop  阻止冒泡 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span> @<span class="attr">click</span>=<span class="string">"div1Handler"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"戳他"</span> @<span class="attr">click.stop</span>=<span class="string">"btnHandler"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用 .prevent 阻止默认行为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> @<span class="attr">click.prevent</span>=<span class="string">"linkClick"</span>&gt;</span>有问题，先去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用  .capture 实现捕获触发事件的机制 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span> @<span class="attr">click.capture</span>=<span class="string">"div1Handler"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"戳他"</span> @<span class="attr">click</span>=<span class="string">"btnHandler"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用 .self 实现只有点击当前元素时候，才会触发事件处理函数 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class="inner" @click="div1Handler"&gt;</span></span><br><span class="line"><span class="comment">      &lt;input type="button" value="戳他" @click="btnHandler"&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用 .once 只触发一次事件处理函数 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;a href="http://www.baidu.com" @click.prevent.once="linkClick"&gt;有问题，先去百度&lt;/a&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 演示： .stop 和 .self 的区别 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class="outer" @click="div2Handler"&gt;</span></span><br><span class="line"><span class="comment">      &lt;div class="inner" @click="div1Handler"&gt;</span></span><br><span class="line"><span class="comment">        &lt;input type="button" value="戳他" @click.stop="btnHandler"&gt;</span></span><br><span class="line"><span class="comment">      &lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- .self 只会阻止自己身上冒泡行为的触发，并不会真正阻止 冒泡的行为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span> @<span class="attr">click</span>=<span class="string">"div2Handler"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span> @<span class="attr">click.self</span>=<span class="string">"div1Handler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"戳他"</span> @<span class="attr">click</span>=<span class="string">"btnHandler"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        div1Handler() &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 inner div 的点击事件'</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        btnHandler() &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 btn 按钮 的点击事件'</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        linkClick() &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'触发了连接的点击事件'</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        div2Handler() &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 outer div 的点击事件'</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用  .stop  阻止冒泡 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 .prevent 阻止默认行为 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用  .capture 实现捕获触发事件的机制 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 .self 实现只有点击当前元素时候，才会触发事件处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 .once 只触发一次事件处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 演示： .stop 和 .self 的区别 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- .self 只会阻止自己身上冒泡行为的触发，并不会真正阻止 冒泡的行为 --&gt;</span></span><br></pre></td></tr></table></figure>
<p>vue  v-model指令的学习</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-bind 只能实现数据的单向绑定，从 M 自动绑定到 V， 无法实现数据的双向绑定  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;input type="text" v-bind:value="msg" style="width:100%;"&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用  v-model 指令，可以实现 表单元素和 Model 中数据的双向数据绑定 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意： v-model 只能运用在 表单元素中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- input(radio, text, address, email....)   select    checkbox   textarea   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">'大家都是好学生，爱敲代码，爱学习，爱思考，简直是完美，没瑕疵！'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-bind 只能实现数据的单向绑定，从 M 自动绑定到 V， 无法实现数据的双向绑定  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;input type="text" v-bind:value="msg" style="width:100%;"&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用  v-model 指令，可以实现 表单元素和 Model 中数据的双向数据绑定 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意： v-model 只能运用在 表单元素中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- input(radio, text, address, email....)   select    checkbox   textarea   --&gt;</span></span><br></pre></td></tr></table></figure>
<p>vue 实现简单的计算器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"opt"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"+"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"-"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"*"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n2"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"="</span> @<span class="attr">click</span>=<span class="string">"calc"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"result"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        n1: 0,</span><br><span class="line">        n2: 0,</span><br><span class="line">        result: 0,</span><br><span class="line"><span class="javascript">        opt: <span class="string">'+'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        calc() &#123; <span class="comment">// 计算器算数的方法  </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 逻辑：</span></span></span><br><span class="line">          /* switch (this.opt) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">'+'</span>:</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) + <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2)</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">'-'</span>:</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) - <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2)</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">'*'</span>:</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) * <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2)</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">'/'</span>:</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) / <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2)</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line">          &#125; */</span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// 注意：这是投机取巧的方式，正式开发中，尽量少用</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> codeStr = <span class="string">'parseInt(this.n1) '</span> + <span class="keyword">this</span>.opt + <span class="string">' parseInt(this.n2)'</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.result = <span class="built_in">eval</span>(codeStr)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>vue中的样式 - class</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.thin</span> &#123;</span></span><br><span class="line">      font-weight: 200;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.italic</span> &#123;</span></span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">letter-spacing</span>: 0<span class="selector-class">.5em</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h1 class="red thin"&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第一种使用方式，直接传递一个数组，注意： 这里的 class 需要使用  v-bind 做数据绑定 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h1 :class="['thin', 'italic']"&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在数组中使用三元表达式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h1 :class="['thin', 'italic', flag?'active':'']"&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在数组中使用 对象来代替三元表达式，提高代码的可读性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h1 :class="['thin', 'italic', &#123;'active':flag&#125; ]"&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在为 class 使用 v-bind 绑定 对象的时候，对象的属性是类名，由于 对象的属性可带引号，也可不带引号，所以 这里我没写引号；  属性的值 是一个标识符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"classObj"</span>&gt;</span>这是一个很大很大的H1，大到你无法想象！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        flag: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        classObj: &#123; <span class="attr">red</span>: <span class="literal">true</span>, <span class="attr">thin</span>: <span class="literal">true</span>, <span class="attr">italic</span>: <span class="literal">false</span>, <span class="attr">active</span>: <span class="literal">false</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>vue中的样式 - style</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对象就是无序键值对的集合 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h1 :style="styleObj1"&gt;这是一个h1&lt;/h1&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"[ styleObj1, styleObj2 ]"</span>&gt;</span>这是一个h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        styleObj1: &#123; <span class="attr">color</span>: <span class="string">'red'</span>, <span class="string">'font-weight'</span>: <span class="number">200</span> &#125;,</span></span><br><span class="line"><span class="javascript">        styleObj2: &#123; <span class="string">'font-style'</span>: <span class="string">'italic'</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>v-for循环普通数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;p&gt;&#123;&#123;list[0]&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;&#123;&#123;list[1]&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;&#123;&#123;list[2]&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;&#123;&#123;list[3]&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;&#123;&#123;list[4]&#125;&#125;&lt;/p&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, i) in list"</span>&gt;</span>索引值：&#123;&#123;i&#125;&#125; --- 每一项：&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [1, 2, 3, 4, 5, 6]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">索引值：0 --- 每一项：1</span><br><span class="line"></span><br><span class="line">索引值：1 --- 每一项：2</span><br><span class="line"></span><br><span class="line">索引值：2 --- 每一项：3</span><br><span class="line"></span><br><span class="line">索引值：3 --- 每一项：4</span><br><span class="line"></span><br><span class="line">索引值：4 --- 每一项：5</span><br><span class="line"></span><br><span class="line">索引值：5 --- 每一项：6</span><br></pre></td></tr></table></figure>
<p>v-for循环对象数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(user, i) in list"</span>&gt;</span>Id：&#123;&#123; user.id &#125;&#125; --- 名字：&#123;&#123; user.name &#125;&#125; --- 索引：&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [</span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'zs1'</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'zs2'</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'zs3'</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'zs4'</span> &#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Id：1 --- 名字：zs1 --- 索引：0</span><br><span class="line"></span><br><span class="line">Id：2 --- 名字：zs2 --- 索引：1</span><br><span class="line"></span><br><span class="line">Id：3 --- 名字：zs3 --- 索引：2</span><br><span class="line"></span><br><span class="line">Id：4 --- 名字：zs4 --- 索引：3</span><br></pre></td></tr></table></figure>
<p>v-for 循环对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意：在遍历对象身上的键值对的时候， 除了 有  val  key  ,在第三个位置还有 一个 索引  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(val, key, i) in user"</span>&gt;</span>值是： &#123;&#123; val &#125;&#125; --- 键是： &#123;&#123;key&#125;&#125; -- 索引： &#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        user: &#123;</span><br><span class="line">          id: 1,</span><br><span class="line"><span class="javascript">          name: <span class="string">'托尼·屎大颗'</span>,</span></span><br><span class="line"><span class="javascript">          gender: <span class="string">'男'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">值是： 1 --- 键是： id -- 索引： 0</span><br><span class="line"></span><br><span class="line">值是： 托尼·屎大颗 --- 键是： name -- 索引： 1</span><br><span class="line"></span><br><span class="line">值是： 男 --- 键是： gender -- 索引： 2</span><br></pre></td></tr></table></figure>
<p>v-for 迭代数字</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- in 后面我们放过  普通数组，对象数组，对象， 还可以放数字 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意：如果使用 v-for 迭代数字的话，前面的 count 值从 1 开始 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"count in 6"</span>&gt;</span>这是第 &#123;&#123; count &#125;&#125; 次循环<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是第 1 次循环</span><br><span class="line"></span><br><span class="line">这是第 2 次循环</span><br><span class="line"></span><br><span class="line">这是第 3 次循环</span><br><span class="line"></span><br><span class="line">这是第 4 次循环</span><br><span class="line"></span><br><span class="line">这是第 5 次循环</span><br><span class="line"></span><br><span class="line">这是第 6 次循环</span><br></pre></td></tr></table></figure>
<p>v-for循环中key属性的使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>Id:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"添加"</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注意： v-for 循环的时候，key 属性只能使用 number获取string --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意： key 在使用的时候，必须使用 v-bind 属性绑定的形式，指定 key 的值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在组件中，使用v-for循环的时候，或者在一些特殊情况中，如果 v-for 有问题，必须 在使用 v-for 的同时，指定 唯一的 字符串/数字 类型 :key 值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123;item.id&#125;&#125; --- &#123;&#123;item.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        id: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        name: <span class="string">''</span>,</span></span><br><span class="line">        list: [</span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'李斯'</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'嬴政'</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'赵高'</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'韩非'</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'荀子'</span> &#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        add() &#123; <span class="comment">// 添加方法</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.list.unshift(&#123; <span class="attr">id</span>: <span class="keyword">this</span>.id, <span class="attr">name</span>: <span class="keyword">this</span>.name &#125;)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<p><img src="/2019/03/04/vue/C:/Users\xiaobu\AppData\Roaming\Typora\typora-user-images\1551800766565.png" alt="1551800766565"></p>
<p>v-if和v-show的使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;input type="button" value="toggle" @click="toggle"&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"toggle"</span> @<span class="attr">click</span>=<span class="string">"flag=!flag"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-if 的特点：每次都会重新删除或创建元素 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-show 的特点： 每次不会重新进行DOM的删除和创建操作，只是切换了元素的 display:none 样式 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-if 有较高的切换性能消耗 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-show 有较高的初始渲染消耗 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 如果元素涉及到频繁的切换，最好不要使用 v-if, 而是推荐使用 v-show --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果元素可能永远也不会被显示出来被用户看到，则推荐使用 v-if --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>这是用v-if控制的元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span>这是用v-show控制的元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        flag: <span class="literal">false</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        /* toggle() &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag</span></span><br><span class="line">        &#125; */</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. MVC 和 MVVM 的区别 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 学习了Vue中最基本代码的结构 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3. 插值表达式   v-cloak   v-text   v-html   v-bind（缩写是:）   v-on（缩写是@）   v-model   v-for   v-if     v-show --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4. 事件修饰符  ：  .stop   .prevent   .capture   .self     .once --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 5. el  指定要控制的区域    data 是个对象，指定了控制的区域内要用到的数据    methods 虽然带个s后缀，但是是个对象，这里可以自定义了方法 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 6. 在 VM 实例中，如果要访问 data 上的数据，或者要访问 methods 中的方法， 必须带 this --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 7. 在 v-for 要会使用 key 属性 （只接受 string / number） --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 8. v-model 只能应用于表单元素 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 9. 在vue中绑定样式两种方式  v-bind:class   v-bind:style --&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/04/vue/G:/前端\vuejs深入浅出资料\day1\笔记\01.MVC和MVVM的关系图解.png" alt></p>
]]></content>
      <categories>
        <category>前端纪录</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
