(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{488:function(t,s,a){"use strict";a.r(s);var e=a(4),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"字典包配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字典包配置"}},[t._v("#")]),t._v(" 字典包配置")]),t._v(" "),a("p",[a("RouterLink",{attrs:{to:"/guide/directory-structure/"}},[t._v("目录结构")]),t._v("这篇文章中字典配置文件涉及到字典配置，此篇文章详细介绍可配置项。")],1),t._v(" "),a("h2",{attrs:{id:"配置文档说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置文档说明"}},[t._v("#")]),t._v(" 配置文档说明")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字段")]),t._v(" "),a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("getDictCodeApi")]),t._v(" "),a("td",[t._v("promise")]),t._v(" "),a("td",[t._v("必传，获取字典数据接口")]),t._v(" "),a("td",[t._v("无")])]),t._v(" "),a("tr",[a("td",[t._v("verssion")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("必传 ，最新字典数据的版本号")]),t._v(" "),a("td",[t._v("无")])]),t._v(" "),a("tr",[a("td",[t._v("vant")]),t._v(" "),a("td",[t._v("vant组件")]),t._v(" "),a("td",[t._v("选传，最好是传，传递vant组件库，避免字典使用的vant版本与项目版本不一致导致的问题")]),t._v(" "),a("td",[t._v("默认 vant @2.12.39版本")])]),t._v(" "),a("tr",[a("td",[t._v("query")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("获取字典数据接口传参的 key字段名")]),t._v(" "),a("td",[t._v("type")])]),t._v(" "),a("tr",[a("td",[t._v("usuallyGetFileds")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("字符串，多个的话，英文逗号隔开，经常需要用到的字段，子项目非常适用此字段配置")]),t._v(" "),a("td",[t._v('""')])]),t._v(" "),a("tr",[a("td",[t._v("verssionKey")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("存入浏览器缓存的当前版本号key字段名")]),t._v(" "),a("td",[t._v("currentVerssion")])]),t._v(" "),a("tr",[a("td",[t._v("dictDataKey")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("存入浏览器缓存的字典数据key字段名")]),t._v(" "),a("td",[t._v("dictCodeList")])]),t._v(" "),a("tr",[a("td",[t._v("format")]),t._v(" "),a("td",[t._v("Object")]),t._v(" "),a("td",[t._v("接口返回的数据的value和label字段名，value和label的 "),a("strong",[t._v("key不能改")]),t._v(" "),a("strong",[t._v("如有配置value与label必须同时传（即使有一个与默认值一致）")])]),t._v(" "),a("td",[t._v('{value: "value", label: "label"}')])]),t._v(" "),a("tr",[a("td",[t._v("formatterRequest")]),t._v(" "),a("td",[t._v("function")]),t._v(" "),a("td",[t._v("对入参进行数据格式转化，将我们规定的格式，转化为后端人员接口期望传的参数 默认格式")]),t._v(" "),a("td",[t._v('（query, data）=> {if(!data) {return {[query]:""}return [query]:""}}')])]),t._v(" "),a("tr",[a("td",[t._v("formatterDictList")]),t._v(" "),a("td",[t._v("function")]),t._v(" "),a("td",[t._v("处理接口返回的数据，将返回数据处理成包期望的字典数据 data为接口返回的数据"),a("br"),t._v("V3.0.3版本开始新增可配置参数query，query为该字典类型type的值，兼容当接口仅支持单个查询且返回数据无对应字典类型时 可配置使用")]),t._v(" "),a("td",[t._v("（data, query）=> {return data.data.dictCodeList}")])]),t._v(" "),a("tr",[a("td",[t._v("formatterDictVerssion")]),t._v(" "),a("td",[t._v("function")]),t._v(" "),a("td",[t._v("处理接口返回的数据，返回包期望的版本号 data为接口返回的数据")]),t._v(" "),a("td",[t._v("（data）=> {return data.data.verssion}")])]),t._v(" "),a("tr",[a("td",[t._v("storage")]),t._v(" "),a("td",[t._v("window的对象")]),t._v(" "),a("td",[t._v("localStorage/ sessionStorage 浏览器缓存位置的配置")]),t._v(" "),a("td",[t._v("localStorage")])]),t._v(" "),a("tr",[a("td",[t._v("isGetAll")]),t._v(" "),a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("是否获取全部字典值")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("localDictCodes")]),t._v(" "),a("td",[t._v("Object")]),t._v(" "),a("td",[t._v("本地项目写死的字典数据")]),t._v(" "),a("td",[t._v("{}")])]),t._v(" "),a("tr",[a("td",[t._v("getDictEveryTime")]),t._v(" "),a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("是否每次进入页面都加载请求字典")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("filterDataFun")]),t._v(" "),a("td",[t._v("Function")]),t._v(" "),a("td",[t._v("组件过滤数据方法函数 接收该字典类型的数据 默认不变")]),t._v(" "),a("td",[t._v("(list) => { return list }")])]),t._v(" "),a("tr",[a("td",[t._v("disabledDataFun")]),t._v(" "),a("td",[t._v("Function")]),t._v(" "),a("td",[t._v("组件禁用数据方法函数 接收该字典类型的数据 默认不变")]),t._v(" "),a("td",[t._v("(list) => { return list }")])]),t._v(" "),a("tr",[a("td",[t._v("treeSetting")]),t._v(" "),a("td",[t._v("Object")]),t._v(" "),a("td",[t._v("数组转树形数据需要的配置")]),t._v(" "),a("td",[t._v("详见"),a("RouterLink",{attrs:{to:"/guide/config/#treesetting配置"}},[t._v("treesetting配置")])],1)])])]),t._v(" "),a("p",[t._v("::: tips")]),t._v(" "),a("p",[a("code",[t._v("formatterRequest")]),t._v("接收两个参数，第一个是 query，默认值为type，第二个是字典类型，多个时默认英文逗号隔开。此配置的目的就是将我们默认的传参格式，转化为后端接口想要的格式。")]),t._v(" "),a("p",[a("code",[t._v("formatterDictList")]),t._v("接收一个参数data，这个的值就是请求字典接口返回的最外层的数据，将后端返回的数据转化为我们包想要的格式，然后return回来即可。")]),t._v(" "),a("p",[a("code",[t._v("V3.0.3版本开始 formatterDictList")]),t._v("接收两个参数，第一个是data，第二个是query，data就是请求字典接口返回的最外层的数据，query就是请求的字典类型，将后端返回的数据转化为我们包想要的格式，然后return回来即可。")]),t._v(" "),a("p",[t._v(":::")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// V3.0.3版本开始 支持接口只能请求一个字典类型时 的配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" getDicts "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@/api/system/dict/data"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" localDictCodes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@/assets/data/dict"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" vant "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vant"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("getDictCodeApi")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" getDicts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//必传 获取字典数据接口")]),t._v("\n  localDictCodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//选填 项目写死的字典数据")]),t._v("\n  vant"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 格式化请求参数，query为 配置项query的值， data为 请求传入的参数，也就是字典类型，多个字典时用英文逗号隔开")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("formatterRequest")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dictValue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("label")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dictLabel"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("formatterDictList")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" query")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 项目无法实时返回版本时  返回和配置一样的版本号，避免版本号不一致 缓存被删除")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("formatterDictVerssion")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.1"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"treesetting配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treesetting配置"}},[t._v("#")]),t._v(" treesetting配置")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("字段名")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("说明")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("idField")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("id字段名，唯一标识")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("id")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("parentIdField")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("父节点字段名，父节点字段标识")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("parentId")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("childrenField")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数组转树形数据后子节点字段名")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("children")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("firstId")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("根节点数据值，默认字符串 0")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("“0”")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("labelField")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("展示值字段名")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("label")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("labelArrField")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('树形数据数组字段名（如["福建省","漳州市","诏安县"]）')]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("labelArr")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("idArrField")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('树形数据数组字段名（如["350000","350600","350624"]）')]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("idArr")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("levelField")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("层级字段名，展示层级")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("level")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("level")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("配置第一级为第几级")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("leafField")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("叶子节点字段名")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("leaf")])])])]),t._v(" "),a("h2",{attrs:{id:"常见问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[t._v("#")]),t._v(" 常见问题")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("后端无返回版本号时怎么办。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* \n答：当后端无返回版本号时，可将版本号写死固定，如0.0.1，且使用formatterDictVerssion格式化返回版本号数据写死 0.0.1（必须和前面一致）。\n\n具体使用方法 如下：\n*/")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  src/api/modules/common-api.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取全局配置  包含版本号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getGlobalConfigApi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("verssion")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/dict-setting.js 文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("getDictCodeApi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@/api/module/common-api.js"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" localDictCodes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@/assets/data/dict.js"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    getDictCodeApi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//必传 获取字典数据接口")]),t._v("\n    localDictCodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//选填 项目写死的字典数据")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("formatterDictVerssion")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//data为 经过 axios 响应处理后返回的 第一级数据")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.1"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//以上操作即可解决后端接口无返回版本号问题，实现方法很多，以上方法为遵循文档推荐代码的解决方式")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("后端字典接口正常请求，但是返回数据与文档要求格式不一致怎么办？")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n答：此包拥有诸多配置，面对后端人员不配合修改接口返回格式时，部门字典包无能为力。此包就针对这个问题，实现对接口返回数据进行操作。让各种各样的接口数据经过您优秀的数据操作，都能适配此字典包。\n\n具体如下：\n*/")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/dict-setting.js 文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("getDictCodeApi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@/api/modules/common-api.js"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" localDictCodes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@/assets/data/dict.js"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    getDictCodeApi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//必传 获取字典数据接口")]),t._v("\n    localDictCodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//选填 项目写死的字典数据")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("formatterDictList")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//data为 经过 axios 响应处理后返回的 第一级数据")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dictCodeList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 一系列操作后 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dictCodeList\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("后端请求格式与字典包要求的不一致怎么办？")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n答：此包拥有诸多配置，面对后端人员不愿意修改请求参数来适配字典包，部门字典包无能为力。此包就针对这个问题，实现对请求参数数据进行操作。让请求参数能适配此字典包。\n\n具体如下：\n*/")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/dict-setting.js 文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("getDictCodeApi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@/api/modules/common-api.js"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" localDictCodes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@/assets/data/dict.js"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    getDictCodeApi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//必传 获取字典数据接口")]),t._v("\n    localDictCodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//选填 项目写死的字典数据")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("formatterRequest")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//query 为字典类型参数   如  type: "AAC004" 中的type')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//data  为字典类型数据   如  type: "AAC004" 中的AAC004')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" req "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 一系列操作后 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" req\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("此字典组件使用后会调用多次接口且每个接口只请求一个字典类型的数据，能让他们在同个接口请求？")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n答：针对这个问题，此包已经有预判到了，所以有个usuallyGetFileds配置项，用来配置经常请求的字典类型，这种情况下，这些字典数据就会在同个接口请求。当然如果在整个项目上或多或少 会有部分字典数据 不在usuallyGetFileds范畴内。不过此字段已经大大的解决了您的问题。\n如果是项目是供iframe作为单个功能页使用，可将页面上所有使用到的字典数据配置起来就能完全达到您的要求。\n*/")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("后端接口返回数据格式一致，但是字段名不一致，我该如何处理？")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n答：format配置项可以解决您的问题。\n具体如下\n*/")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/dict-setting.js 文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("getDictCodeApi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@/api/modules/common-api.js"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" localDictCodes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@/assets/data/dict.js"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    getDictCodeApi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//必传 获取字典数据接口")]),t._v("\n    localDictCodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//选填 项目写死的字典数据")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"后端返回的value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("label")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"后端返回的label"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);