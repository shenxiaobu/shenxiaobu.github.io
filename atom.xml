<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>祥你的365夜</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shenxiaobu.github.io/"/>
  <updated>2020-05-31T04:54:56.306Z</updated>
  <id>https://shenxiaobu.github.io/</id>
  
  <author>
    <name>shenxiaobu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>优雅使用VUE的实战技巧</title>
    <link href="https://shenxiaobu.github.io/2020/05/31/%E4%BC%98%E9%9B%85%E4%BD%BF%E7%94%A8VUE%E7%9A%84%E5%AE%9E%E6%88%98%E6%8A%80%E5%B7%A7/"/>
    <id>https://shenxiaobu.github.io/2020/05/31/优雅使用VUE的实战技巧/</id>
    <published>2020-05-31T04:44:01.000Z</published>
    <updated>2020-05-31T04:54:56.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id="优雅使用VUE的实战技巧"><a href="#优雅使用VUE的实战技巧" class="headerlink" title="优雅使用VUE的实战技巧"></a>优雅使用VUE的实战技巧</h3><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ol><li>组件 : 全局组件注册</li><li>Render函数 : 拯救繁乱的template</li><li>Vue权限控制：高精度全局权限控制</li></ol><h4 id="全-局-组-件-注-册"><a href="#全-局-组-件-注-册" class="headerlink" title="全 局 组 件 注 册"></a><strong>全 局 组 件 注 册</strong></h4><p>组件是我们非常常用的东西，很多人使用组件都是通过一个一个文件去引用和注册。如果一个组件在整个项目里面的使用次数较多，每一次使用都需要引用并注册，就会显得特别麻烦。</p><p>一般组件应用弊端：</p><p>傻瓜式，太笨拙；</p><p>繁琐，低效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;I am HelloWorld&lt;/h1&gt;</span><br><span class="line">    &lt;Child1&gt;&lt;/Child1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child1 from &apos;./child1.vue&apos;   // 引入</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;HelloWorld&apos;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;   // 注册</span><br><span class="line">    Child1</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: String</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>当我们在项目需要重复多次使用该组件，会导致出现很多重复的引入和注册代码，既繁琐又不雅观。因此我们可以通过一个全局的Js文件来管理，将需要多次使用的组件进行全局注册</p><p><strong>创建全局.js文件管理全局组件</strong></p><p><img src="/2020/05/31/优雅使用VUE的实战技巧/image-20200531124625751.png" alt="image-20200531124625751"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1 - globalComponent.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span> <span class="comment">// 引入vue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理首字母大写 abc =&gt; Abc</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeStr</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.charAt(<span class="number">0</span>).toUpperCase() + str.slice(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    require.context(arg1,arg2,arg3)</span></span><br><span class="line"><span class="comment">        arg1 - 读取文件的路径</span></span><br><span class="line"><span class="comment">        arg2 - 是否遍历文件的子目录</span></span><br><span class="line"><span class="comment">        arg3 - 匹配文件的正则</span></span><br><span class="line"><span class="comment">    关于这个Api的用法，建议小伙伴们去查阅一下，用途也比较广泛</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.context(<span class="string">'.'</span>, <span class="literal">false</span>, /\.vue$/)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'requireComponent.keys():'</span>,requireComponent.keys())  <span class="comment">// 打印</span></span><br><span class="line">requireComponent.keys().forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> config = requireComponent(fileName)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'config:'</span>,config)  <span class="comment">// 打印</span></span><br><span class="line">    <span class="keyword">const</span> componentName = changeStr(</span><br><span class="line">        fileName.replace(<span class="regexp">/^\.\//</span>, <span class="string">''</span>).replace(<span class="regexp">/\.\w+$/</span>, <span class="string">''</span>)   <span class="comment">// ./child1.vue =&gt; child1</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    Vue.component(componentName, config.default || config) <span class="comment">// 动态注册该目录下的所有.vue文件</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 2 - 将globalComponent.js引入main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> global <span class="keyword">from</span> <span class="string">'./components/globalComponent'</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 3 - 使用这类组件不再需要引入和注册，直接标签使用即可</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;I am HelloWorld&lt;/h1&gt;</span><br><span class="line">    &lt;Child1&gt;&lt;/Child1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>Extra：路由分区以及动态添加路由</strong></p><p>假设我们有很多路由，每一个路由都通过傻瓜式的引入方式，会导致整个项目代码量增多，繁琐，更重要的一点是增加后期维护的难度。因此我们也可以通过上面类似的方式，对路由的引入和使用进行管理，实现分区引入路由，将不同功能下的路由进行区分，通过动态的方式进行引入，即方便快捷又增加可维护</p><p><strong>创建专门的路由.js文件管理所有的路由</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">总路由管理文件 - index.js</span><br><span class="line"></span><br><span class="line">分区路由</span><br><span class="line">    - index.routes.js</span><br><span class="line">    - login.routes.js</span><br><span class="line"></span><br><span class="line">在大型项目中，往往会有很多互不关联的模块，例如电商平台中的商城，个人信息，这种情况下就可以对路由进行分区</span><br></pre></td></tr></table></figure><p><img src="/2020/05/31/优雅使用VUE的实战技巧/image-20200531124916502.png" alt="image-20200531124916502"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 分区路由文件写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    path:<span class="string">'/index'</span>,</span><br><span class="line">    name:<span class="string">'Index'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Index.vue'</span>),  <span class="comment">// 懒加载式引入，当跳转到时才进行引入chunk</span></span><br><span class="line">    children: [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 总路由管理文件 index.js 写法</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routerList = []  <span class="comment">// 路由数组 - 存放所有路由</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">importAll</span>(<span class="params">routerArr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 该函数用于将所有分区路由中的路由添加到路由数组</span></span><br><span class="line">    routerArr.keys().forEach( <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key)</span><br><span class="line">        routerList.push(routerArr(key).default)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">importAll(<span class="built_in">require</span>.context(<span class="string">'.'</span>,<span class="literal">true</span>,/\.routes\.js/))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    ...routerList</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>优化之后的代码，会更灵活，更具有观赏性，既便捷高效，又方便维护。</p><h4 id="拯救繁乱的template"><a href="#拯救繁乱的template" class="headerlink" title="拯救繁乱的template"></a><strong>拯救繁乱的template</strong></h4><p>很多人在写组件的时候，会依赖脚手架中的<template></template>标签，其实template也存在一定的缺陷，例如：</p><p>template里存在一值多判断；</p><p>过多使用template会使代码冗余，杂乱。</p><p>VUE给我们提供了一个render函数，我们可以通过这个函数巧妙的解决template造成的问题。</p><p><strong>实战 - 处理多个button</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;I am Home&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 假设按钮有多种类型,通过value来显示不同类型 --&gt;</span><br><span class="line">    &lt;div v-if=&apos;value === 1&apos;&gt;</span><br><span class="line">      &lt;button&gt;button1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-else-if=&apos;value === 2&apos;&gt;</span><br><span class="line">      &lt;button&gt;button2&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-else&gt;</span><br><span class="line">      &lt;button&gt;button3&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;Home&apos;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        value:1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>上面这种写法，当出现多种类型的button，就会显得杂乱无章，当然，很多人会选择去封装一个button组件，那么这个组件的封装，又是一个技巧点，利用VUE的render函数，减少不必要的template，因此ru我们可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个button.vue文件 写法如下</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props:&#123;</span><br><span class="line">        type:&#123;</span><br><span class="line">            type:String,</span><br><span class="line">            default:&apos;normal&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        text:&#123;</span><br><span class="line">            type:String,</span><br><span class="line">            default:&apos;button&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render(h)&#123;</span><br><span class="line">        /*</span><br><span class="line">            h 类似于 createElement， 接受2个参数</span><br><span class="line">            1 - 元素</span><br><span class="line">            2 - 选项</span><br><span class="line">         */</span><br><span class="line">        return h(&apos;button&apos;,&#123;</span><br><span class="line">            // 相当于 v-bind:class</span><br><span class="line">            class:&#123;</span><br><span class="line">                btn:true,</span><br><span class="line">                &apos;btn-success&apos;:this.type === &apos;success&apos;,</span><br><span class="line">                &apos;btn-danger&apos;:this.type === &apos;danger&apos;,</span><br><span class="line">                &apos;btn-warning&apos;:this.type === &apos;warning&apos;,</span><br><span class="line">                &apos;btn-normal&apos;:this.type === &apos;normal&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            domProps:&#123;</span><br><span class="line">                innerText: this.text || &apos;默认&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            on:&#123;</span><br><span class="line">                click:this.handleClick</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        handleClick()&#123;</span><br><span class="line">            this.$emit(&apos;myClick&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.btn&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height:40px;</span><br><span class="line">    line-height:40px;</span><br><span class="line">    border:0px;</span><br><span class="line">    border-radius:5px;</span><br><span class="line">    color:#ffff;</span><br><span class="line">&#125;</span><br><span class="line">.btn-success&#123;</span><br><span class="line">    background:#2ecc71;</span><br><span class="line">&#125;</span><br><span class="line">.btn-danger&#123;</span><br><span class="line">    background:#e74c3c;</span><br><span class="line">&#125;</span><br><span class="line">.btn-warning&#123;</span><br><span class="line">    background:#f39c12;</span><br><span class="line">&#125;</span><br><span class="line">.btn-normal&#123;</span><br><span class="line">    background:#bdc3c7;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//  引入</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;I am Home&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 按钮根据value显示不同类型的button --&gt;</span><br><span class="line">    &lt;Button type=&apos;success&apos; text=&apos;button1&apos; @myClick=&apos;...&apos;&gt;&lt;/Button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Button from &apos;./button.vue&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;Home&apos;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        value:1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">      Button</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>上面这种写法，根据value来显示不同类型的button，我们只需要通过value去修改type，text等，就可以实现这一目的，而不需要去创建多个<button>，通过v-if去判断。 </button></p><p>优化之后的代码，避免了一值多判断的缺点，减少冗余，更加灵活， 这种方式较适合业务简单，使用次数多的组件。</p><p>el-button  应该就是类似如此</p><h4 id="高精度全局权限处理"><a href="#高精度全局权限处理" class="headerlink" title="高精度全局权限处理"></a><strong>高精度全局权限处理</strong></h4><p>权限的控制由前端处理的场景很多，例如根据后台返回内容，判断该人是否对此功能有权限，进而去修改元素v-if / v-show。</p><p>这种情况下，当这个功能在多处地方出现，就会导致我们做很多很多不必要的重复代码，如果判断条件繁琐的情况，更加冗余，代码量也会增加很多。</p><p>因此我们可以造一个小车轮，挂在全局上对权限进行处理。</p><p><strong>实战 - 处理某按钮显示权限问题</strong></p><p>这种场景出现几率极高，尤其是处理含有多种角色的项目，如果这一类型的权限判断有多次处理，每一次出现都经历判断的话，代码将会异常难看且冗余，因此我们可以通过全局权限判断来处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    在项目里新建一个common文件夹用于存放全局 .js 文件</span></span><br><span class="line"><span class="comment">    这种全局文件夹做法相当普遍，一般项目里都应该有这样一个文件夹来管理全局的东西</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// common/jurisdiction.js  用于存放与权限相关的全局函数/变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">checkJurisdiction</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 权限数组</span></span><br><span class="line">    <span class="keyword">let</span> jurisdictionList = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'5'</span>]</span><br><span class="line">    <span class="keyword">let</span> index = jurisdictionList.indexOf(key)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'index:'</span>,index)</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">// 有权限</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 无权限</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 将全局权限Js挂载到全局中</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; checkJurisdiction &#125; <span class="keyword">from</span> <span class="string">'./common/jurisdiction'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 优雅操作 - VUE自定义指令</span></span><br><span class="line">Vue.directive(<span class="string">'permission'</span>,&#123;</span><br><span class="line">  inserted(el, binding)&#123;</span><br><span class="line">    <span class="comment">// inserted → 元素插入的时候</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> permission = binding.value <span class="comment">// 获取到 v-permission的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(permission)&#123;</span><br><span class="line">      <span class="keyword">let</span> hasPermission = checkJurisdiction(permission)</span><br><span class="line">      <span class="keyword">if</span>(!hasPermission)&#123;</span><br><span class="line">        <span class="comment">// 没有权限 移除Dom元素</span></span><br><span class="line">        el.parentNode &amp;&amp; el.parentNode.removeChild(el)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'需要传key'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;I am Home&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 按钮根据value --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div v-permission="'10'"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button&gt;权限1&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div v-permission="'5'"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button&gt;权限2&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 无需再通过value去判断，直接通过v-permission的值进行判断即可</span></span><br></pre></td></tr></table></figure><p>运行程序，我们看下是否能够正常显示并分析打印。</p><p><img src="/2020/05/31/优雅使用VUE的实战技巧/image-20200531125415605.png" alt="image-20200531125415605"></p><p>可以看到 v-permission = “‘10’”是没有权限且不显示，v-permission = “‘5’”是具有权限且显示。</p><p><strong>总 结</strong></p><p>以上三个方面操作起来看似简单，但很多人在写代码的时候，喜欢停留在业务上，只考虑能否实现。</p><p>实际上，很多大型项目都需要有这些理念去减少代码量，减少冗余，在合适的场景下使用合适的方法才能提高自己的能力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;优雅使用VUE的实战技巧&quot;&gt;&lt;a href=&quot;#优雅使用VUE的实战技巧&quot; class=&quot;headerlink&quot; title=&quot;优雅使用VUE的实战技巧&quot;&gt;&lt;/a&gt;优雅使用VUE的实战技巧&lt;/h3&gt;&lt;h4 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="vue" scheme="https://shenxiaobu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>前端开发规范</title>
    <link href="https://shenxiaobu.github.io/2020/05/21/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>https://shenxiaobu.github.io/2020/05/21/前端开发规范/</id>
    <published>2020-05-21T05:52:51.000Z</published>
    <updated>2020-05-21T05:54:25.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端开发规范"><a href="#前端开发规范" class="headerlink" title="前端开发规范"></a>前端开发规范</h1><p>这个文档主要提供项目开发规范文档</p><h2 id="前端命名规范"><a href="#前端命名规范" class="headerlink" title="#前端命名规范"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#前端命名规范" target="_blank" rel="noopener">#</a>前端命名规范</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、项目名称</span><br><span class="line">全部采用小写方式，以横线分隔或以下划线分隔</span><br><span class="line">例：my-project-name</span><br><span class="line"><span class="number">2</span>、目录名称:有复数结构时，要采用复数命名法</span><br><span class="line">例：scripts, styles, images, datas</span><br><span class="line"><span class="number">4</span>、文件名称:js文件名、scss文件名:采用中间连字符(*+<span class="string">"-"</span>+*)</span><br><span class="line">例：account-model.js、account-model.scss</span><br><span class="line"><span class="number">5</span>、vue文件名:中间连字符</span><br><span class="line">例如：account-model/index.vue,account-model/components/page.vue</span><br><span class="line"><span class="number">6</span>、文件夹名称：小驼峰</span><br><span class="line">例如：my-<span class="built_in">document</span></span><br><span class="line"><span class="number">7</span>、data变量：小驼峰。例如：dataName:<span class="string">''</span>,根据不同类型添加初始数据声明：</span><br><span class="line">    <span class="number">1</span>)对于初始值是字符串类型的字段：userName:<span class="string">''</span></span><br><span class="line">    <span class="number">2</span>)对于初始值是 数组类型 的字段：userList:[]</span><br><span class="line">    <span class="number">3</span>)对于初始值是 对象类型 的字段：userInfo:&#123;&#125; 或时间对象：nowTime:<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="number">4</span>)对于初始值是 布尔类型 的字段：isUserEdit:<span class="literal">false</span> 或 isUserEdit:<span class="literal">true</span></span><br><span class="line">    <span class="number">5</span>)对于初始值是 数字类型 的字段：userNum:<span class="number">0</span> 或没有初始值的时候 userNum:<span class="literal">NaN</span></span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、方法命名：小驼峰</span><br><span class="line">例如：myMethod()</span><br><span class="line"><span class="number">9</span>、组件引入：大驼峰</span><br><span class="line">例如：<span class="keyword">import</span> GCardHeader <span class="keyword">from</span> <span class="string">'@/components/g-card-header/index.vue'</span></span><br><span class="line"> components: &#123;</span><br><span class="line">    GCardHeader,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="number">10</span>、样式选择器命名：<span class="class"><span class="keyword">class</span>和<span class="title">id</span></span></span><br><span class="line"><span class="class">    1)、类名命名</span>=&gt;单词+’-’+单词，如fine-home。连字符 <span class="string">'-'</span></span><br><span class="line">    <span class="number">2</span>)、Id命名=&gt;单词+’_’+单词，如fine_home。下划线连接</span><br><span class="line"><span class="number">11</span>、图片命名规范</span><br><span class="line">    <span class="number">1</span>)、不要用拼音，尽量使用英文</span><br><span class="line">    <span class="number">2</span>)、统一使用下划线 nav_right_back.png</span><br><span class="line">    <span class="number">3</span>)、注意区分倍图@<span class="number">2</span>x 和@<span class="number">3</span>x 的后缀，例如banner_@<span class="number">2</span>x.png</span><br><span class="line">    <span class="number">4</span>)、图片的名称分为头尾两部分，用下划线隔开，</span><br><span class="line">    a、头部表示此图片的大类性质，例如广告，标志，菜单，按钮等</span><br><span class="line">        banner：放置在页面顶部的广告，装饰图案等长方形的图片</span><br><span class="line">        logo：标志性的图片</span><br><span class="line">        button：在页面上位置不固定，并且带有链接的小图片</span><br><span class="line">        menu：在页面中某一位置连续出现，性质相同的链接栏目的图片</span><br><span class="line">        pic：装饰用的图片</span><br><span class="line">        title：不带链接表示标题的图片</span><br><span class="line">    b、尾部结合应用具体命名，比如：</span><br><span class="line">        banner_sohu.gif, banner_sina.gif</span><br><span class="line">        menu_aboutus.gif,menu_job.gif</span><br><span class="line">        title_news.gif</span><br><span class="line">        logo_police.gif</span><br><span class="line">        pic_people.gif</span><br></pre></td></tr></table></figure><h3 id="1-组件命名规范"><a href="#1-组件命名规范" class="headerlink" title="#1.组件命名规范"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#_1-组件命名规范" target="_blank" rel="noopener">#</a>1.组件命名规范</h3><ul><li>名称不能重复 <strong>(强制)</strong></li><li>名称要有意义,做到见名知意 <strong>(强制)</strong></li><li>不能使用拼音命名 <strong>(强制)</strong></li></ul><h3 id="2-data变量命名规范"><a href="#2-data变量命名规范" class="headerlink" title="#2.data变量命名规范"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#_2-data变量命名规范" target="_blank" rel="noopener">#</a>2.data变量命名规范</h3><p>data 属性名应该尽量能够做到见名知意，一般来说需要突出两到三个重点：</p><ul><li>这个变量是关于什么业务行为的？</li><li>这个变量是关于什么组件的？</li><li>这个变量是关于组件什么特性的？</li><li>加上变量注释</li></ul><h3 id="3-方法命名规范"><a href="#3-方法命名规范" class="headerlink" title="#3.方法命名规范"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#_3-方法命名规范" target="_blank" rel="noopener">#</a>3.方法命名规范</h3><p>事件方法命名格式 handleXxxxx, 其他方法命名格式 fnXxx，或方法功能含义命名</p><h3 id="4-路由规范"><a href="#4-路由规范" class="headerlink" title="#4.路由规范"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#_4-路由规范" target="_blank" rel="noopener">#</a>4.路由规范</h3><p>1、路由命名由两部分组成：模块名+具体功能名。命名：连字符’-‘链接，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">"/login-module/login"</span>, <span class="comment">//登录页，命名：连字符'-'链接</span></span><br><span class="line">    name: <span class="string">"登录页"</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        needLogin: <span class="literal">false</span>,</span><br><span class="line">        title: <span class="string">"登录页"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "loginModule" */</span><span class="string">"@/views/login-module/login/index.vue"</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">"/login-module/reset-pwd"</span>, <span class="comment">//重置密码页，命名：连字符'-'链接</span></span><br><span class="line">    name: <span class="string">"重置密码页"</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        needLogin: <span class="literal">false</span>,</span><br><span class="line">        title: <span class="string">"重置密码页"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "loginModule" */</span><span class="string">"@/views/login-module/reset-pwd/index.vue"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、路由目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├─src                       <span class="comment"># 源代码</span></span><br><span class="line">│  ├─router                 <span class="comment"># 存放路由文件</span></span><br><span class="line">│  │  ├─common              </span><br><span class="line">│  │  │  └─index.js         <span class="comment"># 公共模块路由</span></span><br><span class="line">│  │  ├─login               </span><br><span class="line">│  │  │  └─index.js         <span class="comment"># 登录模块路由</span></span><br><span class="line">│  │  └─after-each.js       <span class="comment"># 路由拦截器：afterEach</span></span><br><span class="line">│  │  └─before-each.js      <span class="comment"># 路由拦截器：beforeEach</span></span><br><span class="line">│  │  └─index.js            <span class="comment"># 自动注册路由</span></span><br></pre></td></tr></table></figure><h2 id="接口使用规范"><a href="#接口使用规范" class="headerlink" title="#接口使用规范"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#接口使用规范" target="_blank" rel="noopener">#</a>接口使用规范</h2><p>1、调用页面test.vue，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 1、引入数据接口</span></span><br><span class="line"><span class="keyword">import</span> &#123;commonApi&#125; <span class="keyword">from</span> <span class="string">"@/api/index"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">""</span>,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:获取表格数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;type&#125;</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: chenyt</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">      getTableData() &#123;</span><br><span class="line">        <span class="keyword">this</span>.loading = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//2、Api方法，传入接口参数</span></span><br><span class="line">        commonApi.getListReset(<span class="keyword">this</span>.pageData.listQuery).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.tableDatas = response.data.items;</span><br><span class="line">          <span class="keyword">this</span>.pageData.total = response.data.total;</span><br><span class="line">          <span class="comment">// Just to simulate the time of the request</span></span><br><span class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">          &#125;, <span class="number">1.5</span> * <span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>2、接口Api方法定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义接口文件</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"><span class="keyword">const</span> basePath=<span class="string">'/table'</span></span><br><span class="line"><span class="comment">// get</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span>:获取重置数据列表</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;type&#125;</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span>: chenyt</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getListReset</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;basePath&#125;</span>/list2`</span>,</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    params:params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//post</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span>:获取二维码</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;type&#125;</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span>: chenyt</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getQRCode = <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;basePath&#125;</span>/getQRCode`</span>,</span><br><span class="line">    method: <span class="string">"post"</span>,</span><br><span class="line">    data: params <span class="comment">// 如果请求方式不是post需要将data改为params</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、汇总在index.js中，提供按模块输出接口函数,模块命名：“*+Api”，对应modules下的模块名称，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口暴露文件index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> loginApi <span class="keyword">from</span> <span class="string">"./modules/login-api"</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> commonApi <span class="keyword">from</span> <span class="string">"./modules/common-api"</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  loginApi,</span><br><span class="line">  commonApi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、目录结构</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├─src                       <span class="comment"># 源代码</span></span><br><span class="line">│  ├─api                    <span class="comment"># 存放api接口文件</span></span><br><span class="line">│  │  ├─modules             <span class="comment"># 根据业务需求划分模块放置接口文件</span></span><br><span class="line">│  │  │  └─common-api.js    <span class="comment"># 公共接口</span></span><br><span class="line">│  │  │  └─login-api.js     <span class="comment"># 登录模块接口，’-api‘结尾，对应views下的页面模块命名</span></span><br><span class="line">│  │  ├─axios.js            <span class="comment"># axios请求文件，配置统一请求设置和返回拦截</span></span><br><span class="line">│  │  └─index.js            <span class="comment"># 向外暴露接口模块</span></span><br></pre></td></tr></table></figure><h2 id="assets资源文件"><a href="#assets资源文件" class="headerlink" title="#assets资源文件"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#assets资源文件" target="_blank" rel="noopener">#</a><code>assets</code>资源文件</h2><p>1、存放图片资源文件，imgs文件夹下</p><p>2、存放数据字典，data文件夹下</p><p>3、根据views下的模块划分imgs文件夹内部的二级文件夹名称，与页面一一对应。</p><p>4、文件目录结构</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├─src                       <span class="comment"># 源代码</span></span><br><span class="line">│  ├─assets                 <span class="comment"># 存放页面静态资源文件</span></span><br><span class="line">│  │  ├─imgs                <span class="comment"># 存放图片文件夹</span></span><br><span class="line">│  │  │  ├─common           <span class="comment"># 公共图片文件夹</span></span><br><span class="line">│  │  │  │  └─loading.gif   <span class="comment"># 加载gif</span></span><br><span class="line">│  │  │  ├─login            <span class="comment"># 登录模块图片文件夹，根据大模块划分，存储模块下所有图片</span></span><br><span class="line">│  │  │  └─logo.png         <span class="comment"># logo图片</span></span><br><span class="line">│  │  ├─data                <span class="comment"># 数据文件</span></span><br><span class="line">│  │  │  └─common-dict.js   <span class="comment"># 公用数据字典文件</span></span><br></pre></td></tr></table></figure><h2 id="样式书写规范"><a href="#样式书写规范" class="headerlink" title="#样式书写规范"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#样式书写规范" target="_blank" rel="noopener">#</a>样式书写规范</h2><p>1、组件样式请记住加上scoped 或者命名空间，避免造成全局的样式污染</p><p>2、样式选择器应<strong>避免使用元素选择器</strong>, 推荐类选择器。划分为：<code>header-*</code>，<code>container-*</code>，<code>footer-*</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang="scss"  type="text/scss"&gt;</span><br><span class="line">  <span class="selector-class">.header-box</span> &#123; <span class="attribute">padding</span>: <span class="number">20px</span> &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>3、尽量给每个页面，添加一个父类。以“page-”开头，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-login"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他样式在此父类下编写</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang="scss"  type="text/scss"&gt;</span><br><span class="line">  <span class="selector-class">.page-login</span> &#123; </span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span></span><br><span class="line">    .other-class&#123;</span><br><span class="line">       ....</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>4、少量样式可以写在组件，大量样式需要引入样式文件。</p><p>5、全局的样式变量文件和样式文件，存储在<code>styles</code>文件夹中</p><p>6、样式文件夹目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├─src                       <span class="comment"># 源代码</span></span><br><span class="line">│  ├─styles                 <span class="comment"># 存放页面公用样式文件</span></span><br><span class="line">│  │  ├─iconfonts           <span class="comment"># 存放图标</span></span><br><span class="line">│  │  ├─theme               <span class="comment"># 页面主题设置，一般用于重置vant-ui或者element-ui组件样式</span></span><br><span class="line">│  │  │  └─resetui.less     <span class="comment"># 重置样式文件</span></span><br><span class="line">│  │  └─animate.scss        <span class="comment"># 动画</span></span><br><span class="line">│  │  ├─common.scss         <span class="comment"># 公用样式</span></span><br><span class="line">│  │  ├─normalize.scss      <span class="comment"># 浏览器重置样式文件</span></span><br><span class="line">│  │  └─common-params.scss  <span class="comment"># 全局样式变量</span></span><br></pre></td></tr></table></figure><h2 id="业务组件编写规范"><a href="#业务组件编写规范" class="headerlink" title="#业务组件编写规范"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#业务组件编写规范" target="_blank" rel="noopener">#</a>业务组件编写规范</h2><p>根据业务编写的可复用组件，请务必对<strong>每个属性、方法添加注释</strong>。并且将组件的使用说明<strong>编写对应的readme文档</strong>。</p><h3 id="组件文件目录规范"><a href="#组件文件目录规范" class="headerlink" title="#组件文件目录规范"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#组件文件目录规范" target="_blank" rel="noopener">#</a>组件文件目录规范</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├─src                       <span class="comment"># 源代码</span></span><br><span class="line">│  ├─components             <span class="comment"># 存放业务组件</span></span><br><span class="line">│  │  ├─global              <span class="comment"># 存放全局注册组件</span></span><br><span class="line">│  │  │  ├─y-title          <span class="comment"># 全局注册组件’y-title‘</span></span><br><span class="line">│  │  │  │  └─index.vue     <span class="comment"># 组件对应文件</span></span><br><span class="line">│  │  │  │  └─README.md     <span class="comment"># 组件使用说明readme</span></span><br><span class="line">│  │  │  └─y-banner         <span class="comment"># 全局注册组件’y-banner‘</span></span><br><span class="line">│  │  ├─y-title             <span class="comment"># 组件’y-title‘</span></span><br><span class="line">│  │  │  └─index.vue        <span class="comment"># 组件对应文件</span></span><br><span class="line">│  │  │  └─README.md        <span class="comment"># 组件使用说明readme</span></span><br><span class="line">│  │  └─index.js            <span class="comment"># 注册全局组件</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>1、组件文件夹命名 以“y-“开头。例如y-title</li><li>2、全局注册放在globle文件夹下，实现自动注册</li></ul></blockquote><h3 id="组件README文档编写格式参考"><a href="#组件README文档编写格式参考" class="headerlink" title="#组件README文档编写格式参考"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#组件readme文档编写格式参考" target="_blank" rel="noopener">#</a>组件README文档编写格式参考</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">## 动画加载</span><br><span class="line"></span><br><span class="line">### 如何使用</span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">this.$Loading.show()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">this.$Loading.hide()</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">### API</span><br><span class="line"></span><br><span class="line">| name | 描述 | 参数     |</span><br><span class="line">| ---- | ---- | -------- |</span><br><span class="line">| show | 展示 | duration |</span><br><span class="line">| hide | 关闭 | 无       |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Options</span><br><span class="line"></span><br><span class="line">| 参数     | 说明                                             | 类型     | 默认值 |</span><br><span class="line">| -------- | ----------------------------------------------  | -------- | ------ |</span><br><span class="line">| duration | 延迟多少秒自动关闭 当<span class="string">`duration`</span>为<span class="number">0</span>时不自动关闭      | <span class="string">`number`</span> | <span class="number">0</span>      |</span><br></pre></td></tr></table></figure><h2 id="views页面文件规范"><a href="#views页面文件规范" class="headerlink" title="#views页面文件规范"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#views页面文件规范" target="_blank" rel="noopener">#</a><code>views</code>页面文件规范</h2><p>在<code>views</code>下添加业务页面，页面template中的标签控制长度，当某个模块例如弹窗模块标签行数很长，导致页面可读性低，应控制页面标签长度，独立此模块放在该文件夹下的components中。目录如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├─src                                 <span class="comment"># 源代码</span></span><br><span class="line">│  ├─views                            <span class="comment"># 存放业务页面文件</span></span><br><span class="line">│  │  ├─login-module                  <span class="comment"># 根据业务划分页面存放模块</span></span><br><span class="line">│  │  │  ├─login                      <span class="comment"># 登录页面文件夹</span></span><br><span class="line">│  │  │  │  └─components              <span class="comment"># 登录页面可分模块放置的文件</span></span><br><span class="line">│  │  │  │  │  └─dialog-module.vue    <span class="comment"># 分割出来的弹窗模块组件</span></span><br><span class="line">│  │  │  │  └─index.vue               <span class="comment"># 登录页面文件</span></span><br><span class="line">│  │  │  └─reset-pwd                  <span class="comment"># 重置密码,文件夹命名：用中间连字符“-”</span></span><br><span class="line">│  │  │     └─index.vue    </span><br><span class="line">│  │  ├─other-module                  <span class="comment"># 其他模块</span></span><br><span class="line">│  │  │  ├─other                      <span class="comment"># 其他模块页面</span></span><br><span class="line">│  │  │  │  └─components              <span class="comment"># 其他模块页面业务模块文件</span></span><br><span class="line">│  │  │  │  └─index.vue               <span class="comment"># 其他模块页面</span></span><br><span class="line">│  │  │  └─reset-page                 <span class="comment"># 其他模块</span></span><br><span class="line">│  │  │     └─index.vue               <span class="comment"># 其他模块页面</span></span><br><span class="line">│  │  │     └─style.scss              <span class="comment"># 样式文件很长的时候，另存在样式文件中</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>1、文件夹命名:用中间连字符“-”,以’-module‘结尾，划分模块。</li><li>2、页面划分过长的业务模块存放于components文件夹中</li><li>3、文件内容统一引入存放在index.vue中</li><li>4、样式文件很长的时候，另存在样式文件中</li></ul></blockquote><h2 id="代码注释"><a href="#代码注释" class="headerlink" title="#代码注释"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#代码注释" target="_blank" rel="noopener">#</a>代码注释</h2><ul><li>页面基本信息注释</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> * @Description: 首页</span><br><span class="line"> * @Version: <span class="number">0.1</span></span><br><span class="line"> * @Autor: chenyt</span><br><span class="line"> * @<span class="built_in">Date</span>: <span class="number">2020</span><span class="number">-03</span><span class="number">-21</span> <span class="number">22</span>:<span class="number">55</span>:<span class="number">00</span></span><br><span class="line"> * @LastEditors: chenyt</span><br><span class="line"> * @LastEditTime: <span class="number">2020</span><span class="number">-04</span><span class="number">-27</span> <span class="number">09</span>:<span class="number">52</span>:<span class="number">53</span></span><br><span class="line"> --&gt;</span><br></pre></td></tr></table></figure><ul><li>页面方法注释</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span>:初始化</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;type&#125;</span></span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span>: chenyt</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><h2 id="代码提交规范"><a href="#代码提交规范" class="headerlink" title="#代码提交规范"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#代码提交规范" target="_blank" rel="noopener">#</a>代码提交规范</h2><h3 id="1、代码提交必须包含提交类别"><a href="#1、代码提交必须包含提交类别" class="headerlink" title="#1、代码提交必须包含提交类别"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#_1、代码提交必须包含提交类别" target="_blank" rel="noopener">#</a>1、代码提交必须包含提交类别</h3><p>用于说明 commit 的类别，只允许使用下面 9 个标识：</p><ul><li>feat：新功能</li><li>fix：修复 bug</li><li>docs：撰写文档</li><li>style：代码格式（不影响代码运行的变动）</li><li>refactor：重构（既不是新增功能，也不是修改 bug 的代码变动）</li><li>test：增加测试</li><li>build：工程化</li><li>chore：代码优化或辅助工具的变动</li></ul><blockquote><p>例如：fix：修改登录自动退出的bug。</p></blockquote><h3 id="2、执行npm-run-lint"><a href="#2、执行npm-run-lint" class="headerlink" title="#2、执行npm run lint"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#_2、执行npm-run-lint" target="_blank" rel="noopener">#</a>2、执行npm run lint</h3><p>规范eslint规则</p><h3 id="3、提交合并"><a href="#3、提交合并" class="headerlink" title="#3、提交合并"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#_3、提交合并" target="_blank" rel="noopener">#</a>3、提交合并</h3><p>保证功能完整性，提交到个人开发分支远程后，合并到develop分支</p><h2 id="代码分支管理统一"><a href="#代码分支管理统一" class="headerlink" title="#代码分支管理统一"></a><a href="http://wxfwtest.ylzms.com/ylzued/docs/rules/#代码分支管理统一" target="_blank" rel="noopener">#</a>代码分支管理统一</h2><p>1、分支通常可以对应研发流程中不同的部署环境：</p><ul><li>tag -&gt; 生产环境（production）</li><li>master -&gt; 预发/灰度环境（pre-production/staging）</li><li>develop -&gt; 测试环境（test）</li><li>feature -&gt; 线下调试/开发环境，例如：feature/syx</li></ul><p>2、<strong>使用过无用的分支定期清理掉</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端开发规范&quot;&gt;&lt;a href=&quot;#前端开发规范&quot; class=&quot;headerlink&quot; title=&quot;前端开发规范&quot;&gt;&lt;/a&gt;前端开发规范&lt;/h1&gt;&lt;p&gt;这个文档主要提供项目开发规范文档&lt;/p&gt;
&lt;h2 id=&quot;前端命名规范&quot;&gt;&lt;a href=&quot;#前端命名规范&quot;
      
    
    </summary>
    
    
      <category term="vue" scheme="https://shenxiaobu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>前端好料</title>
    <link href="https://shenxiaobu.github.io/2020/05/16/%E5%89%8D%E7%AB%AF%E5%A5%BD%E6%96%99/"/>
    <id>https://shenxiaobu.github.io/2020/05/16/前端好料/</id>
    <published>2020-05-16T04:41:15.000Z</published>
    <updated>2020-05-17T14:52:46.863Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前端好料"><a href="#前端好料" class="headerlink" title="前端好料"></a>前端好料</h4><h4 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a><strong>CSS基础</strong></h4><ul><li><p><strong>三栏布局问题（左右固定宽度 中间自适应）</strong></p><p>1.float + margin（浮动布局）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class="container"&gt;</span><br><span class="line">    &lt;div class="left"&gt;Left&lt;/div&gt;</span><br><span class="line">     &lt;!<span class="selector-tag">--</span> 右栏部分要写在中间内容之前 <span class="selector-tag">--</span>&gt;</span><br><span class="line">    &lt;div class="right"&gt;Right&lt;/div&gt;</span><br><span class="line">    &lt;div class="main"&gt;Main&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">html</span>,<span class="selector-class">.containerl</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*左边栏左浮动*/</span></span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*中间栏自适应*/</span></span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*右边栏右浮动*/</span></span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:right;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优点：快捷 简单 兼容性较好</span><br><span class="line">缺点: 有局限性 脱离文档流 需要清除浮动等</span><br></pre></td></tr></table></figure><p>2.position（绝对布局）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class="container"&gt;</span><br><span class="line">    &lt;div class="left"&gt;Left&lt;/div&gt;</span><br><span class="line">    &lt;div class="main"&gt;Main&lt;/div&gt;</span><br><span class="line">    &lt;div class="right"&gt;Right&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">html</span>,<span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*左右进行绝对定位*/</span></span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*中间用margin空出左右元素所占的空间*/</span></span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*或者中间也进行绝对定位*/</span></span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优点：简单粗暴</span><br><span class="line">缺点: 脱离文档流 高度未知会出现问题 可用性差</span><br></pre></td></tr></table></figure><p>3.flex（弹性盒子布局）</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="container"&gt;</span><br><span class="line">    &lt;div class="left"&gt;Left&lt;/div&gt;</span><br><span class="line">    &lt;div class="main"&gt;Main&lt;/div&gt;</span><br><span class="line">    &lt;div class="right"&gt;Right&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="selector-tag">body</span>,<span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优点：比较完美 移动端首选</span><br><span class="line">缺点: 不兼容 ie9 及以下</span><br></pre></td></tr></table></figure><p>4.table(表格布局)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class="container"&gt;</span><br><span class="line">    &lt;div class="left"&gt;Left&lt;/div&gt;</span><br><span class="line">    &lt;div class="main"&gt;Main&lt;/div&gt;</span><br><span class="line">    &lt;div class="right"&gt;Right&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="selector-tag">body</span>,<span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优点：兼容性很好（ie8 及以上） 父元素高度会被子元素撑开（不担心高度塌陷）</span><br><span class="line">缺点: seo 不友好 当其中一个单元格高度超出的时候，其他的单元格也是会跟着一起变高的</span><br></pre></td></tr></table></figure><p>5.Grid(网格布局)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class="container"&gt;</span><br><span class="line">    &lt;div class="left"&gt;Left&lt;/div&gt;</span><br><span class="line">    &lt;div class="main"&gt;Main&lt;/div&gt;</span><br><span class="line">    &lt;div class="right"&gt;Right&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="selector-tag">body</span>,<span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100px</span>;  <span class="comment">/*设置行高*/</span></span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> auto <span class="number">200px</span>;  <span class="comment">/*设置列数属性*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优点：简单强大 解决二维布局问题</span><br><span class="line">缺点: 不兼容 ie9 及以下</span><br></pre></td></tr></table></figure></li><li><p>css盒模型</p><p><img src="/2020/05/16/前端好料/image-20200516125527265.png" alt="image-20200516125527265"></p><p><img src="/2020/05/16/前端好料/image-20200516125757956.png" alt="image-20200516125757956"></p></li></ul><h4 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a><strong>DOM事件</strong></h4><ul><li><strong>事件级别：</strong></li></ul><p>DOM 0级：写法：el.οnclick=function(){}</p><blockquote><p>当希望为同一个元素/标签绑定多个同类型事件的时候（如给上面的这个btn元素绑定3个点击事件），是不被允许的。DOM0事件绑定，给元素的事件行为绑定方法，这些方法都是在当前元素事件行为的冒泡阶段(或者目标阶段)执行的。</p></blockquote><p>由于DOM 1级中没有事件的相关内容，所以没有DOM 1级事件</p><p>DOM 2级 写法：el.addEventListener(event-name, callback, useCapture)</p><blockquote><p>event-name: 事件名称，可以是标准的DOM事件</p></blockquote><blockquote><p>callback: 回调函数，当事件触发时，函数会被注入一个参数为当前的事件对象 event</p></blockquote><blockquote><p>useCapture: 默认是false，代表事件句柄在冒泡阶段执行</p></blockquote><p>DOM 3级 写法和DOM2级一致 只是在DOM 2级事件的基础上添加了更多的事件类型</p><blockquote><p>UI事件，当用户与页面上的元素交互时触发，如：load、scroll</p></blockquote><blockquote><p>焦点事件，当元素获得或失去焦点时触发，如：blur、focus</p></blockquote><blockquote><p>鼠标事件，当用户通过鼠标在页面执行操作时触发如：dblclick、mouseup</p></blockquote><blockquote><p>滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</p></blockquote><blockquote><p>文本事件，当在文档中输入文本时触发，如：textInput</p></blockquote><blockquote><p>键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress.</p></blockquote><blockquote><p>合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart</p></blockquote><blockquote><p>变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified</p></blockquote><blockquote><p>同时DOM3级事件也允许使用者自定义一些事件。</p></blockquote><p><strong>DOM事件模型 事件流</strong></p><p>事件模型分为：捕获和冒泡</p><p>事件流：</p><p>（1）捕获阶段：事件从window对象自上而下向目标节点传播的阶段；</p><p>（2）目标阶段：真正的目标节点正在处理事件的阶段；</p><p>（3）冒泡阶段：事件从目标节点自下而上向window对象传播的阶段。</p><p>​    <img src="/2020/05/16/前端好料/image-20200516132021477.png" alt="image-20200516132021477"></p><ul><li><strong>事件委托（代理）</strong></li></ul><p>由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）</p><p>优点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.减少内存消耗，提高性能(不需要为每一个子元素绑定事件)</span><br><span class="line">2.动态绑定事件</span><br></pre></td></tr></table></figure><ul><li><strong>Event对象使用</strong></li></ul><p>1.阻止默认行为：event. preventDefault()</p><p>什么是默认事件呢？例如表单一点击提交按钮(submit)跳转页面、a标签默认页面跳转或是锚点定位等</p><p>2.阻止冒泡：</p><p>event.stopPropagation() 方法阻止事件冒泡到父元素，阻止任何父事件处理程序被执行</p><p>stopImmediatePropagation 既能阻止事件向父元素冒泡，也能阻止元素同事件类型的其它监听器被触发</p><p>3.event.target &amp; event.currentTarget</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"a"</span>&gt;</span><br><span class="line">    aaaa</span><br><span class="line">  &lt;div id=<span class="string">"b"</span>&gt;</span><br><span class="line">      bbbb</span><br><span class="line">    &lt;div id=<span class="string">"c"</span>&gt;</span><br><span class="line">        cccc</span><br><span class="line">      &lt;div id=<span class="string">"d"</span>&gt;</span><br><span class="line">          dddd</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"a"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">"target:"</span> + e.target.id + <span class="string">"&amp;currentTarget:"</span> + e.currentTarget.id</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"b"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">"target:"</span> + e.target.id + <span class="string">"&amp;currentTarget:"</span> + e.currentTarget.id</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"c"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">"target:"</span> + e.target.id + <span class="string">"&amp;currentTarget:"</span> + e.currentTarget.id</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"d"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">"target:"</span> + e.target.id + <span class="string">"&amp;currentTarget:"</span> + e.currentTarget.id</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">当我们点击最里层的元素d的时候，会依次输出:</span></span><br><span class="line"><span class="regexp">target:d&amp;currentTarget:d</span></span><br><span class="line"><span class="regexp">target:d&amp;currentTarget:c</span></span><br><span class="line"><span class="regexp">target:d&amp;currentTarget:b</span></span><br><span class="line"><span class="regexp">target:d&amp;currentTarget:a</span></span><br></pre></td></tr></table></figure><p>由上诉例子可知：event.currentTarget始终是监听事件者，而event.target是事件的真正发出者</p><p><strong>自定义事件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">创建事件, Event是无法传递参数的</span><br><span class="line">var event = new Event(&apos;build&apos;);</span><br><span class="line">创建事件, CustomEvent是可以传递参数的</span><br><span class="line">var event = new CustomEvent(&apos;build&apos;, &#123; detail: elem.dataset.time &#125;)</span><br><span class="line"></span><br><span class="line">监听事件Listen for the event.</span><br><span class="line">elem.addEventListener(&apos;build&apos;, function (e) &#123; //... &#125;, false);</span><br><span class="line"></span><br><span class="line">分发/触发事件Dispatch the event.</span><br><span class="line">elem.dispatchEvent(event);</span><br></pre></td></tr></table></figure><p><strong>手写EventEmitter(发布订阅模式–简单版)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 手写发布订阅模式 EventEmitter</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>() &#123;</span><br><span class="line">          <span class="keyword">this</span>.events = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 实现订阅</span></span><br><span class="line">        on(type, callBack) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!<span class="keyword">this</span>.events) <span class="keyword">this</span>.events = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (!<span class="keyword">this</span>.events[type]) &#123;</span><br><span class="line">            <span class="keyword">this</span>.events[type] = [callBack];</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.events[type].push(callBack);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除订阅</span></span><br><span class="line">        off(type, callBack) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!<span class="keyword">this</span>.events[type]) <span class="keyword">return</span>;</span><br><span class="line">          <span class="keyword">this</span>.events[type] = <span class="keyword">this</span>.events[type].filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> item !== callBack;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只执行一次订阅事件</span></span><br><span class="line">        once(type, callBack) &#123;</span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            callBack();</span><br><span class="line">            <span class="keyword">this</span>.off(type, fn);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.on(type, fn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 触发事件</span></span><br><span class="line">        emit(type, ...rest) &#123;</span><br><span class="line">          <span class="keyword">this</span>.events[type] &amp;&amp;</span><br><span class="line">            <span class="keyword">this</span>.events[type].forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn.apply(<span class="keyword">this</span>, rest));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 使用如下</span></span><br><span class="line">      <span class="keyword">const</span> event = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> handle = <span class="function">(<span class="params">...rest</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(rest);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      event.on(<span class="string">"click"</span>, handle);</span><br><span class="line"></span><br><span class="line">      event.emit(<span class="string">"click"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">      event.off(<span class="string">"click"</span>, handle);</span><br><span class="line"></span><br><span class="line">      event.emit(<span class="string">"click"</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">      event.once(<span class="string">"dbClick"</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">123456</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      event.emit(<span class="string">"dbClick"</span>);</span><br><span class="line">      event.emit(<span class="string">"dbClick"</span>);</span><br></pre></td></tr></table></figure><h4 id="JS相关"><a href="#JS相关" class="headerlink" title="JS相关"></a><strong>JS相关</strong></h4><ul><li><p><strong>创建对象方式：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.对象字面量</span></span><br><span class="line"><span class="keyword">let</span> a=&#123;<span class="attr">name</span>:<span class="string">'xxx'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b=<span class="keyword">new</span> Person(<span class="string">'xxx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.Object.create(proto, [propertiesObject])</span></span><br><span class="line"><span class="comment">// Object.create()方法创建的对象时，属性是在原型下面的</span></span><br><span class="line"><span class="keyword">let</span> c=<span class="built_in">Object</span>.create(&#123;<span class="attr">name</span>:<span class="string">'xxx'</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>原型链示意图：</strong></p><p><img src="/2020/05/16/前端好料/image-20200516133137568.png" alt="image-20200516133137568"></p></li></ul><p><strong>instanceof 原理：</strong></p><blockquote><p>用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示改变Foo.prototype指向Person的实例对象（原型继承）</span></span><br><span class="line"></span><br><span class="line">Foo.prototype=<span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a=<span class="keyword">new</span> Foo()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__===Foo.prototype); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Foo);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Foo.prototype.__proto__===Person.prototype);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个时候改变Foo.prototype的指向</span></span><br><span class="line"></span><br><span class="line">Foo.prototype=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Foo.prototype已经不在a的原型链上面了</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__===Foo.prototype);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Foo);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person.prototype依然在a的原型链上面</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>new运算符原理</strong></li></ul><blockquote><p>1、创建一个空对象</p></blockquote><blockquote><p>2、让空对象的<strong>proto</strong>（IE没有该属性）成员指向了构造函数的prototype成员对象</p></blockquote><blockquote><p>3、使用apply调用构造器函数，属性和方法被添加到 this 引用的对象中</p></blockquote><blockquote><p>4、如果构造函数中没有返回其它对象，那么返回 this，即创建的这个的新对象，否则，返回构造函数中返回的对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_new</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第一步 创建新对象</span></span><br><span class="line">    <span class="keyword">let</span> obj= &#123;&#125;;</span><br><span class="line">    <span class="comment">// 第二步 空对象的_proto_指向了构造函数的prototype成员对象</span></span><br><span class="line">    obj.__proto__ = func.prototype;<span class="comment">//</span></span><br><span class="line">    <span class="comment">// 一二步合并就相当于 let obj=Object.create(func.prototype)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三步 使用apply调用构造器函数，属性和方法被添加到 this 引用的对象中</span></span><br><span class="line">    <span class="keyword">let</span> result = func.apply(obj);</span><br><span class="line">    <span class="keyword">if</span> (result &amp;&amp; (<span class="keyword">typeof</span> (result) == <span class="string">"object"</span> || <span class="keyword">typeof</span> (result) == <span class="string">"function"</span>)) &#123;</span><br><span class="line">    <span class="comment">// 如果构造函数执行的结果返回的是一个对象，那么返回这个对象</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果构造函数返回的不是一个对象，返回创建的新对象</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JS实现继承的方式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 定义一个父类</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 属性</span></span><br><span class="line">      <span class="keyword">this</span>.name = name || <span class="string">"father"</span>;</span><br><span class="line">      <span class="comment">// 实例方法</span></span><br><span class="line">      <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">this</span>.color = [<span class="string">"red"</span>, <span class="string">"blue"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原型方法</span></span><br><span class="line">    Father.prototype.age = <span class="number">18</span>;</span><br><span class="line">    Father.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>1.原型链继承：将父类的实例作为子类的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name || <span class="string">"son"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Son.prototype = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="keyword">new</span> Son(<span class="string">"s1"</span>);</span><br><span class="line">    <span class="keyword">let</span> s2 = <span class="keyword">new</span> Son(<span class="string">"s2"</span>);</span><br><span class="line"></span><br><span class="line">    s1.color.push(<span class="string">"black"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(s1.name); <span class="comment">//s1</span></span><br><span class="line">    <span class="built_in">console</span>.log(s1.color); <span class="comment">//['red','blue','black']</span></span><br><span class="line">    <span class="built_in">console</span>.log(s1.age); <span class="comment">//18</span></span><br><span class="line">    s1.sayAge(); <span class="comment">//18</span></span><br><span class="line">    <span class="built_in">console</span>.log(s2.name); <span class="comment">//s2</span></span><br><span class="line">    <span class="built_in">console</span>.log(s2.color); <span class="comment">//['red','blue','black']</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">优点：</span><br><span class="line">1. 简单，易于实现</span><br><span class="line">2. 父类新增原型方法、原型属性，子类都能访问到</span><br><span class="line">缺点：</span><br><span class="line">1. 无法实现多继承，因为原型一次只能被一个实例更改</span><br><span class="line">2. 来自原型对象的所有属性被所有实例共享（上诉例子中的color属性）</span><br><span class="line">3. 创建子类实例时，无法向父构造函数传参</span><br></pre></td></tr></table></figure><p>2.构造继承继承：复制父类的实例属性给子类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      Father.call(<span class="keyword">this</span>, <span class="string">"我是传给父类的参数"</span>);</span><br><span class="line">      <span class="keyword">this</span>.name = name || <span class="string">"son"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="keyword">new</span> Son(<span class="string">"son"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(s.name); <span class="comment">// son</span></span><br><span class="line">    <span class="comment">//s.sayAge(); // 抛出错误（无法继承父类原型方法）</span></span><br><span class="line">    s.sayName(); <span class="comment">// son</span></span><br><span class="line">    <span class="built_in">console</span>.log(s.age); <span class="comment">// undefined （无法继承父类原型属性）</span></span><br><span class="line">    <span class="built_in">console</span>.log(s <span class="keyword">instanceof</span> Father); <span class="comment">// false</span></span><br><span class="line">    <span class="built_in">console</span>.log(s <span class="keyword">instanceof</span> Son); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">1. 解决了原型链继承中子类实例共享父类引用属性的问题</span><br><span class="line">2. 创建子类实例时，可以向父类传递参数</span><br><span class="line">3. 可以实现多继承（call多个父类对象）</span><br><span class="line">缺点：</span><br><span class="line">1. 实例并不是父类的实例，只是子类的实例</span><br><span class="line">2. 只能继承父类实例的属性和方法，不能继承其原型上的属性和方法</span><br><span class="line">3. 无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</span><br></pre></td></tr></table></figure><p>3.组合继承：将原型链和借用构造函数的技术组合到一块。使用原型链实现对原型属性和方法的继承，而通过构造函数来实现对实例属性的继承</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 第一次调用父类构造器 子类实例增加父类实例</span></span><br><span class="line">      Father.call(<span class="keyword">this</span>, <span class="string">"我是传给父类的参数"</span>);</span><br><span class="line">      <span class="keyword">this</span>.name = name || <span class="string">"son"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 经过new运算符 第二次调用父类构造器 子类原型也增加了父类实例</span></span><br><span class="line">    Son.prototype = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="keyword">new</span> Son(<span class="string">"son"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(s.name); <span class="comment">// son</span></span><br><span class="line">    s.sayAge(); <span class="comment">// 18</span></span><br><span class="line">    s.sayName(); <span class="comment">// son</span></span><br><span class="line">    <span class="built_in">console</span>.log(s.age); <span class="comment">// 18</span></span><br><span class="line">    <span class="built_in">console</span>.log(s <span class="keyword">instanceof</span> Father); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(s <span class="keyword">instanceof</span> Son); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(s.constructor === Father); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(s.constructor === Son); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">1. 弥补了构造继承的缺点，现在既可以继承实例的属性和方法，也可以继承原型的属性和方法</span><br><span class="line">2. 既是子类的实例，也是父类的实例</span><br><span class="line">3. 可以向父类传递参数</span><br><span class="line">4. 函数可以复用</span><br><span class="line">缺点：</span><br><span class="line">1. 调用了两次父类构造函数，生成了两份实例</span><br><span class="line">2. constructor指向问题</span><br></pre></td></tr></table></figure><p>4.实例继承：为父类实例添加新特征，作为子类实例返回</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> f=<span class="keyword">new</span> Father(<span class="string">'传给父类的参数'</span>)</span><br><span class="line">    f.name=name||<span class="string">'son'</span></span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> s = <span class="keyword">new</span> Son(<span class="string">"son"</span>); <span class="comment">//或者直接调用子类构造函数 let s = Son("son");</span></span><br><span class="line">  <span class="built_in">console</span>.log(s.name); <span class="comment">// son</span></span><br><span class="line">  s.sayAge(); <span class="comment">// 18</span></span><br><span class="line">  s.sayName(); <span class="comment">// son</span></span><br><span class="line">  <span class="built_in">console</span>.log(s.age); <span class="comment">// 18</span></span><br><span class="line">  <span class="built_in">console</span>.log(s <span class="keyword">instanceof</span> Father); <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(s <span class="keyword">instanceof</span> Son); <span class="comment">// false</span></span><br><span class="line">  <span class="built_in">console</span>.log(s.constructor === Father); <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(s.constructor === Son); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">1. 不限制调用方式，不管是new 子类()还是子类(),返回的对象具有相同的效果</span><br><span class="line">缺点：</span><br><span class="line">1. 实例是父类的实例，不是子类的实例</span><br><span class="line">2. 不支持多继承</span><br></pre></td></tr></table></figure><p>5.拷贝继承：对父类实例中的的方法与属性拷贝给子类的原型</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> f = <span class="keyword">new</span> Father(<span class="string">"传给父类的参数"</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> f) &#123;</span><br><span class="line">        Son.prototype[k] = f[k];</span><br><span class="line">      &#125;</span><br><span class="line">      Son.prototype.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="keyword">new</span> Son(<span class="string">"son"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(s.name); <span class="comment">// son</span></span><br><span class="line">    s.sayAge(); <span class="comment">// 18</span></span><br><span class="line">    s.sayName(); <span class="comment">// son</span></span><br><span class="line">    <span class="built_in">console</span>.log(s.age); <span class="comment">// 18</span></span><br><span class="line">    <span class="built_in">console</span>.log(s <span class="keyword">instanceof</span> Father); <span class="comment">// false</span></span><br><span class="line">    <span class="built_in">console</span>.log(s <span class="keyword">instanceof</span> Son); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(s.constructor === Father); <span class="comment">// false</span></span><br><span class="line">    <span class="built_in">console</span>.log(s.constructor === Son); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">1. 支持多继承</span><br><span class="line">缺点：</span><br><span class="line">1. 效率低，性能差，占用内存高（因为需要拷贝父类属性）</span><br><span class="line">2. 无法获取父类不可枚举的方法（不可枚举的方法，不能使用for-in访问到)</span><br></pre></td></tr></table></figure><p>6.寄生组合继承：通过寄生方式，砍掉父类的实例属性，避免了组合继承生成两份实例的缺点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      Father.call(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">this</span>.name = name || <span class="string">"son"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法一  自己动手创建一个中间类</span></span><br><span class="line">    <span class="comment">// (function() &#123;</span></span><br><span class="line">    <span class="comment">//   let NoneFun = function() &#123;&#125;;</span></span><br><span class="line">    <span class="comment">//   NoneFun.prototype = Father.prototype;</span></span><br><span class="line">    <span class="comment">//   Son.prototype = new NoneFun();</span></span><br><span class="line">    <span class="comment">//   Son.prototype.constructor = Son;</span></span><br><span class="line">    <span class="comment">// &#125;)();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法二  直接借用Object.create()方法</span></span><br><span class="line">    Son.prototype = <span class="built_in">Object</span>.create(Father.prototype);</span><br><span class="line">    <span class="comment">// 修复构造函数指向</span></span><br><span class="line">    Son.prototype.constructor = Son;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="keyword">new</span> Son(<span class="string">"son"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(s.name); <span class="comment">// son</span></span><br><span class="line">    s.sayAge(); <span class="comment">// 18</span></span><br><span class="line">    s.sayName(); <span class="comment">// son</span></span><br><span class="line">    <span class="built_in">console</span>.log(s.age); <span class="comment">// 18</span></span><br><span class="line">    <span class="built_in">console</span>.log(s <span class="keyword">instanceof</span> Father); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(s <span class="keyword">instanceof</span> Son); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(s.constructor === Father); <span class="comment">// false</span></span><br><span class="line">    <span class="built_in">console</span>.log(s.constructor === Son); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">1. 比较完美（js实现继承首选方式）</span><br><span class="line">缺点：</span><br><span class="line">1.实现起来较为复杂（可通过Object.create简化）</span><br></pre></td></tr></table></figure><p>7.es6–Class继承：使用extends表明继承自哪个父类，并且在子类构造函数中必须调用super</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">     <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">       <span class="keyword">super</span>(name);</span><br><span class="line">       <span class="keyword">this</span>.name = name || <span class="string">"son"</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> s = <span class="keyword">new</span> Son(<span class="string">"son"</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(s.name); <span class="comment">// son</span></span><br><span class="line">   s.sayAge(); <span class="comment">// 18</span></span><br><span class="line">   s.sayName(); <span class="comment">// son</span></span><br><span class="line">   <span class="built_in">console</span>.log(s.age); <span class="comment">// 18</span></span><br><span class="line">   <span class="built_in">console</span>.log(s <span class="keyword">instanceof</span> Father); <span class="comment">// true</span></span><br><span class="line">   <span class="built_in">console</span>.log(s <span class="keyword">instanceof</span> Son); <span class="comment">// true</span></span><br><span class="line">   <span class="built_in">console</span>.log(s.constructor === Father); <span class="comment">// false</span></span><br><span class="line">   <span class="built_in">console</span>.log(s.constructor === Son); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><strong>JS防抖与节流(性能优化)</strong></li></ul><p><strong>防抖</strong>：动作停止后的时间超过设定的时间时执行一次函数。注意：这里的动作停止表示你停止了触发这个函数，从这个时间点开始计算，当间隔时间等于你设定时间，才会执行里面的回调函数。如果你一直在触发这个函数并且两次触发间隔小于设定时间，则函数一直不会执行。</p><p>简单实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>function debance(fn, delay) {<br>  let timer = null;<br>  return () =&gt; {<br>    if (timer) {<br>      clearTimeout(timer);<br>    }<br>    timer = setTimeout(() =&gt; {<br>      fn();<br>    }, delay);<br>  };<br>}</p><p>window.addEventListener(<br>  “scroll”,<br>  debance(() =&gt; {<br>    console.log(111);<br>  }, 1000)<br>);<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```</span><br></pre></td></tr></table></figure></p><p>防抖应用场景：</p><ol><li>search搜索联想，用户在不断输入值时，用防抖来节约请求资源</li><li>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**节流**：一定时间内执行的操作只执行一次，也就是说即预先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期。</span><br><span class="line"></span><br><span class="line">简单实现：</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">//方法一：设置一个标志</span><br><span class="line">    function throttle(fn, delay) &#123;</span><br><span class="line">      let flag = true;</span><br><span class="line">      return () =&gt; &#123;</span><br><span class="line">        if (!flag) return;</span><br><span class="line">        flag = false;</span><br><span class="line">        timer = setTimeout(() =&gt; &#123;</span><br><span class="line">          fn();</span><br><span class="line">          flag = true;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    //方法二：使用时间戳</span><br><span class="line">  function throttle(fn, delay) &#123;</span><br><span class="line">      let startTime=new Date()</span><br><span class="line">      return () =&gt; &#123;</span><br><span class="line">        let endTime=new Date()</span><br><span class="line">        if (endTime-startTime&gt;=delay)&#123;</span><br><span class="line">          fn()</span><br><span class="line">          startTime=endTime</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          return</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    window.addEventListener(</span><br><span class="line">      &quot;scroll&quot;,</span><br><span class="line">      throttle(() =&gt; &#123;</span><br><span class="line">        console.log(111);</span><br><span class="line">      &#125;, 1000)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>JS运行机制</strong></li></ul><p><strong>JS为啥是单线程</strong></p><blockquote><p>js作为浏览器脚本语言，其主要用途是与用户互动，以及操作DOM。这就决定了它只能是单线程，否则会带来很复杂的同步问题。（假设JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？）</p></blockquote><p><strong>JS同步任务和异步任务</strong></p><p><img src="/2020/05/16/前端好料/image-20200517221446720.png" alt="image-20200517221446720"></p><p>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。如果前一个任务耗时很长，后一个任务就不得不一直等着。JavaScript语言的设计者意识到这个问题，将所有任务分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）</p><blockquote><p>同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；</p></blockquote><blockquote><p>异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行</p></blockquote><p><strong>任务队列（消息队列）</strong></p><p><img src="/2020/05/16/前端好料/image-20200517222116212.png" alt="image-20200517222116212"></p><p>任务队列中存着的是异步任务，这些异步任务一定要等到执行栈清空后才会执行。</p><p>异步任务，会先到事件列表中注册函数。如果事件列表中的事件触发了，会将这个函数移入到任务队列中（DOM操作对应DOM事件，资源加载操作对应加载事件，定时器操作可以看做对应一个“时间到了”的事件）</p><p><strong></strong></p><p><strong>宏任务与微任务</strong></p><p><img src="/2020/05/16/前端好料/image-20200517222742851.png" alt="image-20200517222742851"></p><p>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval， setImmediate, I/O, UI rendering</p><p>micro-task(微任务)：Promise，process.nextTick，MutationObserver</p><p>微任务意义：</p><blockquote><p>减少更新时的渲染次数 因为根据HTML标准，会在宏任务执行结束之后，在下一个宏任务开始执行之前，UI都会重新渲染。如果在microtask中就完成数据更新，当 macro-task结束就可以得到最新的UI了。如果新建一个 macro-task来做数据更新的话，那么渲染会执行两次</p></blockquote><p>扩展阅读：vue源码 nextTick实现</p><p><img src="/2020/05/16/前端好料/image-20200517223157143.png" alt="image-20200517223157143"></p><ol><li>整体的script(作为第一个宏任务)开始执行的时候，会把所有代码分为两部分：“同步任务”、“异步任务”；</li><li>同步任务会直接进入主线程依次执行；</li><li>异步任务会再分为宏任务和微任务；</li><li>宏任务进入到Event Table中，并在里面注册回调函数，每当指定的事件完成时，Event Table会将这个函数移到Event Queue中；</li><li>微任务也会进入到另一个Event Table中，并在里面注册回调函数，每当指定的事件完成时，Event Table会将这个函数移到Event Queue中；</li><li>当主线程内的任务执行完毕，主线程为空时，会检查微任务的Event Queue，如果有任务，就全部执行，如果没有就执行下一个宏任务；</li><li>上述过程会不断重复，这就是Event Loop事件循环；</li></ol><p><strong>一图总结（事件循环、执行栈、任务队列、宏任务、微任务）</strong></p><p><img src="/2020/05/16/前端好料/image-20200517223312125.png" alt="image-20200517223312125"></p><p><strong>经典面试题</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">11</span>);</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">12</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">13</span>);</span><br></pre></td></tr></table></figure><p>依次输出</p><p><img src="/2020/05/16/前端好料/image-20200517223428401.png" alt="image-20200517223428401"></p><p><strong>如何取消promise</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 方法一 取消promise方法   promise.race方法</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">wrap</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">        <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          obj.resolve = resolve;</span><br><span class="line">          obj.reject = reject;</span><br><span class="line">        &#125;);</span><br><span class="line">        obj.promise = <span class="built_in">Promise</span>.race([p1, p]);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(<span class="number">123</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">let</span> obj = wrap(promise);</span><br><span class="line">      obj.promise.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">      &#125;);</span><br><span class="line">      obj.resolve(<span class="string">"请求被拦截了"</span>);</span><br><span class="line"></span><br><span class="line">      obj.reject(<span class="string">"请求被拒绝了"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//方法二 取消promise方法   新包装一个可操控的promise</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">wrap</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> abort = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          res = resolve;</span><br><span class="line">          abort = reject;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        p1.abort = abort;</span><br><span class="line">        p.then(res, abort);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p1;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(<span class="number">123</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">let</span> obj = wrap(promise);</span><br><span class="line">      obj.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">      &#125;);</span><br><span class="line">      obj.abort(<span class="string">"请求被拦截"</span>);</span><br></pre></td></tr></table></figure><h4 id="HTTP协议相关"><a href="#HTTP协议相关" class="headerlink" title="HTTP协议相关"></a><strong>HTTP协议相关</strong></h4><p>HTTP(Hyper Text Transfer Protocol)&lt;超文本传输协议&gt;的缩写.是用于从WWW服务器传输超文本到本地浏览器的传输协议.HTTP是一个应用层协议,由请求和响应构成,是一个标准的个客户端和服务器模型</p><ul><li><strong>特点</strong></li></ul><ol><li>基于请求/响应模型的协议</li><li>简单快速</li><li>灵活</li><li>无连接</li><li>无状态</li></ol><ul><li><strong>HTTP报文</strong></li></ul><p>请求报文：</p><p><img src="/2020/05/16/前端好料/image-20200517223623124.png" alt="image-20200517223623124"></p><p>响应报文：</p><p><img src="/2020/05/16/前端好料/image-20200517223646012.png" alt="image-20200517223646012"></p><p><strong>HTTP方法</strong></p><p><img src="/2020/05/16/前端好料/image-20200517223838337.png" alt="image-20200517223838337"></p><p><strong>get和post区别</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">GET请求会被浏览器主动cache，而POST不会，除非手动设置</span><br><span class="line"></span><br><span class="line">get把请求的参数放在url上，即HTTP协议头上 post把参数放在HTTP的包体内</span><br><span class="line"></span><br><span class="line">Get 方式传输的数据量非常小，一般限制在 2 KB 左右，但是执行效率却比 &gt;Post 方法好；而 Post</span><br><span class="line">方式传递的数据量相对较大，它是等待服务器来读取数&gt;据，不过也有字节限制（实际上IIS4中最大量为80KB，IIS5中为100KB），这是为&gt;了避免对服务器用大量数据进行恶意攻击</span><br><span class="line"></span><br><span class="line">GET请求只能进行url编码，而POST支持多种编码方式</span><br><span class="line"></span><br><span class="line">GET产生的URL地址可以加入书签，而POST不可以</span><br><span class="line"></span><br><span class="line">GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留</span><br><span class="line"></span><br><span class="line">GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息</span><br></pre></td></tr></table></figure><ul><li><strong>HTTP状态码</strong></li></ul><p>状态码：由3位数字组成，第一个数字定义了响应的类别</p><p>1xx：指示信息，表示请求已接收，继续处理</p><p>2xx：成功，表示请求已被成功接受，处理。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">200 OK：客户端请求成功</span><br><span class="line">204 No Content：无内容。服务器成功处理，但未返回内容。一般用在只是客户端向服务器发送信息，而服务器不用向客户端返回什么信息的情况。不会刷新页面。</span><br><span class="line">206 Partial Content：服务器已经完成了部分GET请求（客户端进行了范围请求）。响应报文中包含Content-Range指定范围的实体内容</span><br></pre></td></tr></table></figure><p>3xx：重定向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">301 Moved Permanently：永久重定向，表示请求的资源已经永久的搬到了其他位置。</span><br><span class="line"></span><br><span class="line">302 Found：临时重定向，表示请求的资源临时搬到了其他位置</span><br><span class="line"></span><br><span class="line">303 See Other：临时重定向，应使用GET定向获取请求资源。303功能与302一样，区别只是303明确客户端应该使用GET访问</span><br><span class="line"></span><br><span class="line">307 Temporary Redirect：临时重定向，和302有着相同含义。POST不会变成GET</span><br><span class="line"></span><br><span class="line">304 Not Modified：表示客户端发送附带条件的请求（GET方法请求报文中的IF…）时，条件不满足。返回304时，不包含任何响应主体。虽然304被划分在3XX，但和重定向一毛钱关系都没有</span><br></pre></td></tr></table></figure><p>4xx：客户端错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">400 Bad Request：客户端请求有语法错误，服务器无法理解。</span><br><span class="line">401 Unauthorized：请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用。</span><br><span class="line">403 Forbidden：服务器收到请求，但是拒绝提供服务</span><br><span class="line">404 Not Found：请求资源不存在。比如，输入了错误的url</span><br><span class="line">415 Unsupported media type：不支持的媒体类型</span><br><span class="line">复制代码</span><br><span class="line">5xx：服务器端错误，服务器未能实现合法的请求。500 Internal Server Error：服务器发生不可预期的错误。</span><br><span class="line">503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常，</span><br></pre></td></tr></table></figure><ul><li><strong>HTTP持久化连接与管道化</strong></li></ul><p>在HTTP1.0中，默认的是<strong>短连接</strong>，没有正式规定 Connection:Keep-alive 操作；</p><p>HTTP/1.1所有连接都是Keep-alive的，也就是默认都是持续连接的。在事务处理结束之后仍然保持在打开状态的TCP连接称之为<strong>持久连接</strong>。</p><p>持久连接详解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">持久连接会在不同事务之间保持打开状态，直到客户端或服务器决定其关闭为止。重用已对目标服务器打开的空闲持久连接，就可以避开缓慢的连接建立阶段。而且，已经打开的连接还可以避免慢启动的拥塞适应阶段，以便更快速地进行数据传输。所以，持久连接降低了时延和连接建立的开销，将连接保持在已调谐状态，而且减少了打开连接的潜在数量</span><br></pre></td></tr></table></figure><p>HTTP/1.1允许在持久连接上可选的使用<strong>请求管道</strong>，是相对于keep-alive连接的又一性能优化。在响应到达之前，可以将多条请求放入队列，当第一条请求通过网络流向服务器时，第二条和第三条请求也可以开始发送了。在高时延网络条件下，这样做可以降低网络的环回时间，提高性能</p><p>管道连接注意点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1）如果HTTP客户端无法确认连接是持久的，就不应该使用管道</span><br><span class="line">2）必须按照与请求相同的顺序回送HTTP响应。</span><br><span class="line">3）HTTP客户端必须做好连接会在任意时刻关闭的准备，还要准备好重发所有未完成管道化的请求。</span><br><span class="line">4）出错的时候，管道连接会阻碍客户端了解服务器执行的是一些列管道化请求中的哪一些。由于无法安全地重试POST这样的非幂请求，所以出错时，就存在某些方法永远不会被执行的风险</span><br></pre></td></tr></table></figure><p><img src="/2020/05/16/前端好料/image-20200517224422287.png" alt="image-20200517224422287"></p><h4 id="前端通信"><a href="#前端通信" class="headerlink" title="前端通信"></a><strong>前端通信</strong></h4><ul><li><strong>同源策略</strong></li></ul><p>同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键安全机制。</p><p>什么是源：协议、域名与端口。这三者任何一个不一样的话，就算是跨域</p><p>什么是限制：不是一个源的文档，没有权限去操作另一个源的文档</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Cookie、LocalStorage 和 IndexDB无法读取。</span><br><span class="line">Dom无法获得</span><br><span class="line">Ajax请求不能发送</span><br></pre></td></tr></table></figure><ul><li><strong>前后端通信方式</strong></li></ul><ol><li>Ajax 支持同源通信</li><li>WebSocket 不受同源策略影响</li><li>CORS 既支持同源通信也支持跨域通信</li></ol><ul><li><strong>如何创建ajax</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">util.json = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> opt = &#123;</span><br><span class="line">         url: <span class="string">''</span>,</span><br><span class="line">         type: <span class="string">'get'</span>,</span><br><span class="line">         data: &#123;&#125;,</span><br><span class="line">         success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">         error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">     &#125;;</span><br><span class="line">     util.extend(opt, options);</span><br><span class="line">     <span class="keyword">if</span> (opt.url) &#123;</span><br><span class="line">         <span class="keyword">var</span> xhr = XMLHttpRequest</span><br><span class="line">            ? <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">            : <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">         <span class="keyword">var</span> data = opt.data,</span><br><span class="line">             url = opt.url,</span><br><span class="line">             type = opt.type.toUpperCase(),</span><br><span class="line">             dataArr = [];</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> data) &#123;</span><br><span class="line">             dataArr.push(k + <span class="string">'='</span> + data[k]);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (type === <span class="string">'GET'</span>) &#123;</span><br><span class="line">             url = url + <span class="string">'?'</span> + dataArr.join(<span class="string">'&amp;'</span>);</span><br><span class="line">             xhr.open(type, url.replace(<span class="regexp">/\?$/g</span>, <span class="string">''</span>), <span class="literal">true</span>);</span><br><span class="line">             xhr.send();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (type === <span class="string">'POST'</span>) &#123;</span><br><span class="line">             xhr.open(type, url, <span class="literal">true</span>);</span><br><span class="line">             xmlhttp.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">             xhr.send(dataArr.join(<span class="string">'&amp;'</span>));</span><br><span class="line">         &#125;</span><br><span class="line">         xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">304</span>) &#123;</span><br><span class="line">                 <span class="keyword">var</span> res;</span><br><span class="line">                 <span class="keyword">if</span> (opt.success &amp;&amp; opt.success <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">                     res = xhr.responseText;</span><br><span class="line">                     <span class="keyword">if</span> (<span class="keyword">typeof</span> res === <span class="string">'string'</span>) &#123;</span><br><span class="line">                         res = <span class="built_in">JSON</span>.parse(res);</span><br><span class="line">                         opt.success.call(xhr, res);</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="keyword">if</span> (opt.error &amp;&amp; opt.error <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">                     opt.error.call(xhr, res);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>跨域通信的几种方式</strong></li></ul><ol><li>JSONP(只支持GET请求)</li></ol><blockquote><p>通过 <em>script</em> 标签的异步加载来实现的。利用script标签不受同源策略的限制，天然可以跨域的特性。</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line"></span><br><span class="line">script.src = <span class="string">'https://api.asilu.com/geo/&amp;callback=jsonp'</span>;<span class="comment">//这个是获取当前经纬度的接口</span></span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script);<span class="comment">//创建并添加script标签到&lt;head&gt;下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调执行函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);<span class="comment">//打印jsonp返回的信息</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ol><li>Hash</li></ol><blockquote><p>url的#后面的内容就叫Hash。Hash的改变，页面不会刷新。</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 在A中伪代码如下：</span><br><span class="line">var B = document.getElementsByTagName(&apos;iframe&apos;);</span><br><span class="line">B.src = B.src + &apos;#&apos; + &apos;data&apos;;</span><br><span class="line"></span><br><span class="line">// 在B中的伪代码如下</span><br><span class="line">window.onhashchange = function () &#123;</span><br><span class="line">  var data = window.location.hash;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>postMessage</li></ol><blockquote><p>H5中新增的postMessage()方法，可以用来做跨域通信</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 在A窗口中操作如下：向B窗口发送数据</span></span><br><span class="line">    Bwindow.postMessage(<span class="string">'data'</span>, <span class="string">'http://B.com'</span>); <span class="comment">//这里强调的是B窗口里的window对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在窗口B中监听 message 事件</span></span><br><span class="line">    Awindow.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;   <span class="comment">//这里强调的是A窗口里的window对象</span></span><br><span class="line">        <span class="built_in">console</span>.log(event.origin);  <span class="comment">//获取 ：A窗口url</span></span><br><span class="line">        <span class="built_in">console</span>.log(event.source);  <span class="comment">//获取：A window对象</span></span><br><span class="line">        <span class="built_in">console</span>.log(event.data);    <span class="comment">//获取传过来的数据</span></span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><ol><li>WebSocket</li></ol><blockquote><p>WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'wss://echo.websocket.org'</span>);</span><br><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Connection open ...'</span>);</span><br><span class="line">  ws.send(<span class="string">'Hello WebSockets!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Received Message: '</span>, evt.data);</span><br><span class="line">  ws.close();</span><br><span class="line">&#125;;</span><br><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Connection closed.'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>CORS(现代浏览器普遍跨域解决方案)</li></ol><blockquote><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信</p></blockquote><p>#### </p><h4 id><a href="#" class="headerlink" title=" "></a> </h4><h4 id="前端安全"><a href="#前端安全" class="headerlink" title="前端安全"></a><strong>前端安全</strong></h4><ul><li><strong>XSS攻击(跨站脚本攻击)</strong></li></ul><blockquote><p>英文全称：Cross Site Script，XSS攻击，通常指黑客通过“HTML注入”篡改了网页，插入了恶意的脚本，从而在用户浏览网页时，控制用户浏览器的一种攻击</p></blockquote><p><strong>XSS的分类</strong></p><ol><li>反射型 XSS</li></ol><p>原理：反射型XSS，也叫非持久型XSS，是指发生请求时，XSS代码出现在请求URL中，作为参数提交到服务器，服务器解析并响应。响应结果中包含XSS代码，最后浏览器解析并执行</p><p>实现：攻击者通过给用户发送带有恶意脚本代码参数的URL，当URL地址被打开时，特有的恶意代码参数被HTML解析、执行。</p><p><img src="/2020/05/16/前端好料/image-20200517224754705.png" alt="image-20200517224754705"></p><ol><li>存储型XSS</li></ol><p>原理：一般是攻击者输入的恶意代码“存储”在服务器端，主要是将XSS代码发送到服务器（不管是数据库、内存还是文件系统等。），只要受害者浏览包含此恶意代码的页面就会执行恶意代码。</p><p>实现：存储型 XSS 一般出现在网站留言、评论、博客日志等交互处。例如：黑客提交了一条包含XSS代码的留言到数据库。当目标用户查询留言时，那些留言的内容会从服务器解析之后加载出来。浏览器发现有XSS代码，就当做正常的HTML和JS解析执行。XSS攻击就发生了</p><p><strong>XSS的防御</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HttpOnly</span><br><span class="line">浏览器禁止页面的Javascript访问带有HttpOnly属性的cookie。（实质解决的是：XSS后的cookie劫持攻击）如今已成为一种“标准”的做法</span><br><span class="line"></span><br><span class="line">输入检查（XSS Filter）</span><br><span class="line">让一些基于特殊字符的攻击失效。（常见的Web漏洞如XSS、SQLInjection等，都要求攻击者构造一些特殊字符）</span><br><span class="line"></span><br><span class="line">输出检查</span><br><span class="line">在变量输出到HTML页面时，使用编码或转义的方式来防御XSS攻击</span><br></pre></td></tr></table></figure><ul><li><strong>CSRF(跨站请求伪造)</strong></li></ul><blockquote><p>CSRF就是利用你所在网站的登录的状态，以你的名义向网站发送恶意请求。CSRF能做的事情包括利用你的身份发邮件、发短信、进行交易转账等，盗取你的账号，甚至购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全</p></blockquote><p>原理图：</p><p><img src="/2020/05/16/前端好料/image-20200517224844748.png" alt="image-20200517224844748"></p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">用户登录自己的博客网站（本地cookie已经保存了登录信息）</span><br><span class="line"></span><br><span class="line">攻击者构造一个页面：http://www.a.com/csrf.html</span><br><span class="line"></span><br><span class="line">其内容为&lt;img src=&quot;http://blog.sohu.com/manage/entry.do?m=deleted&amp;id=156714243&quot; /&gt;</span><br><span class="line"></span><br><span class="line">使用了一个img标签，其地址指向了删除Iid为156714243的博客文章</span><br><span class="line"></span><br><span class="line">然后攻击者诱使用户访问这个页面</span><br><span class="line"></span><br><span class="line">用户进去看到一张无法显示的图片，这时自己的那篇博客文章已经被删除了</span><br></pre></td></tr></table></figure><p>关键点：</p><ol><li>用户登录受信任网站A，并且在本地生成Cookie</li><li>在不登出网站A的情况下，访问危险网站B</li></ol><p><strong>CSRF的防御</strong></p><ol><li>增加token 在请求中放入攻击者所不能伪造的信息，并且该信总不存在于cookie之中。鉴于此，系统开发人员可以在HTTP请求中以参数的形式加入一个随机产生的token，并在服务端进行token校验，如果请求中没有token或者token内容不正确，则认为是CSRF攻击而拒绝该请求</li><li>通过Referer识别 根据HTTP协议，在HTTP头中有一个字段叫Referer，它记录了该HTTP请求的来源地址。在通常情况下，访问一个安全受限的页面的请求都来自于同一个网站</li><li>网站重要操作增加验证码 CSRF攻击过程中，用户在不知情的情况下构造了网络请求，添加验证码后，强制用户必须与应用进行交互</li></ol><h4 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h4><h4 id="渲染机制"><a href="#渲染机制" class="headerlink" title="渲染机制"></a><strong>渲染机制</strong></h4><ul><li><strong>DOCTYPE作用</strong></li></ul><blockquote><p>DTD（document type define，文档类型定义）是一系列的语法规则，用来定义XML或(X)HTML的文件类型。浏览器会使用它来判断文档类型，决定使用何种协议来解析，以及切换浏览器模式</p></blockquote><blockquote><p>DOCTYPE是用来声明文档类型和DTD规范的，一个主要的用途是文件的合法性验证。如果文件代码不合法，那么浏览器解析时便会出一些差错</p></blockquote><ul><li><strong>浏览器渲染过程</strong></li></ul><p><img src="/2020/05/16/前端好料/image-20200517224936857.png" alt="image-20200517224936857"></p><ul><li><ol><li>解析HTML，生成DOM树（DOM）</li><li>解析CSS，生成CSSOM树（CSSOM）</li><li>将DOM和CSSOM合并，生成渲染树（Render-Tree）</li><li>计算渲染树的布局（Layout）</li><li>将布局渲染到屏幕上（Paint）</li></ol></li></ul><p><strong>几个关键概念</strong></p><p><em>CSS阻塞渲染</em>：由于CSSOM负责存储渲染信息，浏览器就必须保证在合成渲染树之前，CSSOM是完备的，这种完备是指所有的CSS（内联、内部和外部）都已经下载完，并解析完，只有CSSOM和DOM的解析完全结束，浏览器才会进入下一步的渲染。CSS阻塞渲染意味着，在CSSOM完备前，页面将一直处理白屏状态，这就是为什么样式放在head中，仅仅是为了更快的解析CSS，保证更快的首次渲染。</p><p><em>JS阻塞页面</em>：JS可以操作DOM来修改DOM结构，可以操作CSSOM来修改节点样式，这就导致了浏览器在解析HTML时，一旦碰到script，就会立即停止HTML的解析，也阻塞了其后的CSS解析，整个解析进程必须等待JS的执行完成才能够继续。从性能角度上讲，将script放在页面底部，也就合情合理了</p><p><em>重排（Reflow）</em>：DOM结构中的各个元素都有自己的盒子（模型），这些都需要浏览器根据各种样式来计算并根据计算结果将元素放到它该出现的位置，这个过程称之为reflow</p><p>触发重排（reflow）：</p><ul><li>1、当增加、删除、修改DOM节点时，会导致reflow或repaint</li><li>2、当移动DOM的位置，或是插入动画的时候</li><li>3、当修改CSS样式的时候</li><li>4、当Resize窗口的时候，或是滚动的时候</li><li>5、当修改网页的默认字体时</li></ul><p><em>重绘（Repaint）</em>：当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来后，浏览器便把这些元素都按照各自的特性绘制了一遍，于是页面的内容出现了，这个过程称之为repaint。</p><p>触发重绘（Repaint）：</p><ul><li>1、DOM改动</li><li>2、CSS改动</li></ul><p><em>最小化重绘和重排</em>1.一次性修改样式：减少内联样式使用 样式合并写法 2.批量修改DOM：使用文档片段创建一个子树，然后再拷贝到文档中（document.fragment） 3.缓存布局信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//每次需要查询div.offsetLeft 浪费性能</span></span><br><span class="line">div.style.left = <span class="number">1</span> + div.offsetLeft + <span class="string">'px'</span>;</span><br><span class="line">div.style.top = <span class="number">1</span> + div.offsetTop + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将这个值保存下来，避免重复取值 性能优化</span></span><br><span class="line">current = div.offsetLeft;</span><br><span class="line">div.style.left = <span class="number">1</span> + ++current + <span class="string">'px'</span>;</span><br><span class="line">div.style.top = <span class="number">1</span> + ++current + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a><strong>性能优化</strong></h4><p>Yahoo Developer Network–包含 7 个类别共 35 条前端性能优化最佳实践</p><p><img src="/2020/05/16/前端好料/image-20200517225039161.png" alt="image-20200517225039161"></p><p><strong>前端常用方法：</strong></p><ol><li><p>资源合并压缩 减少HTTP请求</p><p>1.1 尽量合并和压缩html css和js文件 借助前端工具 例如 webpack gulp grunt… 1.2 开启gzip压缩</p></li><li><p>图片优化</p><p>2.1 雪碧图 图片压缩 svg base64</p></li><li><p>懒加载 / 预加载</p><p>3.1 懒加载：图片进入可视区域之后请求图片资源 对于电商等图片很多，页面很长的业务场景适用 并发加载的资源过多会阻塞 js 的加载，影响网站的正常使用</p><p>3.2 预加载：图片等静态资源在使用之前的提前请求 资源使用到时能从缓存中加载，提升用户体验</p></li><li><p>浏览器存储 localStorage：大小为 5M 左右仅在客户端使用，不和服务端进行通信 浏览器本地缓存方案 indexedDB：用于客户端存储大量结构化数据 为应用创建离线版本</p></li><li><p>浏览器缓存</p><p>5.1强缓存：</p><p>expires： 缓存过期时间，用来指定资源到期的时间，是服务器端的绝对时间 告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求</p><p>cache-control：max-age = xxx 声明该资源在加载后的xxx秒内都直接使用缓存 使用的是相对时间 即加载文件本机的时间</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/vO7l6lQ0BwqmG300mRMj1zE3n6ZFHk05tPPEyicZUkflCXkLSAHzDKEOHGA91XpdOaic1lOLDvBj1cgIx3s4Bg4Q/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>如果在Cache-Control响应头设置了 “max-age” 或者 “s-max-age” 指令，那么 Expires 头会被忽略。</p><p>5.2协商缓存：</p><blockquote><p>触发条件<br>1.Cachen-Control的值为no-cache（不强缓存）<br>2.max-age过期了（强缓存，但总有过期的时候）</p></blockquote><p>Last-Modified ——- response header</p><p>If-Modified-Since ——- request header</p><p>缺点：某些服务端不能获取精确的修改时间；文件修改时间改了，但文件内容却没有变</p><p>文件内容的 hash 值</p><p>etag ——- response header</p><p>if-none-match ——- request header</p></li><li></li><li><p>CDN 内容分发网络</p></li></ol><h4 id="前端错误监控以及上报"><a href="#前端错误监控以及上报" class="headerlink" title="前端错误监控以及上报"></a><strong>前端错误监控以及上报</strong></h4><ol><li><p>前端错误分类：</p></li><li><ul><li>即时运行错误：代码错误</li><li>资源加载错误</li><li>对于跨域的代码运行错误会显示 Script error. 对于这种情况我们需要给 script 标签添加 crossorigin 属性，并且服务器添加Access-Control-Allow-Origin</li></ul></li><li><p>即时运行错误捕获 （1）try ….catch （2) window.onerror 或者 window.addEventListener 记住事件捕获阶段获得，不是冒泡阶段</p></li><li><p>资源加载错误 （1）object.onerror，如img.onerror （2）performance.getEntries （getEntries api返回一个资源加载完成数组，假设为img，再查询页面中一共有多少个img，二者的差就是没有加载上的资源） （3）Error事件捕获</p></li><li><p>错误如何上报</p><p>（1）ajax</p><p>（2）image的src上报</p><blockquote><p>(new Image()).src = ‘错误上报的请求地址’</p></blockquote><p>一般来说，大厂都是采用利用image对象的方式上报错误的；使用图片发送get请求，上报信息，由于浏览器对图片有缓存，同样的请求，图片只会发送一次，避免重复上报</p></li></ol><h4 id="-2"><a href="#-2" class="headerlink" title=" "></a> </h4><h4 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a><strong>前端模块化</strong></h4><p>模块化就是将一个复杂的系统分解成多个独立的模块的代码组织方式。</p><p>在很长的一段时间里，前端只能通过一系列的script标签来维护我们的代码关系，但是一旦我们的项目复杂度提高的时候，这种简陋的代码组织方式便是如噩梦般使得我们的代码变得混乱不堪。所以，在开发大型Javascript应用程序的时候，就必须引入模块化机制。</p><p>由于早期官方并没有提供统一的模块化解决方案，所以在群雄争霸的年代，各种前端模块化方案层出不穷。</p><p>前端模块化发展之路：IIFE（自执行函数）&gt;&gt;AMD(RequireJS实现)&gt;&gt;CMD(SeaJS实现)&gt;&gt;CommonJS(NodeJs)&gt;&gt;ES6 Modules(模块化直接成为了Javascript语言规范中的一部分)</p><p><img src="/2020/05/16/前端好料/image-20200517225155871.png" alt="image-20200517225155871"></p><p>源自：<a href="https://juejin.im/post/5eb250f3f265da7bf6742594" target="_blank" rel="noopener">https://juejin.im/post/5eb250f3f265da7bf6742594</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前端好料&quot;&gt;&lt;a href=&quot;#前端好料&quot; class=&quot;headerlink&quot; title=&quot;前端好料&quot;&gt;&lt;/a&gt;前端好料&lt;/h4&gt;&lt;h4 id=&quot;CSS基础&quot;&gt;&lt;a href=&quot;#CSS基础&quot; class=&quot;headerlink&quot; title=&quot;CSS基础&quot;&gt;
      
    
    </summary>
    
    
      <category term="css" scheme="https://shenxiaobu.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>制作vue字典插件</title>
    <link href="https://shenxiaobu.github.io/2020/05/15/%E5%88%B6%E4%BD%9Cvue%E5%AD%97%E5%85%B8%E6%8F%92%E4%BB%B6/"/>
    <id>https://shenxiaobu.github.io/2020/05/15/制作vue字典插件/</id>
    <published>2020-05-15T02:42:56.000Z</published>
    <updated>2020-05-15T06:20:35.151Z</updated>
    
    <content type="html"><![CDATA[<h4 id="制作vue字典插件"><a href="#制作vue字典插件" class="headerlink" title="制作vue字典插件"></a>制作vue字典插件</h4><p>学会制作一个简单的npm包</p><h3 id="1-npm是什么？"><a href="#1-npm是什么？" class="headerlink" title="1.npm是什么？"></a>1.npm是什么？</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm 是Node 的模块管理器，功能极其强大。 它是Node 获得成功的重要原因之一。 正因为有了npm，我们只要一行命令，就能安装别人写好的模块。</span><br></pre></td></tr></table></figure><p><strong>npm的基础知识这边就不做表述的,下面提供一些npm基础知识的参考</strong><br> <a href="https://link.jianshu.com?t=https://www.npmjs.com/" target="_blank" rel="noopener">npm官网</a><br> <a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2016/01/npm-install.html" target="_blank" rel="noopener">npm 模块安装机制简介</a></p><p>那么下面来介绍一下,如何创建自己的第一个node模块,并把这个模块上传到npm上面,让别人可以用我们的模块</p><h3 id="2-创建第一个node模块"><a href="#2-创建第一个node模块" class="headerlink" title="2.创建第一个node模块"></a>2.创建第一个node模块</h3><p>Node.js模块就是发布到npm的代码包，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建一个新模块的第一步就是创建一个package.json文件。</span><br><span class="line">你可以用npm init来创建package.json文件。</span><br><span class="line">这个过程中命令行会逐步提示你输入这个模块的信息，</span><br><span class="line">其中模块的名字和版本号是必填项</span><br></pre></td></tr></table></figure><p>创建好的package.json是长这样的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"ylz-dict"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你还需要一个入口文件，</span><br><span class="line">如果你使用默认值的话，那就会是index.js.</span><br><span class="line">创建完package.json文件之后，你就要开始写代码包里的内容了，</span><br><span class="line">这里举个最简单的例子，在默认的index.js里写一个要导出的函数，</span><br><span class="line">这个函数也就是别人的代码里可以import或者require的。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">exports.showMsg = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"This is my first module"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样的话,你的node模块就已经创建完成了</p><h3 id="3-如何发布到npm服务器上"><a href="#3-如何发布到npm服务器上" class="headerlink" title="3.如何发布到npm服务器上"></a>3.如何发布到npm服务器上</h3><h5 id="3-1-注册一个npm账号-2个方式-最简单的就是去npm官网注册"><a href="#3-1-注册一个npm账号-2个方式-最简单的就是去npm官网注册" class="headerlink" title="3.1.注册一个npm账号,2个方式,最简单的就是去npm官网注册"></a>3.1.注册一个npm账号,2个方式,最简单的就是去npm官网注册</h5><ul><li><a href="https://link.jianshu.com/?t=https://www.npmjs.com/signup" target="_blank" rel="noopener">npm注册</a></li><li>还有一个方式就是 <strong>npm adduser</strong>,按照它的提示去创建</li></ul><h5 id="3-2-首次需要登录-npm-login-存储证书到本地-后面就不需要每次都登录的"><a href="#3-2-首次需要登录-npm-login-存储证书到本地-后面就不需要每次都登录的" class="headerlink" title="3.2.首次需要登录,npm login 存储证书到本地,后面就不需要每次都登录的"></a>3.2.首次需要登录,<strong>npm login</strong> 存储证书到本地,后面就不需要每次都登录的</h5><p>登录需要输入用户名,密码,还有邮箱,这些都是刚刚注册时候填写的</p><h5 id="3-3-开始发布"><a href="#3-3-开始发布" class="headerlink" title="3.3.开始发布"></a>3.3.开始发布</h5><p><strong>npm publish</strong> 发布包<br> 发布过程会把整个目录发布,不想发布的内容模块,<br> 可以通过 <strong>.gitignore</strong> 或 <strong>.npmignore</strong> 文件忽略</p><p>发布成功之后可以去npm官网搜索一下,是否已经存在<br> <a href="https://link.jianshu.com?t=https://npmjs.com" target="_blank" rel="noopener">npm</a></p><p>发布过程可能会遇到这样的一个问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用 cnpm 的注意报错：</span><br><span class="line">no_perms Private mode enable, only admin can publish this module</span><br><span class="line">设置回原本的就可以了</span><br><span class="line">**npm config set registry http://registry.npmjs.org **</span><br><span class="line">发布完成之后,如果还想回到之前的cnpm,使用下面的命令</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="4-创建一个案例-引用刚上传的包"><a href="#4-创建一个案例-引用刚上传的包" class="headerlink" title="4.创建一个案例,引用刚上传的包"></a>4.创建一个案例,引用刚上传的包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">假设已经成功发布了，并且包名叫做**yiz-dict**，</span><br><span class="line"> 这时候可以新建一个空目录，cd进去，运行npm install toniqian-test-module，然后在这个目录下会出现一个叫node_modules的文件夹，你之前写的包就会出现在这个文件夹下面。</span><br></pre></td></tr></table></figure><p>然后写一个index.js,代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var test = require(&apos;yiz-dict&apos;);</span><br><span class="line">test.showMsg();</span><br></pre></td></tr></table></figure><p>运行index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>运行结果显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is my first module</span><br></pre></td></tr></table></figure><p>那么刚刚上传的包,目前已经可以使用,到目前的话,<br>你已经成功创建了一个npm包了</p><h3 id="5-如何更新npm包"><a href="#5-如何更新npm包" class="headerlink" title="5.如何更新npm包"></a>5.如何更新npm包</h3><p>当你包的内容修改之后,比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.showMsg = function () &#123;</span><br><span class="line">  console.log(&quot;This is my second module&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改了提示文字,那么我们需要 <strong>npm version </strong><br> <strong>update_type</strong>就是版本号的意思,会自动更新<strong>package.json</strong>里面的版本号<br> 然后重新 <strong>npm publish</strong>,更新就会完成</p><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><h5 id="创建一个npm包的过程就是这样的，使用时-var-test-require-‘yiz-dict’-就会默认到ylz-dict包查找，具体哪个文件就是看这个包的package-json的配置中”main”-字段的配置，”index-js”-所以就是引入index-js文件"><a href="#创建一个npm包的过程就是这样的，使用时-var-test-require-‘yiz-dict’-就会默认到ylz-dict包查找，具体哪个文件就是看这个包的package-json的配置中”main”-字段的配置，”index-js”-所以就是引入index-js文件" class="headerlink" title="创建一个npm包的过程就是这样的，使用时 var test = require(‘yiz-dict’) 就会默认到ylz-dict包查找，具体哪个文件就是看这个包的package.json的配置中”main”:字段的配置，”index.js”   所以就是引入index.js文件"></a>创建一个npm包的过程就是这样的，使用时 var test = require(‘yiz-dict’) 就会默认到ylz-dict包查找，具体哪个文件就是看这个包的package.json的配置中”main”:字段的配置，”index.js”   所以就是引入index.js文件</h5><h4 id="学会制作vue插件包"><a href="#学会制作vue插件包" class="headerlink" title="学会制作vue插件包"></a>学会制作vue插件包</h4><p><a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">vue插件开发</a></p><p>看完文档尝试开发字典插件</p><p>一开始看着不动手总感觉很麻烦，一堆问号，一步步尝试了，就会发现其实没那么复杂</p><p>在一个项目中写插件，主要就是一个入口文件</p><p>问题1：Vue.use(demo,options)     这个options 可以传参？</p><p>尝试： 书写一个 index.js 插件导出文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> plug = &#123;&#125;</span><br><span class="line">plug.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue,options</span>)</span>&#123;</span><br><span class="line">Vue.prototype.$test = options.test</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> plug</span><br></pre></td></tr></table></figure><p> 在mainjs引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> haha = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"哈哈哈"</span></span><br><span class="line">    &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> xiaobu <span class="keyword">from</span> <span class="string">'./index'</span></span><br><span class="line">Vue.use(xiaobu,&#123;<span class="string">"test"</span>:haha&#125;)</span><br><span class="line"><span class="keyword">this</span>.$test.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此时就会打印出 “哈哈哈”  所以就是可以传参数的</p><p>总结vue插件在同个项目使用大概就是如此，如果要在不同项目使用，就是将这个插件打个包，上传到npm，package上的maiin字段为后期使用这个包的入口文件</p><h4 id="制作一个vue字典包"><a href="#制作一个vue字典包" class="headerlink" title="制作一个vue字典包"></a>制作一个vue字典包</h4><p> <a href="https://gitee.com/syx365night/syxDict.git" target="_blank" rel="noopener">git地址</a></p><p>大概功能就是如下，插件依赖到啥就引入啥即可</p><p>使用如下  这个安装是假的，目前没上传到共有npm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#install by yarn</span><br><span class="line">yarn add @ylz/new-dict </span><br><span class="line"></span><br><span class="line">#install by npm</span><br><span class="line">npm install @ylz/new-dict</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">main.js 文件</span><br><span class="line">//请求字典接口的方法</span><br><span class="line">import getDictData from &quot;@/api/new-dict-axios&quot; </span><br><span class="line">//引入dict插件   路径根据安装后的具体路径更改</span><br><span class="line">import dict from &quot;@ylz/new-dict&quot;</span><br><span class="line">Vue.use(dict, &#123;http: getDictData&#125;)</span><br></pre></td></tr></table></figure><p>注意：请求的返回数据必须大概有如下格式，字段不可更改，字段没做配置。需与后台人员配合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">code: 0,</span><br><span class="line">data: [</span><br><span class="line">&#123;</span><br><span class="line">dicDetailDTOList: [</span><br><span class="line">&#123;</span><br><span class="line">dicCode: &apos;0&apos;,</span><br><span class="line">dicCodeName: &apos;男&apos;</span><br><span class="line">&#125;,</span><br><span class="line">                &#123;</span><br><span class="line">dicCode: &apos;1&apos;,</span><br><span class="line">dicCodeName: &apos;女&apos;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">dicType: &quot;sex&quot;,</span><br><span class="line">dicTypeName: &quot;性别&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下拉选项"><a href="#下拉选项" class="headerlink" title="下拉选项"></a>下拉选项</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--需要过滤数据时--&gt;</span><br><span class="line">&lt;y-DictSelect :dictType=&quot;&#123;type: &apos;SYS_TYPE&apos;,filters: [&apos;1&apos;,&apos;2&apos;],filterType: &apos;dicCode&apos;,reverse: true&#125;&quot; v-model=&quot;sysType&quot; @change=&quot;handdleChange&quot; /&gt;</span><br><span class="line">&#123;</span><br><span class="line">type: 字典类型,</span><br><span class="line">filters： 过滤数据（数组）,</span><br><span class="line">filterType: 过滤的字段（通过这个字段筛选数据）,</span><br><span class="line">reverse: 是否反向筛选</span><br><span class="line">&#125;</span><br><span class="line">&lt;!--不需要过滤数据时--&gt;</span><br><span class="line">&lt;y-DictSelect :dictType=&quot;&apos;SYS_TYPE&apos;&quot; v-model=&quot;sysType&quot; @change=&quot;handdleChange&quot; /&gt;</span><br></pre></td></tr></table></figure><h4 id="非下拉"><a href="#非下拉" class="headerlink" title="非下拉"></a>非下拉</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//根据数组获取字典对应的数组值</span><br><span class="line">this.$DICT.getArrByDicTypes([&apos;字典type&apos;,&apos;字典type&apos;]).then(data =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//通过字典的name获取字典code</span><br><span class="line">this.$DICT.getCodeByCodeName(&apos;字典type&apos;,&apos;该字典某字段的名字&apos;).then(data =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//通过字典的code获取字典name</span><br><span class="line">this.$DICT.getCodeNameByCode(&apos;字典type&apos;,&apos;该字典某字段的code&apos;).then(data =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//通过字典类型获取字典数据</span><br><span class="line">this.$DICT.getArrByDicType(&apos;字典type&apos;).then(data =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//通过字典类型获取字典数据,并根据条件过滤字典数据</span><br><span class="line">options=&#123;</span><br><span class="line">    type: 字典类型,  必填</span><br><span class="line">    filters: 想要过滤的数据(数组) 默认值[]，</span><br><span class="line">    filterType: 筛选类型 默认值  &apos;dicCodeName&apos;,</span><br><span class="line">    reverse: 是否反向筛选 默认 true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">this.$DICT.filterByDicType (options).then(data =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">全局过滤器 dictFormat(字典数组数据)</span><br><span class="line"></span><br><span class="line">&#123;&#123; scope.row.sysType | dictFormat(sysDict) &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;制作vue字典插件&quot;&gt;&lt;a href=&quot;#制作vue字典插件&quot; class=&quot;headerlink&quot; title=&quot;制作vue字典插件&quot;&gt;&lt;/a&gt;制作vue字典插件&lt;/h4&gt;&lt;p&gt;学会制作一个简单的npm包&lt;/p&gt;
&lt;h3 id=&quot;1-npm是什么？&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="-vue -npm -dict" scheme="https://shenxiaobu.github.io/tags/vue-npm-dict/"/>
    
  </entry>
  
  <entry>
    <title>数据字典的使用</title>
    <link href="https://shenxiaobu.github.io/2020/05/03/%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://shenxiaobu.github.io/2020/05/03/数据字典的使用/</id>
    <published>2020-05-03T04:33:16.000Z</published>
    <updated>2020-05-03T17:01:01.173Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数据字典的使用"><a href="#数据字典的使用" class="headerlink" title="数据字典的使用"></a>数据字典的使用</h4><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>平时很多下拉框，下拉选项都是前端写死的，要修改维护的话，得修改代码，修改代码的话就得重新部署，工作量巨大，所以好的方法就是下拉选项的数据采用接口请求的方式来获取，但是一个项目中并不不会单纯只有一个地方用到下拉选项，会很多地方，这样一来后端人员就得写很多个接口，前端也得接很多个接口，所以好办法就是将这些下拉选项集合在一个接口，并用类别来区分，前端人员使用时，用相应的类型来获取数据即可。用对应类型去获取对应的数据，就跟查字典一样，所以这个专业名词叫做字典。 这是我个人理解，哈哈。</p><h5 id="element文档下一版本文档"><a href="#element文档下一版本文档" class="headerlink" title="element文档下一版本文档"></a>element文档下一版本文档</h5><h3 id="数据字典自动转换"><a href="#数据字典自动转换" class="headerlink" title="数据字典自动转换"></a>数据字典自动转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据字典转换通过 `dict-type` 配置，简单应用可以直接给一个数据字典类型字段 `dict-type=&apos;sex&apos;` 。当你想进行数据过滤的时候可以传入一个对象，例如传入`:dict-type=&#123; type:&apos;sex&apos;, filters:[&apos;男&apos;,&apos;女&apos;], filterType:&apos;name&apos;,reverse:false &#125;` 则可以通过 `名字` 过滤包含 `[&apos;男&apos;,&apos;女&apos;]` 的数据，当 `reverse:true` 时则进行反向过滤去除`名字` 中包含 `[&apos;男&apos;,&apos;女&apos;]` 的数据。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-select v-model=&quot;value&quot; placeholder=&quot;请选择&quot; dict-type=&quot;sex&quot;&gt;&lt;/el-select&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        value: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>从上面的示例可以看出，想要拿取下拉选项的数据，只要在dict-type填写相应想要的字段即可，如果要筛选的话可以传入一个对象。是不是很好用。这些数据是哪来的呢？还得配置下</p><p>当使用数据字典表功能的时候需要进行一些数据字典工具参数配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">Vue.prototype.$DICT_CONFIG = &#123;</span><br><span class="line">  url:<span class="string">"/"</span>, <span class="comment">// 数据字典请求接口地址</span></span><br><span class="line">  version:<span class="string">"0.0.0"</span>, <span class="comment">// 数据字典数据版本</span></span><br><span class="line">  config:&#123;</span><br><span class="line">    format:&#123; <span class="attr">name</span>:<span class="string">"name"</span>, <span class="attr">value</span>:<span class="string">"name"</span> &#125;, <span class="comment">// 数据格式</span></span><br><span class="line">    <span class="comment">// 响应拦截</span></span><br><span class="line">    response(res)&#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = res</span><br><span class="line">      <span class="keyword">return</span> data.data</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是element下拉字典的文档</p><h5 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h5><p>这么简单的文档实在是看不懂，遇到了一堆问题，改别人源码，我一直是不支持的，可能是以己度人吧，按我的实力要改别人源码是很难的，即使可以的话，改完之时，人家团队可能已经将源码发布了。所以既然用不了，也看不懂人家源码，大不了自己写个普通人都看得懂，都能用的字典。于是开始了。</p><h5 id="开发字典"><a href="#开发字典" class="headerlink" title="开发字典"></a>开发字典</h5><p>根据前面使用字典遇到的坑，我大概知道了字典的原理：项目第一次加载时从缓存查看是否有缓存数据，没有的话请求字典接口，将数据存储到浏览器的localstorage，使用时根据字段从localstorage找到对应数据。大概就是这样。</p><p>补充：由于字典是可以配置的，所以必须做到，当找不到这个字典时，得再请求接口，以免localstorage上并不是最新的字典，导致下拉框为空。</p><p>原理大概就是那样，接下来第一步还是先写下拉框组件吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> * @Descripttion: </span><br><span class="line"> * @version: 0.1</span><br><span class="line"> * @Author: syx</span><br><span class="line"> * @Date: 2020-04-30 10:37:36</span><br><span class="line"> * @LastEditors: syx</span><br><span class="line"> * @LastEditTime: 2020-05-02 13:03:49</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-select v-model=&quot;svalue&quot; :placeholder=&quot;placeholder&quot; :clearable=&quot;clearable&quot; @change=&quot;change&quot;&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;item in options&quot;</span><br><span class="line">            :key=&quot;item.dicCode&quot;</span><br><span class="line">            :label=&quot;item.dicCodeName&quot;</span><br><span class="line">            :value=&quot;item.dicCode&quot;&gt;</span><br><span class="line">        &lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import getDictData from &quot;@/api/new-dict-axios&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;DictSelect&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      options: [],</span><br><span class="line">      svalue: this.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    clearable: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: true</span><br><span class="line">    &#125;,</span><br><span class="line">    placeholder: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;请选择&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    dictType: &#123;</span><br><span class="line">    &#125;, //请求的码表值</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: String</span><br><span class="line">    &#125;//接受外部v-model传入的值</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 获取下拉框数据</span><br><span class="line">    async getDictionary_option(dicType)&#123;</span><br><span class="line">      console.log(&quot;select加载字典&quot;)</span><br><span class="line">      //从缓存获取数据字典</span><br><span class="line">      let localData = JSON.parse(localStorage.getItem(&quot;dictList&quot;))</span><br><span class="line">      //获取想要查的字典字段</span><br><span class="line">      const dictField = typeof (dicType) === &quot;string&quot; ? dicType : typeof (dicType) === &quot;object&quot; ? dicType.type : []</span><br><span class="line">      //当有缓存时从缓存查找该字典,查不到时 数据为空</span><br><span class="line">      let dictData = !localData ? &quot;&quot; : localData.find(item =&gt; &#123; return item.dicType === dictField &#125;)</span><br><span class="line">      dictData = dictData ? dictData : &quot;&quot;</span><br><span class="line">      //如果没缓存 或者 找不到该字典 从新加载字典</span><br><span class="line">      if (!localData || !dictData)&#123;</span><br><span class="line">        await getDictData().then(data =&gt; &#123;</span><br><span class="line">          localStorage.setItem(&quot;dictList&quot;, JSON.stringify(data.data))</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      //从新从缓存拿字典数据</span><br><span class="line">      localData = JSON.parse(localStorage.getItem(&quot;dictList&quot;))</span><br><span class="line">      //查找该字典</span><br><span class="line">      dictData = localData.find(item =&gt; &#123; return item.dicType === dictField &#125;)</span><br><span class="line">      //查不到就为空</span><br><span class="line">      dictData = dictData ? dictData : &quot;&quot;</span><br><span class="line">      //存在该字典则拿该字典数组</span><br><span class="line">      dictData = dictData ? dictData.dicDetailDTOList : []</span><br><span class="line">      //如果传入的是对象,对其进行一番操作</span><br><span class="line">      if (typeof (dicType) === &quot;object&quot;)&#123;</span><br><span class="line">        const &#123;filters, filterType, reverse&#125; = dicType</span><br><span class="line">        if (reverse)&#123;</span><br><span class="line">          dictData = dictData.filter(item =&gt; &#123;</span><br><span class="line">            return !filters.includes(item[filterType])</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          dictData = dictData.filter(item =&gt; &#123;</span><br><span class="line">            return filters.includes(item[filterType])</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      this.options = dictData</span><br><span class="line">    &#125;,</span><br><span class="line">    // 下拉框点击事件</span><br><span class="line">    change()&#123;</span><br><span class="line">      /* 子组件通过事件发射向父组件传递事件及参数，$emit即为发射事件</span><br><span class="line">                   第一个参数为向父组件传递的事件名，第二个参数为向父组件传递的参数 */</span><br><span class="line">      this.$emit(&quot;change&quot;, this.svalue);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    //判断下拉框的值是否有改变</span><br><span class="line">    value(val) &#123;</span><br><span class="line">      this.svalue = val;//②监听外部对props属性result的变更，并同步到组件内的data属性myResult中</span><br><span class="line">    &#125;,</span><br><span class="line">    svalue(val, oldVal)&#123;</span><br><span class="line">      if (val !== oldVal) &#123;</span><br><span class="line">        this.$emit(&quot;input&quot;, val);//③组件内对myResult变更后向外部发送事件通知</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    // this.svalue=this.value;//初始话下拉框的值</span><br><span class="line">    this.getDictionary_option(this.dictType);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>以上组件使用到了一个请求字典的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//new-dict-axios.js</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Descripttion: 字典请求</span></span><br><span class="line"><span class="comment"> * @version: 0.1</span></span><br><span class="line"><span class="comment"> * @Author: syx</span></span><br><span class="line"><span class="comment"> * @Date: 2020-04-30 10:45:25</span></span><br><span class="line"><span class="comment"> * @LastEditors: syx</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-05-02 13:17:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> commonApi <span class="keyword">from</span> <span class="string">"./common-axios"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">params = &#123;&#125;, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> commonApi.post(<span class="string">`/ebus/ggfw_ylz/api/bmgt/web/module1/sysDic/list`</span>,</span><br><span class="line">    params, options).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反正就是请求字典的接口。</p><p>以上也包含了过滤功能，使用方式要改成和element文档一致的也行。以上一些字段是需要和后端人员协调的，因为字典接口已经写好，所以是根据后端人员的字段来写这些的。后端返回数据格式如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">data：[</span><br><span class="line">    &#123;</span><br><span class="line">dicDetailDTOList: [</span><br><span class="line">        &#123;</span><br><span class="line">            dicCode: "0",</span><br><span class="line">            dicCodeName: "哈哈"</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            dicCode: "1",</span><br><span class="line">            dicCodeName: "嘿嘿"</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    dicType: "CONSULT_COLUMN",</span><br><span class="line">dicTypeName: "反馈导出"</span><br><span class="line">&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    dicDetailDTOList: [</span><br><span class="line">        &#123;</span><br><span class="line">            dicCode: "0",</span><br><span class="line">            dicCodeName: "哈哈"</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            dicCode: "1",</span><br><span class="line">            dicCodeName: "嘿嘿"</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    dicType: "CONSULT_status",</span><br><span class="line">dicTypeName: "反馈状态"</span><br><span class="line">&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">dicDetailDTOList: [</span><br><span class="line">        &#123;</span><br><span class="line">            dicCode: "0",</span><br><span class="line">            dicCodeName: "哈哈"</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            dicCode: "1",</span><br><span class="line">            dicCodeName: "嘿嘿"</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    dicType: "CONSULT_type",</span><br><span class="line">dicTypeName: "反馈类型"</span><br><span class="line">&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>大概就是这样，请求数据字典接口，返回所有数据的值，为了避免频繁发送请求，所以将数据存放到localstorage，但是当找不到对应字典的时候，就得请求接口获取最新数据，以上组件代码已实现。</p><h5 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;DictSelect :dictType=&quot;&apos;SYS_TYPE&apos;&quot; v-model=&quot;formSearch.sysType&quot; /&gt;</span><br><span class="line">&lt;DictSelect v-model=&quot;formSearch.ver&quot; :dictType=&quot;&#123; type:&apos;MODULE_ACCESS_LEVEL&apos;, filters:[&apos;实名&apos;,&apos;电子凭证激活&apos;], filterType:&apos;dicCodeName&apos;,reverse:true &#125;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">import DictSelect from &quot;@/components/DictSelect/index&quot;</span><br><span class="line">  components: &#123;</span><br><span class="line">    DictSelect</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>组件可配置 placeholder下拉选项提示语，clearable选中后是否可清除，value可用v-model双向绑定，dictType数据字典类型</p><p>以上方法即可使用数据字典，亲测遇到了挺多坑，都已解决，亲测实用。有bug请告诉我，微信号syx365night。</p><h5 id="非下拉框使用字典"><a href="#非下拉框使用字典" class="headerlink" title="非下拉框使用字典"></a>非下拉框使用字典</h5><p>非下拉选项使用字典，大概就是用一些方法拿到对应的数据，再对数据进行操作吧。</p><p>面对这些需求，大概封装了一下方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dictFunc.js  文件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Descripttion: 数据字典方法</span></span><br><span class="line"><span class="comment"> * @version: 0.1</span></span><br><span class="line"><span class="comment"> * @Author: syx</span></span><br><span class="line"><span class="comment"> * @Date: 2020-05-02 13:18:24</span></span><br><span class="line"><span class="comment"> * @LastEditors: syx</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-05-03 12:25:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> getDictData <span class="keyword">from</span> <span class="string">"@/api/new-dict-axios"</span></span><br><span class="line"><span class="built_in">window</span>.dictData = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">"dictList"</span>))</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Descripttion</span>: 通过字典的name获取字典code</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type">  *     dictTypeName: 字典类型</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type">  *     name: 该字典的值</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type">  * &#125;</span> </span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: code : 字典name对应的code值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> getCodeByCodeName = <span class="keyword">async</span> (dictTypeName,codeName) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">let</span> dicArr = typeData.dicDetailDTOList</span><br><span class="line">   <span class="comment">//通过codeName找到对应数组</span></span><br><span class="line">   <span class="keyword">let</span> data = dicArr.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCodeName === codeName&#125;)</span><br><span class="line">   <span class="keyword">return</span> data ? data.dicCode : <span class="string">""</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 通过字典的code获取字典name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> *  dictTypeName: 字典类型</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> *     code: 该字典的值</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * &#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getCodeNameByCode = <span class="keyword">async</span> (dictTypeName,code) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">let</span> dicArr = typeData.dicDetailDTOList</span><br><span class="line">   <span class="comment">//通过codeName找到对应数组</span></span><br><span class="line">   <span class="keyword">let</span> data = dicArr.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCode === code&#125;)</span><br><span class="line">   <span class="keyword">return</span> data ? data.dicCodeName : <span class="string">""</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 通过字典类型获取字典数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;dictTypeName&#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: dicDetailDTOList : 字典数据数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getArrByDicType = <span class="keyword">async</span> (dictTypeName) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">return</span> typeData.dicDetailDTOList</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 通过字典类型获取字典数据,并根据条件过滤字典数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * dictTypeName: 字典类型 英文名  必填</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * filters: 筛选数据数组 默认[]</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * filterType: 筛选类型  默认 dicCodeName</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * reverse: 是否反向筛选 默认true</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * &#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: dicDetailDTOList : 字典数据数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> filterByDicType = <span class="keyword">async</span> (options) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> defaultOption = &#123;</span><br><span class="line">        filters:[],</span><br><span class="line">        filterType: <span class="string">"dicCodeName"</span>,</span><br><span class="line">        reverse: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    options = <span class="built_in">Object</span>.assign(defaultOption,options)</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === options.type&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === options.type&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">let</span> dicData = typeData.dicDetailDTOList</span><br><span class="line">   <span class="keyword">const</span> &#123;filters, filterType, reverse&#125; = options</span><br><span class="line">   <span class="keyword">if</span> (reverse)&#123;</span><br><span class="line">      dicData = dicData.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> !filters.includes(item[filterType])</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dicData = dicData.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> filters.includes(item[filterType])</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> dicData</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Descripttion</span>: 判断是否有字典数据或者该字段类型的字典数据,没有的话请求接口</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;type&#125;</span> </span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">judgeDict</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!data)&#123;</span><br><span class="line">        <span class="keyword">await</span> getDictData().then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"judgeDict -&gt; res"</span>, res)</span><br><span class="line">            localStorage.setItem(<span class="string">"dictList"</span>,<span class="built_in">JSON</span>.stringify(res.data))</span><br><span class="line">            <span class="built_in">window</span>.dictData = res.data</span><br><span class="line">        &#125;)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在mainjs文件引入他</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> DictInstance <span class="keyword">from</span> <span class="string">"@/assets/js/dictFunc"</span></span><br><span class="line">Vue.prototype.$DictInstance = DictInstance</span><br></pre></td></tr></table></figure><p>在页面上使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$DictInstance.getCodeByCodeName(<span class="string">"SYS_TYPE"</span>, <span class="string">"苹果"</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  alert(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.$DictInstance.getCodeNameByCode(<span class="string">"SYS_TYPE"</span>, <span class="string">"iOS"</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  alert(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.$DictInstance.getArrByDicType(<span class="string">"SYS_TYPE"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.sysDict = res</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$DictInstance.filterByDicType(&#123; <span class="attr">type</span>: <span class="string">"MODULE_ACCESS_LEVEL"</span>, <span class="attr">filters</span>: [<span class="string">"2"</span>, <span class="string">"4"</span>], <span class="attr">filterType</span>: <span class="string">"dicCode"</span>, <span class="attr">reverse</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"created -&gt; res"</span>, res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>过滤数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">       &lt;el-table-column label=&quot;系统类型&quot; prop=&quot;sysType&quot; min-width=&quot;100&quot; show-overflow-tooltip &gt;</span><br><span class="line">            &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">                &#123;&#123; scope.row.sysType | sysTypeFormat(sysDict) &#125;&#125;</span><br><span class="line">             &lt;/template&gt;</span><br><span class="line">           &lt;/el-table-column&gt;</span><br><span class="line">           </span><br><span class="line">filters: &#123;</span><br><span class="line">   sysTypeFormat(val, status)&#123;</span><br><span class="line">     return !status ? &quot;&quot; : status.find(item =&gt; &#123; return item.dicCode === val &#125;) ? status.find(item =&gt; &#123; return item.dicCode === val &#125;).dicCodeName : &quot;&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>防止脏数据查不到对应值，查不到的返回“”</p><p>先这样吧，亲测有效，有bug请提出，方法可能少了点，因为业务上遇到的就这些，可自行继续封装方法，坑已填。</p><h4 id="修改改后"><a href="#修改改后" class="headerlink" title="修改改后"></a>修改改后</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> DictSelect <span class="keyword">from</span> <span class="string">"@/components/DictSelect/index"</span></span><br><span class="line">Vue.component(<span class="string">"DictSelect"</span>, DictSelect);<span class="comment">//全局自定义组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> DictInstance <span class="keyword">from</span> <span class="string">"@/assets/js/dictFunc"</span></span><br><span class="line">Vue.prototype.$DictInstance = DictInstance</span><br></pre></td></tr></table></figure><p>请求方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Descripttion: 字典请求</span></span><br><span class="line"><span class="comment"> * @version: 0.1</span></span><br><span class="line"><span class="comment"> * @Author: syx</span></span><br><span class="line"><span class="comment"> * @Date: 2020-04-30 10:45:25</span></span><br><span class="line"><span class="comment"> * @LastEditors: syx</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-05-02 13:17:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> commonApi <span class="keyword">from</span> <span class="string">"./common-axios"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">params = &#123;&#125;, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> commonApi.post(<span class="string">`/ebus/ggfw_ylz/api/bmgt/web/module1/sysDic/list`</span>,</span><br><span class="line">    params, options).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-select v-model=&quot;svalue&quot; :placeholder=&quot;placeholder&quot; :clearable=&quot;clearable&quot; @change=&quot;change&quot;&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;item in options&quot;</span><br><span class="line">            :key=&quot;item.dicCode&quot;</span><br><span class="line">            :label=&quot;item.dicCodeName&quot;</span><br><span class="line">            :value=&quot;item.dicCode&quot;&gt;</span><br><span class="line">        &lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import getDictData from &quot;@/api/new-dict-axios&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;DictSelect&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      options: [],</span><br><span class="line">      svalue: this.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    clearable: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: true</span><br><span class="line">    &#125;,</span><br><span class="line">    placeholder: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;请选择&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    dictType: &#123;</span><br><span class="line">    &#125;, //请求的码表值</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: String</span><br><span class="line">    &#125;//接受外部v-model传入的值</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 获取下拉框数据</span><br><span class="line">    async getDictionary_option(dicType)&#123;</span><br><span class="line">      console.log(&quot;select加载字典&quot;)</span><br><span class="line">      let localData = localStorage.getItem(&quot;dictList&quot;) || &quot;&quot;</span><br><span class="line">      if (!!localData &amp;&amp; localData !== undefined &amp;&amp; localData !== &quot;undefined&quot;)&#123;</span><br><span class="line">        //从缓存获取数据字典</span><br><span class="line">        localData = JSON.parse(localData)</span><br><span class="line">      &#125;</span><br><span class="line">      //获取想要查的字典字段</span><br><span class="line">      const dictField = typeof (dicType) === &quot;string&quot; ? dicType : typeof (dicType) === &quot;object&quot; ? dicType.type : []</span><br><span class="line">      //当有缓存时从缓存查找该字典,查不到时 数据为空</span><br><span class="line">      let dictData = !localData ? &quot;&quot; : localData.find(item =&gt; &#123; return item.dicType === dictField &#125;)</span><br><span class="line">      dictData = dictData ? dictData : &quot;&quot;</span><br><span class="line">      //如果没缓存 或者 找不到该字典 从新加载字典</span><br><span class="line">      if (!localData || !dictData)&#123;</span><br><span class="line">        await getDictData().then(data =&gt; &#123;</span><br><span class="line">          if (data.code === 0)&#123;</span><br><span class="line">            localStorage.setItem(&quot;dictList&quot;, JSON.stringify(data.data))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      //从新从缓存拿字典数据</span><br><span class="line">      localData = JSON.parse(localStorage.getItem(&quot;dictList&quot;))</span><br><span class="line">      //查找该字典</span><br><span class="line">      dictData = localData.find(item =&gt; &#123; return item.dicType === dictField &#125;)</span><br><span class="line">      //查不到就为空</span><br><span class="line">      dictData = dictData ? dictData : &quot;&quot;</span><br><span class="line">      //存在该字典则拿该字典数组</span><br><span class="line">      dictData = dictData ? dictData.dicDetailDTOList : []</span><br><span class="line">      //如果传入的是对象,对其进行一番操作</span><br><span class="line">      if (typeof (dicType) === &quot;object&quot;)&#123;</span><br><span class="line">        const &#123;filters, filterType, reverse&#125; = dicType</span><br><span class="line">        if (reverse)&#123;</span><br><span class="line">          dictData = dictData.filter(item =&gt; &#123;</span><br><span class="line">            return !filters.includes(item[filterType])</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          dictData = dictData.filter(item =&gt; &#123;</span><br><span class="line">            return filters.includes(item[filterType])</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      this.options = dictData</span><br><span class="line">    &#125;,</span><br><span class="line">    // 下拉框点击事件</span><br><span class="line">    change()&#123;</span><br><span class="line">      /* 子组件通过事件发射向父组件传递事件及参数，$emit即为发射事件</span><br><span class="line">                   第一个参数为向父组件传递的事件名，第二个参数为向父组件传递的参数 */</span><br><span class="line">      this.$emit(&quot;change&quot;, this.svalue);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    //判断下拉框的值是否有改变</span><br><span class="line">    value(val) &#123;</span><br><span class="line">      this.svalue = val;//②监听外部对props属性result的变更，并同步到组件内的data属性myResult中</span><br><span class="line">    &#125;,</span><br><span class="line">    svalue(val, oldVal)&#123;</span><br><span class="line">      if (val !== oldVal) &#123;</span><br><span class="line">        this.$emit(&quot;input&quot;, val);//③组件内对myResult变更后向外部发送事件通知</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    // this.svalue=this.value;//初始话下拉框的值</span><br><span class="line">    this.getDictionary_option(this.dictType);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>字典方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Descripttion: 数据字典方法</span></span><br><span class="line"><span class="comment"> * @version: 0.1</span></span><br><span class="line"><span class="comment"> * @Author: syx</span></span><br><span class="line"><span class="comment"> * @Date: 2020-05-02 13:18:24</span></span><br><span class="line"><span class="comment"> * @LastEditors: syx</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-05-03 22:43:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> getDictData <span class="keyword">from</span> <span class="string">"@/api/new-dict-axios"</span></span><br><span class="line"><span class="keyword">let</span> localDic = localStorage.getItem(<span class="string">"dictList"</span>) || <span class="string">""</span></span><br><span class="line"><span class="built_in">window</span>.dictData = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span>(!!localDic &amp;&amp; localDic !== <span class="literal">undefined</span> &amp;&amp; localDic !== <span class="string">"undefined"</span>)&#123;</span><br><span class="line">  <span class="built_in">window</span>.dictData = <span class="built_in">JSON</span>.parse(localDic)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Descripttion</span>: 通过字典的name获取字典code</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type">  *     dictTypeName: 字典类型</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type">  *     name: 该字典的值</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type">  * &#125;</span> </span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: code : 字典name对应的code值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> getCodeByCodeName = <span class="keyword">async</span> (dictTypeName,codeName) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">let</span> dicArr = typeData.dicDetailDTOList</span><br><span class="line">   <span class="comment">//通过codeName找到对应数组</span></span><br><span class="line">   <span class="keyword">let</span> data = dicArr.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCodeName === codeName&#125;)</span><br><span class="line">   <span class="keyword">return</span> data ? data.dicCode : <span class="string">""</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 通过字典的code获取字典name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> *  dictTypeName: 字典类型</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> *     code: 该字典的值</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * &#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getCodeNameByCode = <span class="keyword">async</span> (dictTypeName,code) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">let</span> dicArr = typeData.dicDetailDTOList</span><br><span class="line">   <span class="comment">//通过codeName找到对应数组</span></span><br><span class="line">   <span class="keyword">let</span> data = dicArr.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCode === code&#125;)</span><br><span class="line">   <span class="keyword">return</span> data ? data.dicCodeName : <span class="string">""</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 通过字典类型获取字典数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;dictTypeName&#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: dicDetailDTOList : 字典数据数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getArrByDicType = <span class="keyword">async</span> (dictTypeName) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">return</span> typeData.dicDetailDTOList</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 通过字典类型获取字典数据,并根据条件过滤字典数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * dictTypeName: 字典类型 英文名  必填</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * filters: 筛选数据数组 默认[]</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * filterType: 筛选类型  默认 dicCodeName</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * reverse: 是否反向筛选 默认true</span></span></span></span><br><span class="line"><span class="comment"><span class="doctag"><span class="type"> * &#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: dicDetailDTOList : 字典数据数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> filterByDicType = <span class="keyword">async</span> (options) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> defaultOption = &#123;</span><br><span class="line">        filters:[],</span><br><span class="line">        filterType: <span class="string">"dicCodeName"</span>,</span><br><span class="line">        reverse: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    options = <span class="built_in">Object</span>.assign(defaultOption,options)</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getCodeByCodeName -&gt; window.dictData"</span>, <span class="built_in">window</span>.dictData)</span><br><span class="line">     <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">   <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === options.type&#125;)</span><br><span class="line">   typeData = typeData || <span class="string">""</span></span><br><span class="line">   <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">   <span class="comment">//再拿一次该字典</span></span><br><span class="line">   <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === options.type&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//拿到该字典数组</span></span><br><span class="line">   <span class="keyword">let</span> dicData = typeData.dicDetailDTOList</span><br><span class="line">   <span class="keyword">const</span> &#123;filters, filterType, reverse&#125; = options</span><br><span class="line">   <span class="keyword">if</span> (reverse)&#123;</span><br><span class="line">      dicData = dicData.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> !filters.includes(item[filterType])</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dicData = dicData.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> filters.includes(item[filterType])</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> dicData</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Descripttion</span>: 判断是否有字典数据或者该字段类型的字典数据,没有的话请求接口</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;type&#125;</span> </span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">judgeDict</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!data)&#123;</span><br><span class="line">        <span class="keyword">await</span> getDictData().then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"judgeDict -&gt; res"</span>, res)</span><br><span class="line">            <span class="keyword">if</span>(res.code === <span class="number">0</span>)&#123;</span><br><span class="line">              localStorage.setItem(<span class="string">"dictList"</span>,<span class="built_in">JSON</span>.stringify(res.data))</span><br><span class="line">              <span class="built_in">window</span>.dictData = res.data</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="built_in">window</span>.dictData = []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用</p><p>不用筛选时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;DictSelect :dictType=&quot;&apos;SYS_TYPE&apos;&quot; v-model=&quot;formSearch.sysType&quot; /&gt;</span><br></pre></td></tr></table></figure><p>使用筛选时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;DictSelect :dictType=&quot;&#123;type: &apos;SYS_TYPE&apos;,filters: [&apos;1&apos;,&apos;2&apos;],filterType: &apos;dicCode&apos;,reverse: true&#125;&quot; v-model=&quot;formSearch.sysType&quot; /&gt;</span><br></pre></td></tr></table></figure><p>type: 字典类型          fielters: 过滤的数据    filterType： 过滤的类型   reverse： 是否反向筛选</p><p>数据配合过滤器使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column label=&quot;系统类型&quot; prop=&quot;sysType&quot; min-width=&quot;100&quot; show-overflow-tooltip &gt;</span><br><span class="line">   &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">&#123;&#123; scope.row.sysType | dictFormat(sysDict) &#125;&#125;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">   dictFormat(val, status)&#123;</span><br><span class="line">      <span class="keyword">return</span> !status ? <span class="string">""</span> : status.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCode === val &#125;) ? status.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCode === val &#125;).dicCodeName : <span class="string">""</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$DictInstance.getArrByDicType(<span class="string">"SYS_TYPE"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.sysDict = res</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>每个数据类型都可以采用这个过滤器，于是将这个过滤器搬到全局过滤器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">// 全局过滤</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> filters <span class="keyword">from</span> <span class="string">"./filters"</span> <span class="comment">// global filters</span></span><br><span class="line"><span class="comment">// register global utility filters</span></span><br><span class="line"><span class="built_in">Object</span>.keys(filters).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  Vue.filter(key, filters[key])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在filters文件夹下的index文件写入全局过滤方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 数据字典过滤器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;val为数据值,status为数据&#125;</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: 数据编码对应的数据名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">dictFormat</span>(<span class="params">val, status</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !status ? <span class="string">""</span> : status.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCode === val &#125;) ? status.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.dicCode === val &#125;).dicCodeName : <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于当需要多个数据时得调用多次同样得方法获取数据，因此急需封装一个获取多个字典数据得方法</p><p>于是在dictFunc文件下新增一个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descripttion</span>: 通过字典类型数组获取字典数据数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;dictTypeNameList&#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: dicDetailDTOList : 字典数据数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: syx</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getArrByDicTypes = <span class="keyword">async</span> (dictTypeNameList) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dictTypeNameList.length; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> dictTypeName = dictTypeNameList[i]</span><br><span class="line">    <span class="keyword">await</span> judgeDict(<span class="built_in">window</span>.dictData)</span><br><span class="line">    <span class="comment">//通过字典类型找到该字典对应的数据</span></span><br><span class="line">    <span class="keyword">let</span> typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;)</span><br><span class="line">    typeData = typeData || <span class="string">""</span></span><br><span class="line">    <span class="comment">//找不到的话重新获取字典数据</span></span><br><span class="line">    judgeDict(typeData)</span><br><span class="line">    <span class="comment">//再拿一次该字典</span></span><br><span class="line">    <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        typeData = <span class="built_in">window</span>.dictData.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;<span class="keyword">return</span> item.dicType === dictTypeName&#125;) || <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span>(!typeData)&#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">"找不到该字典,请确保该字段存在"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拿到该字典数组</span></span><br><span class="line">    arr.push(typeData.dicDetailDTOList)</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取字典数据</span></span><br><span class="line"><span class="keyword">this</span>.$DictInstance.getArrByDicTypes([<span class="string">"SYS_TYPE"</span>, <span class="string">"V_UPDATE_STATUS"</span>]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.sysDict = res[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">this</span>.updateDict = res[<span class="number">1</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后期使用需要别得方法，再继续封装。如果bug请帮忙指点 微信号syx365night</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数据字典的使用&quot;&gt;&lt;a href=&quot;#数据字典的使用&quot; class=&quot;headerlink&quot; title=&quot;数据字典的使用&quot;&gt;&lt;/a&gt;数据字典的使用&lt;/h4&gt;&lt;h5 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背
      
    
    </summary>
    
    
      <category term="dict" scheme="https://shenxiaobu.github.io/tags/dict/"/>
    
  </entry>
  
  <entry>
    <title>ES6将两个数组合并成一个对象数组</title>
    <link href="https://shenxiaobu.github.io/2020/04/24/ES6%E5%B0%86%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E5%90%88%E5%B9%B6%E6%88%90%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84/"/>
    <id>https://shenxiaobu.github.io/2020/04/24/ES6将两个数组合并成一个对象数组/</id>
    <published>2020-04-23T16:03:28.000Z</published>
    <updated>2020-04-23T16:12:19.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6将两个数组合并成一个对象数组"><a href="#ES6将两个数组合并成一个对象数组" class="headerlink" title="ES6将两个数组合并成一个对象数组"></a>ES6将两个数组合并成一个对象数组</h1><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>有这么两个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> metrodates = [</span><br><span class="line">  <span class="string">"2008-01"</span>,</span><br><span class="line">  <span class="string">"2008-02"</span>,</span><br><span class="line">  <span class="string">"2008-03"</span>,..ect</span><br><span class="line"> ];</span><br><span class="line"> <span class="keyword">let</span> figures = [</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="number">0.555</span>,</span><br><span class="line">  <span class="number">0.293</span>,..ect</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>想要这样的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [</span><br><span class="line">   &#123;<span class="attr">data</span>: <span class="number">0</span>, <span class="attr">date</span>: <span class="string">"2008-01"</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">data</span>: <span class="number">0.555</span>, <span class="attr">date</span>: <span class="string">"2008-02"</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">data</span>: <span class="number">0.293</span>, <span class="attr">date</span>: <span class="string">"2008-03"</span>&#125;,..ect</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h1 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> metrodates)&#123;     </span><br><span class="line"> result.push(&#123;<span class="attr">data</span>: figures[index], <span class="attr">date</span>: metrodates[index]&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方案为最原始方法，简单，但过于low</p><h1 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = metrodates.map(<span class="function">(<span class="params">date,i</span>) =&gt;</span> (&#123;date, <span class="attr">data</span>: figures[i]&#125;));</span><br></pre></td></tr></table></figure><p>此方案使用了ES6中的map，简洁，但本质还是遍历，显得有些low</p><h1 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zip = <span class="function">(<span class="params">[x,...xs], [y,...ys]</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (x === <span class="literal">undefined</span> || y === <span class="literal">undefined</span>)</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> [[x,y], ...zip(xs, ys)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = zip(metrodates, figures).map(<span class="function">(<span class="params">[date, data]</span>) =&gt;</span> (&#123;date, data&#125;));</span><br></pre></td></tr></table></figure><p>此方案使用了ES6+递归，显得高大上起来了。</p><h1 id="方案四"><a href="#方案四" class="headerlink" title="方案四"></a>方案四</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isEmpty = <span class="function"><span class="params">xs</span> =&gt;</span> xs.length === <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> head = <span class="function">(<span class="params">[x,...xs]</span>) =&gt;</span> x;</span><br><span class="line"><span class="keyword">const</span> tail = <span class="function">(<span class="params">[x,...xs]</span>) =&gt;</span> xs; </span><br><span class="line"><span class="keyword">const</span> map = <span class="function">(<span class="params">f, ...xxs</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> loop = <span class="function">(<span class="params">acc, xxs</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (xxs.some(isEmpty))</span><br><span class="line"><span class="keyword">return</span> acc;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> loop([...acc, f(...xxs.map(head))], xxs.map(tail));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> loop([], xxs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = map(<span class="function">(<span class="params">date, data</span>) =&gt;</span> (&#123;date, data&#125;), metrodates, figures);</span><br></pre></td></tr></table></figure><p>此方案是方案三的加强版，它能接受多个数组映射成对象数组，威力无比！</p><p>为什么会有这需求呢？ 因为 <a href="https://echarts.apache.org/zh/index.html" target="_blank" rel="noopener">echarts</a> 的数据接口 横坐标和纵坐标是分开的，但是<a href="https://g2.antv.vision/zh" target="_blank" rel="noopener">G2</a>的数据结构是个对象数组，后端人员是将坐标分开成多个数组的，所以需要将他们对应起来，所以就有了上面这个需求</p><p><a href="https://www.cnblogs.com/guanghe/p/11445426.html" target="_blank" rel="noopener">原文</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6将两个数组合并成一个对象数组&quot;&gt;&lt;a href=&quot;#ES6将两个数组合并成一个对象数组&quot; class=&quot;headerlink&quot; title=&quot;ES6将两个数组合并成一个对象数组&quot;&gt;&lt;/a&gt;ES6将两个数组合并成一个对象数组&lt;/h1&gt;&lt;h1 id=&quot;需求&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://shenxiaobu.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>vscode插件从vscode-fileheader到koroFileHeader</title>
    <link href="https://shenxiaobu.github.io/2020/04/23/vscode%E6%8F%92%E4%BB%B6%E4%BB%8Evscode-fileheader%E5%88%B0koroFileHeader/"/>
    <id>https://shenxiaobu.github.io/2020/04/23/vscode插件从vscode-fileheader到koroFileHeader/</id>
    <published>2020-04-23T15:44:01.000Z</published>
    <updated>2020-04-23T16:01:36.096Z</updated>
    
    <content type="html"><![CDATA[<h4 id="vscode插件从vscode-fileheader到koroFileHeader"><a href="#vscode插件从vscode-fileheader到koroFileHeader" class="headerlink" title="vscode插件从vscode-fileheader到koroFileHeader"></a>vscode插件从vscode-fileheader到koroFileHeader</h4><p><em>前言</em></p><p>为什么要使用这个插件？ 这个插件能快速为我们在文件头部生成 解释说明文档如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> * @Description: 用于演示临时切换</span></span><br><span class="line"><span class="comment"> * @Autor: syx</span></span><br><span class="line"><span class="comment"> * @Date: 2020-03-22 12:01:17</span></span><br><span class="line"><span class="comment"> * @LastEditors: syx</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-04-09 20:13:19</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure><p>包含 描述，作者，创建日期，最后修改者，最后修改时间。</p><p>当我们项目是团队协作的时候可以很快的找到上一个修改者</p><p>为什么要换插件呢？ 其实是因为 前者生成的头部解释没包括 描述字段，是自行添加的，应该是这样的，没错，反正我是没生成过描述，或者我没配置好吧。</p><p>于是安装了后者</p><p>安装完后者并配置后，发现 快捷键 ctrl+alt+i 无效了，原因是因为和之前的冲突了吧。于是将前者禁用掉，重启，果断变好了。</p><p>安装后者的第二个原因就是，ctrl+alt+t 可以生成函数注释，经常写接口注释的时候可以使用。</p><p>详细的内容，来个百度链接吧。<a href="https://www.cnblogs.com/fanghl/p/11264394.html" target="_blank" rel="noopener">参考文章</a></p><p><img src="/2020/04/23/vscode插件从vscode-fileheader到koroFileHeader/image-20200423235909959.png" alt="image-20200423235909959"></p><p><img src="/2020/04/23/vscode插件从vscode-fileheader到koroFileHeader/image-20200423235940835.png" alt="image-20200423235940835"></p><p><img src="/2020/04/23/vscode插件从vscode-fileheader到koroFileHeader/image-20200424000010153.png" alt="image-20200424000010153"></p><p>配置代码如下 在setting.json 文件配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">// 文件头部注释</span></span><br><span class="line">    "fileheader.customMade": &#123;</span><br><span class="line">        "Descripttion":"",</span><br><span class="line">        "version":"",</span><br><span class="line">        "Author":"syx",</span><br><span class="line">        "Date":"Do not edit",</span><br><span class="line">        "LastEditors":"syx",</span><br><span class="line">        "LastEditTime":"Do not Edit"</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//函数注释</span></span><br><span class="line">    "fileheader.cursorMode": &#123;</span><br><span class="line">        "name":"",</span><br><span class="line">        "test":"test font",</span><br><span class="line">        "msg":"",</span><br><span class="line">        "param":"",</span><br><span class="line">        "return":""</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h3><p>（1）文件头部注释</p><ol><li>快捷键：<strong>crtl+alt+i（window）</strong>,<strong>ctrl+cmd+t (mac)</strong></li><li>生成样式如下：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> * @Descripttion: </span></span><br><span class="line"><span class="comment"> * @version: </span></span><br><span class="line"><span class="comment"> * @Author: syx</span></span><br><span class="line"><span class="comment"> * @Date: 2020-04-22 14:29:06</span></span><br><span class="line"><span class="comment"> * @LastEditors: syx</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-04-23 21:52:33</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure><p>（2）函数注释</p><ol><li>快捷键：<strong>ctrl+alt+t (window)</strong>, <strong>ctrl+alt+t(mac)</strong></li><li>函数注释不一定生成在头部，自己把控<strong></strong></li><li>生成样式如下：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name</span>: </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@test</span>: test font</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@msg</span>: </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;type&#125;</span> </span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;vscode插件从vscode-fileheader到koroFileHeader&quot;&gt;&lt;a href=&quot;#vscode插件从vscode-fileheader到koroFileHeader&quot; class=&quot;headerlink&quot; title=&quot;vscode插件从v
      
    
    </summary>
    
    
      <category term="VSCode" scheme="https://shenxiaobu.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>sftp自动部署总结版</title>
    <link href="https://shenxiaobu.github.io/2020/04/23/sftp%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93%E7%89%88/"/>
    <id>https://shenxiaobu.github.io/2020/04/23/sftp自动部署总结版/</id>
    <published>2020-04-23T15:38:36.000Z</published>
    <updated>2020-04-23T15:39:22.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sftp-自动部署步骤"><a href="#sftp-自动部署步骤" class="headerlink" title="sftp 自动部署步骤"></a>sftp 自动部署步骤</h2><ol><li>在<code>vscode</code>扩展中搜索 <code>sftp</code> 并下载安装</li><li><code>F1</code>或者<code>ctrl+shift+p</code>调出命令窗口输入 <code>sftp</code> 点击 <code>SFTP:Config</code></li><li>编辑 <code>sftp.json</code> 文件并保存会在当前工程下形成 <code>sftp.json</code> 文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"My Server"</span>,<span class="comment">//使用时需要把注释去掉</span></span><br><span class="line">    <span class="string">"host"</span>: <span class="string">"ip地址"</span>,<span class="comment">//服务器ip</span></span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"sftp"</span>,</span><br><span class="line">    <span class="string">"port"</span>: <span class="number">22</span>,<span class="comment">//端口</span></span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"root"</span>,<span class="comment">//用户名</span></span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"密码"</span>,<span class="comment">//登录密码</span></span><br><span class="line">    <span class="string">"remotePath"</span>: <span class="string">"发布路径"</span>,<span class="comment">//代码部署路径</span></span><br><span class="line">    <span class="string">"uploadOnSave"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要配置<code>host</code>、<code>username</code>、<code>password</code>以及 <code>remotePath</code>四个参数就可以使用了。</p><ol><li>同步到远程</li></ol><ul><li>同步全部的工程文件，可以在需要同步的文件夹上面右键：选择SFTP:Sync Local -&gt; remote，即可同步到远程服务器。</li><li>同步单一的文件，在以在需要同步的文件上右键，选择Upload，即可同步到远程服务器</li></ul><ol><li>完整的配置项列表,可以按需配置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   &#123;</span><br><span class="line">    <span class="string">"host"</span>: <span class="string">"远程ip地址"</span>,</span><br><span class="line">    <span class="string">"port"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"登录名"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"登录密码"</span>,</span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"sftp"</span>, </span><br><span class="line">    <span class="string">"agent"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">"privateKeyPath"</span>: <span class="string">"null或如果链接服务器用的不是账号密码是key文件 这里为key文件路径"</span>, </span><br><span class="line">    <span class="string">"passphrase"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="string">"passive"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"interactiveAuth"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"remotePath"</span>: <span class="string">"需要打到的远程的文件夹地址"</span>,</span><br><span class="line">    <span class="string">"context"</span>: <span class="string">"本地项目地址"</span>,</span><br><span class="line">    <span class="string">"uploadOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"syncMode"</span>: <span class="string">"update"</span>,</span><br><span class="line">    <span class="string">"ignore"</span>: [</span><br><span class="line">        <span class="string">"**/.vscode/**"</span>,</span><br><span class="line">        <span class="string">"**/.git/**"</span>,</span><br><span class="line">        <span class="string">"**/.DS_Store"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"watcher"</span>: &#123;</span><br><span class="line">        <span class="string">"files"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"autoUpload"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"autoDelete"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置多个-sftp，切换部署"><a href="#配置多个-sftp，切换部署" class="headerlink" title="#配置多个 sftp，切换部署"></a><a href="http://hall.idocore.com/views/release/2020/20200421.html#配置多个-sftp，切换部署" target="_blank" rel="noopener">#</a>配置多个 sftp，切换部署</h2><ol><li>配置文件sftp.json</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"vue-charging-pc"</span>,  <span class="comment">//名字  使用时需要把注释去掉</span></span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"sftp"</span>,  <span class="comment">//协议  使用时需要把注释去掉</span></span><br><span class="line">    <span class="string">"port"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"root"</span>,   <span class="comment">//服务器用户名</span></span><br><span class="line">    <span class="comment">// "privateKeyPath": "服务器密钥文件路径",  //或者服务器密钥文件登录</span></span><br><span class="line">    <span class="string">"remotePath"</span>: <span class="string">"/home/charge/springboot/view/"</span>,  <span class="comment">//部署到服务器的目录，会被profiles中的配置覆盖</span></span><br><span class="line">    <span class="string">"profiles"</span>:&#123;</span><br><span class="line">        <span class="string">"zhishang"</span>: &#123;    <span class="comment">//sftp 的名字  当使用这个时 按下面的配置进行部署 </span></span><br><span class="line">            <span class="string">"host"</span>: <span class="string">"服务器主机地址"</span>,</span><br><span class="line">            <span class="string">"port"</span>: <span class="number">22130</span>,</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">            <span class="string">"password"</span>: <span class="string">"xxxx@1"</span>,</span><br><span class="line">            <span class="string">"remotePath"</span>: <span class="string">"/home/www/ylzued"</span>,</span><br><span class="line">            <span class="string">"uploadOnSave"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"god"</span>:&#123;</span><br><span class="line">            <span class="string">"host"</span>: <span class="string">"服务器主机地址"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>切换部署服务 <code>ctrl + shift + p</code>打开,点击 <code>SFTP:Set Profile</code>，出现配置的列表，选择需要的服务设置（active）。 如下图： <img src="http://hall.idocore.com/profiles.png" alt="avatar"></li><li>同步到远程</li></ol><ul><li>同步全部的工程文件，可以在需要同步的文件夹上面右键：选择SFTP:Sync Local -&gt; remote，即可同步到远程服务器。</li><li>同步单一的文件，在以在需要同步的文件上右键，选择Upload，即可同步到远程服务器</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;sftp-自动部署步骤&quot;&gt;&lt;a href=&quot;#sftp-自动部署步骤&quot; class=&quot;headerlink&quot; title=&quot;sftp 自动部署步骤&quot;&gt;&lt;/a&gt;sftp 自动部署步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;vscode&lt;/code&gt;扩展中搜索 &lt;c
      
    
    </summary>
    
    
      <category term="VSCode" scheme="https://shenxiaobu.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>ES6常用语法</title>
    <link href="https://shenxiaobu.github.io/2020/04/23/ES6%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>https://shenxiaobu.github.io/2020/04/23/ES6常用语法/</id>
    <published>2020-04-23T15:32:36.000Z</published>
    <updated>2020-04-23T15:37:25.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h2><p>ES6，全称ECMAScript6.0是 JavaScript 的下一个版本标准2015.06发版。 ES6主要是为了解决 ES5 的先天不足，比如 JavaScript 里并没有类的概念，但是目前浏览器的 JavaScript 是 ES5版本，大多数高版本的浏览器也支持 ES6，不过只实现了 ES6 的部分特性和功能。 本次主要介绍一些常用的ES6语法。如下</p><blockquote><ul><li>ES6 解构赋值</li><li>ES6 Map和Set</li><li>ES6 字符串、对象、数组和函数</li><li>ES6 Reflect与Proxy</li><li>ES6 Promise对象</li><li>ES6 Generator函数和async函数</li></ul></blockquote><hr><p>[TOC]</p><h2 id="1-解构赋值"><a href="#1-解构赋值" class="headerlink" title="#1.解构赋值"></a><a href="http://hall.idocore.com/views/es6/common.html#_1-解构赋值" target="_blank" rel="noopener">#</a>1.解构赋值</h2><p>解构赋值是对赋值运算符的扩展。 他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。 在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</p><blockquote><h4 id="数组模型的解构"><a href="#数组模型的解构" class="headerlink" title="#数组模型的解构"></a><a href="http://hall.idocore.com/views/es6/common.html#数组模型的解构" target="_blank" rel="noopener">#</a>数组模型的解构</h4></blockquote><h5 id="基本"><a href="#基本" class="headerlink" title="#基本"></a><a href="http://hall.idocore.com/views/es6/common.html#基本" target="_blank" rel="noopener">#</a><strong>基本</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 2</span></span><br><span class="line"><span class="comment">// c = 3</span></span><br></pre></td></tr></table></figure><h5 id="可嵌套"><a href="#可嵌套" class="headerlink" title="#可嵌套"></a><a href="http://hall.idocore.com/views/es6/common.html#可嵌套" target="_blank" rel="noopener">#</a><strong>可嵌套</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, [[b], c]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 2</span></span><br><span class="line"><span class="comment">// c = 3</span></span><br></pre></td></tr></table></figure><h5 id="可忽略"><a href="#可忽略" class="headerlink" title="#可忽略"></a><a href="http://hall.idocore.com/views/es6/common.html#可忽略" target="_blank" rel="noopener">#</a><strong>可忽略</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, , b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 3</span></span><br></pre></td></tr></table></figure><h5 id="剩余运算符"><a href="#剩余运算符" class="headerlink" title="#剩余运算符"></a><a href="http://hall.idocore.com/views/es6/common.html#剩余运算符" target="_blank" rel="noopener">#</a><strong>剩余运算符</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//a = 1</span></span><br><span class="line"><span class="comment">//b = [2, 3]</span></span><br></pre></td></tr></table></figure><h5 id="字符串"><a href="#字符串" class="headerlink" title="#字符串"></a><a href="http://hall.idocore.com/views/es6/common.html#字符串" target="_blank" rel="noopener">#</a><strong>字符串</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br><span class="line"><span class="comment">// a = 'h'</span></span><br><span class="line"><span class="comment">// b = 'e'</span></span><br><span class="line"><span class="comment">// c = 'l'</span></span><br><span class="line"><span class="comment">// d = 'l'</span></span><br><span class="line"><span class="comment">// e = 'o'</span></span><br></pre></td></tr></table></figure><h5 id="解构默认值"><a href="#解构默认值" class="headerlink" title="#解构默认值"></a><a href="http://hall.idocore.com/views/es6/common.html#解构默认值" target="_blank" rel="noopener">#</a><strong>解构默认值</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">2</span>] = [<span class="literal">undefined</span>]; <span class="comment">// a = 2</span></span><br></pre></td></tr></table></figure><p>1</p><p>当解构模式有匹配结果，且匹配结果是 undefined 时，会触发默认值作为返回结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [];     <span class="comment">// a = 3, b = 3</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [<span class="number">1</span>];    <span class="comment">// a = 1, b = 1</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [<span class="number">1</span>, <span class="number">2</span>]; <span class="comment">// a = 1, b = 2</span></span><br></pre></td></tr></table></figure><hr><blockquote><h4 id="对象模型的解构"><a href="#对象模型的解构" class="headerlink" title="#对象模型的解构"></a><a href="http://hall.idocore.com/views/es6/common.html#对象模型的解构" target="_blank" rel="noopener">#</a>对象模型的解构</h4></blockquote><h5 id="基本-1"><a href="#基本-1" class="headerlink" title="#基本"></a><a href="http://hall.idocore.com/views/es6/common.html#基本-2" target="_blank" rel="noopener">#</a><strong>基本</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">'aaa'</span>, <span class="attr">bar</span>: <span class="string">'bbb'</span> &#125;;</span><br><span class="line"><span class="comment">// foo = 'aaa'</span></span><br><span class="line"><span class="comment">// bar = 'bbb'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">baz</span> : foo &#125; = &#123; <span class="attr">baz</span> : <span class="string">'ddd'</span> &#125;;</span><br><span class="line"><span class="comment">// foo = 'ddd'</span></span><br></pre></td></tr></table></figure><h5 id="可嵌套可忽略"><a href="#可嵌套可忽略" class="headerlink" title="#可嵌套可忽略"></a><a href="http://hall.idocore.com/views/es6/common.html#可嵌套可忽略" target="_blank" rel="noopener">#</a><strong>可嵌套可忽略</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">p</span>: [<span class="string">'hello'</span>, &#123;<span class="attr">y</span>: <span class="string">'world'</span>&#125;] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line"><span class="comment">// x = 'hello'</span></span><br><span class="line"><span class="comment">// y = 'world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">p</span>: [<span class="string">'hello'</span>, &#123;<span class="attr">y</span>: <span class="string">'world'</span>&#125;] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">p</span>: [x, &#123;  &#125;] &#125; = obj;</span><br><span class="line"><span class="comment">// x = 'hello'</span></span><br></pre></td></tr></table></figure><h5 id="剩余运算符-1"><a href="#剩余运算符-1" class="headerlink" title="#剩余运算符"></a><a href="http://hall.idocore.com/views/es6/common.html#剩余运算符-2" target="_blank" rel="noopener">#</a><strong>剩余运算符</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b, ...rest&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span>&#125;;</span><br><span class="line"><span class="comment">// a = 10</span></span><br><span class="line"><span class="comment">// b = 20</span></span><br><span class="line"><span class="comment">// rest = &#123;c: 30, d: 40&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-Map和Set"><a href="#2-Map和Set" class="headerlink" title="#2.Map和Set"></a><a href="http://hall.idocore.com/views/es6/common.html#_2-map和set" target="_blank" rel="noopener">#</a>2.Map和Set</h2><h3 id="Map-对象"><a href="#Map-对象" class="headerlink" title="#Map 对象"></a><a href="http://hall.idocore.com/views/es6/common.html#map-对象" target="_blank" rel="noopener">#</a><strong>Map 对象</strong></h3><p>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。</p><p><strong>Maps 和 Objects 的区别</strong></p><ul><li>一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。</li><li>Map 中的键值是有序的（FIFO 原则），而添加到对象中的键则不是</li><li>Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。</li><li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。</li></ul><p><strong>Map中的key可以是字符串、对象和函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">var</span> keyString = <span class="string">"a string"</span>; </span><br><span class="line"><span class="keyword">var</span> keyString = <span class="string">"a string"</span>; </span><br><span class="line"><span class="keyword">var</span> keyFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">myMap.set(keyString, <span class="string">"和键'a string'关联的值"</span>);</span><br><span class="line">myMap.set(keyObj, <span class="string">"和键 keyObj 关联的值"</span>);</span><br><span class="line">myMap.set(keyFunc, <span class="string">"和键 keyFunc 关联的值"</span>);</span><br></pre></td></tr></table></figure><h4 id="Map的迭代"><a href="#Map的迭代" class="headerlink" title="#Map的迭代"></a><a href="http://hall.idocore.com/views/es6/common.html#map的迭代" target="_blank" rel="noopener">#</a><strong>Map的迭代</strong></h4><h5 id="for…of"><a href="#for…of" class="headerlink" title="#for…of"></a><a href="http://hall.idocore.com/views/es6/common.html#for-of" target="_blank" rel="noopener">#</a><strong>for…of</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">myMap.set(<span class="number">0</span>, <span class="string">"zero"</span>);</span><br><span class="line">myMap.set(<span class="number">1</span>, <span class="string">"one"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 将会显示两个 log。 一个是 "0 = zero" 另一个是 "1 = one"</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> myMap) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" = "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> myMap.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" = "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这个 entries 方法返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的 [key, value] 数组。 */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 将会显示两个log。 一个是 "0" 另一个是 "1"</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> myMap.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这个 keys 方法返回一个新的 Iterator 对象， 它按插入顺序包含了 Map 对象中每个元素的键。 */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 将会显示两个log。 一个是 "zero" 另一个是 "one"</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> myMap.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这个 values 方法返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的值。 */</span></span><br></pre></td></tr></table></figure><h4 id="Map对象的操作"><a href="#Map对象的操作" class="headerlink" title="#Map对象的操作"></a><a href="http://hall.idocore.com/views/es6/common.html#map对象的操作" target="_blank" rel="noopener">#</a><strong>Map对象的操作</strong></h4><h5 id="Map-与-Array的转换"><a href="#Map-与-Array的转换" class="headerlink" title="#Map 与 Array的转换"></a><a href="http://hall.idocore.com/views/es6/common.html#map-与-array的转换" target="_blank" rel="noopener">#</a><strong>Map 与 Array的转换</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> kvArray = [[<span class="string">"key1"</span>, <span class="string">"value1"</span>], [<span class="string">"key2"</span>, <span class="string">"value2"</span>]];</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Map 构造函数可以将一个 二维 键值对数组转换成一个 Map 对象</span></span><br><span class="line"><span class="keyword">var</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>(kvArray);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用 Array.from 函数可以将一个 Map 对象转换成一个二维键值对数组</span></span><br><span class="line"><span class="keyword">var</span> outArray = <span class="built_in">Array</span>.from(myMap);</span><br></pre></td></tr></table></figure><h5 id="Map-的克隆"><a href="#Map-的克隆" class="headerlink" title="#Map 的克隆"></a><a href="http://hall.idocore.com/views/es6/common.html#map-的克隆" target="_blank" rel="noopener">#</a><strong>Map 的克隆</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myMap1 = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">"key1"</span>, <span class="string">"value1"</span>], [<span class="string">"key2"</span>, <span class="string">"value2"</span>]]);</span><br><span class="line"><span class="keyword">var</span> myMap2 = <span class="keyword">new</span> <span class="built_in">Map</span>(myMap1);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(original === clone); </span><br><span class="line"><span class="comment">// 打印 false。 Map 对象构造函数生成实例，迭代出新的对象。</span></span><br></pre></td></tr></table></figure><h5 id="Map-的合并"><a href="#Map-的合并" class="headerlink" title="#Map 的合并"></a><a href="http://hall.idocore.com/views/es6/common.html#map-的合并" target="_blank" rel="noopener">#</a><strong>Map 的合并</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">'one'</span>], [<span class="number">2</span>, <span class="string">'two'</span>], [<span class="number">3</span>, <span class="string">'three'</span>],]);</span><br><span class="line"><span class="keyword">var</span> second = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">'uno'</span>], [<span class="number">2</span>, <span class="string">'dos'</span>]]);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 合并两个 Map 对象时，如果有重复的键值，则后面的会覆盖前面的，对应值即 uno，dos， three</span></span><br><span class="line"><span class="keyword">var</span> merged = <span class="keyword">new</span> <span class="built_in">Map</span>([...first, ...second]);</span><br></pre></td></tr></table></figure><h3 id="Set-对象"><a href="#Set-对象" class="headerlink" title="#Set 对象"></a><a href="http://hall.idocore.com/views/es6/common.html#set-对象" target="_blank" rel="noopener">#</a><strong>Set 对象</strong></h3><p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p><p><strong>Set 中的特殊值</strong></p><p>Set 对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待：</p><ul><li>+0 与 -0 在存储判断唯一性的时候是恒等的，所以不重复；</li><li>undefined 与 undefined 是恒等的，所以不重复；</li><li>NaN 与 NaN 是不恒等的，但是在 Set 中只能存一个，不重复。</li></ul><h4 id="不可重复性"><a href="#不可重复性" class="headerlink" title="#不可重复性"></a><a href="http://hall.idocore.com/views/es6/common.html#不可重复性" target="_blank" rel="noopener">#</a><strong>不可重复性</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"> </span><br><span class="line">mySet.add(<span class="number">1</span>); <span class="comment">// Set(1) &#123;1&#125;</span></span><br><span class="line">mySet.add(<span class="number">5</span>); <span class="comment">// Set(2) &#123;1, 5&#125;</span></span><br><span class="line">mySet.add(<span class="number">5</span>); <span class="comment">// Set(2) &#123;1, 5&#125; 这里体现了值的唯一性</span></span><br><span class="line">mySet.add(<span class="string">"some text"</span>); </span><br><span class="line"><span class="comment">// Set(3) &#123;1, 5, "some text"&#125; 这里体现了类型的多样性</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;; </span><br><span class="line">mySet.add(o);</span><br><span class="line">mySet.add(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;); </span><br><span class="line"><span class="comment">// Set(5) &#123;1, 5, "some text", &#123;…&#125;, &#123;…&#125;&#125; </span></span><br><span class="line"><span class="comment">// 这里体现了对象之间引用不同不恒等，即使值相同，Set 也能存储</span></span><br></pre></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="#类型转换"></a><a href="http://hall.idocore.com/views/es6/common.html#类型转换" target="_blank" rel="noopener">#</a><strong>类型转换</strong></h4><h5 id="Array"><a href="#Array" class="headerlink" title="#Array"></a><a href="http://hall.idocore.com/views/es6/common.html#array" target="_blank" rel="noopener">#</a><strong>Array</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array 转 Set</span></span><br><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"value1"</span>, <span class="string">"value2"</span>, <span class="string">"value3"</span>]);</span><br><span class="line"><span class="comment">// 用...操作符，将 Set 转 Array</span></span><br><span class="line"><span class="keyword">var</span> myArray = [...mySet];</span><br><span class="line"><span class="built_in">String</span></span><br><span class="line"><span class="comment">// String 转 Set</span></span><br><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">'hello'</span>);  <span class="comment">// Set(4) &#123;"h", "e", "l", "o"&#125;</span></span><br><span class="line"><span class="comment">// 注：Set 中 toString 方法是不能将 Set 转换成 String</span></span><br></pre></td></tr></table></figure><h4 id="Set对象一些用法"><a href="#Set对象一些用法" class="headerlink" title="#Set对象一些用法"></a><a href="http://hall.idocore.com/views/es6/common.html#set对象一些用法" target="_blank" rel="noopener">#</a><strong>Set对象一些用法</strong></h4><h5 id="数组去重"><a href="#数组去重" class="headerlink" title="#数组去重"></a><a href="http://hall.idocore.com/views/es6/common.html#数组去重" target="_blank" rel="noopener">#</a><strong>数组去重</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">[...mySet]; <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h5 id="并集"><a href="#并集" class="headerlink" title="#并集"></a><a href="http://hall.idocore.com/views/es6/common.html#并集" target="_blank" rel="noopener">#</a><strong>并集</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">var</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]); <span class="comment">// &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure><h5 id="交集"><a href="#交集" class="headerlink" title="#交集"></a><a href="http://hall.idocore.com/views/es6/common.html#交集" target="_blank" rel="noopener">#</a><strong>交集</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">var</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> b.has(x))); <span class="comment">// &#123;2, 3&#125;</span></span><br></pre></td></tr></table></figure><h5 id="差集"><a href="#差集" class="headerlink" title="#差集"></a><a href="http://hall.idocore.com/views/es6/common.html#差集" target="_blank" rel="noopener">#</a><strong>差集</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">var</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> !b.has(x))); <span class="comment">// &#123;1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-字符串、对象、数组和函数"><a href="#3-字符串、对象、数组和函数" class="headerlink" title="#3.字符串、对象、数组和函数"></a><a href="http://hall.idocore.com/views/es6/common.html#_3-字符串、对象、数组和函数" target="_blank" rel="noopener">#</a>3.字符串、对象、数组和函数</h2><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="#字符串"></a><a href="http://hall.idocore.com/views/es6/common.html#字符串-2" target="_blank" rel="noopener">#</a><strong>字符串</strong></h3><h4 id="字符串补全"><a href="#字符串补全" class="headerlink" title="#字符串补全"></a><a href="http://hall.idocore.com/views/es6/common.html#字符串补全" target="_blank" rel="noopener">#</a><strong>字符串补全</strong></h4><ul><li>padStart：返回新的字符串，表示用参数字符串从头部（左侧）补全原字符串。</li><li><p>padEnd：返回新的字符串，表示用参数字符串从尾部（右侧）补全原字符串。</p><p>以上两个方法接受两个参数，第一个参数是指定生成的字符串的最小长度，第二个参数是用来补全的字符串。如果没有指定第二个参数，默认用空格填充。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"h"</span>.padStart(<span class="number">5</span>,<span class="string">"o"</span>));  <span class="comment">// "ooooh"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"h"</span>.padEnd(<span class="number">5</span>,<span class="string">"o"</span>));    <span class="comment">// "hoooo"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"h"</span>.padStart(<span class="number">5</span>));      <span class="comment">// "    h"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果指定的长度小于或者等于原字符串的长度，则返回原字符串:</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span>.padStart(<span class="number">5</span>,<span class="string">"A"</span>));  <span class="comment">// "hello"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果原字符串加上补全字符串长度大于指定长度，则截去超出位数的补全字符串:</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span>.padEnd(<span class="number">10</span>,<span class="string">",world!"</span>));  <span class="comment">// "hello,worl"</span></span><br></pre></td></tr></table></figure><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="#模板字符串"></a><a href="http://hall.idocore.com/views/es6/common.html#模板字符串" target="_blank" rel="noopener">#</a><strong>模板字符串</strong></h4><p>模板字符串相当于加强版的字符串，用反引号`,除了作为普通字符串，还可以用来定义多行字符串，还可以在字符串中加入变量和表达式。</p><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="#基本用法"></a><a href="http://hall.idocore.com/views/es6/common.html#基本用法" target="_blank" rel="noopener">#</a><strong>基本用法</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">`Hello'\n'world`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string); </span><br><span class="line"><span class="comment">// "Hello'</span></span><br><span class="line"><span class="comment">// 'world"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 换行用法 模板字符串会保留空格和换行</span></span><br><span class="line"><span class="keyword">let</span> string1 =  <span class="string">`Hey,</span></span><br><span class="line"><span class="string">can you stop angry now?`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string1);</span><br><span class="line"><span class="comment">// Hey,</span></span><br><span class="line"><span class="comment">// can you stop angry now?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串插入变量和表达式</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"Tom"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">let</span> info = <span class="string">`My Name is <span class="subst">$&#123;name&#125;</span>,I am <span class="subst">$&#123;age+<span class="number">1</span>&#125;</span> years old next year.`</span></span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br><span class="line"><span class="comment">// My Name is Tom,I am 28 years old next year.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"have fun!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> string2= <span class="string">`Game start,<span class="subst">$&#123;f()&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string2);  </span><br><span class="line"><span class="comment">// Game start,have fun!</span></span><br></pre></td></tr></table></figure><h5 id="标签用法"><a href="#标签用法" class="headerlink" title="#标签用法"></a><a href="http://hall.idocore.com/views/es6/common.html#标签用法" target="_blank" rel="noopener">#</a><strong>标签用法</strong></h5><p>标签模板，是一个函数的调用，其中调用的参数是模板字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alert<span class="string">`Hello world!`</span>;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">alert(<span class="string">'Hello world!'</span>);</span><br><span class="line"></span><br><span class="line">getPersonInfo(a,b,c)</span><br><span class="line">getPersonInfo<span class="string">`<span class="subst">$&#123;person&#125;</span> is <span class="subst">$&#123;age&#125;</span> years old`</span> </span><br><span class="line"><span class="comment">//三个参数为 ["", "is", "years old"], person, age</span></span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="#对象"></a><a href="http://hall.idocore.com/views/es6/common.html#对象" target="_blank" rel="noopener">#</a><strong>对象</strong></h3><h4 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="#属性的简洁表示法"></a><a href="http://hall.idocore.com/views/es6/common.html#属性的简洁表示法" target="_blank" rel="noopener">#</a><strong>属性的简洁表示法</strong></h4><p>这个在我们vue项目中模块导出或者注册组件经常用到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    specifyAreaSelect</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    actions,</span><br><span class="line">    state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="#属性名表达式"></a><a href="http://hall.idocore.com/views/es6/common.html#属性名表达式" target="_blank" rel="noopener">#</a><strong>属性名表达式</strong></h4><p>ES6允许用表达式作为属性名，但是一定要将表达式放在方括号内。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"> [<span class="string">"he"</span>+<span class="string">"llo"</span>]()&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"Hi"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.hello();  <span class="comment">//"Hi"</span></span><br><span class="line"><span class="comment">//注意点：属性的简洁表示法和属性名表达式不能同时使用，否则会报错。</span></span><br></pre></td></tr></table></figure><h4 id="对象的拓展运算符"><a href="#对象的拓展运算符" class="headerlink" title="#对象的拓展运算符"></a><a href="http://hall.idocore.com/views/es6/common.html#对象的拓展运算符" target="_blank" rel="noopener">#</a><strong>对象的拓展运算符</strong></h4><p>拓展运算符（…）用于取出参数对象所有可遍历属性然后拷贝到当前对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">"Amy"</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> someone = &#123; ...person &#125;;</span><br><span class="line">someone;  <span class="comment">//&#123;name: "Amy", age: 15&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//合并对象</span></span><br><span class="line"><span class="keyword">let</span> age = &#123;<span class="attr">age</span>: <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> name = &#123;<span class="attr">name</span>: <span class="string">"Amy"</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> person = &#123;...age, ...name&#125;;</span><br><span class="line">person;  <span class="comment">//&#123;age: 15, name: "Amy"&#125;</span></span><br></pre></td></tr></table></figure><h4 id="对象新方法"><a href="#对象新方法" class="headerlink" title="#对象新方法"></a><a href="http://hall.idocore.com/views/es6/common.html#对象新方法" target="_blank" rel="noopener">#</a><strong>对象新方法</strong></h4><p>Object.assign() 用于将源对象的所有可枚举属性复制到目标对象中。</p><h5 id="基本-2"><a href="#基本-2" class="headerlink" title="#基本"></a><a href="http://hall.idocore.com/views/es6/common.html#基本-3" target="_blank" rel="noopener">#</a><strong>基本</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> object2 = &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> object3 = &#123;<span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(target,object2,object3);  </span><br><span class="line"><span class="comment">// 第一个参数是目标对象，后面的参数是源对象</span></span><br><span class="line">target;  <span class="comment">// &#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="#注意点"></a><a href="http://hall.idocore.com/views/es6/common.html#注意点" target="_blank" rel="noopener">#</a><strong>注意点</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//assign 的属性拷贝是浅拷贝:</span></span><br><span class="line"><span class="keyword">let</span> sourceObj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> targetObj = &#123;<span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(targetObj, sourceObj);</span><br><span class="line">targetObj.a.b = <span class="number">2</span>;</span><br><span class="line">sourceObj.a.b;  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同名属性替换</span></span><br><span class="line">targetObj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>:<span class="number">2</span>&#125;&#125;;</span><br><span class="line">sourceObj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">"hh"</span>&#125;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(targetObj, sourceObj);</span><br><span class="line">targetObj;  <span class="comment">// &#123;a: &#123;b: "hh"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的处理</span></span><br><span class="line"><span class="built_in">Object</span>.assign([<span class="number">2</span>,<span class="number">3</span>], [<span class="number">5</span>]);  <span class="comment">// [5,3]</span></span><br><span class="line"><span class="comment">//会将数组处理成对象，所以先将 [2,3] 转为 &#123;0:2,1:3&#125; ，然后再进行属性复制，所以源对象的 0 号属性覆盖了目标对象的 0。</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="#数组"></a><a href="http://hall.idocore.com/views/es6/common.html#数组" target="_blank" rel="noopener">#</a><strong>数组</strong></h3><h4 id="数组的创建"><a href="#数组的创建" class="headerlink" title="#数组的创建"></a><a href="http://hall.idocore.com/views/es6/common.html#数组的创建" target="_blank" rel="noopener">#</a><strong>数组的创建</strong></h4><h5 id="Array-from"><a href="#Array-from" class="headerlink" title="#Array.from()"></a><a href="http://hall.idocore.com/views/es6/common.html#array-from" target="_blank" rel="noopener">#</a><strong>Array.from()</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>])); <span class="comment">// [1, 2]</span></span><br><span class="line"><span class="comment">//可迭代</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (n) =&gt; n * <span class="number">2</span>)); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure><h4 id="类数组对象"><a href="#类数组对象" class="headerlink" title="#类数组对象"></a><a href="http://hall.idocore.com/views/es6/common.html#类数组对象" target="_blank" rel="noopener">#</a><strong>类数组对象</strong></h4><p>一个类数组对象必须含有 length 属性，且元素属性名必须是数值或者可转换为数值的字符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(&#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'1'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'2'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(); <span class="comment">// ['1', '2', 3]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 没有 length 属性,则返回空数组</span></span><br><span class="line"><span class="keyword">let</span> array = <span class="built_in">Array</span>.from(&#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'1'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'2'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">// []</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 元素属性名不为数值且无法转换为数值，返回长度为 length 元素值为 undefined 的数组  </span></span><br><span class="line"><span class="keyword">let</span> array1 = <span class="built_in">Array</span>.from(&#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  length: <span class="number">2</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(array1); <span class="comment">// [undefined, undefined]</span></span><br></pre></td></tr></table></figure><h4 id="扩展的方法"><a href="#扩展的方法" class="headerlink" title="#扩展的方法"></a><a href="http://hall.idocore.com/views/es6/common.html#扩展的方法" target="_blank" rel="noopener">#</a><strong>扩展的方法</strong></h4><h5 id="find"><a href="#find" class="headerlink" title="#find()"></a><a href="http://hall.idocore.com/views/es6/common.html#find" target="_blank" rel="noopener">#</a><strong>find()</strong></h5><p>查找数组中符合条件的元素,若有多个符合条件的元素，则返回第一个元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr.find(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 数组空位处理为 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log([, <span class="number">1</span>].find(<span class="function"><span class="params">n</span> =&gt;</span> <span class="literal">true</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h5 id="fill"><a href="#fill" class="headerlink" title="#fill()"></a><a href="http://hall.idocore.com/views/es6/common.html#fill" target="_blank" rel="noopener">#</a><strong>fill()</strong></h5><p>将一定范围索引的数组元素内容填充为单个指定的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// 参数1：用来填充的值</span></span><br><span class="line"><span class="comment">// 参数2：被填充的起始索引</span></span><br><span class="line"><span class="comment">// 参数3(可选)：被填充的结束索引，默认为数组末尾</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.fill(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">// [1, 0, 3, 4]</span></span><br></pre></td></tr></table></figure><h5 id="flat"><a href="#flat" class="headerlink" title="#flat()"></a><a href="http://hall.idocore.com/views/es6/common.html#flat" target="_blank" rel="noopener">#</a><strong>flat()</strong></h5><p>展开数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span> ,[<span class="number">2</span>, <span class="number">3</span>]].flat()); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 指定转换的嵌套层数</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]]].flat(<span class="number">2</span>)); <span class="comment">// [1, 2, 3, [4, 5]]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 不管嵌套多少层</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]]].flat(<span class="literal">Infinity</span>)); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 自动跳过空位</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, [<span class="number">2</span>, , <span class="number">3</span>]].flat());&lt;p&gt; // [1, 2, 3]</span><br></pre></td></tr></table></figure><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="#扩展运算符"></a><a href="http://hall.idocore.com/views/es6/common.html#扩展运算符" target="_blank" rel="noopener">#</a><strong>扩展运算符</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    arr1 = [...arr];</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([...[<span class="number">1</span>, <span class="number">2</span>],...[<span class="number">3</span>, <span class="number">4</span>]]); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="#函数"></a><a href="http://hall.idocore.com/views/es6/common.html#函数" target="_blank" rel="noopener">#</a><strong>函数</strong></h3><h4 id="默认传参"><a href="#默认传参" class="headerlink" title="#默认传参"></a><a href="http://hall.idocore.com/views/es6/common.html#默认传参" target="_blank" rel="noopener">#</a><strong>默认传参</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name,age=<span class="number">17</span></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(name+<span class="string">","</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">"Amy"</span>,<span class="number">18</span>);  <span class="comment">// Amy,18</span></span><br><span class="line">fn(<span class="string">"Amy"</span>,<span class="string">""</span>);  <span class="comment">// Amy,</span></span><br><span class="line">fn(<span class="string">"Amy"</span>);     <span class="comment">// Amy,17</span></span><br></pre></td></tr></table></figure><h4 id="不定参数"><a href="#不定参数" class="headerlink" title="#不定参数"></a><a href="http://hall.idocore.com/views/es6/common.html#不定参数" target="_blank" rel="noopener">#</a><strong>不定参数</strong></h4><p>不定参数用来表示不确定参数个数，形如，…变量名，由…加上一个具名参数标识符组成。具名参数只能放在参数组的<strong>最后</strong>，并且有且只有一个不定参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">...values</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(values.length);</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>);      <span class="comment">//2</span></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);  <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="#箭头函数"></a><a href="http://hall.idocore.com/views/es6/common.html#箭头函数" target="_blank" rel="noopener">#</a><strong>箭头函数</strong></h4><p>箭头函数提供了函数更简洁的写法，同时函数内的this指向也会有一定改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当无参数或者多个参数时</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br><span class="line">f(<span class="number">6</span>,<span class="number">2</span>);  <span class="comment">//8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多行语句需要用&#123;&#125;把函数体包起来</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">let</span> result = a+b;</span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">6</span>,<span class="number">2</span>);  <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当箭头函数要返回对象的时候，为了区分于代码块，要用 () 将对象包裹起来</span></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function">(<span class="params">id,name</span>) =&gt;</span> &#123;<span class="attr">id</span>: id, <span class="attr">name</span>: name&#125;;</span><br><span class="line">f(<span class="number">6</span>,<span class="number">2</span>);  <span class="comment">// SyntaxError: Unexpected token :</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 不报错</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function">(<span class="params">id,name</span>) =&gt;</span> (&#123;<span class="attr">id</span>: id, <span class="attr">name</span>: name&#125;);</span><br><span class="line">f(<span class="number">6</span>,<span class="number">2</span>);  <span class="comment">// &#123;id: 6, name: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意点：没有 this、super、arguments 和 new.target 绑定。</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 箭头函数里面没有 this 对象，</span></span><br><span class="line">  <span class="comment">// 此时的 this 是外层的 this 对象，即 Window </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">func(<span class="number">55</span>)  <span class="comment">// Window </span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="params">()</span> =&gt;</span> &#123;    </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">func(<span class="number">55</span>);  <span class="comment">// ReferenceError: arguments is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数体中的 this 对象，是定义函数时的对象，而不是使用函数时的对象。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 定义时，this 绑定的是 fn 中的 this 对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// fn 的 this 对象为 &#123;a: 19&#125;</span></span><br><span class="line">fn.call(&#123;<span class="attr">a</span>: <span class="number">18</span>&#125;);  <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h2 id="4-Reflect与Proxy"><a href="#4-Reflect与Proxy" class="headerlink" title="#4.Reflect与Proxy"></a><a href="http://hall.idocore.com/views/es6/common.html#_4-reflect与proxy" target="_blank" rel="noopener">#</a><strong>4.Reflect与Proxy</strong></h2><p>Proxy 与 Reflect 是 ES6 为了操作对象引入的 API 。</p><p>Proxy 可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。它不直接操作对象，而是像代理模式，通过对象的代理对象进行操作，在进行这些操作时，可以添加一些需要的额外操作。</p><p>Reflect 可以用于获取目标对象的行为，它与 Object 类似，但是更易读，为操作对象提供了一种更优雅的方式。它的方法与 Proxy 是对应的。</p><p>vue3.0中，双向绑定就是使用了Proxy语法代替了原来的defineProperty，掌握Proxy对我们使用vue会有很大的帮助</p><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="#Proxy"></a><a href="http://hall.idocore.com/views/es6/common.html#proxy" target="_blank" rel="noopener">#</a><strong>Proxy</strong></h3><p>一个 Proxy 对象由两个部分组成： target 、 handler 。在通过 Proxy 构造函数生成实例对象时，需要提供这两个参数。 target 即目标对象， handler 是一个对象，声明了代理 target 的指定行为。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="keyword">get</span>: function(target, key) &#123;</span><br><span class="line">        <span class="comment">//参数target是访问的对象，key是访问的对象属性名</span></span><br><span class="line">        <span class="comment">//以下是访问对象的值时运行的代码</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'getting '</span>+key);</span><br><span class="line">        <span class="keyword">return</span> target[key]; <span class="comment">// 不是target.key</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(target, key, value) &#123;</span><br><span class="line">        <span class="comment">//参数target是访问的对象，key是访问的对象属性名，value是新设置的值</span></span><br><span class="line">        <span class="comment">//以下是设置对象的值时运行的代码</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'setting '</span>+key);</span><br><span class="line">        target[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br><span class="line">proxy.name     <span class="comment">// 实际执行 handler.get</span></span><br><span class="line">proxy.age = <span class="number">25</span> <span class="comment">// 实际执行 handler.set</span></span><br><span class="line"><span class="comment">// getting name</span></span><br><span class="line"><span class="comment">// setting age</span></span><br><span class="line"><span class="comment">// 25</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// target 可以为空对象</span></span><br><span class="line"><span class="keyword">let</span> targetEpt = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> proxyEpt = <span class="keyword">new</span> <span class="built_in">Proxy</span>(targetEpt, handler)</span><br><span class="line"><span class="comment">// 调用 get 方法，此时目标对象为空，没有 name 属性</span></span><br><span class="line">proxyEpt.name <span class="comment">// getting name</span></span><br><span class="line"><span class="comment">// 调用 set 方法，向目标对象中添加了 name 属性</span></span><br><span class="line">proxyEpt.name = <span class="string">'Tom'</span></span><br><span class="line"><span class="comment">// setting name</span></span><br><span class="line"><span class="comment">// "Tom"</span></span><br><span class="line"><span class="comment">// 再次调用 get ，此时已经存在 name 属性</span></span><br><span class="line">proxyEpt.name</span><br><span class="line"><span class="comment">// getting name</span></span><br><span class="line"><span class="comment">// "Tom"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// handler 对象也可以为空，相当于不设置拦截操作，直接访问目标对象</span></span><br></pre></td></tr></table></figure><h4 id="用Proxy写一个拦截器"><a href="#用Proxy写一个拦截器" class="headerlink" title="#用Proxy写一个拦截器"></a><a href="http://hall.idocore.com/views/es6/common.html#用proxy写一个拦截器" target="_blank" rel="noopener">#</a><strong>用Proxy写一个拦截器</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> validator = &#123;</span><br><span class="line">    <span class="keyword">set</span>: function(obj, prop, value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prop === <span class="string">'age'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(value)) &#123;<span class="comment">//不为数字报错</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'The age is not an integer'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt; <span class="number">200</span>) &#123;<span class="comment">//大于200报错</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">'The age seems invalid'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对于满足条件的 age 属性以及其他属性，直接保存</span></span><br><span class="line">        obj[prop] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> proxy= <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, validator)</span><br><span class="line">proxy.age = <span class="number">100</span>;</span><br><span class="line">proxy.age           <span class="comment">// 100</span></span><br><span class="line">proxy.age = <span class="string">'oppps'</span> <span class="comment">// 报错</span></span><br><span class="line">proxy.age = <span class="number">300</span>     <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>注意，严格模式下，set代理如果没有返回true，就会报错。</p><h3 id="Reflect"><a href="#Reflect" class="headerlink" title="#Reflect"></a><a href="http://hall.idocore.com/views/es6/common.html#reflect" target="_blank" rel="noopener">#</a><strong>Reflect</strong></h3><p>ES6 中将 Object 的一些明显属于语言内部的方法移植到了 Reflect 对象上（当前某些方法会同时存在于 Object 和 Reflect 对象上），未来的新方法会只部署在 Reflect 对象上。 Reflect 对象对某些方法的返回结果进行了修改，使其更合理。 Reflect 对象使用函数的方式实现了 Object 的命令式操作。</p><p>查找并返回 target 对象的 name 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> exam = &#123;</span><br><span class="line">    name: <span class="string">"Tom"</span>,</span><br><span class="line">    age: <span class="number">24</span>,</span><br><span class="line">    <span class="keyword">get</span> info()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.get(exam, <span class="string">'name'</span>); <span class="comment">// "Tom"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当 target 对象中存在 name 属性的 getter 方法， getter 方法的 this 会绑定 // receiver</span></span><br><span class="line"><span class="keyword">let</span> receiver = &#123;</span><br><span class="line">    name: <span class="string">"Jerry"</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.get(exam, <span class="string">'info'</span>, receiver); <span class="comment">// Jerry20</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当 name 为不存在于 target 对象的属性时，返回 undefined</span></span><br><span class="line"><span class="built_in">Reflect</span>.get(exam, <span class="string">'birth'</span>); <span class="comment">// undefined</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当 target 不是对象时，会报错</span></span><br><span class="line"><span class="built_in">Reflect</span>.get(<span class="number">1</span>, <span class="string">'name'</span>); <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><h3 id="组合使用"><a href="#组合使用" class="headerlink" title="#组合使用"></a><a href="http://hall.idocore.com/views/es6/common.html#组合使用" target="_blank" rel="noopener">#</a><strong>组合使用</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> exam = &#123;</span><br><span class="line">    name: <span class="string">"Tom"</span>,</span><br><span class="line">    age: <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="keyword">get</span>: function(target, key)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"getting "</span>+key);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target,key);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(target, key, value)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"setting "</span>+key+<span class="string">" to "</span>+value)</span><br><span class="line">        <span class="built_in">Reflect</span>.set(target, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(exam, handler)</span><br><span class="line">proxy.name = <span class="string">"Jerry"</span></span><br><span class="line">proxy.name</span><br><span class="line"><span class="comment">// setting name to Jerry</span></span><br><span class="line"><span class="comment">// getting name</span></span><br><span class="line"><span class="comment">// "Jerry"</span></span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/w3cnote/es6-reflect-proxy.html" target="_blank" rel="noopener">更多详情</a></p><h2 id="5-Promise"><a href="#5-Promise" class="headerlink" title="#5.Promise"></a><a href="http://hall.idocore.com/views/es6/common.html#_5-promise" target="_blank" rel="noopener">#</a><strong>5.Promise</strong></h2><p>Promise是异步编程的一种解决方案。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。</p><h3 id="Promise-状态"><a href="#Promise-状态" class="headerlink" title="#Promise 状态"></a><a href="http://hall.idocore.com/views/es6/common.html#promise-状态" target="_blank" rel="noopener">#</a><strong>Promise 状态</strong></h3><p>Promise 异步操作有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。除了异步操作的结果，任何其他操作都无法改变这个状态。 Promise 对象只有：从 pending 变为 fulfilled 和从 pending 变为 rejected 的状态改变。只要处于 fulfilled 和 rejected ，状态就不会再变了即 resolved（已定型）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="string">'success1'</span>);</span><br><span class="line">    resolve(<span class="string">'success2'</span>);</span><br><span class="line">&#125;); </span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;  </span><br><span class="line">    resolve(<span class="string">'success3'</span>); </span><br><span class="line">    reject(<span class="string">'reject'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(value); <span class="comment">// success1</span></span><br><span class="line">&#125;);</span><br><span class="line">p2.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(value); <span class="comment">// success3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意： 无法取消 Promise ，一旦新建它就会立即执行，无法中途取消。如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><h3 id="then-方法"><a href="#then-方法" class="headerlink" title="#then 方法"></a><a href="http://hall.idocore.com/views/es6/common.html#then-方法" target="_blank" rel="noopener">#</a><strong>then 方法</strong></h3><p>then 方法接收两个函数作为参数，第一个参数是 Promise 执行成功时的回调，第二个参数是 Promise 执行失败时的回调，两个函数只会有一个被调用。 在 JavaScript 事件队列的当前运行完成之前，回调函数永远不会被调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  resolve(<span class="string">'success'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'first'</span>);</span><br><span class="line"><span class="comment">// first</span></span><br><span class="line"><span class="comment">// success</span></span><br></pre></td></tr></table></figure><p>通过 .then 形式添加的回调函数，不论什么时候，都会被调用。 可以添加多个回调函数，它们会按照插入顺序并且独立运行。适合我们在业务中先请求一个接口完成后再请求另一个接口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  resolve(<span class="number">1</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; <span class="comment">// 第一个then // 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; <span class="comment">// 第二个then // 2</span></span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; <span class="comment">// 第三个then // undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'resolve'</span>); </span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; <span class="comment">// 第四个then // resolve</span></span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'reject'</span>); </span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; <span class="comment">// 第五个then //reject:reject</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'resolve:'</span> + value);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'reject:'</span> + err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>then 方法将返回一个 resolved 或 rejected 状态的 Promise 对象用于链式调用，且 Promise 对象的值就是这个返回值。</p><h3 id="Promise封装axios"><a href="#Promise封装axios" class="headerlink" title="#Promise封装axios"></a><a href="http://hall.idocore.com/views/es6/common.html#promise封装axios" target="_blank" rel="noopener">#</a><strong>Promise封装axios</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> checkLogin: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 返回一个promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      axios(&#123;</span><br><span class="line">            url: url</span><br><span class="line">            method: <span class="string">'post'</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">            .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">              resolve(res.data);</span><br><span class="line">              <span class="comment">// console.log(res);</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">              reject(error);</span><br><span class="line">              <span class="comment">// console.log(error);</span></span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.checkLogin().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="comment">// 执行成功的回调函数</span></span><br><span class="line">        &#125;,</span><br><span class="line">        error =&gt; &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(error); </span><br><span class="line">        <span class="comment">// 执行失败的回调函数</span></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise-prototype-catch方法：捕捉错误"><a href="#Promise-prototype-catch方法：捕捉错误" class="headerlink" title="#Promise.prototype.catch方法：捕捉错误"></a><a href="http://hall.idocore.com/views/es6/common.html#promise-prototype-catch方法：捕捉错误" target="_blank" rel="noopener">#</a><strong>Promise.prototype.catch方法：捕捉错误</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">posts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处理前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'发生错误！'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise-all方法，Promise-race方法"><a href="#Promise-all方法，Promise-race方法" class="headerlink" title="#Promise.all方法，Promise.race方法"></a><a href="http://hall.idocore.com/views/es6/common.html#promise-all方法，promise-race方法" target="_blank" rel="noopener">#</a><strong>Promise.all方法，Promise.race方法</strong></h3><p>Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.all([p1,p2,p3]);</span><br></pre></td></tr></table></figure><p>Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 对象的实例。（Promise.all 方法的参数不一定是数组，但是必须具有 iterator 接口，且返回的每个成员都是 Promise 实例。） p 的状态由 p1、p2、p3 决定，分成两种情况。</p><ul><li>只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</li><li>只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一个Promise对象的数组</span></span><br><span class="line"><span class="keyword">var</span> promises = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getJSON(<span class="string">"/post/"</span> + id + <span class="string">".json"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="keyword">function</span>(<span class="params">posts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...  </span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.race([p1,p2,p3]);</span><br></pre></td></tr></table></figure><p>只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的返回值。 如果Promise.all方法和Promise.race方法的参数，不是Promise实例，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。</p><h2 id="6-Generator函数和async函数"><a href="#6-Generator函数和async函数" class="headerlink" title="#6.Generator函数和async函数"></a><a href="http://hall.idocore.com/views/es6/common.html#_6-generator函数和async函数" target="_blank" rel="noopener">#</a><strong>6.Generator函数和async函数</strong></h2><p>Generator可以通过 yield关键字，把函数的执行流挂起，为改变执行流程提供了可能，从而为异步编程提供解决方案。</p><h3 id="Generator-函数组成"><a href="#Generator-函数组成" class="headerlink" title="#Generator 函数组成"></a><a href="http://hall.idocore.com/views/es6/common.html#generator-函数组成" target="_blank" rel="noopener">#</a><strong>Generator 函数组成</strong></h3><p>Generator 有两个区分于普通函数的部分：是在 function 后面，函数名之前有个 * ；函数内部有 yield 表达式。</p><p>其中 * 用来表示函数为 Generator 函数，yield 用来定义函数内部的状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"one"</span>);</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">'1'</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"two"</span>);</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">'2'</span>; </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"three"</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">'3'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行机制"><a href="#执行机制" class="headerlink" title="#执行机制"></a><a href="http://hall.idocore.com/views/es6/common.html#执行机制" target="_blank" rel="noopener">#</a><strong>执行机制</strong></h3><p>调用 Generator 函数和调用普通函数一样，在函数名后面加上()即可，但是 Generator 函数不会像普通函数一样立即执行，而是返回一个指向内部状态对象的指针，所以要调用遍历器对象Iterator 的 next 方法，指针就会从函数头部或者上一次停下来的地方开始执行，直到遇到yield。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func.next();</span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// &#123;value: "1", done: false&#125;</span></span><br><span class="line"> </span><br><span class="line">func.next();</span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// &#123;value: "2", done: false&#125;</span></span><br><span class="line"> </span><br><span class="line">func.next();</span><br><span class="line"><span class="comment">// three</span></span><br><span class="line"><span class="comment">// &#123;value: "3", done: true&#125;</span></span><br><span class="line"> </span><br><span class="line">func.next();</span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>第一次调用 next 方法时，从 Generator 函数的头部开始执行，先是打印了 one ,执行到 yield 就停下来，并将yield 后边表达式的值 ‘1’，作为返回对象的 value 属性值，此时函数还没有执行完， 返回对象的 done 属性值是 false。 第二次调用 next 方法时，同上步 。 第三次调用 next 方法时，先是打印了 three ，然后执行了函数的返回操作，并将 return 后面的表达式的值，作为返回对象的 value 属性值，此时函数已经结束，多以 done 属性值为true 。 第四次调用 next 方法时， 此时函数已经执行完了，所以返回 value 属性值是 undefined ，done 属性值是 true 。如果执行第三步时，没有 return 语句的话，就直接返回 {value: undefined, done: true}。</p><p>注意点：当 next 传入参数的时候，该参数会作为上一步yield的返回值</p><h4 id="return方法"><a href="#return方法" class="headerlink" title="#return方法"></a><a href="http://hall.idocore.com/views/es6/common.html#return方法" target="_blank" rel="noopener">#</a><strong>return方法</strong></h4><p>return 方法返回给定值，并结束遍历Generator函数。return方法提供参数时，返回该参数；不提供参数时，返回 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = foo();</span><br><span class="line">f.next();</span><br><span class="line"><span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line">f.return(<span class="string">"foo"</span>);</span><br><span class="line"><span class="comment">// &#123;value: "foo", done: true&#125;</span></span><br><span class="line">f.next();</span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="keyword">throw</span> 方法</span><br><span class="line"><span class="keyword">throw</span> 方法可以再 Generator 函数体外面抛出异常，再函数体内部捕获。</span><br><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'catch inner'</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> i = g();</span><br><span class="line">i.next();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i.throw(<span class="string">'a'</span>);</span><br><span class="line">  i.throw(<span class="string">'b'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'catch outside'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// catch inner a</span></span><br><span class="line"><span class="comment">// catch outside b</span></span><br></pre></td></tr></table></figure><p>遍历器对象抛出了两个错误，第一个被 Generator 函数内部捕获，第二个因为函数体内部的catch 函数已经执行过了，不会再捕获这个错误，所以这个错误就抛出 Generator 函数体，被函数体外的 catch 捕获。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="#使用场景"></a><a href="http://hall.idocore.com/views/es6/common.html#使用场景" target="_blank" rel="noopener">#</a><strong>使用场景</strong></h4><p>为不具备 Iterator 接口的对象提供遍历方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">objectEntries</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> propKeys = <span class="built_in">Reflect</span>.ownKeys(obj);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> propKey <span class="keyword">of</span> propKeys) &#123;</span><br><span class="line">        <span class="keyword">yield</span> [propKey, obj[propKey]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> jane = &#123; <span class="attr">first</span>: <span class="string">'Jane'</span>, <span class="attr">last</span>: <span class="string">'Doe'</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key,value] <span class="keyword">of</span> objectEntries(jane)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first: Jane</span></span><br><span class="line"><span class="comment">// last: Doe</span></span><br></pre></td></tr></table></figure><p>Reflect.ownKeys() 返回对象所有的属性，不管属性是否可枚举，包括 Symbol。jane 原生是不具备 Iterator 接口无法通过 for… of遍历。这边用了 Generator 函数加上了 Iterator 接口，所以就可以遍历 jane 对象了。</p><h3 id="async函数"><a href="#async函数" class="headerlink" title="#async函数"></a><a href="http://hall.idocore.com/views/es6/common.html#async函数" target="_blank" rel="noopener">#</a><strong>async函数</strong></h3><p>async 是 ES7 才有的与异步操作有关的关键字，和 Promise ， Generator 有很大关联的</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="#返回值"></a><a href="http://hall.idocore.com/views/es6/common.html#返回值" target="_blank" rel="noopener">#</a><strong>返回值</strong></h4><p>async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">helloAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"helloAsync"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(helloAsync())  <span class="comment">// Promise &#123;&lt;resolved&gt;: "helloAsync"&#125;</span></span><br><span class="line"> </span><br><span class="line">helloAsync().then(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(v);         <span class="comment">// helloAsync</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>async 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await 就会先暂停执行 ，等到触发的异步操作完成后，恢复 async 函数的执行并返回解析值。 await 关键字仅在 async function 中有效。如果在async function函数体外使用await，你只会得到一个语法错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAwait</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">//一个请求</span></span><br><span class="line">     <span class="built_in">console</span>.log(response)</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">helloAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">await</span> testAwait();</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"end"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">helloAsync();</span><br><span class="line"><span class="comment">// response</span></span><br><span class="line"><span class="comment">// end</span></span><br></pre></td></tr></table></figure><p>应用场景：先请求数据，再根据请求到的数据完成下一个请求。</p><p>正常情况下，await 命令后面是一个 Promise 对象，它也可以跟其他值，如字符串，布尔值，数值以及普通函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAwait</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"testAwait"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">helloAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">await</span> testAwait();</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"helloAsync"</span>);</span><br><span class="line">&#125;</span><br><span class="line">helloAsync();</span><br><span class="line"><span class="comment">// testAwait</span></span><br><span class="line"><span class="comment">// helloAsync</span></span><br></pre></td></tr></table></figure><p>await针对所跟不同表达式的处理方式： Promise 对象：await 会暂停执行，等待 Promise 对象 resolve，然后恢复 async 函数的执行并返回解析值。 非 Promise 对象：直接返回对应的值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是ES6&quot;&gt;&lt;a href=&quot;#什么是ES6&quot; class=&quot;headerlink&quot; title=&quot;什么是ES6&quot;&gt;&lt;/a&gt;什么是ES6&lt;/h2&gt;&lt;p&gt;ES6，全称ECMAScript6.0是 JavaScript 的下一个版本标准2015.06发版。 ES6
      
    
    </summary>
    
    
      <category term="ES6 js" scheme="https://shenxiaobu.github.io/tags/ES6-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件得通信总结</title>
    <link href="https://shenxiaobu.github.io/2020/04/11/Vue%E7%BB%84%E4%BB%B6%E5%BE%97%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BB%93/"/>
    <id>https://shenxiaobu.github.io/2020/04/11/Vue组件得通信总结/</id>
    <published>2020-04-11T11:14:02.000Z</published>
    <updated>2020-04-11T11:22:20.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue组件的通信总结"><a href="#Vue组件的通信总结" class="headerlink" title="Vue组件的通信总结"></a>Vue组件的通信总结</h1><h2 id="1、props-emit"><a href="#1、props-emit" class="headerlink" title="#1、props/$emit"></a><a href="http://hall.idocore.com/views/vue/2018/121501.html#_1、props-emit" target="_blank" rel="noopener">#</a>1、props/$emit</h2><p>最常用的一种父子间传递数据的方式。</p><blockquote><p>父组件通过绑定属性来向子组件传递数据，子组件通过 <code>props</code> 属性来获取对应的数据；子组件通过<code>$emit</code> 事件向父组件发送消息，将自己的数据传递给父组件。</p></blockquote><p>在某些情况下，需要子组件改变父组件的值，推荐使用(2.3.0+)版本新增的<code>.sync</code>语法糖。 使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A.vue父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;add-modal </span><br><span class="line">      v-<span class="keyword">if</span>=<span class="string">"modalVisiable"</span> </span><br><span class="line">      :visiable.sync=<span class="string">'modalVisiable'</span> </span><br><span class="line">      @submit=<span class="string">"saveForm"</span></span><br><span class="line">    /&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    name: 'A',</span></span><br><span class="line"><span class="regexp">    data()&#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            modalVisiable: false</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// B.vue子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Modal </span><br><span class="line">      v-model=<span class="string">"show"</span></span><br><span class="line">      width=<span class="string">"600"</span></span><br><span class="line">      title=<span class="string">"弹框"</span> </span><br><span class="line">      :loading=<span class="string">'true'</span></span><br><span class="line">      @on-cancel=<span class="string">"$emit('update:visiable', false)"</span></span><br><span class="line">    &gt;</span><br><span class="line">    &lt;<span class="regexp">/Modal&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'A'</span>,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            show: <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        <span class="keyword">this</span>.show = <span class="keyword">this</span>.visiable</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        visiable: &#123;</span><br><span class="line">          type: <span class="built_in">Boolean</span>,</span><br><span class="line">          <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>通过 this.$emit(‘update:visiable’, false) 来改变父元素的状态</p><hr><h2 id="2、-eventBus事件总线-emit-on"><a href="#2、-eventBus事件总线-emit-on" class="headerlink" title="#2、 eventBus事件总线 $emit/$on"></a><a href="http://hall.idocore.com/views/vue/2018/121501.html#_2、-eventbus事件总线-emit-on" target="_blank" rel="noopener">#</a>2、 eventBus事件总线 $emit/$on</h2><p>使用场景：在中小型项目，作为<code>vuex</code>的替代工具。在组件之中引入一个新的vue实例，分别调用这个实例的事件触发和监听来实现通信和参数传递。</p><p><strong>使用方法：</strong></p><p>（1）main.js全局注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//第一种注册方式</span></span><br><span class="line"><span class="keyword">var</span> EventBus = <span class="keyword">new</span> Vue();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Object</span>.defineProperties(Vue.prototype, &#123;</span><br><span class="line">        $bus: &#123;</span><br><span class="line">            <span class="keyword">get</span>: function () &#123;</span><br><span class="line">                <span class="keyword">return</span> EventBus</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种注册方式</span></span><br><span class="line">Vue.prototype.$bus = <span class="keyword">new</span> Vue()</span><br></pre></td></tr></table></figure><p>（2）发送组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$bus.$emit(<span class="string">"updateMessage"</span>, <span class="keyword">this</span>.message)</span><br></pre></td></tr></table></figure><p><code>updateMessage</code>事件可以是<strong>字符串、数组、对象</strong>等任何格式</p><p>如果事件在多页面运用，要在销毁该页面时接触绑定，要不然在其他页面也触发了该页面的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy () &#123;</span><br><span class="line">     $<span class="keyword">this</span>.$bus.$off(<span class="string">'updateMessage'</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>(3)接收组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$bus.$on(<span class="string">'updateMessage'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(value);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="3、-provide-inject"><a href="#3、-provide-inject" class="headerlink" title="#3、 provide / inject"></a><a href="http://hall.idocore.com/views/vue/2018/121501.html#_3、-provide-inject" target="_blank" rel="noopener">#</a>3、 provide / inject</h2><blockquote><p>这对选项需要一起使用，父组件使用 <code>provide</code> 向下提供数据，其下所有子组件都可以通过<code>inject</code>注入。不管中间隔了多少代，都可以注入多个来自不同父级提供的数据</p><ul><li><code>provide</code> 选项是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性</li><li><code>inject</code> 选项是一个字符串数组，或一个对象</li></ul></blockquote><p>使用方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;<span class="comment">// 父组件</span></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;com-a&gt;&lt;<span class="regexp">/com-a&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import ComA from './</span>a<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  '</span>name<span class="string">': '</span>home<span class="string">',</span></span><br><span class="line"><span class="string">  '</span>components<span class="string">': &#123;ComA&#125;,</span></span><br><span class="line"><span class="string">  provide() &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      '</span>a<span class="string">': '</span>Hello<span class="string">',</span></span><br><span class="line"><span class="string">      '</span>show<span class="string">': val =&gt; !val</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;<span class="comment">// 子组件</span></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button @click=<span class="string">"showFn(textShow)"</span>&gt;点击我切换下面文字展示及隐藏</span><br><span class="line">    &lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div v-if="textShow"&gt;我是一段随意被操控的文字&#123;&#123;a&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'ComA'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'textShow'</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'inject'</span>: [</span><br><span class="line">    <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'show'</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'methods'</span>: &#123;</span><br><span class="line">    showFn(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.textShow = <span class="keyword">this</span>.show(val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>如果是在app.vue 文件（根文件）里面全局注册信息，就可以在整个路由里面去引用 （类似于全局的数据管理vuex）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;<span class="regexp">/router-view&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    name: 'app',</span></span><br><span class="line"><span class="regexp">    provide()&#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            app: this</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>接下来任何组件只要通过<code>inject</code>注入app的话，都可以直接通过<code>this.app.xx</code> 来访问<code>app.vue</code> 的所有实例。</p><hr><h2 id="4、-parent-children"><a href="#4、-parent-children" class="headerlink" title="#4、 $parent / $children"></a><a href="http://hall.idocore.com/views/vue/2018/121501.html#_4、-parent-children" target="_blank" rel="noopener">#</a>4、 $parent / $children</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$parent 可以用来从一个子组件访问父组件的实例。它提供了一种机会，可以在后期随时触达父级组件，来替代将数据以 prop 的方式传入子组件的方式</span><br></pre></td></tr></table></figure><p><strong>子组件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"b-content"</span>&gt;</span><br><span class="line">    &lt;div&gt;我是子组件&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&#123;&#123;msgText&#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'childComp'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="string">'msgText'</span>: <span class="string">''</span>,</span><br><span class="line">      <span class="string">'childMsg'</span>: <span class="string">'来自子元素的呐喊'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.msgText = <span class="keyword">this</span>.$parent.parentMsg;</span><br><span class="line">    <span class="comment">// MsgText: 来自父组件的呵呵</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><code>$children</code>可以遍历全部子组件，需要注意 <code>$children</code> 并不保证顺序，也不是响应式的。</p><p><strong>父组件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"b-content"</span>&gt;</span><br><span class="line">    &lt;div&gt;我是父组件&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;child-comp&gt;&lt;/</span>child-comp&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> childComp <span class="keyword">from</span> <span class="string">'./child'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'parentComp'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'parentMsg'</span>: <span class="string">'来自父组件的呵呵'</span>&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'components'</span>: &#123;childComp&#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// 读取子组件数据，注意$children子组件的排序是不安全的</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$children[<span class="number">0</span>].childMsg);</span><br><span class="line">    <span class="comment">// 来自子元素的呐喊</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="5、-root-amp-refs"><a href="#5、-root-amp-refs" class="headerlink" title="#5、 $root &amp; refs"></a><a href="http://hall.idocore.com/views/vue/2018/121501.html#_5、-root-refs" target="_blank" rel="noopener">#</a>5、 $root &amp; refs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$root 属性是在每个 new Vue 实例的子组件中，其根实例可以通过 $root 属性进行访问</span><br></pre></td></tr></table></figure><p>Vue 根实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue 根实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    baz: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>所有的子组件都可以将这个实例作为一个全局 store 来访问或使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取根组件的数据</span></span><br><span class="line"><span class="keyword">this</span>.$root.foo</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入根组件的数据</span></span><br><span class="line"><span class="keyword">this</span>.$root.foo = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问根组件的计算属性</span></span><br><span class="line"><span class="keyword">this</span>.$root.bar</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用根组件的方法</span></span><br><span class="line"><span class="keyword">this</span>.$root.baz()</span><br></pre></td></tr></table></figure><blockquote><p>$refs属性当你需要在 <code>JavaScript</code> 里直接访问一个子组件。你可以通过 <code>ref</code> 这个 <code>attribute</code> 为子组件赋予一个 ID 引用。 一个对象，持有注册过 <code>ref</code> 特性 的所有 DOM 元素和组件实例。例如：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component ref=<span class="string">"childrenCompA"</span>&gt;&lt;<span class="regexp">/my-component&gt;</span></span><br><span class="line"><span class="regexp">访问子组件：this.$refs.childrenCompA</span></span><br></pre></td></tr></table></figure><hr><h2 id="6、-Vuex"><a href="#6、-Vuex" class="headerlink" title="#6、 Vuex"></a><a href="http://hall.idocore.com/views/vue/2018/121501.html#_6、-vuex" target="_blank" rel="noopener">#</a>6、 Vuex</h2><p>在做中大型的单页应用的时候，例如需要多人协作开发，全局维护登录状态等，我们可以选择vuex来进行状态管理。</p><blockquote><p><code>state</code>里面是存储在vuex里的数据，通过在根实例中注册 <code>store</code> 选项，该 <code>store</code> 实例会注入到根组件下的所有子组件中，且子组件能通过 <code>this.$store</code> 访问到。</p></blockquote><p>当需要获取多个数据时，可以通过下面这种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">computed:&#123;</span><br><span class="line">    ...mapState(<span class="string">'commissionSetting'</span>, [</span><br><span class="line">      <span class="string">'listData'</span></span><br><span class="line">    ])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>不是所有的状态都适合放在vuex里面，有些状态只属于单个组件，所以还是要视情况来定。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; mutations` 更改 `Vuex` 的 `store` 中的状态的唯一方法是提交 `mutation</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  updateListData(state, payload)&#123;</span><br><span class="line">    state.listData = payload</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能直接调用<code>updateListData</code>，需要以相应的<code>type</code> 调用 <code>store.commit</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">'updateListData'</span>, data)</span><br></pre></td></tr></table></figure><blockquote><p>actions 提交的是 mutation，而不是直接变更状态。 Action 可以包含任意异步操作。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> getListAction(&#123;commit&#125;, params)&#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> getList(params)</span><br><span class="line">    <span class="keyword">const</span> &#123;code, message, data&#125; = result</span><br><span class="line">    <span class="keyword">if</span>(code === SUCCESS &amp;&amp; data)&#123;</span><br><span class="line">      <span class="comment">// 提交更改数据</span></span><br><span class="line">      commit(<span class="string">'updateListData'</span>, data.rows)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      vueInit.$Message.error(&#123;</span><br><span class="line">        content: message || <span class="string">'请您稍后再试~'</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p><p>应用层级的状态应该集中到单个 <code>store</code> 对象中。 提交 <code>mutation</code> 是更改状态的唯一方法，并且这个过程是同步的。 异步逻辑都应该封装到 <code>action</code> 里面。</p><p>只要你遵守以上规则，如何组织代码随你便。如果你的 <code>store</code>文件太大，只需将 <code>action、mutation</code> 和 <code>getter</code> 分割到单独的文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue组件的通信总结&quot;&gt;&lt;a href=&quot;#Vue组件的通信总结&quot; class=&quot;headerlink&quot; title=&quot;Vue组件的通信总结&quot;&gt;&lt;/a&gt;Vue组件的通信总结&lt;/h1&gt;&lt;h2 id=&quot;1、props-emit&quot;&gt;&lt;a href=&quot;#1、props-e
      
    
    </summary>
    
    
      <category term="-vue" scheme="https://shenxiaobu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>关于a标签target——blank使用rel=noopener</title>
    <link href="https://shenxiaobu.github.io/2020/04/05/%E5%85%B3%E4%BA%8Ea%E6%A0%87%E7%AD%BEtarget%E2%80%94%E2%80%94blank%E4%BD%BF%E7%94%A8rel-noopener/"/>
    <id>https://shenxiaobu.github.io/2020/04/05/关于a标签target——blank使用rel-noopener/</id>
    <published>2020-04-04T17:24:32.000Z</published>
    <updated>2020-04-04T17:26:53.577Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、为什么要使用rel-’noopener’？"><a href="#一、为什么要使用rel-’noopener’？" class="headerlink" title="一、为什么要使用rel=’noopener’？"></a>一、为什么要使用rel=’noopener’？</h3><p>先举个栗子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"b.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>da<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.opener.location.href =<span class="string">"http://google.com"</span></span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中在a.html中有个超链接，点击后打开新的tab页，神奇的发现原tab页已经变成了谷歌页面。原因是使用<code>target=_blank</code>打开新的窗口时，赋予了新的窗口一些权限可以操作原tab页，其中<code>window.location</code>就是一个。不使用 <code>rel=noopener</code>就是让用户暴露在钓鱼攻击上。</p><p><img src="/2020/04/05/关于a标签target——blank使用rel-noopener/image-20200405012544513.png" alt="image-20200405012544513"></p><p>window.opener</p><h3 id="二、使用rel-noopener"><a href="#二、使用rel-noopener" class="headerlink" title="二、使用rel=noopener"></a>二、使用rel=noopener</h3><p>为了防止<code>window.opener</code>被滥用，在使用<code>targrt=_blank</code>时需要加上<code>rel=noopener</code><br> <code>[</code>](<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>)</p><h3 id="三、rel-norefferrer"><a href="#三、rel-norefferrer" class="headerlink" title="三、rel=norefferrer"></a>三、rel=norefferrer</h3><p><code>rel=noopener</code>支持chrome49和opera36，不支持火狐，为了兼容需要加上<code>rel=noreferrer</code><br> <code>[</code>](<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>)</p><h3 id="四、eslint提示"><a href="#四、eslint提示" class="headerlink" title="四、eslint提示"></a>四、eslint提示</h3><p><img src="/2020/04/05/关于a标签target——blank使用rel-noopener/image-20200405012621821.png" alt="image-20200405012621821"></p><p>eslint提示</p><p>eslint提示后根据文档实际尝试了一下，之前忽略的小问题居然还有这么大安全问题，网络安全不可小觑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、为什么要使用rel-’noopener’？&quot;&gt;&lt;a href=&quot;#一、为什么要使用rel-’noopener’？&quot; class=&quot;headerlink&quot; title=&quot;一、为什么要使用rel=’noopener’？&quot;&gt;&lt;/a&gt;一、为什么要使用rel=’noop
      
    
    </summary>
    
    
      <category term="-vue" scheme="https://shenxiaobu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-admin-template学习及升级改造</title>
    <link href="https://shenxiaobu.github.io/2020/04/04/vue-admin-template%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0/"/>
    <id>https://shenxiaobu.github.io/2020/04/04/vue-admin-template学习及升级改造/</id>
    <published>2020-04-04T12:05:09.000Z</published>
    <updated>2020-04-07T15:36:00.499Z</updated>
    
    <content type="html"><![CDATA[<h4 id="vue-admin-template学习及升级改造"><a href="#vue-admin-template学习及升级改造" class="headerlink" title="vue-admin-template学习及升级改造"></a>vue-admin-template学习及升级改造</h4><p><a href="https://panjiachen.github.io/vue-element-admin-site/zh/" target="_blank" rel="noopener">vue-element-admin官网</a></p><p>下模板地址 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> clone the project</span><br><span class="line">git clone https://github.com/PanJiaChen/vue-admin-template.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> enter the project directory</span><br><span class="line">cd vue-admin-template</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> install dependency</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> develop</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>项目目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">├── build                      <span class="comment"># 构建相关</span></span><br><span class="line">├── mock                       <span class="comment"># 项目mock 模拟数据</span></span><br><span class="line">├── plop-templates             <span class="comment"># 基本模板</span></span><br><span class="line">├── public                     <span class="comment"># 静态资源</span></span><br><span class="line">│   │── favicon.ico            <span class="comment"># favicon图标</span></span><br><span class="line">│   └── index.html             <span class="comment"># html模板</span></span><br><span class="line">├── src                        <span class="comment"># 源代码</span></span><br><span class="line">│   ├── api                    <span class="comment"># 所有请求</span></span><br><span class="line">│   ├── assets                 <span class="comment"># 主题 字体等静态资源</span></span><br><span class="line">│   ├── components             <span class="comment"># 全局公用组件</span></span><br><span class="line">│   ├── directive              <span class="comment"># 全局指令</span></span><br><span class="line">│   ├── filters                <span class="comment"># 全局 filter</span></span><br><span class="line">│   ├── icons                  <span class="comment"># 项目所有 svg icons</span></span><br><span class="line">│   ├── lang                   <span class="comment"># 国际化 language</span></span><br><span class="line">│   ├── layout                 <span class="comment"># 全局 layout</span></span><br><span class="line">│   ├── router                 <span class="comment"># 路由</span></span><br><span class="line">│   ├── store                  <span class="comment"># 全局 store管理</span></span><br><span class="line">│   ├── styles                 <span class="comment"># 全局样式</span></span><br><span class="line">│   ├── utils                  <span class="comment"># 全局公用方法</span></span><br><span class="line">│   ├── vendor                 <span class="comment"># 公用vendor</span></span><br><span class="line">│   ├── views                  <span class="comment"># views 所有页面</span></span><br><span class="line">│   ├── App.vue                <span class="comment"># 入口页面</span></span><br><span class="line">│   ├── main.js                <span class="comment"># 入口文件 加载组件 初始化等</span></span><br><span class="line">│   └── permission.js          <span class="comment"># 权限管理</span></span><br><span class="line">├── tests                      <span class="comment"># 测试</span></span><br><span class="line">├── .env.xxx                   <span class="comment"># 环境变量配置</span></span><br><span class="line">├── .eslintrc.js               <span class="comment"># eslint 配置项</span></span><br><span class="line">├── .babelrc                   <span class="comment"># babel-loader 配置</span></span><br><span class="line">├── .travis.yml                <span class="comment"># 自动化CI配置</span></span><br><span class="line">├── vue.config.js              <span class="comment"># vue-cli 配置</span></span><br><span class="line">├── postcss.config.js          <span class="comment"># postcss 配置</span></span><br><span class="line">└── package.json               <span class="comment"># package.json</span></span><br></pre></td></tr></table></figure><p>运行项目第一个界面是登录界面，登录代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">handleLogin() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs.loginForm.validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">          <span class="keyword">this</span>.loading = <span class="literal">true</span>;</span><br><span class="line">          <span class="comment">//调用user模块红的login</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"点击登陆按钮"</span>)</span><br><span class="line">          <span class="keyword">this</span>.$store.dispatch(<span class="string">'user/login'</span>, <span class="keyword">this</span>.loginForm).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"登录成功"</span>);</span><br><span class="line">            <span class="keyword">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="keyword">this</span>.redirect || <span class="string">'/'</span> &#125;);</span><br><span class="line">            <span class="keyword">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">          &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'error submit!!'</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>this.$store.dispatch(‘user/login’, this.loginForm)  点击过登录按钮后，调用了$store里的一个方法，名叫login</p><p>下面来看看$store里的这个login方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; login, logout, getInfo,self&#125; <span class="keyword">from</span> <span class="string">'@/api/user'</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken, setToken, removeToken &#125; <span class="keyword">from</span> <span class="string">'@/utils/auth'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// user login</span></span><br><span class="line">  login(&#123; commit &#125;, userInfo) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = userInfo;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"vuex中的请求"</span>)</span><br><span class="line">      login(&#123; <span class="attr">username</span>: username.trim(), <span class="attr">password</span>: password &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'vuex中'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">        <span class="keyword">const</span> &#123; data &#125; = response;</span><br><span class="line">        commit(<span class="string">'SET_TOKEN'</span>, data.token);<span class="comment">//存在vueX中</span></span><br><span class="line">        setToken(data.token);<span class="comment">//存在cookie中</span></span><br><span class="line">        resolve();</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">        reject(error);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>两个login?  熟悉vuex的话应该知道，第一个login是$store中的方法，第二个login方法是，api里的login方法，用来调用接口的</p><p>再来看看api中的login方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">'/user/login'</span>,</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是api中的login方法，它调用了request.js，request.js是封装了axios，是用来请求后台接口的，如果这个接口请求成功了，就回到了第一步中的.then()方法中</p><p>request.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123; MessageBox, Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">'@/utils/auth'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.VUE_APP_BASE_API, <span class="comment">// url = base url + request url</span></span><br><span class="line">  <span class="comment">// withCredentials: true, // send cookies when cross-domain requests</span></span><br><span class="line">  timeout: <span class="number">5000</span> <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// request interceptor</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// do something before request is sent</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (store.getters.token) &#123;</span><br><span class="line">      <span class="comment">// let each request carry token</span></span><br><span class="line">      <span class="comment">// ['X-Token'] is a custom headers key</span></span><br><span class="line">      <span class="comment">// please modify it according to the actual situation</span></span><br><span class="line">      config.headers[<span class="string">'X-Token'</span>] = getToken()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// do something with request error</span></span><br><span class="line">    <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// response interceptor</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * If you want to get http information such as headers or status</span></span><br><span class="line"><span class="comment">   * Please return  response =&gt; response</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Determine the request status by custom code</span></span><br><span class="line"><span class="comment">   * Here is just an example</span></span><br><span class="line"><span class="comment">   * You can also judge the status by HTTP Status Code</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.data</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if the custom code is not 20000, it is judged as an error.</span></span><br><span class="line">    <span class="keyword">if</span> (res.code !== <span class="number">20000</span>) &#123;</span><br><span class="line">      Message(&#123;</span><br><span class="line">        message: res.message || <span class="string">'Error'</span>,</span><br><span class="line">        type: <span class="string">'error'</span>,</span><br><span class="line">        duration: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;</span></span><br><span class="line">      <span class="keyword">if</span> (res.code === <span class="number">50008</span> || res.code === <span class="number">50012</span> || res.code === <span class="number">50014</span>) &#123;</span><br><span class="line">        <span class="comment">// 重新登录</span></span><br><span class="line">        MessageBox.confirm(<span class="string">'You have been logged out, you can cancel to stay on this page, or log in again'</span>, <span class="string">'Confirm logout'</span>, &#123;</span><br><span class="line">          confirmButtonText: <span class="string">'Re-Login'</span>,</span><br><span class="line">          cancelButtonText: <span class="string">'Cancel'</span>,</span><br><span class="line">          type: <span class="string">'warning'</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          store.dispatch(<span class="string">'user/resetToken'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            location.reload()</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(res.message || <span class="string">'Error'</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err'</span> + error) <span class="comment">// for debug</span></span><br><span class="line">    Message(&#123;</span><br><span class="line">      message: error.message,</span><br><span class="line">      type: <span class="string">'error'</span>,</span><br><span class="line">      duration: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>请求拦截和响应拦截就不多说了。</p><p>讲下permission </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">'nprogress'</span> <span class="comment">// progress bar  进度条插件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'nprogress/nprogress.css'</span> <span class="comment">// progress bar style</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">'@/utils/auth'</span> <span class="comment">// get token from cookie</span></span><br><span class="line"><span class="keyword">import</span> getPageTitle <span class="keyword">from</span> <span class="string">'@/utils/get-page-title'</span>    <span class="comment">//页面标题</span></span><br><span class="line"></span><br><span class="line">NProgress.configure(&#123; <span class="attr">showSpinner</span>: <span class="literal">false</span> &#125;) <span class="comment">// NProgress Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">'/login'</span>] <span class="comment">// no redirect whitelist 不需要token白名单</span></span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="keyword">async</span>(to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// start progress bar</span></span><br><span class="line">  NProgress.start()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set page title</span></span><br><span class="line">  <span class="built_in">document</span>.title = getPageTitle(to.meta.title)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// determine whether the user has logged in</span></span><br><span class="line">  <span class="keyword">const</span> hasToken = getToken()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasToken) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">      <span class="comment">// if is logged in, redirect to the home page 如果有token访问登录界面跳到根路径</span></span><br><span class="line">      next(&#123; <span class="attr">path</span>: <span class="string">'/'</span> &#125;)</span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> hasGetUserInfo = store.getters.name</span><br><span class="line">      <span class="keyword">if</span> (hasGetUserInfo) &#123;</span><br><span class="line">          <span class="comment">//如果有token且有用户信息直接进去</span></span><br><span class="line">        next()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//有token 没用户信息  去请求获取用户信息，再进去页面</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// get user info</span></span><br><span class="line">          <span class="keyword">await</span> store.dispatch(<span class="string">'user/getInfo'</span>)</span><br><span class="line"></span><br><span class="line">          next()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="comment">// remove token and go to login page to re-login</span></span><br><span class="line">           <span class="comment">//请求用户信息失败跳到登录界面并记录当前失败界面</span></span><br><span class="line">          <span class="keyword">await</span> store.dispatch(<span class="string">'user/resetToken'</span>)</span><br><span class="line">          Message.error(error || <span class="string">'Has Error'</span>)</span><br><span class="line">          next(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">          NProgress.done()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* has no token 没有token 查看是否在白名单 是的话放行 否则去登录也并记录访问页面*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (whiteList.indexOf(to.path) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="comment">// in the free login whitelist, go directly</span></span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// other pages that do not have permission to access are redirected to the login page.</span></span><br><span class="line">      next(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// finish progress bar</span></span><br><span class="line">  NProgress.done()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>有token：再看看是不是去登录页的，登录页肯定不能拦截的，如果是登录页就直接放行。如果不是登录页，就要看看本地有没有用户信息，看看cookie中有没有用户信息（不一定是token，也可能是localstorage）。如果有用户信息，放行。如果没有用户信息，就调用接口去获取登录信息，然后后面还有一点代码，涉及到了动态添加路由（这里先说到这，后面具体说动态添加权限路由的事）。获取到用户信息后放行。如果在获取用户信息的过程中报错，则回到登录页</p><p>无token：先看看用户要进入的页面是不是在白名单内，一般登录、注册、忘记密码都是在白名单内的，这些页面，在无token的情况下也是直接放行。如果不在白名单内，滚回登录页。</p><p>以上就是element-admin的登录逻辑了。</p><p>接下来讲 路由和侧边栏</p><h5 id="路由和侧边栏"><a href="#路由和侧边栏" class="headerlink" title="路由和侧边栏"></a>路由和侧边栏</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当设置 true 的时候该路由不会在侧边栏出现 如401，login等页面，或者如一些编辑页面/edit/1</span></span><br><span class="line">hidden: <span class="literal">true</span> <span class="comment">// (默认 false)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当设置 noRedirect 的时候该路由在面包屑导航中不可被点击</span></span><br><span class="line">redirect: <span class="string">'noRedirect'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当你一个路由下面的 children 声明的路由大于1个时，自动会变成嵌套的模式--如组件页面</span></span><br><span class="line"><span class="comment">//只有一个时，会将那个子路由当做根路由显示在侧边栏--如引导页面</span></span><br><span class="line"><span class="comment">//若你想不管路由下面的 children 声明的个数都显示你的根路由</span></span><br><span class="line"><span class="comment">//你可以设置 alwaysShow: true，这样它就会忽略之前定义的规则，一直显示根路由</span></span><br><span class="line">alwaysShow: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">name: <span class="string">'router-name'</span> <span class="comment">//设定路由的名字，一定要填写不然使用&lt;keep-alive&gt;时会出现各种问题</span></span><br><span class="line">meta: &#123;</span><br><span class="line">  roles: [<span class="string">'admin'</span>, <span class="string">'editor'</span>] <span class="comment">//设置该路由进入的权限，支持多个权限叠加</span></span><br><span class="line">  title: <span class="string">'title'</span> <span class="comment">//设置该路由在侧边栏和面包屑中展示的名字</span></span><br><span class="line">  icon: <span class="string">'svg-name'</span> <span class="comment">//设置该路由的图标</span></span><br><span class="line">  noCache: <span class="literal">true</span> <span class="comment">//如果设置为true，则不会被 &lt;keep-alive&gt; 缓存(默认 false)</span></span><br><span class="line">  breadcrumb: <span class="literal">false</span> <span class="comment">// 如果设置为false，则不会在breadcrumb面包屑中显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>侧边栏使用的是element的el-menu，一些配置可以看文档<a href="https://element.eleme.cn/#/zh-CN/component/menu" target="_blank" rel="noopener">element-navmenu</a></p><p>点击登录就会进去有layout布局的页面</p><p><img src="/2020/04/04/vue-admin-template学习及升级改造/image-20200404210454238.png" alt="image-20200404210454238"></p><p>页面布局目录</p><blockquote><p>layout</p><blockquote><p>components</p><blockquote><p>Sidebar</p><blockquote><p>FixOSBug.js  响应式布局适应手机端？</p><p>index.vue   侧边栏菜单 </p><p>item.vue   配置菜单icon和内容</p><p>Link.vue   将菜单包起来实现点击跳转</p><p>Logo.vue   顶部logo</p></blockquote><p>AppMain.vue    主要窗口容器</p><p>index.js    导出三个部分容器</p><p>Navbar.vue    面包屑容器</p></blockquote><p>mixin</p><p>index.vue    将页面分为侧边栏   面包屑导航栏   主要展示窗口  三部分</p></blockquote></blockquote><h2 id="点击侧边栏-刷新当前路由"><a href="#点击侧边栏-刷新当前路由" class="headerlink" title="点击侧边栏 刷新当前路由"></a>点击侧边栏 刷新当前路由</h2><p>点击相同菜单实现路由刷新</p><p>第一个想到的是用query，添加点击事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//SidebarItem.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;!item.hidden&quot;&gt;</span><br><span class="line">    &lt;template v-if=&quot;hasOneShowingChild(item.children,item) &amp;&amp; (!onlyOneChild.children||onlyOneChild.noShowingChildren)&amp;&amp;!item.alwaysShow&quot;&gt;</span><br><span class="line">      &lt;app-link v-if=&quot;onlyOneChild.meta&quot; :to=&quot;resolvePath(onlyOneChild.path)&quot;&gt;</span><br><span class="line">        &lt;el-menu-item :index=&quot;resolvePath(onlyOneChild.path)&quot; :class=&quot;&#123;&apos;submenu-title-noDropdown&apos;:!isNest&#125;&quot;  @click=&quot;clickLink(onlyOneChild.path)&quot;&gt;</span><br><span class="line">          &lt;item :icon=&quot;onlyOneChild.meta.icon||(item.meta&amp;&amp;item.meta.icon)&quot; :title=&quot;onlyOneChild.meta.title&quot; /&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">      &lt;/app-link&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-submenu v-else ref=&quot;subMenu&quot; :index=&quot;resolvePath(item.path)&quot; popper-append-to-body&gt;</span><br><span class="line">      &lt;template slot=&quot;title&quot;&gt;</span><br><span class="line">        &lt;item v-if=&quot;item.meta&quot; :icon=&quot;item.meta &amp;&amp; item.meta.icon&quot; :title=&quot;item.meta.title&quot; /&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;sidebar-item</span><br><span class="line">        v-for=&quot;child in item.children&quot;</span><br><span class="line">        :key=&quot;child.path&quot;</span><br><span class="line">        :is-nest=&quot;true&quot;</span><br><span class="line">        :item=&quot;child&quot;</span><br><span class="line">        :base-path=&quot;resolvePath(child.path)&quot;</span><br><span class="line">        class=&quot;nest-menu&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/el-submenu&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    ...</span><br><span class="line">    export default&#123;</span><br><span class="line">          ....</span><br><span class="line">        methods:&#123;</span><br><span class="line"> clickLink(path) &#123;</span><br><span class="line">              this.$router.push(&#123;</span><br><span class="line">                path,</span><br><span class="line">                query: &#123;</span><br><span class="line">                  t: +new Date() // 保证每次点击路由的query项都是不一样的，确保会重新刷新view</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这样子的话是有进度条改变，但是怎么知道页面有没有刷新呢？在form页面created的时候打印数据</p><p>看下有没有重新打印数据即可知道有没有刷新</p><p>测试这种方式是不可行的</p><p>感觉就是因为 和 link那个冲突了吧  于是干脆 在link的to那里  添加   ？t = new Date（）</p><p>结果发现还是不可行  分析应该是日期渲染的时候已经是固定了，不会再变了，因此点击时还是旧的时间</p><p>和没有添加是一样的</p><p>最后干脆用页面重定向吧 先固定跳转到一个页面再根据传过来的参数跳转到响应界面</p><p>在views上添加一个文件夹 redirect  地下创建一个index.vue</p><p>路由上添加页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js  路由</span></span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/redirect'</span>,</span><br><span class="line">    name: <span class="string">'redirect'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../views/redirect/index'</span>], resolve)</span><br><span class="line">    hidden: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再到link.vue上做响应处理 跳转到 redirect界面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//link.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- eslint-disable vue/require-component-is --&gt;</span><br><span class="line">  &lt;component v-bind=&quot;linkProps(to)&quot;&gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;/component&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; isExternal &#125; from &apos;@/utils/validate&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    to: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    linkProps(url) &#123;</span><br><span class="line">      if (isExternal(url)) &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          is: &apos;a&apos;,</span><br><span class="line">          href: url,</span><br><span class="line">          target: &apos;_blank&apos;</span><br><span class="line">          rel: &apos;noopener&apos; </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return &#123;</span><br><span class="line">        is: &apos;router-link&apos;,</span><br><span class="line">        to: &#123; name: &apos;redirect&apos;, params: &#123; path: url &#125;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上面发现了个noopener   这个听说是防止进入钓鱼网站的</p><p>上面就实现了点击跳转到重定向页面。接下来重定向页面做处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--redirect/index.vue--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;direct&quot;&gt;重定向&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    const &#123; params &#125; = this.$route</span><br><span class="line">    const &#123; path &#125; = params</span><br><span class="line">    console.log(path)</span><br><span class="line">    // window.location.replace(path || &apos;/&apos;)   这种会导致整个页面刷新 侧边栏也刷新</span><br><span class="line">    this.$router.replace(path || &apos;/&apos;)  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>官网是使用 beforeCreate()    测试并不可行 会导致redirect页面没出来页面就刷到别的页面 导致浏览器</p><p>地址是 redirect  然而页面确实是点击的页面  但是再点击相同菜单时 浏览器就会报错。</p><p><img src="/2020/04/04/vue-admin-template学习及升级改造/image-20200407233532833.png" alt="image-20200407233532833"></p><p>一直很详细官方文档的，一开始没看浏览器报错  以为为什么页面和浏览器的地址不同步。百度了一小时</p><p>都有，后面改为  created 后问题解决  都会同步，只不过肉眼看得到 浏览器是先跳到 redirect页面再跳转</p><p>而已。不过也能接受。  由于刚刚的redirect 页面是没有布置在layout的。导致页面侧边栏页面也会重新</p><p>刷新，因此将redirect 页面放到layout里，就可以实现layout不刷新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js  路由配置</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/redirect'</span>,</span><br><span class="line">    redirect: <span class="string">'/redirect/index'</span>,</span><br><span class="line">    hidden: <span class="literal">true</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/redirect/index'</span>,</span><br><span class="line">        name: <span class="string">'redirect'</span>,</span><br><span class="line">        params: &#123;</span><br><span class="line">          path: <span class="string">''</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../views/redirect/index'</span>], resolve)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>但是还是有个问题，重复点击相同菜单时确实可以刷新，但是点击浏览器的后退还是在当前页面，所以</p><p>得解决点击相同页面时采用replace的方式。</p><h6 id="解决思路第一个："><a href="#解决思路第一个：" class="headerlink" title="解决思路第一个："></a>解决思路第一个：</h6><p>因为是才用router-link的方式跳转的，所以在该方式下控制  replace属性</p><p>但是由于 渲染菜单的时候就会渲染 replace属性，导致并不知道点击的时候是不是就是点击同个菜单</p><p>于是采用计算属性，但是还是不行。。。后面放弃在这里修改</p><p>思路一  out</p><h6 id="思路二-："><a href="#思路二-：" class="headerlink" title="思路二 ："></a>思路二 ：</h6><p>路由前置守卫那里判断，如果跳转的路由的 params的path和当前路由的fullpath一致，则采用replace的</p><p>方式进行跳转。于是查阅了路由前置守卫的文档，发现next可以这么用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</span><br><span class="line"></span><br><span class="line">next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。</span><br><span class="line"></span><br><span class="line">next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</span><br><span class="line"></span><br><span class="line">next(&apos;/&apos;) 或者 next(&#123; path: &apos;/&apos; &#125;): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: &apos;home&apos; 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项。</span><br><span class="line"></span><br><span class="line">next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError() 注册过的回调。</span><br></pre></td></tr></table></figure><p><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener">全局前置守卫</a></p><p>于是在permission文件里添加如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否是相同路由</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgeReplace</span>(<span class="params">to, from</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (to.params.path === <span class="keyword">from</span>.fullPath) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">judgeReplace(to, <span class="keyword">from</span>) ? next(&#123;<span class="attr">replace</span>: <span class="literal">true</span>&#125;) : next()</span><br></pre></td></tr></table></figure><p>但是发现并没有用，感觉又被官网骗了   next({replace: true}) 这个到底是我用的方法错了 还是 咋地？</p><p>后面又改变思路</p><h6 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h6><p>页面跳转方式不采用component 设置标签为 router-link的方式了</p><p>改用@click 跳转  因为点击时是可以知道当前路由和要去的路由的</p><p>于是修改 link.vue 的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- eslint-disable vue/require-component-is --&gt;</span><br><span class="line">  &lt;!-- &lt;component v-bind=&quot;linkProps(to)&quot; &gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;/component&gt; --&gt;</span><br><span class="line">  &lt;div @click=&quot;goPath(to)&quot;&gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; isExternal &#125; from &apos;@/utils/validate&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    to: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // linkProps(url) &#123;</span><br><span class="line">    //   if (isExternal(url)) &#123;</span><br><span class="line">    //     return &#123;</span><br><span class="line">    //       is: &apos;a&apos;,</span><br><span class="line">    //       href: url,</span><br><span class="line">    //       target: &apos;_blank&apos;,</span><br><span class="line">    //       rel: &apos;noopener&apos;</span><br><span class="line">    //     &#125;</span><br><span class="line">    //   &#125;</span><br><span class="line">    //   return &#123;</span><br><span class="line">    //     is: &apos;router-link&apos;,</span><br><span class="line">    //     to: &#123; name: &apos;redirect&apos;, params: &#123; path: url &#125;&#125;</span><br><span class="line">    //   &#125;</span><br><span class="line">    // &#125;,</span><br><span class="line">    goPath(url) &#123;</span><br><span class="line">      if (isExternal(url)) &#123;</span><br><span class="line">        return window.open(url)</span><br><span class="line">      &#125;</span><br><span class="line">      if (url === this.$route.fullPath) &#123;</span><br><span class="line">        this.$router.replace(&#123; name: &apos;redirect&apos;, params: &#123; path: url &#125;&#125;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.$router.push(&#123; name: &apos;redirect&apos;, params: &#123; path: url &#125;&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>于是解决了，点击相同路由得后退好几趟得问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;vue-admin-template学习及升级改造&quot;&gt;&lt;a href=&quot;#vue-admin-template学习及升级改造&quot; class=&quot;headerlink&quot; title=&quot;vue-admin-template学习及升级改造&quot;&gt;&lt;/a&gt;vue-admin-t
      
    
    </summary>
    
    
      <category term="-vue" scheme="https://shenxiaobu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>uniapp总结点东西</title>
    <link href="https://shenxiaobu.github.io/2020/03/31/uniapp%E6%80%BB%E7%BB%93%E7%82%B9%E4%B8%9C%E8%A5%BF/"/>
    <id>https://shenxiaobu.github.io/2020/03/31/uniapp总结点东西/</id>
    <published>2020-03-31T08:16:45.000Z</published>
    <updated>2020-04-23T15:31:51.313Z</updated>
    
    <content type="html"><![CDATA[<h4 id="uniapp"><a href="#uniapp" class="headerlink" title="uniapp"></a>uniapp</h4><p><a href="https://uniapp.dcloud.io/quickstart" target="_blank" rel="noopener">uniapp快速上手</a></p><p>快速上手啥的就不多讲了，查阅官方文档 更详细</p><ol><li><p>还是搞个全局样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*每个页面公共css */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这个很重要，没有这个子页面的 height 100% 都无效*/</span></span><br><span class="line"><span class="selector-tag">uni-page-body</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* flex相关开始 */</span></span><br><span class="line"><span class="selector-class">.flex</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: flex-start;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-center</span> &#123;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-between</span> &#123;</span><br><span class="line"><span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-around</span> &#123;</span><br><span class="line"><span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-end</span> &#123;</span><br><span class="line"><span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-col</span> &#123;</span><br><span class="line"><span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-wrap</span> &#123;</span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-grow</span> &#123;</span><br><span class="line"><span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-shrink</span> &#123;</span><br><span class="line"><span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* flex相关结束 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 向右的箭头开始 */</span></span><br><span class="line"><span class="selector-class">.jiantou-right</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&amp;::after&#123;</span><br><span class="line">content: '';</span><br><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="selector-tag">width</span>: 10<span class="selector-tag">rpx</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 10<span class="selector-tag">rpx</span>;</span><br><span class="line"><span class="selector-tag">right</span>: 10<span class="selector-tag">rpx</span>;</span><br><span class="line"><span class="selector-tag">top</span>: 50%;</span><br><span class="line"><span class="selector-tag">margin-top</span>: <span class="selector-tag">-5rpx</span>;</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(<span class="selector-tag">-45deg</span>);</span><br><span class="line"><span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>  <span class="selector-id">#909090</span>;</span><br><span class="line"><span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>  <span class="selector-id">#909090</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 向右的箭头结束 */</span></span><br><span class="line"><span class="comment">/* 文本隐藏开始 */</span></span><br><span class="line"><span class="selector-class">.eli</span>&#123;</span><br><span class="line"><span class="attribute">overflow</span>:hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.eli3</span>&#123;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line"><span class="attribute">display</span>:-webkit-box; </span><br><span class="line"><span class="attribute">-webkit-box-orient</span>:vertical;</span><br><span class="line"><span class="attribute">-webkit-line-clamp</span>:<span class="number">3</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.eli4</span>&#123;</span><br><span class="line"><span class="attribute">overflow</span>:hidden; </span><br><span class="line"><span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line"><span class="attribute">display</span>:-webkit-box; </span><br><span class="line"><span class="attribute">-webkit-box-orient</span>:vertical;</span><br><span class="line"><span class="attribute">-webkit-line-clamp</span>:<span class="number">4</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 文本隐藏结束 */</span> </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.uni-input-placeholder</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#B4B4B4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概举个常用的列出来</p></li><li><p>封装uniapp的请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//common/config.js</span></span><br><span class="line"><span class="keyword">let</span> url_config = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">'development'</span>)&#123;</span><br><span class="line">    <span class="comment">// 开发环境</span></span><br><span class="line">    url_config = <span class="string">'/api'</span>    <span class="comment">//写成api是因为遇到了 跨域问题</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 生产环境</span></span><br><span class="line">    url_config = <span class="string">'http://XXXXX'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> url_config</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//common/request.js</span></span><br><span class="line"><span class="keyword">import</span> urlConfig <span class="keyword">from</span> <span class="string">'./config.js'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'store'</span></span><br><span class="line"><span class="keyword">const</span> request = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> headers = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">request.globalRequest = <span class="function">(<span class="params">url, method = <span class="string">'GET'</span>, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> accountId = store.state.userInfo.id</span><br><span class="line"><span class="keyword">let</span> token = store.state.userInfo.token</span><br><span class="line"><span class="keyword">if</span>(token &amp;&amp; accountId)&#123;</span><br><span class="line">headers[<span class="string">'token'</span>] = token</span><br><span class="line">headers[<span class="string">'accountId'</span>] = accountId</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">if</span> (method.toLowerCase() == <span class="string">'post'</span>) &#123;</span><br><span class="line">        headers[<span class="string">'content-type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (store.state.mustShowLoading) &#123;</span><br><span class="line">uni.showLoading(&#123;</span><br><span class="line">title: store.state.tips,</span><br><span class="line">mask: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line">store.state.loadingCount++</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'请求了'</span> + store.state.loadingCount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(headers)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">uni.request(&#123;</span><br><span class="line">    url: urlConfig + url,</span><br><span class="line">    method,</span><br><span class="line">    data: data,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    header: headers,</span><br><span class="line">success: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> res = data.data</span><br><span class="line"><span class="keyword">if</span>((res.code !== <span class="number">1</span> || !res.success) &amp;&amp; store.state.mustShowError)&#123;</span><br><span class="line">uni.showModal(&#123;</span><br><span class="line">showCancel: <span class="literal">false</span>,</span><br><span class="line">title: res.info,</span><br><span class="line">success(btnInfo) &#123;</span><br><span class="line"><span class="keyword">if</span>(btnInfo.confirm &amp;&amp; (res.status == <span class="string">'666'</span> || res.status == <span class="string">'555'</span> ))&#123;</span><br><span class="line">uni.redirectTo(&#123;</span><br><span class="line">url: <span class="string">'/pages/login/login/login'</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">reject(res)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">resolve(res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">error: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(store.state.mustShowError)&#123;</span><br><span class="line">uni.showModal(&#123;</span><br><span class="line">showCancel: <span class="literal">false</span>,</span><br><span class="line">title: data</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">reject(data)</span><br><span class="line">&#125;,</span><br><span class="line">complete: <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (store.state.loadingCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  store.state.loadingCount--</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'响应后还有'</span> + store.state.loadingCount)</span><br><span class="line">  <span class="keyword">if</span> (store.state.loadingCount == <span class="number">0</span>) &#123;</span><br><span class="line">store.state.tips = <span class="string">'正在加载'</span></span><br><span class="line">uni.hideLoading()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.state.mustShowError = <span class="literal">true</span></span><br><span class="line">store.state.mustShowLoading = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'common/request.js'</span></span><br><span class="line"><span class="keyword">import</span> url <span class="keyword">from</span> <span class="string">'common/config.js'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index.js'</span>;</span><br><span class="line"></span><br><span class="line">Vue.prototype.$store = store  </span><br><span class="line">Vue.prototype.$request = request</span><br><span class="line">Vue.prototype.$url = url</span><br><span class="line">Vue.prototype.$Router = router;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">App.mpType = <span class="string">'app'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    ...App</span><br><span class="line">&#125;)</span><br><span class="line">app.$mount()</span><br></pre></td></tr></table></figure></li></ol>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line">   <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">   <span class="keyword">import</span> &#123;</span><br><span class="line">loginByAccount,</span><br><span class="line">   loginByCode</span><br><span class="line">   &#125; <span class="keyword">from</span> <span class="string">'../api/login.js'</span></span><br><span class="line">   Vue.use(Vuex)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">const</span> sessionStorageState = sessionStorage.getItem(<span class="string">'state'</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span> state</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (sessionStorageState) &#123;</span><br><span class="line">     state = <span class="built_in">JSON</span>.parse(sessionStorageState)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     state = &#123;</span><br><span class="line">       login: <span class="literal">false</span>,</span><br><span class="line">       userInfo: &#123;&#125;, <span class="comment">//用户信息  </span></span><br><span class="line">       time: <span class="number">30</span>,</span><br><span class="line">       tips: <span class="string">'正在加载'</span>, <span class="comment">//请求提示信息</span></span><br><span class="line">       loadingCount: <span class="number">0</span>, <span class="comment">//请求的数量</span></span><br><span class="line">       mustShowLoading: <span class="literal">true</span>, <span class="comment">//是否请求开启 loading</span></span><br><span class="line">       mustShowError: <span class="literal">true</span>, <span class="comment">//请求错误时是否自动报错</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">   state,</span><br><span class="line">   mutations: &#123;</span><br><span class="line">   SET_USERINFO(state, obj) &#123;</span><br><span class="line">   state.userInfo = obj</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   actions: &#123;</span><br><span class="line">   <span class="comment">//账号密码登录</span></span><br><span class="line">   LoginByAccount(&#123;</span><br><span class="line">   commit</span><br><span class="line">   &#125;, userInfo) &#123;</span><br><span class="line">   <span class="keyword">const</span> account = userInfo.account.trim()</span><br><span class="line">   <span class="keyword">const</span> password = userInfo.password</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   loginByAccount(&#123;</span><br><span class="line">   account,</span><br><span class="line">   password</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> data = res.data || <span class="string">''</span></span><br><span class="line">   <span class="comment">// Cookies.set('Token', response.data.token) //登录成功后将token存储在cookie之中</span></span><br><span class="line">   commit(<span class="string">'SET_USERINFO'</span>, data)</span><br><span class="line">   resolve()</span><br><span class="line">   &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">   reject(error)</span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;,</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//验证码登录</span></span><br><span class="line">   LoginByCode(&#123;</span><br><span class="line">   commit</span><br><span class="line">   &#125;, phoneData) &#123;</span><br><span class="line">   <span class="keyword">const</span> phone = phoneData.phone</span><br><span class="line">   <span class="keyword">const</span> code = phoneData.code</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   loginByCode(&#123;</span><br><span class="line">   phone,</span><br><span class="line">   code</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> data = res.data || <span class="string">''</span></span><br><span class="line">   <span class="comment">// Cookies.set('Token', response.data.token) //登录成功后将token存储在cookie之中</span></span><br><span class="line">   commit(<span class="string">'SET_USERINFO'</span>, data)</span><br><span class="line">   resolve()</span><br><span class="line">   &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">   reject(error)</span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>   就这样吧，太久了，懒得写了</p><p>   补充下：移动端不是使用uni-app开发的也可以去uni-app网站寻找组件，非常好用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;uniapp&quot;&gt;&lt;a href=&quot;#uniapp&quot; class=&quot;headerlink&quot; title=&quot;uniapp&quot;&gt;&lt;/a&gt;uniapp&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://uniapp.dcloud.io/quickstart&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="-uniapp" scheme="https://shenxiaobu.github.io/tags/uniapp/"/>
    
  </entry>
  
  <entry>
    <title>使用ssh密钥登录服务器</title>
    <link href="https://shenxiaobu.github.io/2020/03/28/%E4%BD%BF%E7%94%A8ssh%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://shenxiaobu.github.io/2020/03/28/使用ssh密钥登录服务器/</id>
    <published>2020-03-28T13:31:43.000Z</published>
    <updated>2020-03-28T14:13:28.031Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用ssh密钥登录服务器"><a href="#使用ssh密钥登录服务器" class="headerlink" title="使用ssh密钥登录服务器"></a>使用ssh密钥登录服务器</h4><p>为什么突然想用ssh密钥登录服务器？</p><p>因为在vscode的sftp插件配置上需要配服务器地址及密码，所以就感觉密码暴露出来不是非常友好。</p><p>因此想用ssh密钥文件登录服务器</p><p>于是百度各种文章，最终终于ok</p><ol><li><p>使用xshell客户端软件登录服务器</p></li><li><p>进去系统默认就是在 root目录  在该目录下查看是否有 .ssh 目录</p><p> 不能就用ls查看，因为” .ssh “目录都会被隐藏，只是用 ls 指令查看不了必须使用:</p><p>​     ls –all    #查看之后发现不存在.ssh 目录</p></li><li><p>创建 ssh 目录    ssh-keygen –t rsa –b 4096</p><p> #-t 指的是创建的密钥类型有：rsa1（SSH-1） 、rsa（SSH-2） 、 dsa （SSH-2）</p></li></ol><p>​          #-b 指定密钥的长度，对于RSA密钥，最小768，默认2048位，DSA密钥位1024位。</p><p>这里笔者加了-b 参数，指定了长度，也可以不加-b参数，直接使用ssh-keygen -t rsa，ssh-keygen命令的参数后文再介绍。</p><p>执行密钥生成命令，基本上是一路回车既可以了，但是需要注意的是：执行命令的过程中是会提示呢输入密钥的密码的（如下图中红色箭头处，输入两次相同的，即是又一次确认密码），不需要密码直接回车就行。</p><p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328214633681.png" alt="image-20200328214633681"></p><p>密钥生成后会在当前目录下多出两个文件，id_rsa和id_rsa.pub，其中id_rsa是私钥（敲黑板：这个很重要，不能外泄），id_rsa.pub这个是公钥，</p><p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328214933323.png" alt="image-20200328214933323"></p><ol start="4"><li>cd /root/.ssh，执行ls看看目录下是否有authorized_keys文件没有的话则执行以下命令创建：</li></ol><p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328215157716.png" alt="image-20200328215157716"></p><p>执行成功会创建空authorized_keys文件，授予600权限（注意：此处权限必须是600）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328215326478.png" alt="image-20200328215326478"></p><p>如果已经有了authorized_keys文件，这直接执行以下的密钥追加工作。</p><p>将上面生成的公钥id_rsa.pub追加到authorized_keys文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure><p>如下图所示，注意图中红色箭头处，是&gt;&gt;而不是&gt;，双尖括号&gt;&gt;表示像向文件中追加：</p><p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328215650155.png" alt="image-20200328215650155"></p><ol start="5"><li>将密钥下载到本地  sz id_rsa  </li></ol><p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328215932789.png" alt="image-20200328215932789"></p><p>测试是否可用</p><p>测试</p><ol><li><p>打开xshell 链接服务器</p><p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328220039434.png" alt="image-20200328220039434"></p></li></ol><p><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328220230870.png" alt="image-20200328220230870"><br><img src="/2020/03/28/使用ssh密钥登录服务器/image-20200328220418463.png" alt="image-20200328220418463"></p><p>然后就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen可用的参数选项有：</span><br><span class="line"> </span><br><span class="line">     -a trials</span><br><span class="line">             在使用 -T 对 DH-GEX 候选素数进行安全筛选时需要执行的基本测试数量。</span><br><span class="line"> </span><br><span class="line">     -B      显示指定的公钥/私钥文件的 bubblebabble 摘要。</span><br><span class="line"> </span><br><span class="line">     -b bits</span><br><span class="line">             指定密钥长度。对于RSA密钥，最小要求768位，默认是2048位。DSA密钥必须恰好是1024位(FIPS 186-2 标准的要求)。</span><br><span class="line"> </span><br><span class="line">     -C comment</span><br><span class="line">             提供一个新注释</span><br><span class="line"> </span><br><span class="line">     -c      要求修改私钥和公钥文件中的注释。本选项只支持 RSA1 密钥。</span><br><span class="line">             程序将提示输入私钥文件名、密语(如果存在)、新注释。</span><br><span class="line"> </span><br><span class="line">     -D reader</span><br><span class="line">             下载存储在智能卡 reader 里的 RSA 公钥。</span><br><span class="line"> </span><br><span class="line">     -e      读取OpenSSH的私钥或公钥文件，并以 RFC 4716 SSH 公钥文件格式在 stdout 上显示出来。</span><br><span class="line">             该选项能够为多种商业版本的 SSH 输出密钥。</span><br><span class="line"> </span><br><span class="line">     -F hostname</span><br><span class="line">             在 known_hosts 文件中搜索指定的 hostname ，并列出所有的匹配项。</span><br><span class="line">             这个选项主要用于查找散列过的主机名/ip地址，还可以和 -H 选项联用打印找到的公钥的散列值。</span><br><span class="line"> </span><br><span class="line">     -f filename</span><br><span class="line">             指定密钥文件名。</span><br><span class="line"> </span><br><span class="line">     -G output_file</span><br><span class="line">             为 DH-GEX 产生候选素数。这些素数必须在使用之前使用 -T 选项进行安全筛选。</span><br><span class="line"> </span><br><span class="line">     -g      在使用 -r 打印指纹资源记录的时候使用通用的 DNS 格式。</span><br><span class="line"> </span><br><span class="line">     -H      对 known_hosts 文件进行散列计算。这将把文件中的所有主机名/ip地址替换为相应的散列值。</span><br><span class="line">             原来文件的内容将会添加一个&quot;.old&quot;后缀后保存。这些散列值只能被 ssh 和 sshd 使用。</span><br><span class="line">             这个选项不会修改已经经过散列的主机名/ip地址，因此可以在部分公钥已经散列过的文件上安全使用。</span><br><span class="line"> </span><br><span class="line">     -i      读取未加密的SSH-2兼容的私钥/公钥文件，然后在 stdout 显示OpenSSH兼容的私钥/公钥。</span><br><span class="line">             该选项主要用于从多种商业版本的SSH中导入密钥。</span><br><span class="line"> </span><br><span class="line">     -l      显示公钥文件的指纹数据。它也支持 RSA1 的私钥。</span><br><span class="line">             对于RSA和DSA密钥，将会寻找对应的公钥文件，然后显示其指纹数据。</span><br><span class="line"> </span><br><span class="line">     -M memory</span><br><span class="line">             指定在生成 DH-GEXS 候选素数的时候最大内存用量(MB)。</span><br><span class="line"> </span><br><span class="line">     -N new_passphrase</span><br><span class="line">             提供一个新的密语。</span><br><span class="line"> </span><br><span class="line">     -P passphrase</span><br><span class="line">             提供(旧)密语。</span><br><span class="line"> </span><br><span class="line">     -p      要求改变某私钥文件的密语而不重建私钥。程序将提示输入私钥文件名、原来的密语、以及两次输入新密语。</span><br><span class="line"> </span><br><span class="line">     -q      安静模式。用于在 /etc/rc 中创建新密钥的时候。</span><br><span class="line"> </span><br><span class="line">     -R hostname</span><br><span class="line">             从 known_hosts 文件中删除所有属于 hostname 的密钥。</span><br><span class="line">             这个选项主要用于删除经过散列的主机(参见 -H 选项)的密钥。</span><br><span class="line"> </span><br><span class="line">     -r hostname</span><br><span class="line">             打印名为 hostname 的公钥文件的 SSHFP 指纹资源记录。</span><br><span class="line"> </span><br><span class="line">     -S start</span><br><span class="line">             指定在生成 DH-GEX 候选模数时的起始点(16进制)。</span><br><span class="line"> </span><br><span class="line">     -T output_file</span><br><span class="line">             测试 Diffie-Hellman group exchange 候选素数(由 -G 选项生成)的安全性。</span><br><span class="line"> </span><br><span class="line">     -t type</span><br><span class="line">             指定要创建的密钥类型。可以使用：&quot;rsa1&quot;(SSH-1) &quot;rsa&quot;(SSH-2) &quot;dsa&quot;(SSH-2)</span><br><span class="line"> </span><br><span class="line">     -U reader</span><br><span class="line">             把现存的RSA私钥上传到智能卡 reader</span><br><span class="line"> </span><br><span class="line">     -v      详细模式。ssh-keygen 将会输出处理过程的详细调试信息。常用于调试模数的产生过程。</span><br><span class="line">             重复使用多个 -v 选项将会增加信息的详细程度(最大3次)。</span><br><span class="line"> </span><br><span class="line">     -W generator</span><br><span class="line">             指定在为 DH-GEX 测试候选模数时想要使用的 generator</span><br><span class="line"> </span><br><span class="line">     -y      读取OpenSSH专有格式的公钥文件，并将OpenSSH公钥显示在 stdout 上。</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/nahancy/java/article/details/79059135" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用ssh密钥登录服务器&quot;&gt;&lt;a href=&quot;#使用ssh密钥登录服务器&quot; class=&quot;headerlink&quot; title=&quot;使用ssh密钥登录服务器&quot;&gt;&lt;/a&gt;使用ssh密钥登录服务器&lt;/h4&gt;&lt;p&gt;为什么突然想用ssh密钥登录服务器？&lt;/p&gt;
&lt;p&gt;因为在v
      
    
    </summary>
    
    
      <category term="-ssh" scheme="https://shenxiaobu.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>图解ssh原理</title>
    <link href="https://shenxiaobu.github.io/2020/03/28/%E5%9B%BE%E8%A7%A3ssh%E5%8E%9F%E7%90%86/"/>
    <id>https://shenxiaobu.github.io/2020/03/28/图解ssh原理/</id>
    <published>2020-03-28T11:44:54.000Z</published>
    <updated>2020-03-28T11:57:28.145Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图解ssh原理"><a href="#图解ssh原理" class="headerlink" title="图解ssh原理"></a>图解ssh原理</h3><p><img src="/2020/03/28/图解ssh原理/image-20200328194548684.png" alt="image-20200328194548684"></p><h2 id="1-初见SSH"><a href="#1-初见SSH" class="headerlink" title="1. 初见SSH"></a>1. 初见SSH</h2><p>SSH是一种协议标准，其目的是实现<strong>安全远程登录</strong>以及其它<strong>安全网络服务</strong>。</p><blockquote><p>SSH仅仅是一<strong>协议标准</strong>，其具体的实现有很多，既有开源实现的OpenSSH，也有商业实现方案。使用范围最广泛的当然是开源实现OpenSSH。</p></blockquote><h2 id="2-SSH工作原理"><a href="#2-SSH工作原理" class="headerlink" title="2. SSH工作原理"></a>2. SSH工作原理</h2><p>在讨论SSH的原理和使用前，我们需要分析一个问题：<strong>为什么需要SSH？</strong></p><p>从1.1节SSH的定义中可以看出，SSH和telnet、ftp等协议主要的区别在于<strong>安全性</strong>。这就引出下一个问题：<strong>如何实现数据的安全呢？</strong>首先想到的实现方案肯定是对数据进行<strong>加密</strong>。加密的方式主要有两种：</p><ul><li>对称加密（也称为秘钥加密）</li><li>非对称加密（也称公钥加密）</li></ul><p>所谓对称加密，指加密解密使用同一套秘钥。如下图所示：<br>Client:</p><p><img src="/2020/03/28/图解ssh原理/image-20200328194711738.png" alt="image-20200328194711738"></p><p><img src="/2020/03/28/图解ssh原理/image-20200328194800578.png" alt="image-20200328194800578"></p><p>对称加密的加密强度高，很难破解。但是在实际应用过程中不得不面临一个棘手的问题：<strong>如何安全的保存密钥呢？</strong>尤其是考虑到数量庞大的Client端，很难保证密钥不被泄露。一旦一个Client端的密钥被窃据，那么整个系统的安全性也就不复存在。为了解决这个问题，<strong>非对称加密</strong>应运而生。非对称加密有两个密钥：<strong>“公钥”</strong>和<strong>“私钥”</strong>。</p><blockquote><p>两个密钥的特性：公钥加密后的密文，只能通过对应的私钥进行解密。而通过公钥推理出私钥的可能性微乎其微。</p></blockquote><p>下面看下使用非对称加密方案的登录流程：</p><p><img src="/2020/03/28/图解ssh原理/image-20200328194830679.png" alt="image-20200328194830679"></p><ul><li>1.远程Server收到Client端用户TopGun的登录请求，Server把自己的公钥发给用户。</li><li>2.Client使用这个公钥，将密码进行加密。</li><li>3.Client将加密的密码发送给Server端。</li><li>4.远程Server用自己的私钥，解密登录密码，然后验证其合法性。</li><li>5.若验证结果，给Client相应的响应。</li></ul><blockquote><p>私钥是Server端独有，这就保证了Client的登录信息即使在网络传输过程中被窃据，也没有私钥进行解密，保证了数据的安全性，这充分利用了非对称加密的特性。</p></blockquote><p><strong>这样就一定安全了吗？</strong></p><p>上述流程会有一个问题：<strong>Client端如何保证接受到的公钥就是目标Server端的？</strong>，如果一个攻击者中途拦截Client的登录请求，向其发送自己的公钥，Client端用攻击者的公钥进行数据加密。攻击者接收到加密信息后再用自己的私钥进行解密，不就窃取了Client的登录信息了吗？这就是所谓的<strong>中间人攻击</strong></p><p><img src="/2020/03/28/图解ssh原理/image-20200328194913851.png" alt="image-20200328194913851"></p><p><strong>SSH中是如何解决这个问题的？</strong></p><p><strong>1. 基于口令的认证</strong></p><p>从上面的描述可以看出，问题就在于<strong>如何对Server的公钥进行认证？</strong>在https中可以通过CA来进行公证，可是SSH的<strong>publish key</strong>和<strong>private key</strong>都是自己生成的，没法公证。只能通过Client端自己对公钥进行确认。通常在第一次登录的时候，系统会出现下面提示信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host 'ssh-server.example.com (12.18.429.21)' can't be established.</span><br><span class="line">RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>上面的信息说的是：无法确认主机ssh-server.example.com（12.18.429.21）的真实性，不过知道它的公钥指纹，是否继续连接？</p><blockquote><p>之所以用fingerprint代替key，主要是key过于长（RSA算法生成的公钥有1024位），很难直接比较。所以，对公钥进行hash生成一个128位的指纹，这样就方便比较了。</p></blockquote><p>如果输入<strong>yes</strong>后，会出现下面信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added 'ssh-server.example.com,12.18.429.21' (RSA) to the list of known hosts. </span><br><span class="line">Password: (enter password)</span><br></pre></td></tr></table></figure><p>该host已被确认，并被追加到文件<strong>known_hosts</strong>中，然后就需要输入密码，之后的流程就按照图1-3进行。</p><p><strong>2.基于公钥认证</strong></p><p>在上面介绍的登录流程中可以发现，每次登录都需要输入密码，很麻烦。SSH提供了另外一种可以免去输入密码过程的登录方式：<strong>公钥登录</strong>。流程如下：</p><p><img src="/2020/03/28/图解ssh原理/image-20200328195103766.png" alt="image-20200328195103766"></p><ul><li>1.Client将自己的公钥存放在Server上，追加在文件authorized_keys中。</li><li>2.Server端接收到Client的连接请求后，会在authorized_keys中匹配到Client的公钥pubKey，并生成随机数R，用Client的公钥对该随机数进行加密得到pubKey(R)<br>，然后将加密后信息发送给Client。</li><li>3.Client端通过私钥进行解密得到随机数R，然后对随机数R和本次会话的SessionKey利用MD5生成摘要Digest1，发送给Server端。</li><li>4.Server端会也会对R和SessionKey利用同样摘要算法生成Digest2。</li><li>5.Server端会最后比较Digest1和Digest2是否相同，完成认证过程。</li></ul><p>在步骤1中，Client将自己的公钥存放在Server上。需要用户手动将公钥copy到server上。这就是在配置ssh的时候进程进行的操作。下图是GitHub上SSH keys设置视图：</p><p><img src="/2020/03/28/图解ssh原理/image-20200328195211872.png" alt="image-20200328195211872">3. SSH实践</p><p><strong>生成密钥操作</strong></p><p>经过上面的原理分析，下面三行命令的含义应该很容易理解了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -P <span class="string">''</span> -f ~/.ssh/id_rsa</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 0600 ~/.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure><p>ssh-keygen是用于生产密钥的工具。</p><ul><li>-t：指定生成密钥类型（rsa、dsa、ecdsa等）</li><li>-P：指定passphrase，用于确保私钥的安全</li><li>-f：指定存放密钥的文件（公钥文件默认和私钥同目录下，不同的是，存放公钥的文件名需要加上后缀.pub）</li></ul><p>首先看下面~/.ssh中的四个文件：</p><p><img src="/2020/03/28/图解ssh原理/image-20200328195333040.png" alt="image-20200328195333040"></p><ul><li>1.id_rsa：保存私钥</li><li>2.id_rsa.pub：保存公钥</li><li>3.authorized_keys：保存已授权的客户端公钥</li><li>4.known_hosts：保存已认证的远程主机ID（关于known_hosts详情，见文末更新内容）</li></ul><p>四个角色的关系如下图所示：</p><p><img src="/2020/03/28/图解ssh原理/image-20200328195407029.png" alt="image-20200328195407029"></p><p>需要注意的是：一台主机可能既是Client，也是Server。所以会同时拥有authorized_keys和known_hosts。</p><p><strong>登录操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以用户名user，登录远程主机host</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh user@host</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地用户和远程用户相同，则用户名可省去</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh host</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> SSH默认端口22，可以用参数p修改端口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh -p 2017 user@host</span></span><br></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>本文以图文方式对SSH原理进行解析（主要指远程登录，没有涉及端口转发等功能）。同时分析了非对称加密的特性，以及在实践过程中如何对加密操作进行改进。</p><h3 id="1-known-hosts中存储的内容是什么？"><a href="#1-known-hosts中存储的内容是什么？" class="headerlink" title="1. known_hosts中存储的内容是什么？"></a>1. known_hosts中存储的内容是什么？</h3><p>known_hosts中存储是已认证的远程主机host key，每个SSH Server都有一个secret, unique ID, called a host key。</p><h3 id="2-host-key何时加入known-hosts的？"><a href="#2-host-key何时加入known-hosts的？" class="headerlink" title="2. host key何时加入known_hosts的？"></a>2. host key何时加入known_hosts的？</h3><p>当我们第一次通过SSH登录远程主机的时候，Client端会有如下提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host key not found from the list of known hosts.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>此时，如果我们选择yes，那么该host key就会被加入到Client的known_hosts中，格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> domain name+encryption algorithm+host key</span></span><br><span class="line">example.hostname.com ssh-rsa AAAAB4NzaC1yc2EAAAABIwAAAQEA。。。</span><br></pre></td></tr></table></figure><h3 id="3-为什么需要known-hosts？"><a href="#3-为什么需要known-hosts？" class="headerlink" title="3. 为什么需要known_hosts？"></a>3. 为什么需要known_hosts？</h3><p>最后探讨下为什么需要known_hosts，这个文件主要是通过Client和Server的双向认证，从而避免中间人（man-in-the-middle attack）攻击，每次Client向Server发起连接的时候，不仅仅Server要验证Client的合法性，Client同样也需要验证Server的身份，SSH client就是通过known_hosts中的host key来验证Server的身份的。</p><blockquote><p>这中方案足够安全吗？当然不，比如第一次连接一个未知Server的时候，known_hosts还没有该Server的host key，这不也可能遭到中间人攻击吗？这可能只是安全性和可操作性之间的折中吧。</p></blockquote><p><a href="https://www.cnblogs.com/diffx/p/9553587.html" target="_blank" rel="noopener">原文地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;图解ssh原理&quot;&gt;&lt;a href=&quot;#图解ssh原理&quot; class=&quot;headerlink&quot; title=&quot;图解ssh原理&quot;&gt;&lt;/a&gt;图解ssh原理&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2020/03/28/图解ssh原理/image-20200328194548
      
    
    </summary>
    
    
      <category term="-ssh" scheme="https://shenxiaobu.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>一步一步完成个vue项目</title>
    <link href="https://shenxiaobu.github.io/2020/03/24/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AE%8C%E6%88%90%E4%B8%AAvue%E9%A1%B9%E7%9B%AE/"/>
    <id>https://shenxiaobu.github.io/2020/03/24/一步一步完成个vue项目/</id>
    <published>2020-03-24T03:11:19.000Z</published>
    <updated>2020-03-28T11:58:05.760Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一步一步完成个vue项目"><a href="#一步一步完成个vue项目" class="headerlink" title="一步一步完成个vue项目"></a>一步一步完成个vue项目</h3><p>环境： git  node</p><ol><li>安装vue脚手架  </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-service-global</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue -V   </span><br><span class="line">@vue/cli 4.2.3</span><br></pre></td></tr></table></figure><p>跳出版本号 即表示安装成功</p><ol start="2"><li>创建一个项目  vue-study</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create -d vue-study</span><br></pre></td></tr></table></figure><p>-d 表示按默认配置创建一个项目</p><ol start="3"><li>执行vue ui 使用可视化界面控制项目并安装所需依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>浏览器就会跳出项目可视化界面，可自行导入项目</p><p><img src="/2020/03/24/一步一步完成个vue项目/image-20200324111811682.png" alt="image-20200324111811682"></p><p>点击依赖展开的界面就可以查看项目已安装的依赖，未安装的依赖也可以在这进行安装</p><p>安装了vue全家桶  vuex、vue-router、axios、qs</p><p><img src="/2020/03/24/一步一步完成个vue项目/image-20200324112056441.png" alt="image-20200324112056441"></p><p>点击运行既可以将项目跑起来也可以执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>点击输出 就能看到本地链接，点击链接就能看到项目</p><p><img src="/2020/03/24/一步一步完成个vue项目/image-20200324112220752.png" alt="image-20200324112220752"></p><ol start="4"><li>在vscode编辑器上打开该文件，目录展示如下</li></ol><p><img src="/2020/03/24/一步一步完成个vue项目/image-20200324112411006.png" alt="image-20200324112411006"></p><p>可见目录与我们想要的目录还是不够的</p><ol start="5"><li>将目录建成如下结构</li></ol><blockquote><p>src        //源代码</p><blockquote><p>api       //所有请求</p><p>assets  //主题 字体等静态资源</p><p>components      //全局公用组件</p><p>directive          //全局指令</p><p>filters    //全局过滤器</p><p>icons    //项目所有svg icons</p><p>lang    //国际化 language    非必须</p><p>mock    //项目mock模拟数据 非必须</p><p>router    //路由</p><p>store   //全局store 管理</p><p>styles   //全局样式</p><p>utils    //全局公用方法</p><p>vendor     //公用vendor  非必须</p><p>views   //view</p><p>App.vue  //入口页面</p><p>main.js   //入口加载组件初始化</p><p>permission.js   //权限管理       非必须</p></blockquote><p>static</p><blockquote><p>Tinymce        //富文本</p></blockquote><p>public</p><blockquote><p>favicon.ico     //favicon图标</p><p>index.html     //html模板</p></blockquote><p>babel.config.js       //babel-loader 配置</p><p>eslintrc.js         //eslint配置项</p><p>.gitignore      //git忽略项</p><p>package.json      //package.json</p><p>README.md     //使用说明书</p><p>vue.config.js      //配置文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认vue.config.js 文件内容</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;&#125;</span><br></pre></td></tr></table></figure><p>修改main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index'</span> <span class="comment">// 全局 路由 配置</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/index'</span> <span class="comment">//   全局 状态 配置</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$bus = <span class="keyword">new</span> Vue()          <span class="comment">//$bug</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>在router和store文件夹下创建index.js文件，在view文件夹下创建index.vue文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//router/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="comment">//引入组件的第一种方式</span></span><br><span class="line"><span class="comment">//import index from '../views/index.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入组件的第二种方式  这种方式为懒加载模式，加载到该页面时才会加载</span></span><br><span class="line"><span class="comment">//const index = () =&gt; import('../views/index.vue')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入组件的第三种方式  这种方式也是懒加载模式</span></span><br><span class="line"><span class="keyword">const</span> index =  <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../views/index.vue'</span>], resolve)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    mode: <span class="string">'hash'</span>,</span><br><span class="line">    routers: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/'</span>,</span><br><span class="line">            redirect: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">'index'</span> &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/index'</span>,</span><br><span class="line">            name: <span class="string">'index'</span>,</span><br><span class="line">            component: index, <span class="comment">// 登录页</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p><strong>上面这个是错误的，字段是 routes  不是 routers    注意了,就这个错误搞得我怀疑人生。切记改正</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--view/index.vue--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;index&quot;&gt;首页&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> VueX = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;&#125;,</span><br><span class="line">    mutations:&#123;&#125;,</span><br><span class="line">    actions: &#123;&#125;,</span><br><span class="line">  modules: &#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueX</span><br></pre></td></tr></table></figure><p>修改完后运行界面展示如下</p><p><img src="/2020/03/24/一步一步完成个vue项目/image-20200328133738665.png" alt="image-20200328133738665"></p><h3 id="接下来一步一步配置vue-config-js"><a href="#接下来一步一步配置vue-config-js" class="headerlink" title="接下来一步一步配置vue.config.js"></a>接下来一步一步配置vue.config.js</h3><h4 id="先配置别名吧alias"><a href="#先配置别名吧alias" class="headerlink" title="先配置别名吧alias"></a>先配置别名吧alias</h4><p><img src="/2020/03/24/一步一步完成个vue项目/image-20200328153142287.png" alt="image-20200328153142287"></p><p><a href="https://shenxiaobu.github.io/2019/03/13/webpack%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/">webpack使用二</a></p><p>这样就理解了alias的作用了</p><p>接下来配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue.config.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入path模块  下面用到了  path.resolve()  至于 __dirname node知识自行百度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(__dirname)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">            resolve: &#123;</span><br><span class="line">                alias: &#123;</span><br><span class="line">                <span class="string">'~'</span>: path.resolve(__dirname, <span class="string">'./src'</span>),</span><br><span class="line">                <span class="string">'~views'</span>: path.resolve(__dirname, <span class="string">'./src/views'</span>),</span><br><span class="line">                &#125; <span class="comment">// 别名配置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__dirname   Node.js 中，__dirname 总是指向被执行 js 文件的绝对路径，所以当你在 /d1/d2/myscript.js 文件中写了 __dirname， 它的值就是 /d1/d2 。</span><br><span class="line"></span><br><span class="line">相反，./ 会返回你执行 node 命令的路径，例如你的工作路径。</span><br><span class="line"></span><br><span class="line">有一个特殊情况是在 require() 中使用 ./ 时，这时的路径就会是含有 require() 的脚本文件的相对路径。</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/zsensei/article/details/79094714" target="_blank" rel="noopener">Node.js 中 __dirname 和 ./ 的区别</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用上述配置的时候，路由上的路径就可以改为  此时 遇到 ~ 就替换为 ./src</span></span><br><span class="line"><span class="keyword">const</span> index =  <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'~/views/index.vue'</span>], resolve)</span><br><span class="line"><span class="comment">//或   此时 遇到 ~views 就替换为 ./src/views</span></span><br><span class="line"><span class="keyword">const</span> index =  <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'~views/index.vue'</span>], resolve)</span><br></pre></td></tr></table></figure><p>“~”这个是随意配的，一般是采用 @  但是喜新厌旧，用腻了，就采用 ~。</p><p>打球去了，配置会一步一步接下去的。2020.03.28 15:51</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一步一步完成个vue项目&quot;&gt;&lt;a href=&quot;#一步一步完成个vue项目&quot; class=&quot;headerlink&quot; title=&quot;一步一步完成个vue项目&quot;&gt;&lt;/a&gt;一步一步完成个vue项目&lt;/h3&gt;&lt;p&gt;环境： git  node&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装v
      
    
    </summary>
    
    
      <category term="-vue -vue/cli" scheme="https://shenxiaobu.github.io/tags/vue-vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3项目的webpack配置</title>
    <link href="https://shenxiaobu.github.io/2020/03/23/vue-cli3%E9%A1%B9%E7%9B%AE%E7%9A%84webpack%E9%85%8D%E7%BD%AE/"/>
    <id>https://shenxiaobu.github.io/2020/03/23/vue-cli3项目的webpack配置/</id>
    <published>2020-03-23T12:47:39.000Z</published>
    <updated>2020-03-23T13:03:12.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-cli3搭建完整项目之webpack配置"><a href="#vue-cli3搭建完整项目之webpack配置" class="headerlink" title="vue-cli3搭建完整项目之webpack配置"></a>vue-cli3搭建完整项目之webpack配置</h1><p>前面篇介绍了项目初始化，下面就要开始对项目webpack进行配置，由于vue-cli3将webpack的基础配置全部内嵌了，这就导致我们初始化项目完成之后发现原先的webpack的config配置全部都消失不见了，那该怎么办呢？别慌，vue-cli3早就考虑到了这一点，它预留了一个vue.config.js的js文件供我们对webpack进行自定义配置。</p><p>vue.config.js官方配置指南</p><p>一、在项目根目录下新建vue.config.js文件与package.json同级<br>    下面是我的vue.config.js文件,里面有详细的注释，这里不再赘述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">'./'</span>, <span class="comment">// 基本路径</span></span><br><span class="line">  outputDir: <span class="string">'dist'</span>, <span class="comment">// 输出文件目录</span></span><br><span class="line">  lintOnSave: <span class="literal">false</span>, <span class="comment">// eslint-loader 是否在保存的时候检查</span></span><br><span class="line">  <span class="comment">// see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md</span></span><br><span class="line">  <span class="comment">// webpack配置</span></span><br><span class="line">  chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">      <span class="comment">// 开发生产共同配置</span></span><br><span class="line">      resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">          <span class="string">'@'</span>: path.resolve(__dirname, <span class="string">'./src'</span>),</span><br><span class="line">          <span class="string">'@c'</span>: path.resolve(__dirname, <span class="string">'./src/components'</span>),</span><br><span class="line">          <span class="string">'@p'</span>: path.resolve(__dirname, <span class="string">'./src/pages'</span>)</span><br><span class="line">        &#125; <span class="comment">// 别名配置</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  productionSourceMap: <span class="literal">false</span>, <span class="comment">// 生产环境是否生成 sourceMap 文件</span></span><br><span class="line">  <span class="comment">// css相关配置</span></span><br><span class="line">  css: &#123;</span><br><span class="line">    extract: <span class="literal">true</span>, <span class="comment">// 是否使用css分离插件 ExtractTextPlugin</span></span><br><span class="line">    sourceMap: <span class="literal">false</span>, <span class="comment">// 开启 CSS source maps?</span></span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      css: &#123;&#125;, <span class="comment">// 这里的选项会传递给 css-loader</span></span><br><span class="line">      postcss: &#123;&#125; <span class="comment">// 这里的选项会传递给 postcss-loader</span></span><br><span class="line">    &#125;, <span class="comment">// css预设器配置项 详见https://cli.vuejs.org/zh/config/#css-loaderoptions</span></span><br><span class="line">    modules: <span class="literal">false</span> <span class="comment">// 启用 CSS modules for all css / pre-processor files.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  parallel: <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length &gt; <span class="number">1</span>, <span class="comment">// 是否为 Babel 或 TypeScript 使用 thread-loader。该选项在系统的 CPU 有多于一个内核时自动启用，仅作用于生产构建。</span></span><br><span class="line">  pwa: &#123;&#125;, <span class="comment">// PWA 插件相关配置 see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa</span></span><br><span class="line">  <span class="comment">// webpack-dev-server 相关配置</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: process.platform === <span class="string">'darwin'</span>,</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>, <span class="comment">// 允许外部ip访问</span></span><br><span class="line">    port: <span class="number">8022</span>, <span class="comment">// 端口</span></span><br><span class="line">    https: <span class="literal">false</span>, <span class="comment">// 启用https</span></span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: <span class="literal">true</span>,</span><br><span class="line">      errors: <span class="literal">true</span></span><br><span class="line">    &#125;, <span class="comment">// 错误、警告在页面弹出</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://www.baidu.com/api'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">// 允许websockets跨域</span></span><br><span class="line">        <span class="comment">// ws: true,</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="comment">// 代理转发配置，用于调试环境</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 第三方插件配置</span></span><br><span class="line">  pluginOptions: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="alias别名配置"><a href="#alias别名配置" class="headerlink" title="alias别名配置"></a>alias别名配置</h4><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>当项目逐渐变大之后，文件与文件直接的引用关系会很复杂，这时候就需要使用<a href="https://webpack.js.org/configuration/resolve/" target="_blank" rel="noopener">alias</a> 了。 有的人喜欢alias 指向src目录下，再使用相对路径找文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">'~'</span>: resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">import</span> stickTop <span class="keyword">from</span> <span class="string">'~/components/stickTop'</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>或者也可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">alias: &#123;</span><br><span class="line">  <span class="string">'src'</span>: path.resolve(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">  <span class="string">'components'</span>: path.resolve(__dirname, <span class="string">'../src/components'</span>),</span><br><span class="line">  <span class="string">'api'</span>: path.resolve(__dirname, <span class="string">'../src/api'</span>),</span><br><span class="line">  <span class="string">'utils'</span>: path.resolve(__dirname, <span class="string">'../src/utils'</span>),</span><br><span class="line">  <span class="string">'store'</span>: path.resolve(__dirname, <span class="string">'../src/store'</span>),</span><br><span class="line">  <span class="string">'router'</span>: path.resolve(__dirname, <span class="string">'../src/router'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">import</span> stickTop <span class="keyword">from</span> <span class="string">'components/stickTop'</span></span><br><span class="line"><span class="keyword">import</span> getArticle <span class="keyword">from</span> <span class="string">'api/article'</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>没有好与坏对与错，纯看个人喜好和团队规范。</p><h4 id="二、优化打包chunk-vendors-js文件体积过大"><a href="#二、优化打包chunk-vendors-js文件体积过大" class="headerlink" title="二、优化打包chunk-vendors.js文件体积过大"></a>二、优化打包chunk-vendors.js文件体积过大</h4><p>​    当我们运行项目并且打包的时候，会发现chunk-vendors.js这个文件非常大，那是因为webpack将所有的依赖全都压缩到了这个文件里面，这时我们可以将其拆分，将所有的依赖都打包成单独的js。</p><p>方案一：利用splitChunks将每个依赖包单独打包，在生产环境下配置，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span></span><br><span class="line">      <span class="comment">// 将每个依赖包打包成单独的js文件</span></span><br><span class="line">      <span class="keyword">let</span> optimization = &#123;</span><br><span class="line">        runtimeChunk: <span class="string">'single'</span>,</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">          chunks: <span class="string">'all'</span>,</span><br><span class="line">          maxInitialRequests: <span class="literal">Infinity</span>,</span><br><span class="line">          minSize: <span class="number">20000</span>, <span class="comment">// 依赖包超过20000bit将被单独打包</span></span><br><span class="line">          cacheGroups: &#123;</span><br><span class="line">            vendor: &#123;</span><br><span class="line">              test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">              name (<span class="built_in">module</span>) &#123;</span><br><span class="line">                <span class="comment">// get the name. E.g. node_modules/packageName/not/this/part.js</span></span><br><span class="line">                <span class="comment">// or node_modules/packageName</span></span><br><span class="line">                <span class="keyword">const</span> packageName = <span class="built_in">module</span>.context.match(<span class="regexp">/[\\/]node_modules[\\/](.*?)([\\/]|$)/</span>)[<span class="number">1</span>]</span><br><span class="line">                <span class="comment">// npm package names are URL-safe, but some servers don't like @ symbols</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">`npm.<span class="subst">$&#123;packageName.replace(<span class="string">'@'</span>, <span class="string">''</span>)&#125;</span>`</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">        optimization</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">      <span class="comment">// 开发生产共同配置</span></span><br><span class="line">      resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">          <span class="string">'@'</span>: path.resolve(__dirname, <span class="string">'./src'</span>),</span><br><span class="line">          <span class="string">'@c'</span>: path.resolve(__dirname, <span class="string">'./src/components'</span>),</span><br><span class="line">          <span class="string">'@p'</span>: path.resolve(__dirname, <span class="string">'./src/pages'</span>)</span><br><span class="line">        &#125; <span class="comment">// 别名配置</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="方案二、利用DllPlugin和DllReferencePlugin将依赖包打包成外部文件在index中引入"><a href="#方案二、利用DllPlugin和DllReferencePlugin将依赖包打包成外部文件在index中引入" class="headerlink" title="方案二、利用DllPlugin和DllReferencePlugin将依赖包打包成外部文件在index中引入"></a>方案二、利用DllPlugin和DllReferencePlugin将依赖包打包成外部文件在index中引入</h4><ol><li>在package.json中新建library,用于存储即将要打包的依赖包名和打包后的文件名</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    "name": "demo-cli3",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">    "version_lib": "1.0.0",</span><br><span class="line">    "library": &#123;</span><br><span class="line">       "lib_v1_0": [</span><br><span class="line">           <span class="string">"jquery/dist/jquery.min.js"</span></span><br><span class="line">        ],</span><br><span class="line">        "vueBucket_v1_2": [</span><br><span class="line">           "vue-router",</span><br><span class="line">           <span class="string">"vuex"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;j</span><br></pre></td></tr></table></figure><p>创建webpack.dll.config.js文件，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;library&#125; = <span class="built_in">require</span>(<span class="string">'./package.json'</span>)</span><br><span class="line"><span class="comment">// const assetsSubDirectory = process.env.NODE_ENV === 'production'</span></span><br><span class="line"><span class="comment">//   ? build.assetsSubDirectory : dev.assetsSubDirectory</span></span><br><span class="line"><span class="keyword">let</span> &#123; version_lib &#125; = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</span><br><span class="line">version_lib = version_lib.replace(<span class="regexp">/\./g</span>,<span class="string">'_'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: library,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./libs/package/js'</span>),</span><br><span class="line">    filename: <span class="string">`[name].<span class="subst">$&#123;version_lib&#125;</span>.dll.js`</span>,</span><br><span class="line">    library: <span class="string">'[name]_library'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization:&#123;</span><br><span class="line">    minimizer:[</span><br><span class="line">      <span class="keyword">new</span> UglifyPlugin(&#123;</span><br><span class="line">        uglifyOptions: &#123;</span><br><span class="line">          warnings: <span class="literal">false</span>,</span><br><span class="line">          compress: &#123;</span><br><span class="line">            drop_console: <span class="literal">true</span>, <span class="comment">// console</span></span><br><span class="line">            drop_debugger: <span class="literal">false</span>,</span><br><span class="line">            pure_funcs: [<span class="string">'console.log'</span>] <span class="comment">// 移除console</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.ContextReplacementPlugin(<span class="regexp">/moment[\/\\]locale$/</span>, /zh-cn|en-gb/),</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      path: path.resolve(__dirname, <span class="string">'./libs/package/json'</span>, <span class="string">'[name].manifest.json'</span>),</span><br><span class="line">      name: <span class="string">'[name]_library'</span>,</span><br><span class="line">      context: process.cwd()</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vue.config.js中配置DllReferencePlugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; version, version_lib , openGzip,library &#125; = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span>;</span><br><span class="line">      ...</span><br><span class="line">      <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">        ...</span><br><span class="line">        plugins:[</span><br><span class="line">          ...config.plugins,</span><br><span class="line">          ...Object.keys(library).map(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">              context: process.cwd(),</span><br><span class="line">              manifest: <span class="built_in">require</span>(<span class="string">`./libs/package/json/<span class="subst">$&#123;name&#125;</span>.manifest.json`</span>),</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;);</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>将打包好的js自动添加进index.html中</p><p>下载add-asset-html-webpack-plugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev add-asset-html-webpack-plugin</span><br></pre></td></tr></table></figure><p>在vue.config.js中配置add-asset-html-webpack-plugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">   ...</span><br><span class="line">   configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span>;</span><br><span class="line">        ...</span><br><span class="line">      <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">        ...</span><br><span class="line">        plugins:[</span><br><span class="line">          ...</span><br><span class="line">          <span class="keyword">new</span> AddAssetHtmlPlugin(<span class="built_in">Object</span>.keys(library).map(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">              filepath: <span class="built_in">require</span>.resolve(path.resolve(<span class="string">`libs/package/js/<span class="subst">$&#123;name&#125;</span>.<span class="subst">$&#123;version_lib&#125;</span>.dll.js`</span>)),</span><br><span class="line">              outputPath: <span class="string">'static/lib/js'</span>,</span><br><span class="line">              publicPath:<span class="string">'./static/lib/js'</span>,</span><br><span class="line">              includeSourcemap: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)),</span><br><span class="line">        ]</span><br><span class="line">      &#125;);</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：方案一、方案二可同时使用，单独使用方案二不需要将vue也添加进打包序列，那样会重复打包（在chunk-venders.js中始终会将vue打包进去），若同时使用则不会出现该情况。<br>至此，打包优化结束，运行打包，你会发现原先的vender文件没有了，同时多了好几个依赖的js文件（方案一）<br><img src="/2020/03/23/vue-cli3项目的webpack配置/image-20200323205311545.png" alt="image-20200323205311545"></p><h2 id="三、打包时去除打印信息（console）"><a href="#三、打包时去除打印信息（console）" class="headerlink" title="三、打包时去除打印信息（console）"></a>三、打包时去除打印信息（console）</h2><p>下载uglifyjs-webpack-plugin<br><a href="https://blog.csdn.net/u013884068/article/details/83511343" target="_blank" rel="noopener">uglifyjs-webpack-plugin中文文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev uglifyjs-webpack-plugin</span><br></pre></td></tr></table></figure><p>在vue.config.js文件中引入，并在configureWebpack的optimization中添加如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line"> configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span></span><br><span class="line">      <span class="comment">// 将每个依赖包打包成单独的js文件</span></span><br><span class="line">      <span class="keyword">let</span> optimization = &#123;</span><br><span class="line">        ...</span><br><span class="line">        minimizer: [<span class="keyword">new</span> UglifyPlugin(&#123;</span><br><span class="line">          uglifyOptions: &#123;</span><br><span class="line">            compress: &#123;</span><br><span class="line">              warnings: <span class="literal">false</span>,</span><br><span class="line">              drop_console: <span class="literal">true</span>, <span class="comment">// console</span></span><br><span class="line">              drop_debugger: <span class="literal">false</span>,</span><br><span class="line">              pure_funcs: [<span class="string">'console.log'</span>] <span class="comment">// 移除console</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">        optimization</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行打包，你会发现我们在页面中写的那些打印日志的代码都消失了<br>注：以上代码适用于uglifyjs-webpack-plugin 2.1.1及以前的版本，新版uglifyjs-webpack-plugin需写成以下方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">minimizer: [<span class="keyword">new</span> UglifyPlugin(&#123;</span><br><span class="line">   uglifyOptions: &#123;</span><br><span class="line">       warnings: <span class="literal">false</span>,</span><br><span class="line">       compress: &#123;</span><br><span class="line">         drop_console: <span class="literal">true</span>, <span class="comment">// console</span></span><br><span class="line">         drop_debugger: <span class="literal">false</span>,</span><br><span class="line">         pure_funcs: [<span class="string">'console.log'</span>] <span class="comment">// 移除console</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="四、配置全局jQuery"><a href="#四、配置全局jQuery" class="headerlink" title="四、配置全局jQuery"></a>四、配置全局jQuery</h2><ol><li>下载jQuery npm包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev jquery</span><br></pre></td></tr></table></figure><ol start="2"><li>设置‘jquery$’别名,代码如下：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 修复HMR</span></span><br><span class="line">    config.resolve.symlinks(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 别名配置</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"__dirname"</span>,__dirname);</span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">'@'</span>, path.resolve(__dirname, <span class="string">'./src'</span>))</span><br><span class="line">      .set(<span class="string">'@a'</span>, path.resolve(__dirname, <span class="string">'./src/assets'</span>))</span><br><span class="line">      .set(<span class="string">'@c'</span>, path.resolve(__dirname, <span class="string">'./src/components'</span>))</span><br><span class="line">      .set(<span class="string">'@p'</span>, path.resolve(__dirname, <span class="string">'./src/pages'</span>))</span><br><span class="line">      .set(<span class="string">'jquery$'</span>, <span class="string">'jquery/dist/jquery.min.js'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="3"><li>使用ProvidePlugin插件为jQuery添加全局变量</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">     ...</span><br><span class="line">    <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">      <span class="comment">// 开发生产共同配置</span></span><br><span class="line">      <span class="comment">// externals: &#123;</span></span><br><span class="line">      <span class="comment">//   'vue': 'Vue',</span></span><br><span class="line">      <span class="comment">//   'element-ui': 'ELEMENT',</span></span><br><span class="line">      <span class="comment">//   'vue-router': 'VueRouter',</span></span><br><span class="line">      <span class="comment">//   'vuex': 'Vuex'</span></span><br><span class="line">      <span class="comment">// &#125; // 防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(用于csdn引入)</span></span><br><span class="line">      plugins:[</span><br><span class="line">        ...config.plugins,</span><br><span class="line">        <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">          jQuery: <span class="string">"jquery"</span>,</span><br><span class="line">          $: <span class="string">"jquery"</span>,</span><br><span class="line">          <span class="string">"windows.jQuery"</span>:<span class="string">"jquery"</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="4"><li>至此可以在全局使用jquery了</li></ol><p>五、开启gizp压缩<br>gizp压缩是一种http请求优化方式，通过减少文件体积来提高加载速度。html、js、css文件甚至json数据都可以用它压缩，可以减小60%以上的体积。webpack在打包时可以借助 compression webpack plugin 实现gzip压缩。</p><ol><li><p>下载 compression webpack plugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D compression-webpack-plugin</span><br></pre></td></tr></table></figure></li><li><p>在package.json中添加openGzip字段，用作gizp开启开关</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;demo-cli3&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;openGizp&quot;: false,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>vue.config.js 中配置如下</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CompressionPlugin = <span class="built_in">require</span>(<span class="string">"compression-webpack-plugin"</span>);</span><br><span class="line">...</span><br><span class="line">configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span>;</span><br><span class="line">      <span class="comment">// 将每个依赖包打包成单独的js文件</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">if</span>(openGzip)&#123;</span><br><span class="line">        config.plugins = [</span><br><span class="line">          ...config.plugins,</span><br><span class="line">          <span class="keyword">new</span> CompressionPlugin(&#123;</span><br><span class="line">            test:<span class="regexp">/\.js$|\.html$|.\css/</span>, <span class="comment">//匹配文件名</span></span><br><span class="line">            threshold: <span class="number">10240</span>,<span class="comment">//对超过10k的数据压缩</span></span><br><span class="line">            deleteOriginalAssets: <span class="literal">false</span> <span class="comment">//不删除源文件</span></span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="4"><li>注：生成的压缩文件以.gz为后缀，一般浏览器都已支持.gz的资源文件，在http请求的Request Headers 中能看到 Accept-Encoding:gzip。要使服务器返回.gz文件，还需要对服务器进行配置，根据Request Headers的Accept-Encoding标签进行鉴别，如果支持gzip就返回.gz文件。</li></ol><h2 id="六、将版本号添加进打包的js名中"><a href="#六、将版本号添加进打包的js名中" class="headerlink" title="六、将版本号添加进打包的js名中"></a>六、将版本号添加进打包的js名中</h2><ol><li>vue.config.js 中配置如下</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">let</span> &#123; version , openGzip &#125; = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</span><br><span class="line">version = version.replace(<span class="regexp">/\./g</span>,<span class="string">'_'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  assetsDir: <span class="string">"static"</span>,</span><br><span class="line"> configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span>;</span><br><span class="line">        ...</span><br><span class="line">      <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">        output:&#123;</span><br><span class="line">          ...config.output,</span><br><span class="line">          filename: <span class="string">`static/js/[name].[chunkhash].<span class="subst">$&#123;version&#125;</span>.js`</span>,</span><br><span class="line">          chunkFilename: <span class="string">`static/js/[name].[chunkhash].<span class="subst">$&#123;version&#125;</span>.js`</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">      &#125;);</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="完整代码如下："><a href="#完整代码如下：" class="headerlink" title="完整代码如下："></a>完整代码如下：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">// const UglifyPlugin = require('uglifyjs-webpack-plugin');</span></span><br><span class="line"><span class="keyword">const</span> CompressionPlugin = <span class="built_in">require</span>(<span class="string">"compression-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">let</span> &#123; version, version_lib , openGzip,library &#125; = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</span><br><span class="line">version = version.replace(<span class="regexp">/\./g</span>,<span class="string">'_'</span>);</span><br><span class="line">version_lib = version_lib.replace(<span class="regexp">/\./g</span>,<span class="string">'_'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">'./'</span>, <span class="comment">// 基本路径</span></span><br><span class="line">  outputDir: <span class="string">'dist'</span>, <span class="comment">// 输出文件目录</span></span><br><span class="line">  assetsDir: <span class="string">"static"</span>,</span><br><span class="line">  lintOnSave: <span class="literal">false</span>, <span class="comment">// eslint-loader 是否在保存的时候检查</span></span><br><span class="line">  <span class="comment">// see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md</span></span><br><span class="line">  <span class="comment">// webpack配置</span></span><br><span class="line">  chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 修复HMR</span></span><br><span class="line">    config.resolve.symlinks(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 别名配置</span></span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">'@'</span>, path.resolve(__dirname, <span class="string">'./src'</span>))</span><br><span class="line">      .set(<span class="string">'@a'</span>, path.resolve(__dirname, <span class="string">'./src/assets'</span>))</span><br><span class="line">      .set(<span class="string">'@c'</span>, path.resolve(__dirname, <span class="string">'./src/components'</span>))</span><br><span class="line">      .set(<span class="string">'@p'</span>, path.resolve(__dirname, <span class="string">'./src/pages'</span>))</span><br><span class="line">      .set(<span class="string">'jquery$'</span>, <span class="string">'jquery/dist/jquery.min.js'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  configureWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将每个依赖包打包成单独的js文件</span></span><br><span class="line">     <span class="comment">/* let optimization = &#123;</span></span><br><span class="line"><span class="comment">        runtimeChunk: 'single',</span></span><br><span class="line"><span class="comment">        splitChunks: &#123;</span></span><br><span class="line"><span class="comment">          chunks: 'all',</span></span><br><span class="line"><span class="comment">          maxInitialRequests: Infinity,</span></span><br><span class="line"><span class="comment">          minSize: 20000, // 依赖包超过20000bit将被单独打包</span></span><br><span class="line"><span class="comment">          cacheGroups: &#123;</span></span><br><span class="line"><span class="comment">            vendor: &#123;</span></span><br><span class="line"><span class="comment">              test: /[\\/]node_modules[\\/]/,</span></span><br><span class="line"><span class="comment">              name (module) &#123;</span></span><br><span class="line"><span class="comment">                // get the name. E.g. node_modules/packageName/not/this/part.js  or node_modules/packageName</span></span><br><span class="line"><span class="comment">                const packageName = module.context.match(/[\\/]node_modules[\\/](.*?)([\\/]|$)/)[1];</span></span><br><span class="line"><span class="comment">                // npm package names are URL-safe, but some servers don't like @ symbols</span></span><br><span class="line"><span class="comment">                return `npm.$&#123;packageName.replace('@', '')&#125;`;</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">        &#125;,</span></span><br><span class="line"><span class="comment">        minimizer: [</span></span><br><span class="line"><span class="comment">          new UglifyPlugin(&#123;</span></span><br><span class="line"><span class="comment">            uglifyOptions: &#123;</span></span><br><span class="line"><span class="comment">              warnings: false,</span></span><br><span class="line"><span class="comment">              compress: &#123;</span></span><br><span class="line"><span class="comment">                drop_console: true, // console</span></span><br><span class="line"><span class="comment">                drop_debugger: false,</span></span><br><span class="line"><span class="comment">                pure_funcs: ['console.log'] // 移除console</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          &#125;)</span></span><br><span class="line"><span class="comment">        ]</span></span><br><span class="line"><span class="comment">      &#125;;*/</span></span><br><span class="line">      <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">        output:&#123;</span><br><span class="line">          ...config.output,</span><br><span class="line">          filename: <span class="string">`static/js/[name].[chunkhash].<span class="subst">$&#123;version&#125;</span>.js`</span>,</span><br><span class="line">          chunkFilename: <span class="string">`static/js/[name].[chunkhash].<span class="subst">$&#123;version&#125;</span>.js`</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// optimization,</span></span><br><span class="line">        plugins:[</span><br><span class="line">          ...config.plugins,</span><br><span class="line">          ...Object.keys(library).map(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">              context: process.cwd(),</span><br><span class="line">              manifest: <span class="built_in">require</span>(<span class="string">`./libs/package/json/<span class="subst">$&#123;name&#125;</span>.manifest.json`</span>),</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;),</span><br><span class="line">          <span class="keyword">new</span> AddAssetHtmlPlugin(<span class="built_in">Object</span>.keys(library).map(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">              filepath: <span class="built_in">require</span>.resolve(path.resolve(<span class="string">`libs/package/js/<span class="subst">$&#123;name&#125;</span>.<span class="subst">$&#123;version_lib&#125;</span>.dll.js`</span>)),</span><br><span class="line">              outputPath: <span class="string">'static/lib/js'</span>,</span><br><span class="line">              publicPath:<span class="string">'./static/lib/js'</span>,</span><br><span class="line">              includeSourcemap: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)),</span><br><span class="line">        ]</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span>(openGzip)&#123;</span><br><span class="line">        config.plugins = [</span><br><span class="line">          ...config.plugins,</span><br><span class="line">          <span class="keyword">new</span> CompressionPlugin(&#123;</span><br><span class="line">            test:<span class="regexp">/\.js$|\.html$|.\css/</span>, <span class="comment">//匹配文件名</span></span><br><span class="line">            threshold: <span class="number">10240</span>,<span class="comment">//对超过10k的数据压缩</span></span><br><span class="line">            deleteOriginalAssets: <span class="literal">false</span> <span class="comment">//不删除源文件</span></span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 为开发环境修改配置...</span></span><br><span class="line">      config.mode = <span class="string">'development'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">      <span class="comment">// 开发生产共同配置</span></span><br><span class="line">      <span class="comment">// externals: &#123;</span></span><br><span class="line">      <span class="comment">//   'vue': 'Vue',</span></span><br><span class="line">      <span class="comment">//   'element-ui': 'ELEMENT',</span></span><br><span class="line">      <span class="comment">//   'vue-router': 'VueRouter',</span></span><br><span class="line">      <span class="comment">//   'vuex': 'Vuex'</span></span><br><span class="line">      <span class="comment">// &#125; // 防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(用于csdn引入)</span></span><br><span class="line">      plugins:[</span><br><span class="line">        ...config.plugins,</span><br><span class="line">        <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">          jQuery: <span class="string">"jquery"</span>,</span><br><span class="line">          $: <span class="string">"jquery"</span>,</span><br><span class="line">          <span class="string">"windows.jQuery"</span>:<span class="string">"jquery"</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  productionSourceMap: <span class="literal">false</span>, <span class="comment">// 生产环境是否生成 sourceMap 文件</span></span><br><span class="line">  <span class="comment">// css相关配置</span></span><br><span class="line">  css: &#123;</span><br><span class="line">    extract: <span class="literal">true</span>, <span class="comment">// 是否使用css分离插件 ExtractTextPlugin</span></span><br><span class="line">    sourceMap: <span class="literal">false</span>, <span class="comment">// 开启 CSS source maps?</span></span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      css: &#123;&#125;, <span class="comment">// 这里的选项会传递给 css-loader</span></span><br><span class="line">      postcss: &#123;&#125; <span class="comment">// 这里的选项会传递给 postcss-loader</span></span><br><span class="line">    &#125;, <span class="comment">// css预设器配置项</span></span><br><span class="line">    modules: <span class="literal">false</span> <span class="comment">// 启用 CSS modules for all css / pre-processor files.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  parallel: <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length &gt; <span class="number">1</span>, <span class="comment">// 是否为 Babel 或 TypeScript 使用 thread-loader。该选项在系统的 CPU 有多于一个内核时自动启用，仅作用于生产构建。</span></span><br><span class="line">  pwa: &#123;&#125;, <span class="comment">// PWA 插件相关配置 see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa</span></span><br><span class="line">  <span class="comment">// webpack-dev-server 相关配置</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: process.platform === <span class="string">'darwin'</span>,</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>, <span class="comment">// 允许外部ip访问</span></span><br><span class="line">    port: <span class="number">8022</span>, <span class="comment">// 端口</span></span><br><span class="line">    https: <span class="literal">false</span>, <span class="comment">// 启用https</span></span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: <span class="literal">true</span>,</span><br><span class="line">      errors: <span class="literal">true</span></span><br><span class="line">    &#125;, <span class="comment">// 错误、警告在页面弹出</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">`<span class="subst">$&#123;process.env.VUE_APP_BASE_API&#125;</span>/api`</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">// 允许websockets跨域</span></span><br><span class="line">        <span class="comment">// ws: true,</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="comment">// 代理转发配置，用于调试环境</span></span><br><span class="line">  &#125;, <span class="comment">// 第三方插件配置</span></span><br><span class="line">  pluginOptions: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注：如需其他的配置可在上方<a href="https://cli.vuejs.org/zh/config/#vue-config-js" target="_blank" rel="noopener">官网配置指南</a>中查找相关配置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-cli3搭建完整项目之webpack配置&quot;&gt;&lt;a href=&quot;#vue-cli3搭建完整项目之webpack配置&quot; class=&quot;headerlink&quot; title=&quot;vue-cli3搭建完整项目之webpack配置&quot;&gt;&lt;/a&gt;vue-cli3搭建完整项目
      
    
    </summary>
    
    
      <category term="-vue" scheme="https://shenxiaobu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VSCode配置多个sftp</title>
    <link href="https://shenxiaobu.github.io/2020/03/23/VSCode%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAsftp/"/>
    <id>https://shenxiaobu.github.io/2020/03/23/VSCode配置多个sftp/</id>
    <published>2020-03-23T08:56:39.000Z</published>
    <updated>2020-03-23T09:12:57.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="VSCode配置多个sftp，同一个文件可以分别上传到配置的sftp服务器"><a href="#VSCode配置多个sftp，同一个文件可以分别上传到配置的sftp服务器" class="headerlink" title="VSCode配置多个sftp，同一个文件可以分别上传到配置的sftp服务器"></a>VSCode配置多个sftp，同一个文件可以分别上传到配置的sftp服务器</h3><p>上面的章节已经学会了 如何一键将文件部署到服务器，但是现在遇到了一种情况，偶尔需要将文件上传</p><p>到客户服务器，偶尔是传到自己测试服务器。以现有的实力要实现的话 就是部署一次改一次 配置。</p><p>部署一次还行，经常部署肯定是不可取的，于是啥都不会只能百度咯</p><p>于是就搜到了这篇文章<a href="https://blog.csdn.net/u012560340/article/details/83030680" target="_blank" rel="noopener">配置多个sftp</a></p><p>大概关键字就是  profiles 这个字段</p><p>安装完 sftp 插件后 需要 按 ctrl + shift + p  搜索 sftp</p><p>了这个插件之后，还要配置它才能用，因为鬼才知道你的服务器是哪个，端口是什么等等。<br>最左侧选择文件模块，现在当前目录文件，当然，sftp的配置都是针对某个目录的，说白了就是某个项目，是先有项目，然后才知道你要上传什么文件，在文件模块，找到“.vscode”，展开它，发现“sftp.json”这一项就是配置sftp的文件，没有的话自己新建一个，名字要一模一样，如下图：</p><p><img src="/2020/03/23/VSCode配置多个sftp/image-20200323170631873.png" alt="image-20200323170631873"></p><p>“context”是本地目录路径，这个路径跟服务器的路径对应起来，“ignore”就是要忽略的文件，或文件夹，这里这样写就会忽略这些文件夹，“port”是服务器端口，“remotePath”是跟“context”对应的服务器那边的目录路径。<br>最关键就是这个“profiles”，多个服务器就在它里面配置，“profiles”是一个对象，里面每一个属性代表一个服务器，这里“test_h5”就是其中一个服务器的名字，“real_m_240”就是另一个服务器的名字，“profiles”里面的服务器配置就是每个服务器的配置信息，而“profiles”外面的属性就是所有服务器的公共属性，比如“profiles”外面的“port”属性，就是里面所有服务器的公共属性，如果“profiles”里面某个服务器的配置属性跟“profiles”外面的某个属性名字一样，那么，里面的属性会覆盖外面的属性。<br>“host”就是服务器的ip地址，“username”和“password”就是登录服务器要用的账号名和密码。<br>配置好之后，保存这个文件，sftp的配置就生效了，重启一下VSCode也是比较稳的做法。</p><p>因为是json文件，所以需要严格遵守json格式</p><p>json格式要求： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字段和 值都需要 引号包着  最后一个字段不能有逗号</span></span><br></pre></td></tr></table></figure><p>具体配置如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"vue-charging-pc"</span>,  <span class="comment">//名字  使用时需要把注释去掉</span></span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"sftp"</span>,  <span class="comment">//协议  使用时需要把注释去掉</span></span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,   <span class="comment">//服务器用户名</span></span><br><span class="line">    <span class="attr">"privateKeyPath"</span>: <span class="string">"服务器密钥文件路径"</span>,  <span class="comment">//服务器密钥文件</span></span><br><span class="line">    <span class="attr">"remotePath"</span>: <span class="string">"/home/charge/springboot/view/"</span>,  <span class="comment">//部署到服务器的目录</span></span><br><span class="line">    <span class="attr">"profiles"</span>:&#123;</span><br><span class="line">        <span class="attr">"zhishang"</span>: &#123;    <span class="comment">//sftp 的名字  当使用这个时 按下面的配置进行部署 </span></span><br><span class="line">            <span class="attr">"host"</span>: <span class="string">"服务器主机地址"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"god"</span>:&#123;</span><br><span class="line">            <span class="attr">"host"</span>: <span class="string">"服务器主机地址"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;VSCode配置多个sftp，同一个文件可以分别上传到配置的sftp服务器&quot;&gt;&lt;a href=&quot;#VSCode配置多个sftp，同一个文件可以分别上传到配置的sftp服务器&quot; class=&quot;headerlink&quot; title=&quot;VSCode配置多个sftp，同一个
      
    
    </summary>
    
    
      <category term="-vscode" scheme="https://shenxiaobu.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>vsCode插件sftp的使用及async/await的使用等</title>
    <link href="https://shenxiaobu.github.io/2020/03/22/vsCode%E6%8F%92%E4%BB%B6sftp%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8Aasync-await%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AD%89/"/>
    <id>https://shenxiaobu.github.io/2020/03/22/vsCode插件sftp的使用及async-await的使用等/</id>
    <published>2020-03-22T14:00:14.000Z</published>
    <updated>2020-03-22T15:31:51.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vscode插件sftp的使用及async-await"><a href="#vscode插件sftp的使用及async-await" class="headerlink" title="vscode插件sftp的使用及async/await"></a>vscode插件sftp的使用及async/await</h3><p>在vscode拓展上搜索 sftp 安装即可</p><p>配置：</p><p>一般在开发项目时，总是有多个项目在同时开发。如果要为单一的项目配置的话，就需要打开此项目，快捷键win+shift+p 打开命令：输入：sftp 即可在该项目的根目录下生成.vscode的文件夹，并生成了一个sftp.json的文件。配置如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"远程ip地址"</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"登录名"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"登录密码"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"sftp"</span>, </span><br><span class="line">    <span class="attr">"agent"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"privateKeyPath"</span>: <span class="string">"null或如果链接服务器用的不是账号密码是key文件 这里为key文件路径"</span>, </span><br><span class="line">    <span class="attr">"passphrase"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"passive"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="attr">"interactiveAuth"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"remotePath"</span>: <span class="string">"需要打到的远程的文件夹地址"</span>,</span><br><span class="line">    <span class="attr">"context"</span>: <span class="string">"本地项目地址"</span>,</span><br><span class="line">    <span class="attr">"uploadOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"syncMode"</span>: <span class="string">"update"</span>,</span><br><span class="line">    <span class="attr">"ignore"</span>: [</span><br><span class="line">        <span class="string">"**/.vscode/**"</span>,</span><br><span class="line">        <span class="string">"**/.git/**"</span>,</span><br><span class="line">        <span class="string">"**/.DS_Store"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"watcher"</span>: &#123;</span><br><span class="line">        <span class="attr">"files"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"autoUpload"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"autoDelete"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><p>只需要配置host、username、password以及 remotePath四个参数就可以使用了。</p><p>1、同步全部的工程文件，可以在需要同步的文件夹上面右键：选择SFTP:Sync to remote，即可同步到远程服务器。</p><p>2、同步单一的文件，在以在需要同步的文件上右键，选择SFTP:Upload，即可同步到远程服务器。</p><p>注意：<br>不建议开启autoUpload和autoDelete操作，避免不小心把临时改动update到服务器上，就不好玩了。</p><h3 id="async-await-的使用"><a href="#async-await-的使用" class="headerlink" title="async/await 的使用"></a>async/await 的使用</h3><p>promise很好的解决了回调地狱的问题，但是当异步嵌套的时候会有很多then，也是挺难看的</p><p>所以引入了 generator，这里跳过generator 直接来将 async/await</p><blockquote><ol><li>await后面接一个会return new promise的函数并执行它</li><li>await只能放在async函数里</li></ol></blockquote><ul><li>使用async和await获取成功的结果</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 摇色子(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> sino = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">6</span> +<span class="number">1</span>)</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(sino)</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n =<span class="keyword">await</span> 摇色子()</span><br><span class="line">    <span class="built_in">console</span>.log(n)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>上面这段代码async中使<code>await 摇色子()</code>先执行，等到三秒后执行完再把得到的结果赋值给左边的n，也就是说test函数需要三秒钟才执行完成，所以test函数是异步的，因此前面必须写async</p><ul><li>获取失败的结果</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 摇色子(<span class="params">猜测</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> sino = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">6</span> +<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(sino &gt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(猜测 === <span class="string">'大'</span>)&#123;</span><br><span class="line">                resolve(sino)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                reject(sino)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(猜测 === <span class="string">'大'</span>)&#123;</span><br><span class="line">                reject(sino)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                resolve(sino)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(sino)</span><br><span class="line">        &#125;,<span class="number">300</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//把await及获取它的值的操作放在try里</span></span><br><span class="line">        <span class="keyword">let</span> n =<span class="keyword">await</span> 摇色子(<span class="string">'大'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'赢了'</span> + n)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">      <span class="comment">//失败的操作放在catch里</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'输了'</span> + error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>把await和成功后的操作放到try里，失败的放在catch</p><ul><li>为什么要用await<br> 为了使我们的异步代码，更像同步的代码</li><li>有多个promise，怎么拿到所有的promise都结束后的结果<br> 比如有两个色子，我想得到这两个色子的点数</li></ul><ol><li>使用promise</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 摇色子(<span class="params">猜测</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> sino = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">6</span> +<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(sino &gt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(猜测 === <span class="string">'大'</span>)&#123;</span><br><span class="line">                resolve(sino)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">                reject(sino)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(猜测 === <span class="string">'大'</span>)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">                reject(sino)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                resolve(sino)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(sino)</span><br><span class="line">        &#125;,<span class="number">300</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.all([摇色子(<span class="string">'大'</span>),摇色子(<span class="string">'大'</span>)]).then(<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(x)&#125;,(y)=&gt;&#123;<span class="built_in">console</span>.log(y)&#125;)</span><br></pre></td></tr></table></figure><p>promise.all里面跟一个数组，数组的每一项是一个返回promise的函数调用，then的第一个参数是所有的promise都成功后调用，拿到所有promise的结果是一个数组；第二个参数拿到的是第一个失败的值</p><ol start="2"><li>使用await<br> await是直接获取多个promise的结果的，因为Promise.all()返回的也是一个promise所以如果要使用await拿到多个promise的值，可以直接await Promise.all()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> n = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([摇色子(<span class="string">'大'</span>),摇色子(<span class="string">'大'</span>)])</span><br><span class="line">        <span class="built_in">console</span>.log(n)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><ul><li>async函数会返回一个promise，并且Promise对象的状态值是resolved（成功的）</li></ul><ol><li>如果你没有在async函数中写return，那么Promise对象resolve的值就是是undefined</li></ol><p><img src="/2020/03/22/vsCode插件sftp的使用及async-await的使用等/image-20200322225755137.png" alt="image-20200322225755137"></p><ol start="2"><li>如果你写了return，那么return的值就会作为你成功的时候传入的值</li></ol><p><img src="/2020/03/22/vsCode插件sftp的使用及async-await的使用等/image-20200322225931451.png" alt="image-20200322225931451"></p><p><strong>await 等到之后，做了一件什么事情？</strong><br> 那么右侧表达式的结果，就是await要等的东西。<br> 等到之后，对于await来说，分2个情况</p><ul><li>不是promise对象</li><li>是promise对象</li></ul><blockquote><p>如果不是 promise , await会阻塞后面的代码，先执行async外面的同步代码，同步代码执行完，再回到async内部，把这个非promise的东西，作为 await表达式的结果。<br> 如果它等到的是一个 promise 对象，await 也会暂停async后面的代码，先执行async外面的同步代码，等着 Promise 对象 fulfilled，然后把 resolve 的参数作为 await 表达式的运算结果。</p></blockquote><ul><li>如果asycn里的代码都是同步的，那么这个函数被调用就会同步执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b'</span>)</span><br><span class="line"><span class="comment">//a</span></span><br><span class="line"><span class="comment">//b</span></span><br></pre></td></tr></table></figure><p>如果在await后面接的这个promsie都是同步的，后面的promise会同步执行，但是拿到这个值还是得等待（特别注意：如果promise没有一个成功的值传入，对await来说就算是失败了，下面的代码就不会执行），所以不管await后面的代码是同步还是异步，await总是需要时间，从右向左执行，先执行右侧的代码，执行完后，发现有await关键字，于是让出线程，阻塞代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> fn()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">f1()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//3js</span></span><br></pre></td></tr></table></figure><p>这个代码因为fn是属于同步的，所以先打印出1，然后是3，但是因为没有resolve结果，所以await拿不到值，因此不会打印2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> fn()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">f1()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>这个代码与前面相比多了个resolve说明promise成功了，所以await能拿到结果，因此就是1 3 2</p><p>async/await在项目中的应用</p><p>校验验证码再执行修改验证码操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> validateCode() &#123;</span><br><span class="line">     <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">     <span class="keyword">const</span> res1 = <span class="keyword">await</span> _this.$axios.post(</span><br><span class="line">       <span class="string">"/pc/msg/validate"</span>,</span><br><span class="line">       _this.$qs.stringify(_this.data)</span><br><span class="line">     );</span><br><span class="line">     <span class="keyword">if</span> (!res1.data.success) &#123;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">const</span> res2 = <span class="keyword">await</span> _this.$axios.post(</span><br><span class="line">       <span class="string">"/pc/account/change-phone"</span>,</span><br><span class="line">       _this.$qs.stringify(&#123;</span><br><span class="line">         accountId: _this.$store.state.userInfo.id,</span><br><span class="line">         phone: _this.data.phone</span><br><span class="line">       &#125;)</span><br><span class="line">     );</span><br><span class="line">     <span class="keyword">if</span> (res2.data.success) &#123;</span><br><span class="line">       _this.$message.success(<span class="string">"绑定号码修改成功"</span>);</span><br><span class="line">       setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         _this.step++;</span><br><span class="line">         _this.$store.state.userInfo.linkPhone = _this.data.phone;</span><br><span class="line">         _this.validate();</span><br><span class="line">       &#125;, <span class="number">1000</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   modify(formName)&#123;</span><br><span class="line">       <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">       _this.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(valid);</span><br><span class="line">           <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           _this.validateCode();</span><br><span class="line">         &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="vue中内联样式加载背景图片"><a href="#vue中内联样式加载背景图片" class="headerlink" title="vue中内联样式加载背景图片"></a>vue中内联样式加载背景图片</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span> <span class="attr">style</span>=<span class="string">"background:url('../assets/images/Portal/News/time.png') no-repeat top center/82px 82px"</span>&gt;</span>官方APP<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>像这样直接加载本地图片是加载不出来的，改成网络图片的话就可以。但是我就是要加载本地背景图</p><p>解决办法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span> <span class="attr">:style</span>=<span class="string">"'background: url(' + require('../assets/images/Portal/News/time.png') + ') no-repeat top center/82px 82px'"</span>&gt;</span>官方APP<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>采用require方式引入本地图片</p><h4 id="vue中引入子组件的方式"><a href="#vue中引入子组件的方式" class="headerlink" title="vue中引入子组件的方式"></a>vue中引入子组件的方式</h4><p>错误方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;footer&#125; <span class="keyword">from</span> <span class="string">'../footer'</span></span><br></pre></td></tr></table></figure><p>正确方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">import</span> footer <span class="keyword">from</span> <span class="string">'../footer'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        <span class="string">'v-foot'</span>: footer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="keyword">const</span> footer = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../components/Footer'</span>], resolve)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        <span class="string">'v-foot'</span>: footer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        <span class="string">'v-foot'</span>:  <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../components/Footer'</span>], resolve)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vscode插件sftp的使用及async-await&quot;&gt;&lt;a href=&quot;#vscode插件sftp的使用及async-await&quot; class=&quot;headerlink&quot; title=&quot;vscode插件sftp的使用及async/await&quot;&gt;&lt;/a&gt;vscod
      
    
    </summary>
    
    
      <category term="-vscode -async" scheme="https://shenxiaobu.github.io/tags/vscode-async/"/>
    
  </entry>
  
  <entry>
    <title>常用正则表达式</title>
    <link href="https://shenxiaobu.github.io/2020/03/19/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://shenxiaobu.github.io/2020/03/19/常用正则表达式/</id>
    <published>2020-03-19T02:22:37.000Z</published>
    <updated>2020-03-23T01:42:56.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><ul><li>数字：<strong>^[0-9]*$</strong></li><li>n位的数字：<strong>^\d{n}$</strong></li><li>至少n位的数字<strong>：^\d{n,}$</strong></li><li>m-n位的数字：<strong>^\d{m,n}$</strong></li><li>零和非零开头的数字：<strong>^(0|[1-9][0-9]*)$</strong></li><li>非零开头的最多带两位小数的数字：<strong>^([1-9][0-9]*)+(.[0-9]{1,2})?$</strong></li><li>带1-2位小数的正数或负数：<strong>^(-)?\d+(.\d{1,2})$</strong></li><li>正数、负数、和小数：<strong>^(-|+)?\d+(.\d+)?$</strong></li><li>有两位小数的正实数：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>有1~3位小数的正实数：<strong>^[0-9]+(.[0-9]{1,3})?$</strong></li><li>非零的正整数：<strong>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^+?[1-9][0-9]*$</strong></li><li>非零的负整数：<strong>^-[1-9][]0-9”*$ 或 ^-[1-9]\d*$</strong></li><li>非负整数：<strong>^\d+$ 或 ^[1-9]\d*|0$</strong></li><li>非正整数：<strong>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</strong></li><li>非负浮点数：<strong>^\d+(.\d+)?$ 或 ^[1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0$</strong></li><li>非正浮点数：<strong>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d*.\d*|0.\d*[1-9]\d*))|0?.0+|0$</strong></li><li>正浮点数：<strong>^[1-9]\d*.\d*|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$</strong></li><li>负浮点数：<strong>^-([1-9]\d*.\d*|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$</strong></li><li>浮点数：<strong>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0)$</strong></li></ul><hr><h2 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h2><ul><li>汉字：<strong>^[\u4e00-\u9fa5]{0,}$</strong></li><li>英文和数字：<strong>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</strong></li><li>长度为3-20的所有字符：<strong>^.{3,20}$</strong></li><li>由26个英文字母组成的字符串：<strong>^[A-Za-z]+$</strong></li><li>由26个大写英文字母组成的字符串：<strong>^[A-Z]+$</strong></li><li>由26个小写英文字母组成的字符串：<strong>^[a-z]+$</strong></li><li>由数字和26个英文字母组成的字符串：<strong>^[A-Za-z0-9]+$</strong></li><li>由数字、26个英文字母或者下划线组成的字符串：<strong>^\w+$ 或 ^\w{3,20}$</strong></li><li>中文、英文、数字包括下划线：<strong>^[\u4E00-\u9FA5A-Za-z0-9_]+$</strong></li><li>中文、英文、数字但不包括下划线等符号：<strong>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</strong></li><li>可以输入含有^%&amp;’,;=?$\”等字符：<strong>[^%&amp;’,;=?$\x22]+</strong></li><li>禁止输入含有~的字符：<strong>[^~\x22]+</strong></li></ul><hr><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2><ul><li>Email地址：<strong>^\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*$</strong></li><li>域名：<strong>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+.?</strong></li><li>InternetURL：<strong>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$</strong></li><li>手机号码：<strong>^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</strong></li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<strong>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</strong></li><li>国内电话号码(0511-4405222、021-87888822)：<strong>\d{3}-\d{8}|\d{4}-\d{7}</strong></li><li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: <strong>((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</strong></li><li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：<strong>(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)</strong></li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<strong>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</strong></li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<strong>^[a-zA-Z]\w{5,17}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</strong></li><li>日期格式：<strong>^\d{4}-\d{1,2}-\d{1,2}</strong></li><li>一年的12个月(01～09和1～12)：<strong>^(0?[1-9]|1[0-2])$</strong></li><li>一个月的31天(01～09和1～31)：<strong>^((0?[1-9])|((1|2)[0-9])|30|31)$</strong></li><li>钱的输入格式：<ol><li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<strong>^[1-9][0-9]*$</strong></li><li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<strong>^(0|[1-9][0-9]*)$</strong></li><li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<strong>^(0|-?[1-9][0-9]*)$</strong></li><li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<strong>^[0-9]+(.[0-9]+)?$</strong></li><li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<strong>^[0-9]+(.[0-9]{1,2})?$</strong></li><li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<strong>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</strong></li><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<strong>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</strong></li><li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ol></li><li>xml文件：<strong>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</strong></li><li>中文字符的正则表达式：<strong>[\u4e00-\u9fa5]</strong></li><li>双字节字符：<strong>[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</strong></li><li>空白行的正则表达式：<strong>\n\s*\r (可以用来删除空白行)</strong></li><li>HTML标记的正则表达式：<strong>&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</strong></li><li>腾讯QQ号：<strong>[1-9][0-9]{4,} (腾讯QQ号从10000开始)</strong></li><li>中国邮政编码：<strong>[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</strong></li><li>IP地址：<strong>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用正则表达式&quot;&gt;&lt;a href=&quot;#常用正则表达式&quot; class=&quot;headerlink&quot; title=&quot;常用正则表达式&quot;&gt;&lt;/a&gt;常用正则表达式&lt;/h2&gt;&lt;h2 id=&quot;一、校验数字的表达式&quot;&gt;&lt;a href=&quot;#一、校验数字的表达式&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="-RegExp -js" scheme="https://shenxiaobu.github.io/tags/RegExp-js/"/>
    
  </entry>
  
</feed>
