(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{556:function(t,a,n){"use strict";n.r(a);var r=n(2),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"字典相关方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字典相关方法"}},[t._v("#")]),t._v(" 字典相关方法")]),t._v(" "),n("p",[t._v("字典相关方法均为promise方式调用，因为当缓存中无该字典类型时，会发起请求字典接口的动作，为了兼容此情况，不得不使用promise的形式。字典相关方法如下")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\r\n * @description: 通过字典code获取字典label\r\n * @param val 字典code\r\n * @param dictType 字典类型\r\n * @param defaultVal 配置当找不到该字典类型的值时展示默认值\r\n * @return {Promise()    label}\r\n * @author: syx\r\n */")]),t._v("\r\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLabelByCode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dictType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\r\n\r\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\r\n * @description: 通过字典label获取字典code\r\n * @param val 字典label\r\n * @param dictType 字典类型\r\n * @param defaultVal 配置当找不到该字典类型的值时展示默认值\r\n * @return {Promise()    code}\r\n * @author: syx\r\n */")]),t._v("\r\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCodeByLabel")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dictType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\r\n\r\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\r\n * @description: 通过字典多个code获取字典多个label\r\n * @param vals 字典多个 code\r\n * @param dictType 字典类型\r\n * @param options {  配置对象\r\n *  defaultVal 某个code找不到值时 展示的默认值\r\n *  formatFun(arr, format)  arr为该字典类型中找到的多个code的对象组合， format为字典包配置的format 包含label和value字段。 默认函数为返回label英文逗号分隔\r\n *  spacer 间隔符，为配置vals中多个code之间的间隔符\r\n * }\r\n * @return {Promise()    label1,label2}\r\n * @author: syx\r\n */")]),t._v("\r\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLabelByCodes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vals"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dictType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\r\n\r\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\r\n * @description: 通过字典多个label获取字典多个code\r\n * @param vals 字典多个 label\r\n * @param dictType 字典类型\r\n * @param options {  配置对象\r\n *  defaultVal 某个label找不到值时 展示的默认值\r\n *  formatFun(arr, format)  arr为该字典类型中找到的多个code的对象组合， format为字典包配置的format 包含label和value字段。 默认函数为返回code英文逗号分隔\r\n *  spacer 间隔符，为配置vals中多个label之间的间隔符\r\n * }\r\n * @return {Promise()    code1,code2}\r\n * @author: syx\r\n */")]),t._v("\r\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCodeByLabels")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vals"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dictType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\r\n\r\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/**\r\n * @description: 通过传递字典类型，返回该字典类型的数据\r\n * @param dictTypes 可传数组形式，或者字符串英文逗号隔开 如 ["sex", "color"]  "sex,color"\r\n * @return {Promise()    {sex: [], color: []}}\r\n * @author: syx\r\n */')]),t._v("\r\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDictObjByDictTypes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dictTypes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\r\n\r\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\r\n * @description: 通过字典code获取字典label\r\n * @param val 字典code\r\n * @param dictType 字典类型\r\n * @param options {  配置对象\r\n *  defaultVal code找不到值时 展示的默认值\r\n *  formatFun(arr, treeSetting)  arr为该字典类型中找到的多个code的对象组合， treeSetting为字典包配置的treeSetting和配置项treeSetting的合并  默认函数为返回label英文逗号分隔\r\n *  treeSetting 可覆盖字典包配置项关于treeSetting的配置\r\n * }\r\n * @return {Promise()    label,label,label}\r\n * @author: syx\r\n */")]),t._v("\r\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTreeLabelByCode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dictType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\r\n\r\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\r\n * @description: 通过字典label获取字典code\r\n * @param val 字典label\r\n * @param dictType 字典类型\r\n * @param options {  配置对象\r\n *  defaultVal label找不到值时 展示的默认值\r\n *  formatFun(arr, treeSetting)  arr为该字典类型中找到的多个code的对象组合， treeSetting为字典包配置的treeSetting和配置项treeSetting的合并  默认函数为返回code英文逗号分隔\r\n *  treeSetting 可覆盖字典包配置项关于treeSetting的配置\r\n * }\r\n * @return {Promise()    code,code,code}\r\n * @author: syx\r\n */")]),t._v("\r\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTreeCodeByLabel")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dictType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\r\n\r\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/**\r\n * @description: 通过多个字典code获取多个字典label\r\n * @param vals 多个字典code\r\n * @param dictType 字典类型\r\n * @param options {  配置对象\r\n *  defaultVal 某个codel找不到值时 展示的默认值\r\n *  formatFunIn(arr, treeSetting)  arr为该字典类型中找到的多个code的对象组合， treeSetting为字典包配置的treeSetting和配置项treeSetting的合并  默认函数为返回label "/"分隔\r\n *  treeSetting 可覆盖字典包配置项关于treeSetting的配置\r\n *  formatFunOut (arr) arr为多个label的数组  默认return arr.join(",")\r\n *  spacer 间隔符，为配置vals中多个label之间的间隔符\r\n * }\r\n * @return {Promise()    label1/label11/label111,label2/label22/label222}\r\n * @author: syx\r\n */')]),t._v("\r\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTreeLabelByCodes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vals"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dictType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\r\n\r\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/**\r\n * @description: 通过多个字典label获取多个字典code\r\n * @param vals 多个字典label\r\n * @param dictType 字典类型\r\n * @param options {  配置对象\r\n *  defaultVal 某个codel找不到值时 展示的默认值\r\n *  formatFunIn(arr, treeSetting)  arr为该字典类型中找到的多个code的对象组合， treeSetting为字典包配置的treeSetting和配置项treeSetting的合并  默认函数为返回code "/"分隔\r\n *  treeSetting 可覆盖字典包配置项关于treeSetting的配置\r\n *  formatFunOut (arr) arr为多个code的数组  默认return arr.join(",")\r\n *  spacer 间隔符，为配置vals中多个label之间的间隔符\r\n * }\r\n * @return {Promise()    code1/code11/code111,code2/code22/code222}\r\n * @author: syx\r\n */')]),t._v("\r\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTreeCodeByLabels")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vals"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dictType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);